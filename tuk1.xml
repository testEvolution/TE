<?xml version='1.0' encoding='utf-8'?>
<function>
  <annotation>@<name>Test</name>
  </annotation>
  <type>
    <specifier>public</specifier>
    <name>void</name>
  </type>
  <name>testIsArray</name>
  <parameter_list>()</parameter_list>
  <block>{<block_content>
      <decl_stmt>
        <decl>
          <type>
            <name>ASTCompilationUnit</name>
          </type>
          <name>cu</name>
          <init>= <expr>
              <call>
                <name>
                  <name>java</name>
                  <operator>.</operator>
                  <name>parse</name>
                </name>
                <argument_list>(<argument>
                    <expr>
                      <name>TEST1</name>
                    </expr>
                  </argument>)</argument_list>
              </call>
            </expr>
          </init>
        </decl>;</decl_stmt>
      <decl_stmt>
        <decl>
          <type>
            <name>Dimensionable</name>
          </type>
          <name>node</name>
          <init>= <expr>
              <call>
                <name>
                  <name>cu</name>
                  <operator>.</operator>
                  <name>findDescendantsOfType</name>
                </name>
                <argument_list>(<argument>
                    <expr>
                      <name>
                        <name>ASTFieldDeclaration</name>
                        <operator>.</operator>
                        <name>class</name>
                      </name>
                    </expr>
                  </argument>)</argument_list>
              </call>
              <operator>.</operator>
              <call>
                <name>get</name>
                <argument_list>(<argument>
                    <expr>
                      <literal type="number">0</literal>
                    </expr>
                  </argument>)</argument_list>
              </call>
            </expr>
          </init>
        </decl>;</decl_stmt>
      <expr_stmt>
        <expr>
          <call>
            <name>assertTrue</name>
            <argument_list>(<argument>
                <expr>
                  <call>
                    <name>
                      <name>node</name>
                      <operator>.</operator>
                      <name>isArray</name>
                    </name>
                    <argument_list>()</argument_list>
                  </call>
                </expr>
              </argument>)</argument_list>
          </call>
        </expr>;</expr_stmt>
      <expr_stmt>
        <expr>
          <call>
            <name>assertEquals</name>
            <argument_list>(<argument>
                <expr>
                  <literal type="number">1</literal>
                </expr>
              </argument>, <argument>
                <expr>
                  <call>
                    <name>
                      <name>node</name>
                      <operator>.</operator>
                      <name>getArrayDepth</name>
                    </name>
                    <argument_list>()</argument_list>
                  </call>
                </expr>
              </argument>)</argument_list>
          </call>
        </expr>;</expr_stmt>
    </block_content>}</block>
</function>

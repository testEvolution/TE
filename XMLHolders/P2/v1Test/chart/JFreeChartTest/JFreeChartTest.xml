<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="H:\Research\TestEvolution\DataAnalysis\jfreechart-1.5.2\jfreechart-1.5.2\src\test\java\org\jfree\chart\JFreeChartTest.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2020, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2.1 of the License, or
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301,
 * USA.
 *
 * [Oracle and Java are registered trademarks of Oracle and/or its affiliates. 
 * Other names may be trademarks of their respective owners.]
 *
 * -------------------
 * JFreeChartTest.java
 * -------------------
 * (C) Copyright 2002-2020, by Object Refinery Limited.
 *
 * Original Author:  David Gilbert (for Object Refinery Limited);
 * Contributor(s):   -;
 *
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>jfree</name><operator>.</operator><name>chart</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>BasicStroke</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>Color</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>Font</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>GradientPaint</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>RenderingHints</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>jfree</name><operator>.</operator><name>chart</name><operator>.</operator><name>event</name><operator>.</operator><name>ChartChangeEvent</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>jfree</name><operator>.</operator><name>chart</name><operator>.</operator><name>event</name><operator>.</operator><name>ChartChangeListener</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>jfree</name><operator>.</operator><name>chart</name><operator>.</operator><name>plot</name><operator>.</operator><name>PiePlot</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>jfree</name><operator>.</operator><name>chart</name><operator>.</operator><name>plot</name><operator>.</operator><name>RingPlot</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>jfree</name><operator>.</operator><name>chart</name><operator>.</operator><name>title</name><operator>.</operator><name>LegendTitle</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>jfree</name><operator>.</operator><name>chart</name><operator>.</operator><name>title</name><operator>.</operator><name>TextTitle</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>jfree</name><operator>.</operator><name>chart</name><operator>.</operator><name>title</name><operator>.</operator><name>Title</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>jfree</name><operator>.</operator><name>chart</name><operator>.</operator><name>ui</name><operator>.</operator><name>Align</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>jfree</name><operator>.</operator><name>chart</name><operator>.</operator><name>ui</name><operator>.</operator><name>RectangleEdge</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>jfree</name><operator>.</operator><name>chart</name><operator>.</operator><name>ui</name><operator>.</operator><name>RectangleInsets</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>jfree</name><operator>.</operator><name>data</name><operator>.</operator><name>category</name><operator>.</operator><name>DefaultCategoryDataset</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>jfree</name><operator>.</operator><name>data</name><operator>.</operator><name>general</name><operator>.</operator><name>DefaultPieDataset</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>jfree</name><operator>.</operator><name>data</name><operator>.</operator><name>time</name><operator>.</operator><name>Day</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>jfree</name><operator>.</operator><name>data</name><operator>.</operator><name>time</name><operator>.</operator><name>RegularTimePeriod</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>jfree</name><operator>.</operator><name>data</name><operator>.</operator><name>time</name><operator>.</operator><name>TimeSeries</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>jfree</name><operator>.</operator><name>data</name><operator>.</operator><name>time</name><operator>.</operator><name>TimeSeriesCollection</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>jupiter</name><operator>.</operator><name>api</name><operator>.</operator><name>Test</name></name>;</import>

<import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>jupiter</name><operator>.</operator><name>api</name><operator>.</operator><name>Assertions</name><operator>.</operator><name>assertEquals</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>jupiter</name><operator>.</operator><name>api</name><operator>.</operator><name>Assertions</name><operator>.</operator><name>assertFalse</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>jupiter</name><operator>.</operator><name>api</name><operator>.</operator><name>Assertions</name><operator>.</operator><name>assertTrue</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>jupiter</name><operator>.</operator><name>api</name><operator>.</operator><name>Assertions</name><operator>.</operator><name>assertNull</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>jupiter</name><operator>.</operator><name>api</name><operator>.</operator><name>Assertions</name><operator>.</operator><name>assertNotNull</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>jupiter</name><operator>.</operator><name>api</name><operator>.</operator><name>Assertions</name><operator>.</operator><name>assertSame</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>jupiter</name><operator>.</operator><name>api</name><operator>.</operator><name>Assertions</name><operator>.</operator><name>fail</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>jupiter</name><operator>.</operator><name>api</name><operator>.</operator><name>BeforeEach</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Tests for the {@link JFreeChart} class.
 */</comment>
<class><specifier>public</specifier> class <name>JFreeChartTest</name> <super_list><implements>implements <super><name>ChartChangeListener</name></super></implements></super_list> <block>{

    <comment type="block" format="javadoc">/** A pie chart. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>JFreeChart</name></type> <name>pieChart</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Common test setup.
     */</comment>
    <function><annotation>@<name>BeforeEach</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>setUp</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>DefaultPieDataset</name></type> <name>data</name> <init>= <expr><operator>new</operator> <call><name>DefaultPieDataset</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>data</name><operator>.</operator><name>setValue</name></name><argument_list>(<argument><expr><literal type="string">"Java"</literal></expr></argument>, <argument><expr><literal type="number">43.2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>data</name><operator>.</operator><name>setValue</name></name><argument_list>(<argument><expr><literal type="string">"Visual Basic"</literal></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>data</name><operator>.</operator><name>setValue</name></name><argument_list>(<argument><expr><literal type="string">"C/C++"</literal></expr></argument>, <argument><expr><literal type="number">17.5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>pieChart</name></name> <operator>=</operator> <call><name><name>ChartFactory</name><operator>.</operator><name>createPieChart</name></name><argument_list>(<argument><expr><literal type="string">"Pie Chart"</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Check that the equals() method can distinguish all fields.
     */</comment>
    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testEquals</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>JFreeChart</name></type> <name>chart1</name> <init>= <expr><operator>new</operator> <call><name>JFreeChart</name><argument_list>(<argument><expr><literal type="string">"Title"</literal></expr></argument>,
                <argument><expr><operator>new</operator> <call><name>Font</name><argument_list>(<argument><expr><literal type="string">"SansSerif"</literal></expr></argument>, <argument><expr><name><name>Font</name><operator>.</operator><name>PLAIN</name></name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>PiePlot</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>JFreeChart</name></type> <name>chart2</name> <init>= <expr><operator>new</operator> <call><name>JFreeChart</name><argument_list>(<argument><expr><literal type="string">"Title"</literal></expr></argument>,
                <argument><expr><operator>new</operator> <call><name>Font</name><argument_list>(<argument><expr><literal type="string">"SansSerif"</literal></expr></argument>, <argument><expr><name><name>Font</name><operator>.</operator><name>PLAIN</name></name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>PiePlot</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>chart1</name></expr></argument>, <argument><expr><name>chart2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>chart2</name></expr></argument>, <argument><expr><name>chart1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// renderingHints</comment>
        <expr_stmt><expr><call><name><name>chart1</name><operator>.</operator><name>setRenderingHints</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>RenderingHints</name><argument_list>(
                <argument><expr><name><name>RenderingHints</name><operator>.</operator><name>KEY_TEXT_ANTIALIASING</name></name></expr></argument>,
                <argument><expr><name><name>RenderingHints</name><operator>.</operator><name>VALUE_TEXT_ANTIALIAS_ON</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>chart1</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>chart2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>chart2</name><operator>.</operator><name>setRenderingHints</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>RenderingHints</name><argument_list>(
                <argument><expr><name><name>RenderingHints</name><operator>.</operator><name>KEY_TEXT_ANTIALIASING</name></name></expr></argument>,
                <argument><expr><name><name>RenderingHints</name><operator>.</operator><name>VALUE_TEXT_ANTIALIAS_ON</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>chart1</name></expr></argument>, <argument><expr><name>chart2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// borderVisible</comment>
        <expr_stmt><expr><call><name><name>chart1</name><operator>.</operator><name>setBorderVisible</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>chart1</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>chart2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>chart2</name><operator>.</operator><name>setBorderVisible</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>chart1</name></expr></argument>, <argument><expr><name>chart2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// borderStroke</comment>
        <decl_stmt><decl><type><name>BasicStroke</name></type> <name>s</name> <init>= <expr><operator>new</operator> <call><name>BasicStroke</name><argument_list>(<argument><expr><literal type="number">2.0f</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>chart1</name><operator>.</operator><name>setBorderStroke</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>chart1</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>chart2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>chart2</name><operator>.</operator><name>setBorderStroke</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>chart1</name></expr></argument>, <argument><expr><name>chart2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// borderPaint</comment>
        <expr_stmt><expr><call><name><name>chart1</name><operator>.</operator><name>setBorderPaint</name></name><argument_list>(<argument><expr><name><name>Color</name><operator>.</operator><name>RED</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>chart1</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>chart2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>chart2</name><operator>.</operator><name>setBorderPaint</name></name><argument_list>(<argument><expr><name><name>Color</name><operator>.</operator><name>RED</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>chart1</name></expr></argument>, <argument><expr><name>chart2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// padding</comment>
        <expr_stmt><expr><call><name><name>chart1</name><operator>.</operator><name>setPadding</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>RectangleInsets</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>chart1</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>chart2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>chart2</name><operator>.</operator><name>setPadding</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>RectangleInsets</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>chart1</name></expr></argument>, <argument><expr><name>chart2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// title</comment>
        <expr_stmt><expr><call><name><name>chart1</name><operator>.</operator><name>setTitle</name></name><argument_list>(<argument><expr><literal type="string">"XYZ"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>chart1</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>chart2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>chart2</name><operator>.</operator><name>setTitle</name></name><argument_list>(<argument><expr><literal type="string">"XYZ"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>chart1</name></expr></argument>, <argument><expr><name>chart2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// subtitles</comment>
        <expr_stmt><expr><call><name><name>chart1</name><operator>.</operator><name>addSubtitle</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>TextTitle</name><argument_list>(<argument><expr><literal type="string">"Subtitle"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>chart1</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>chart2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>chart2</name><operator>.</operator><name>addSubtitle</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>TextTitle</name><argument_list>(<argument><expr><literal type="string">"Subtitle"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>chart1</name></expr></argument>, <argument><expr><name>chart2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// plot</comment>
        <expr_stmt><expr><name>chart1</name> <operator>=</operator> <operator>new</operator> <call><name>JFreeChart</name><argument_list>(<argument><expr><literal type="string">"Title"</literal></expr></argument>,
                <argument><expr><operator>new</operator> <call><name>Font</name><argument_list>(<argument><expr><literal type="string">"SansSerif"</literal></expr></argument>, <argument><expr><name><name>Font</name><operator>.</operator><name>PLAIN</name></name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>RingPlot</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>chart2</name> <operator>=</operator> <operator>new</operator> <call><name>JFreeChart</name><argument_list>(<argument><expr><literal type="string">"Title"</literal></expr></argument>,
                <argument><expr><operator>new</operator> <call><name>Font</name><argument_list>(<argument><expr><literal type="string">"SansSerif"</literal></expr></argument>, <argument><expr><name><name>Font</name><operator>.</operator><name>PLAIN</name></name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>PiePlot</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>chart1</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>chart2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>chart2</name> <operator>=</operator> <operator>new</operator> <call><name>JFreeChart</name><argument_list>(<argument><expr><literal type="string">"Title"</literal></expr></argument>,
                <argument><expr><operator>new</operator> <call><name>Font</name><argument_list>(<argument><expr><literal type="string">"SansSerif"</literal></expr></argument>, <argument><expr><name><name>Font</name><operator>.</operator><name>PLAIN</name></name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>RingPlot</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>chart1</name></expr></argument>, <argument><expr><name>chart2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// backgroundPaint</comment>
        <expr_stmt><expr><call><name><name>chart1</name><operator>.</operator><name>setBackgroundPaint</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>GradientPaint</name><argument_list>(<argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><literal type="number">2.0f</literal></expr></argument>, <argument><expr><name><name>Color</name><operator>.</operator><name>RED</name></name></expr></argument>,
                <argument><expr><literal type="number">3.0f</literal></expr></argument>, <argument><expr><literal type="number">4.0f</literal></expr></argument>, <argument><expr><name><name>Color</name><operator>.</operator><name>BLUE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>chart1</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>chart2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>chart2</name><operator>.</operator><name>setBackgroundPaint</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>GradientPaint</name><argument_list>(<argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><literal type="number">2.0f</literal></expr></argument>, <argument><expr><name><name>Color</name><operator>.</operator><name>RED</name></name></expr></argument>,
                <argument><expr><literal type="number">3.0f</literal></expr></argument>, <argument><expr><literal type="number">4.0f</literal></expr></argument>, <argument><expr><name><name>Color</name><operator>.</operator><name>BLUE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>chart1</name></expr></argument>, <argument><expr><name>chart2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="line">//        // backgroundImage</comment>
<comment type="line">//        chart1.setBackgroundImage(JFreeChart.INFO.getLogo());</comment>
<comment type="line">//        assertFalse(chart1.equals(chart2));</comment>
<comment type="line">//        chart2.setBackgroundImage(JFreeChart.INFO.getLogo());</comment>
<comment type="line">//        assertEquals(chart1, chart2);</comment>

        <comment type="line">// backgroundImageAlignment</comment>
        <expr_stmt><expr><call><name><name>chart1</name><operator>.</operator><name>setBackgroundImageAlignment</name></name><argument_list>(<argument><expr><name><name>Align</name><operator>.</operator><name>BOTTOM_LEFT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>chart1</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>chart2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>chart2</name><operator>.</operator><name>setBackgroundImageAlignment</name></name><argument_list>(<argument><expr><name><name>Align</name><operator>.</operator><name>BOTTOM_LEFT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>chart1</name></expr></argument>, <argument><expr><name>chart2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// backgroundImageAlpha</comment>
        <expr_stmt><expr><call><name><name>chart1</name><operator>.</operator><name>setBackgroundImageAlpha</name></name><argument_list>(<argument><expr><literal type="number">0.1f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>chart1</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>chart2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>chart2</name><operator>.</operator><name>setBackgroundImageAlpha</name></name><argument_list>(<argument><expr><literal type="number">0.1f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>chart1</name></expr></argument>, <argument><expr><name>chart2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * A test to make sure that the legend is being picked up in the
     * equals() testing.
     */</comment>
    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testEquals2</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>JFreeChart</name></type> <name>chart1</name> <init>= <expr><operator>new</operator> <call><name>JFreeChart</name><argument_list>(<argument><expr><literal type="string">"Title"</literal></expr></argument>,
                <argument><expr><operator>new</operator> <call><name>Font</name><argument_list>(<argument><expr><literal type="string">"SansSerif"</literal></expr></argument>, <argument><expr><name><name>Font</name><operator>.</operator><name>PLAIN</name></name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>PiePlot</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>JFreeChart</name></type> <name>chart2</name> <init>= <expr><operator>new</operator> <call><name>JFreeChart</name><argument_list>(<argument><expr><literal type="string">"Title"</literal></expr></argument>,
                <argument><expr><operator>new</operator> <call><name>Font</name><argument_list>(<argument><expr><literal type="string">"SansSerif"</literal></expr></argument>, <argument><expr><name><name>Font</name><operator>.</operator><name>PLAIN</name></name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>PiePlot</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>chart1</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>chart2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>chart2</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>chart1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Checks the subtitle count - should be 1 (the legend).
     */</comment>
    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testSubtitleCount</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>pieChart</name><operator>.</operator><name>getSubtitleCount</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Some checks for the getSubtitle() method.
     */</comment>
    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testGetSubtitle</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>DefaultPieDataset</name></type> <name>dataset</name> <init>= <expr><operator>new</operator> <call><name>DefaultPieDataset</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>JFreeChart</name></type> <name>chart</name> <init>= <expr><call><name><name>ChartFactory</name><operator>.</operator><name>createPieChart</name></name><argument_list>(<argument><expr><literal type="string">"title"</literal></expr></argument>, <argument><expr><name>dataset</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Title</name></type> <name>t</name> <init>= <expr><call><name><name>chart</name><operator>.</operator><name>getSubtitle</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><name>t</name> <operator>instanceof</operator> <name>LegendTitle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <try>try <block>{<block_content>
            <expr_stmt><expr><call><name><name>chart</name><operator>.</operator><name>getSubtitle</name></name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"Should have thrown an IllegalArgumentException on negative number"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>IllegalArgumentException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"Index out of range."</literal></expr></argument>, <argument><expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></catch></try>

        <try>try <block>{<block_content>
           <expr_stmt><expr><call><name><name>chart</name><operator>.</operator><name>getSubtitle</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"Should have thrown an IllegalArgumentException on excesive number"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>IllegalArgumentException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"Index out of range."</literal></expr></argument>, <argument><expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></catch></try>

        <try>try <block>{<block_content>
            <expr_stmt><expr><call><name><name>chart</name><operator>.</operator><name>getSubtitle</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"Should have thrown an IllegalArgumentException on number being out of range"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>IllegalArgumentException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"Index out of range."</literal></expr></argument>, <argument><expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></catch></try>

    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Serialize a pie chart, restore it, and check for equality.
     */</comment>
    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testSerialization1</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>DefaultPieDataset</name></type> <name>data</name> <init>= <expr><operator>new</operator> <call><name>DefaultPieDataset</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>data</name><operator>.</operator><name>setValue</name></name><argument_list>(<argument><expr><literal type="string">"Type 1"</literal></expr></argument>, <argument><expr><literal type="number">54.5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>data</name><operator>.</operator><name>setValue</name></name><argument_list>(<argument><expr><literal type="string">"Type 2"</literal></expr></argument>, <argument><expr><literal type="number">23.9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>data</name><operator>.</operator><name>setValue</name></name><argument_list>(<argument><expr><literal type="string">"Type 3"</literal></expr></argument>, <argument><expr><literal type="number">45.8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>JFreeChart</name></type> <name>c1</name> <init>= <expr><call><name><name>ChartFactory</name><operator>.</operator><name>createPieChart</name></name><argument_list>(<argument><expr><literal type="string">"Test"</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>JFreeChart</name></type> <name>c2</name> <init>= <expr><operator>(</operator><name>JFreeChart</name><operator>)</operator> <call><name><name>TestUtils</name><operator>.</operator><name>serialised</name></name><argument_list>(<argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>c1</name></expr></argument>, <argument><expr><name>c2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>LegendTitle</name></type> <name>lt2</name> <init>= <expr><call><name><name>c2</name><operator>.</operator><name>getLegend</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertSame</name><argument_list>(<argument><expr><call><name><name>lt2</name><operator>.</operator><name>getSources</name></name><argument_list>()</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr></argument>, <argument><expr><call><name><name>c2</name><operator>.</operator><name>getPlot</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Serialize a 3D pie chart, restore it, and check for equality.
     */</comment>
    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testSerialization2</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>DefaultPieDataset</name></type> <name>data</name> <init>= <expr><operator>new</operator> <call><name>DefaultPieDataset</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>data</name><operator>.</operator><name>setValue</name></name><argument_list>(<argument><expr><literal type="string">"Type 1"</literal></expr></argument>, <argument><expr><literal type="number">54.5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>data</name><operator>.</operator><name>setValue</name></name><argument_list>(<argument><expr><literal type="string">"Type 2"</literal></expr></argument>, <argument><expr><literal type="number">23.9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>data</name><operator>.</operator><name>setValue</name></name><argument_list>(<argument><expr><literal type="string">"Type 3"</literal></expr></argument>, <argument><expr><literal type="number">45.8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>JFreeChart</name></type> <name>c1</name> <init>= <expr><call><name><name>ChartFactory</name><operator>.</operator><name>createPieChart3D</name></name><argument_list>(<argument><expr><literal type="string">"Test"</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>JFreeChart</name></type> <name>c2</name> <init>= <expr><operator>(</operator><name>JFreeChart</name><operator>)</operator> <call><name><name>TestUtils</name><operator>.</operator><name>serialised</name></name><argument_list>(<argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>c1</name></expr></argument>, <argument><expr><name>c2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Serialize a bar chart, restore it, and check for equality.
     */</comment>
    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testSerialization3</name><parameter_list>()</parameter_list> <block>{<block_content>

        <comment type="line">// row keys...</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>series1</name> <init>= <expr><literal type="string">"First"</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>series2</name> <init>= <expr><literal type="string">"Second"</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>series3</name> <init>= <expr><literal type="string">"Third"</literal></expr></init></decl>;</decl_stmt>

        <comment type="line">// column keys...</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>category1</name> <init>= <expr><literal type="string">"Category 1"</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>category2</name> <init>= <expr><literal type="string">"Category 2"</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>category3</name> <init>= <expr><literal type="string">"Category 3"</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>category4</name> <init>= <expr><literal type="string">"Category 4"</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>category5</name> <init>= <expr><literal type="string">"Category 5"</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>category6</name> <init>= <expr><literal type="string">"Category 6"</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>category7</name> <init>= <expr><literal type="string">"Category 7"</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>category8</name> <init>= <expr><literal type="string">"Category 8"</literal></expr></init></decl>;</decl_stmt>

        <comment type="line">// create the dataset...</comment>
        <decl_stmt><decl><type><name>DefaultCategoryDataset</name></type> <name>dataset</name> <init>= <expr><operator>new</operator> <call><name>DefaultCategoryDataset</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>dataset</name><operator>.</operator><name>addValue</name></name><argument_list>(<argument><expr><literal type="number">1.0</literal></expr></argument>, <argument><expr><name>series1</name></expr></argument>, <argument><expr><name>category1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>dataset</name><operator>.</operator><name>addValue</name></name><argument_list>(<argument><expr><literal type="number">4.0</literal></expr></argument>, <argument><expr><name>series1</name></expr></argument>, <argument><expr><name>category2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>dataset</name><operator>.</operator><name>addValue</name></name><argument_list>(<argument><expr><literal type="number">3.0</literal></expr></argument>, <argument><expr><name>series1</name></expr></argument>, <argument><expr><name>category3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>dataset</name><operator>.</operator><name>addValue</name></name><argument_list>(<argument><expr><literal type="number">5.0</literal></expr></argument>, <argument><expr><name>series1</name></expr></argument>, <argument><expr><name>category4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>dataset</name><operator>.</operator><name>addValue</name></name><argument_list>(<argument><expr><literal type="number">5.0</literal></expr></argument>, <argument><expr><name>series1</name></expr></argument>, <argument><expr><name>category5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>dataset</name><operator>.</operator><name>addValue</name></name><argument_list>(<argument><expr><literal type="number">7.0</literal></expr></argument>, <argument><expr><name>series1</name></expr></argument>, <argument><expr><name>category6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>dataset</name><operator>.</operator><name>addValue</name></name><argument_list>(<argument><expr><literal type="number">7.0</literal></expr></argument>, <argument><expr><name>series1</name></expr></argument>, <argument><expr><name>category7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>dataset</name><operator>.</operator><name>addValue</name></name><argument_list>(<argument><expr><literal type="number">8.0</literal></expr></argument>, <argument><expr><name>series1</name></expr></argument>, <argument><expr><name>category8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>dataset</name><operator>.</operator><name>addValue</name></name><argument_list>(<argument><expr><literal type="number">5.0</literal></expr></argument>, <argument><expr><name>series2</name></expr></argument>, <argument><expr><name>category1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>dataset</name><operator>.</operator><name>addValue</name></name><argument_list>(<argument><expr><literal type="number">7.0</literal></expr></argument>, <argument><expr><name>series2</name></expr></argument>, <argument><expr><name>category2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>dataset</name><operator>.</operator><name>addValue</name></name><argument_list>(<argument><expr><literal type="number">6.0</literal></expr></argument>, <argument><expr><name>series2</name></expr></argument>, <argument><expr><name>category3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>dataset</name><operator>.</operator><name>addValue</name></name><argument_list>(<argument><expr><literal type="number">8.0</literal></expr></argument>, <argument><expr><name>series2</name></expr></argument>, <argument><expr><name>category4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>dataset</name><operator>.</operator><name>addValue</name></name><argument_list>(<argument><expr><literal type="number">4.0</literal></expr></argument>, <argument><expr><name>series2</name></expr></argument>, <argument><expr><name>category5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>dataset</name><operator>.</operator><name>addValue</name></name><argument_list>(<argument><expr><literal type="number">4.0</literal></expr></argument>, <argument><expr><name>series2</name></expr></argument>, <argument><expr><name>category6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>dataset</name><operator>.</operator><name>addValue</name></name><argument_list>(<argument><expr><literal type="number">2.0</literal></expr></argument>, <argument><expr><name>series2</name></expr></argument>, <argument><expr><name>category7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>dataset</name><operator>.</operator><name>addValue</name></name><argument_list>(<argument><expr><literal type="number">1.0</literal></expr></argument>, <argument><expr><name>series2</name></expr></argument>, <argument><expr><name>category8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>dataset</name><operator>.</operator><name>addValue</name></name><argument_list>(<argument><expr><literal type="number">4.0</literal></expr></argument>, <argument><expr><name>series3</name></expr></argument>, <argument><expr><name>category1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>dataset</name><operator>.</operator><name>addValue</name></name><argument_list>(<argument><expr><literal type="number">3.0</literal></expr></argument>, <argument><expr><name>series3</name></expr></argument>, <argument><expr><name>category2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>dataset</name><operator>.</operator><name>addValue</name></name><argument_list>(<argument><expr><literal type="number">2.0</literal></expr></argument>, <argument><expr><name>series3</name></expr></argument>, <argument><expr><name>category3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>dataset</name><operator>.</operator><name>addValue</name></name><argument_list>(<argument><expr><literal type="number">3.0</literal></expr></argument>, <argument><expr><name>series3</name></expr></argument>, <argument><expr><name>category4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>dataset</name><operator>.</operator><name>addValue</name></name><argument_list>(<argument><expr><literal type="number">6.0</literal></expr></argument>, <argument><expr><name>series3</name></expr></argument>, <argument><expr><name>category5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>dataset</name><operator>.</operator><name>addValue</name></name><argument_list>(<argument><expr><literal type="number">3.0</literal></expr></argument>, <argument><expr><name>series3</name></expr></argument>, <argument><expr><name>category6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>dataset</name><operator>.</operator><name>addValue</name></name><argument_list>(<argument><expr><literal type="number">4.0</literal></expr></argument>, <argument><expr><name>series3</name></expr></argument>, <argument><expr><name>category7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>dataset</name><operator>.</operator><name>addValue</name></name><argument_list>(<argument><expr><literal type="number">3.0</literal></expr></argument>, <argument><expr><name>series3</name></expr></argument>, <argument><expr><name>category8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// create the chart...</comment>
        <decl_stmt><decl><type><name>JFreeChart</name></type> <name>c1</name> <init>= <expr><call><name><name>ChartFactory</name><operator>.</operator><name>createBarChart</name></name><argument_list>(<argument><expr><literal type="string">"Vertical Bar Chart"</literal></expr></argument>,
                <argument><expr><literal type="string">"Category"</literal></expr></argument>, <argument><expr><literal type="string">"Value"</literal></expr></argument>, <argument><expr><name>dataset</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>JFreeChart</name></type> <name>c2</name> <init>= <expr><operator>(</operator><name>JFreeChart</name><operator>)</operator> <call><name><name>TestUtils</name><operator>.</operator><name>serialised</name></name><argument_list>(<argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>c1</name></expr></argument>, <argument><expr><name>c2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Serialize a time seroes chart, restore it, and check for equality.
     */</comment>
    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testSerialization4</name><parameter_list>()</parameter_list> <block>{<block_content>

        <decl_stmt><decl><type><name>RegularTimePeriod</name></type> <name>t</name> <init>= <expr><operator>new</operator> <call><name>Day</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>TimeSeries</name></type> <name>series</name> <init>= <expr><operator>new</operator> <call><name>TimeSeries</name><argument_list>(<argument><expr><literal type="string">"Series 1"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>series</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="number">36.4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>t</name> <operator>=</operator> <call><name><name>t</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>series</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="number">63.5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>TimeSeriesCollection</name></type> <name>dataset</name> <init>= <expr><operator>new</operator> <call><name>TimeSeriesCollection</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>dataset</name><operator>.</operator><name>addSeries</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>JFreeChart</name></type> <name>c1</name> <init>= <expr><call><name><name>ChartFactory</name><operator>.</operator><name>createTimeSeriesChart</name></name><argument_list>(<argument><expr><literal type="string">"Test"</literal></expr></argument>, <argument><expr><literal type="string">"Date"</literal></expr></argument>,
                <argument><expr><literal type="string">"Value"</literal></expr></argument>, <argument><expr><name>dataset</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>JFreeChart</name></type> <name>c2</name> <init>= <expr><operator>(</operator><name>JFreeChart</name><operator>)</operator> <call><name><name>TestUtils</name><operator>.</operator><name>serialised</name></name><argument_list>(<argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>c1</name></expr></argument>, <argument><expr><name>c2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Some checks for the addSubtitle() methods.
     */</comment>
    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testAddSubtitle</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>DefaultPieDataset</name></type> <name>dataset</name> <init>= <expr><operator>new</operator> <call><name>DefaultPieDataset</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>JFreeChart</name></type> <name>chart</name> <init>= <expr><call><name><name>ChartFactory</name><operator>.</operator><name>createPieChart</name></name><argument_list>(<argument><expr><literal type="string">"title"</literal></expr></argument>, <argument><expr><name>dataset</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>TextTitle</name></type> <name>t0</name> <init>= <expr><operator>new</operator> <call><name>TextTitle</name><argument_list>(<argument><expr><literal type="string">"T0"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>chart</name><operator>.</operator><name>addSubtitle</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>t0</name></expr></argument>, <argument><expr><call><name><name>chart</name><operator>.</operator><name>getSubtitle</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>TextTitle</name></type> <name>t1</name> <init>= <expr><operator>new</operator> <call><name>TextTitle</name><argument_list>(<argument><expr><literal type="string">"T1"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>chart</name><operator>.</operator><name>addSubtitle</name></name><argument_list>(<argument><expr><name>t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><call><name><name>chart</name><operator>.</operator><name>getSubtitle</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line">// subtitle 1 is the legend</comment>

        <try>try <block>{<block_content>
            <expr_stmt><expr><call><name><name>chart</name><operator>.</operator><name>addSubtitle</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"Should have thrown an IllegalArgumentException on index out of range"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>IllegalArgumentException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"Null 'subtitle' argument."</literal></expr></argument>, <argument><expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></catch></try>

        <try>try <block>{<block_content>
            <expr_stmt><expr><call><name><name>chart</name><operator>.</operator><name>addSubtitle</name></name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"Should have thrown an IllegalArgumentException on index out of range"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>IllegalArgumentException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"The 'index' argument is out of range."</literal></expr></argument>, <argument><expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></catch></try>

        <try>try <block>{<block_content>
            <expr_stmt><expr><call><name><name>chart</name><operator>.</operator><name>addSubtitle</name></name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"Should have thrown an IllegalArgumentException on index out of range"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>IllegalArgumentException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
             <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"The 'index' argument is out of range."</literal></expr></argument>, <argument><expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></catch></try>

    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Some checks for the getSubtitles() method.
     */</comment>
    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testGetSubtitles</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>DefaultPieDataset</name></type> <name>dataset</name> <init>= <expr><operator>new</operator> <call><name>DefaultPieDataset</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>JFreeChart</name></type> <name>chart</name> <init>= <expr><call><name><name>ChartFactory</name><operator>.</operator><name>createPieChart</name></name><argument_list>(<argument><expr><literal type="string">"title"</literal></expr></argument>, <argument><expr><name>dataset</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>TextTitle</name></argument>&gt;</argument_list></name></type> <name>subtitles</name> <init>= <expr><call><name><name>chart</name><operator>.</operator><name>getSubtitles</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>chart</name><operator>.</operator><name>getSubtitleCount</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// adding something to the returned list should NOT change the chart</comment>
        <expr_stmt><expr><call><name><name>subtitles</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>TextTitle</name><argument_list>(<argument><expr><literal type="string">"T"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>chart</name><operator>.</operator><name>getSubtitleCount</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Some checks for the default legend firing change events.
     */</comment>
    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testLegendEvents</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>DefaultPieDataset</name></type> <name>dataset</name> <init>= <expr><operator>new</operator> <call><name>DefaultPieDataset</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>JFreeChart</name></type> <name>chart</name> <init>= <expr><call><name><name>ChartFactory</name><operator>.</operator><name>createPieChart</name></name><argument_list>(<argument><expr><literal type="string">"title"</literal></expr></argument>, <argument><expr><name>dataset</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>chart</name><operator>.</operator><name>addChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>lastChartChangeEvent</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>LegendTitle</name></type> <name>legend</name> <init>= <expr><call><name><name>chart</name><operator>.</operator><name>getLegend</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>legend</name><operator>.</operator><name>setPosition</name></name><argument_list>(<argument><expr><name><name>RectangleEdge</name><operator>.</operator><name>TOP</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>lastChartChangeEvent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Some checks for title changes and event notification.
     */</comment>
    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testTitleChangeEvent</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>DefaultPieDataset</name></type> <name>dataset</name> <init>= <expr><operator>new</operator> <call><name>DefaultPieDataset</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>JFreeChart</name></type> <name>chart</name> <init>= <expr><call><name><name>ChartFactory</name><operator>.</operator><name>createPieChart</name></name><argument_list>(<argument><expr><literal type="string">"title"</literal></expr></argument>, <argument><expr><name>dataset</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>chart</name><operator>.</operator><name>addChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>lastChartChangeEvent</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>TextTitle</name></type> <name>t</name> <init>= <expr><call><name><name>chart</name><operator>.</operator><name>getTitle</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>t</name><operator>.</operator><name>setFont</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Font</name><argument_list>(<argument><expr><literal type="string">"Dialog"</literal></expr></argument>, <argument><expr><name><name>Font</name><operator>.</operator><name>BOLD</name></name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>lastChartChangeEvent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>lastChartChangeEvent</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>

        <comment type="line">// now create a new title and replace the existing title, several</comment>
        <comment type="line">// things should happen:</comment>
        <comment type="line">// (1) Adding the new title should trigger an immediate</comment>
        <comment type="line">//     ChartChangeEvent;</comment>
        <comment type="line">// (2) Modifying the new title should trigger a ChartChangeEvent;</comment>
        <comment type="line">// (3) Modifying the old title should NOT trigger a ChartChangeEvent</comment>
        <decl_stmt><decl><type><name>TextTitle</name></type> <name>t2</name> <init>= <expr><operator>new</operator> <call><name>TextTitle</name><argument_list>(<argument><expr><literal type="string">"T2"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>chart</name><operator>.</operator><name>setTitle</name></name><argument_list>(<argument><expr><name>t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>lastChartChangeEvent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>lastChartChangeEvent</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>t2</name><operator>.</operator><name>setFont</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Font</name><argument_list>(<argument><expr><literal type="string">"Dialog"</literal></expr></argument>, <argument><expr><name><name>Font</name><operator>.</operator><name>BOLD</name></name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>lastChartChangeEvent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>lastChartChangeEvent</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>t</name><operator>.</operator><name>setFont</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Font</name><argument_list>(<argument><expr><literal type="string">"Dialog"</literal></expr></argument>, <argument><expr><name><name>Font</name><operator>.</operator><name>BOLD</name></name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertNull</name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>lastChartChangeEvent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>lastChartChangeEvent</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testBug942</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>title</name> <init>= <expr><literal type="string">"Pie Chart Demo 1\n\n\ntestnew line"</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>title</name></expr></argument>, <argument><expr><call><name><name>ChartFactory</name><operator>.</operator><name>createPieChart</name></name><argument_list>(<argument><expr><name>title</name></expr></argument>, 
                <argument><expr><operator>new</operator> <call><name>DefaultPieDataset</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>getTitle</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getText</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/** The last ChartChangeEvent received. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>ChartChangeEvent</name></type> <name>lastChartChangeEvent</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Records the last chart change event.
     *
     * @param event  the event.
     */</comment>
    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>chartChanged</name><parameter_list>(<parameter><decl><type><name>ChartChangeEvent</name></type> <name>event</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>lastChartChangeEvent</name></name> <operator>=</operator> <name>event</name></expr>;</expr_stmt>
    </block_content>}</block></function>

}</block></class>
</unit>

<unit><function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testEquals</name><parameter_list>()</parameter_list> <block>{<block_content>

        <comment type="line">// some setup...</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>f1</name> <init>= <expr><literal type="string">"{1}"</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>f2</name> <init>= <expr><literal type="string">"{2}"</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>NumberFormat</name></type> <name>xnf1</name> <init>= <expr><operator>new</operator> <call><name>DecimalFormat</name><argument_list>(<argument><expr><literal type="string">"0.00"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>NumberFormat</name></type> <name>xnf2</name> <init>= <expr><operator>new</operator> <call><name>DecimalFormat</name><argument_list>(<argument><expr><literal type="string">"0.000"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>NumberFormat</name></type> <name>ynf1</name> <init>= <expr><operator>new</operator> <call><name>DecimalFormat</name><argument_list>(<argument><expr><literal type="string">"0.00"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>NumberFormat</name></type> <name>ynf2</name> <init>= <expr><operator>new</operator> <call><name>DecimalFormat</name><argument_list>(<argument><expr><literal type="string">"0.000"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>NumberFormat</name></type> <name>znf1</name> <init>= <expr><operator>new</operator> <call><name>DecimalFormat</name><argument_list>(<argument><expr><literal type="string">"0.00"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>NumberFormat</name></type> <name>znf2</name> <init>= <expr><operator>new</operator> <call><name>DecimalFormat</name><argument_list>(<argument><expr><literal type="string">"0.000"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>BubbleXYItemLabelGenerator</name></type> <name>g1</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>BubbleXYItemLabelGenerator</name></type> <name>g2</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name>g1</name> <operator>=</operator> <operator>new</operator> <call><name>BubbleXYItemLabelGenerator</name><argument_list>(<argument><expr><name>f1</name></expr></argument>, <argument><expr><name>xnf1</name></expr></argument>, <argument><expr><name>ynf1</name></expr></argument>, <argument><expr><name>znf1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>g2</name> <operator>=</operator> <operator>new</operator> <call><name>BubbleXYItemLabelGenerator</name><argument_list>(<argument><expr><name>f1</name></expr></argument>, <argument><expr><name>xnf1</name></expr></argument>, <argument><expr><name>ynf1</name></expr></argument>, <argument><expr><name>znf1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>g1</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>g2</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>g1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>g1</name> <operator>=</operator> <operator>new</operator> <call><name>BubbleXYItemLabelGenerator</name><argument_list>(<argument><expr><name>f2</name></expr></argument>, <argument><expr><name>xnf1</name></expr></argument>, <argument><expr><name>ynf1</name></expr></argument>, <argument><expr><name>znf1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>g1</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>g2</name> <operator>=</operator> <operator>new</operator> <call><name>BubbleXYItemLabelGenerator</name><argument_list>(<argument><expr><name>f2</name></expr></argument>, <argument><expr><name>xnf1</name></expr></argument>, <argument><expr><name>ynf1</name></expr></argument>, <argument><expr><name>znf1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>g1</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>g1</name> <operator>=</operator> <operator>new</operator> <call><name>BubbleXYItemLabelGenerator</name><argument_list>(<argument><expr><name>f2</name></expr></argument>, <argument><expr><name>xnf2</name></expr></argument>, <argument><expr><name>ynf1</name></expr></argument>, <argument><expr><name>znf1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>g1</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>g2</name> <operator>=</operator> <operator>new</operator> <call><name>BubbleXYItemLabelGenerator</name><argument_list>(<argument><expr><name>f2</name></expr></argument>, <argument><expr><name>xnf2</name></expr></argument>, <argument><expr><name>ynf1</name></expr></argument>, <argument><expr><name>znf1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>g1</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>g1</name> <operator>=</operator> <operator>new</operator> <call><name>BubbleXYItemLabelGenerator</name><argument_list>(<argument><expr><name>f2</name></expr></argument>, <argument><expr><name>xnf2</name></expr></argument>, <argument><expr><name>ynf2</name></expr></argument>, <argument><expr><name>znf1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>g1</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>g2</name> <operator>=</operator> <operator>new</operator> <call><name>BubbleXYItemLabelGenerator</name><argument_list>(<argument><expr><name>f2</name></expr></argument>, <argument><expr><name>xnf2</name></expr></argument>, <argument><expr><name>ynf2</name></expr></argument>, <argument><expr><name>znf1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>g1</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>g1</name> <operator>=</operator> <operator>new</operator> <call><name>BubbleXYItemLabelGenerator</name><argument_list>(<argument><expr><name>f2</name></expr></argument>, <argument><expr><name>xnf2</name></expr></argument>, <argument><expr><name>ynf2</name></expr></argument>, <argument><expr><name>znf2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>g1</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>g2</name> <operator>=</operator> <operator>new</operator> <call><name>BubbleXYItemLabelGenerator</name><argument_list>(<argument><expr><name>f2</name></expr></argument>, <argument><expr><name>xnf2</name></expr></argument>, <argument><expr><name>ynf2</name></expr></argument>, <argument><expr><name>znf2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>g1</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>DateFormat</name></type> <name>xdf1</name> <init>= <expr><operator>new</operator> <call><name>SimpleDateFormat</name><argument_list>(<argument><expr><literal type="string">"d-MMM"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>DateFormat</name></type> <name>xdf2</name> <init>= <expr><operator>new</operator> <call><name>SimpleDateFormat</name><argument_list>(<argument><expr><literal type="string">"d-MMM-yyyy"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>DateFormat</name></type> <name>ydf1</name> <init>= <expr><operator>new</operator> <call><name>SimpleDateFormat</name><argument_list>(<argument><expr><literal type="string">"d-MMM"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>DateFormat</name></type> <name>ydf2</name> <init>= <expr><operator>new</operator> <call><name>SimpleDateFormat</name><argument_list>(<argument><expr><literal type="string">"d-MMM-yyyy"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>DateFormat</name></type> <name>zdf1</name> <init>= <expr><operator>new</operator> <call><name>SimpleDateFormat</name><argument_list>(<argument><expr><literal type="string">"d-MMM"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>DateFormat</name></type> <name>zdf2</name> <init>= <expr><operator>new</operator> <call><name>SimpleDateFormat</name><argument_list>(<argument><expr><literal type="string">"d-MMM-yyyy"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name>g1</name> <operator>=</operator> <operator>new</operator> <call><name>BubbleXYItemLabelGenerator</name><argument_list>(<argument><expr><name>f1</name></expr></argument>, <argument><expr><name>xdf1</name></expr></argument>, <argument><expr><name>ydf1</name></expr></argument>, <argument><expr><name>zdf1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>g2</name> <operator>=</operator> <operator>new</operator> <call><name>BubbleXYItemLabelGenerator</name><argument_list>(<argument><expr><name>f1</name></expr></argument>, <argument><expr><name>xdf1</name></expr></argument>, <argument><expr><name>ydf1</name></expr></argument>, <argument><expr><name>zdf1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>g1</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>g2</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>g1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>g1</name> <operator>=</operator> <operator>new</operator> <call><name>BubbleXYItemLabelGenerator</name><argument_list>(<argument><expr><name>f1</name></expr></argument>, <argument><expr><name>xdf2</name></expr></argument>, <argument><expr><name>ydf1</name></expr></argument>, <argument><expr><name>zdf1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>g1</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>g2</name> <operator>=</operator> <operator>new</operator> <call><name>BubbleXYItemLabelGenerator</name><argument_list>(<argument><expr><name>f1</name></expr></argument>, <argument><expr><name>xdf2</name></expr></argument>, <argument><expr><name>ydf1</name></expr></argument>, <argument><expr><name>zdf1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>g1</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>g1</name> <operator>=</operator> <operator>new</operator> <call><name>BubbleXYItemLabelGenerator</name><argument_list>(<argument><expr><name>f1</name></expr></argument>, <argument><expr><name>xdf2</name></expr></argument>, <argument><expr><name>ydf2</name></expr></argument>, <argument><expr><name>zdf1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>g1</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>g2</name> <operator>=</operator> <operator>new</operator> <call><name>BubbleXYItemLabelGenerator</name><argument_list>(<argument><expr><name>f1</name></expr></argument>, <argument><expr><name>xdf2</name></expr></argument>, <argument><expr><name>ydf2</name></expr></argument>, <argument><expr><name>zdf1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>g1</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>g1</name> <operator>=</operator> <operator>new</operator> <call><name>BubbleXYItemLabelGenerator</name><argument_list>(<argument><expr><name>f1</name></expr></argument>, <argument><expr><name>xdf2</name></expr></argument>, <argument><expr><name>ydf2</name></expr></argument>, <argument><expr><name>zdf2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>g1</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>g2</name> <operator>=</operator> <operator>new</operator> <call><name>BubbleXYItemLabelGenerator</name><argument_list>(<argument><expr><name>f1</name></expr></argument>, <argument><expr><name>xdf2</name></expr></argument>, <argument><expr><name>ydf2</name></expr></argument>, <argument><expr><name>zdf2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>g1</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    </unit>
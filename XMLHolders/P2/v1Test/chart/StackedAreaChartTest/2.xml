<unit><function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testReplaceDataset</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>Number</name><index>[]</index><index>[]</index></name></type> <name>data</name> <init>= <expr><operator>new</operator> <name><name>Integer</name><index>[]</index><index>[]</index></name> <block>{<expr><block>{<expr><operator>-</operator><literal type="number">30</literal></expr>, <expr><operator>-</operator><literal type="number">20</literal></expr>}</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">20</literal></expr>, <expr><literal type="number">30</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CategoryDataset</name></type> <name>newData</name> <init>= <expr><call><name><name>DatasetUtils</name><operator>.</operator><name>createCategoryDataset</name></name><argument_list>(<argument><expr><literal type="string">"S"</literal></expr></argument>,
                <argument><expr><literal type="string">"C"</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>LocalListener</name></type> <name>l</name> <init>= <expr><operator>new</operator> <call><name>LocalListener</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>chart</name><operator>.</operator><name>addChangeListener</name></name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>CategoryPlot</name></type> <name>plot</name> <init>= <expr><operator>(</operator><name>CategoryPlot</name><operator>)</operator> <call><name><name>this</name><operator>.</operator><name>chart</name><operator>.</operator><name>getPlot</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>plot</name><operator>.</operator><name>setDataset</name></name><argument_list>(<argument><expr><name>newData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name><name>l</name><operator>.</operator><name>flag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>ValueAxis</name></type> <name>axis</name> <init>= <expr><call><name><name>plot</name><operator>.</operator><name>getRangeAxis</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Range</name></type> <name>range</name> <init>= <expr><call><name><name>axis</name><operator>.</operator><name>getRange</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>range</name><operator>.</operator><name>getLowerBound</name></name><argument_list>()</argument_list></call> <operator>&lt;=</operator> <operator>-</operator><literal type="number">30</literal></expr></argument>, 
                <argument><expr><literal type="string">"Expecting the lower bound of the range to be around -30: "</literal>
                <operator>+</operator> <call><name><name>range</name><operator>.</operator><name>getLowerBound</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>range</name><operator>.</operator><name>getUpperBound</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <literal type="number">30</literal></expr></argument>,
                <argument><expr><literal type="string">"Expecting the upper bound of the range to be around 30: "</literal>
                <operator>+</operator> <call><name><name>range</name><operator>.</operator><name>getUpperBound</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></function>

    </unit>
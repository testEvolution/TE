<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="H:\Research\TestEvolution\DataAnalysis\jfreechart-1.5.2\jfreechart-1.5.2\src\test\java\org\jfree\chart\axis\DateAxisTest.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2020, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2.1 of the License, or
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301,
 * USA.
 *
 * [Oracle and Java are registered trademarks of Oracle and/or its affiliates. 
 * Other names may be trademarks of their respective owners.]
 *
 * -----------------
 * DateAxisTest.java
 * -----------------
 * (C) Copyright 2003-2020, by Object Refinery Limited and Contributors.
 *
 * Original Author:  David Gilbert (for Object Refinery Limited);
 * Contributor(s):   -;
 *
 * Changes
 * -------
 * 22-Apr-2003 : Version 1 (DG);
 * 07-Jan-2005 : Added test for hashCode() method (DG);
 * 25-Sep-2005 : New tests for bug 1564977 (DG);
 * 19-Apr-2007 : Added further checks for setMinimumDate() and
 *               setMaximumDate() (DG);
 * 03-May-2007 : Replaced the tests for the previousStandardDate() method with
 *               new tests that check that the previousStandardDate and the
 *               next standard date do in fact span the reference date (DG);
 * 25-Nov-2008 : Added testBug2201869 (DG);
 * 08-Feb-2012 : Added testBug3484403 (MH);
 * 29-Aug-2016 : Added testBug25 (DG);
 *
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>jfree</name><operator>.</operator><name>chart</name><operator>.</operator><name>axis</name></name>;</package>

<import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>jupiter</name><operator>.</operator><name>api</name><operator>.</operator><name>Assertions</name><operator>.</operator><name>assertEquals</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>jupiter</name><operator>.</operator><name>api</name><operator>.</operator><name>Assertions</name><operator>.</operator><name>assertFalse</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>jupiter</name><operator>.</operator><name>api</name><operator>.</operator><name>Assertions</name><operator>.</operator><name>assertTrue</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>jupiter</name><operator>.</operator><name>api</name><operator>.</operator><name>Test</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>Graphics2D</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>geom</name><operator>.</operator><name>Rectangle2D</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>image</name><operator>.</operator><name>BufferedImage</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>text</name><operator>.</operator><name>SimpleDateFormat</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Calendar</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Date</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>GregorianCalendar</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Locale</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>TimeZone</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>jfree</name><operator>.</operator><name>chart</name><operator>.</operator><name>TestUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>jfree</name><operator>.</operator><name>chart</name><operator>.</operator><name>ui</name><operator>.</operator><name>RectangleEdge</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>jfree</name><operator>.</operator><name>data</name><operator>.</operator><name>time</name><operator>.</operator><name>DateRange</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>jfree</name><operator>.</operator><name>data</name><operator>.</operator><name>time</name><operator>.</operator><name>Day</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>jfree</name><operator>.</operator><name>data</name><operator>.</operator><name>time</name><operator>.</operator><name>Hour</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>jfree</name><operator>.</operator><name>data</name><operator>.</operator><name>time</name><operator>.</operator><name>Millisecond</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>jfree</name><operator>.</operator><name>data</name><operator>.</operator><name>time</name><operator>.</operator><name>Minute</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>jfree</name><operator>.</operator><name>data</name><operator>.</operator><name>time</name><operator>.</operator><name>Month</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>jfree</name><operator>.</operator><name>data</name><operator>.</operator><name>time</name><operator>.</operator><name>Second</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>jfree</name><operator>.</operator><name>data</name><operator>.</operator><name>time</name><operator>.</operator><name>Year</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Tests for the {@link DateAxis} class.
 */</comment>
<class><specifier>public</specifier> class <name>DateAxisTest</name> <block>{

    <class><specifier>static</specifier> class <name>MyDateAxis</name> <super_list><extends>extends <super><name>DateAxis</name></super></extends></super_list> <block>{

        <comment type="block" format="javadoc">/**
         * Creates a new instance.
         *
         * @param label  the label.
         */</comment>
        <constructor><specifier>public</specifier> <name>MyDateAxis</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>label</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>Date</name></type> <name>previousStandardDate</name><parameter_list>(<parameter><decl><type><name>Date</name></type> <name>d</name></decl></parameter>, <parameter><decl><type><name>DateTickUnit</name></type> <name>unit</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <return>return <expr><call><name><name>super</name><operator>.</operator><name>previousStandardDate</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <comment type="block" format="javadoc">/**
     * Confirm that the equals method can distinguish all the required fields.
     */</comment>
    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testEquals</name><parameter_list>()</parameter_list> <block>{<block_content>

        <decl_stmt><decl><type><name>DateAxis</name></type> <name>a1</name> <init>= <expr><operator>new</operator> <call><name>DateAxis</name><argument_list>(<argument><expr><literal type="string">"Test"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>DateAxis</name></type> <name>a2</name> <init>= <expr><operator>new</operator> <call><name>DateAxis</name><argument_list>(<argument><expr><literal type="string">"Test"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>a1</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>a2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>a1</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>a1</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"Some non-DateAxis object"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>a1</name> <operator>=</operator> <operator>new</operator> <call><name>DateAxis</name><argument_list>(<argument><expr><literal type="string">"Test"</literal></expr></argument>, <argument><expr><call><name><name>TimeZone</name><operator>.</operator><name>getTimeZone</name></name><argument_list>(<argument><expr><literal type="string">"PST"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>Locale</name><operator>.</operator><name>US</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>a1</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>a2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>a2</name> <operator>=</operator> <operator>new</operator> <call><name>DateAxis</name><argument_list>(<argument><expr><literal type="string">"Test"</literal></expr></argument>, <argument><expr><call><name><name>TimeZone</name><operator>.</operator><name>getTimeZone</name></name><argument_list>(<argument><expr><literal type="string">"PST"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>Locale</name><operator>.</operator><name>US</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>a1</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>a2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <expr_stmt><expr><name>a1</name> <operator>=</operator> <operator>new</operator> <call><name>DateAxis</name><argument_list>(<argument><expr><literal type="string">"Test"</literal></expr></argument>, <argument><expr><call><name><name>TimeZone</name><operator>.</operator><name>getTimeZone</name></name><argument_list>(<argument><expr><literal type="string">"PST"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>Locale</name><operator>.</operator><name>FRANCE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>a1</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>a2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>a2</name> <operator>=</operator> <operator>new</operator> <call><name>DateAxis</name><argument_list>(<argument><expr><literal type="string">"Test"</literal></expr></argument>, <argument><expr><call><name><name>TimeZone</name><operator>.</operator><name>getTimeZone</name></name><argument_list>(<argument><expr><literal type="string">"PST"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>Locale</name><operator>.</operator><name>FRANCE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>a1</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>a2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// tickUnit</comment>
        <expr_stmt><expr><call><name><name>a1</name><operator>.</operator><name>setTickUnit</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>DateTickUnit</name><argument_list>(<argument><expr><name><name>DateTickUnitType</name><operator>.</operator><name>DAY</name></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>a1</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>a2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>a2</name><operator>.</operator><name>setTickUnit</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>DateTickUnit</name><argument_list>(<argument><expr><name><name>DateTickUnitType</name><operator>.</operator><name>DAY</name></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>a1</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>a2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// dateFormatOverride</comment>
        <expr_stmt><expr><call><name><name>a1</name><operator>.</operator><name>setDateFormatOverride</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>SimpleDateFormat</name><argument_list>(<argument><expr><literal type="string">"yyyy"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>a1</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>a2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>a2</name><operator>.</operator><name>setDateFormatOverride</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>SimpleDateFormat</name><argument_list>(<argument><expr><literal type="string">"yyyy"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>a1</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>a2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// tickMarkPosition</comment>
        <expr_stmt><expr><call><name><name>a1</name><operator>.</operator><name>setTickMarkPosition</name></name><argument_list>(<argument><expr><name><name>DateTickMarkPosition</name><operator>.</operator><name>END</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>a1</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>a2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>a2</name><operator>.</operator><name>setTickMarkPosition</name></name><argument_list>(<argument><expr><name><name>DateTickMarkPosition</name><operator>.</operator><name>END</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>a1</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>a2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * A test for bug report 1472942.  The DateFormat.equals() method is not
     * checking the range attribute.
     */</comment>
    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>test1472942</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>DateAxis</name></type> <name>a1</name> <init>= <expr><operator>new</operator> <call><name>DateAxis</name><argument_list>(<argument><expr><literal type="string">"Test"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>DateAxis</name></type> <name>a2</name> <init>= <expr><operator>new</operator> <call><name>DateAxis</name><argument_list>(<argument><expr><literal type="string">"Test"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>a1</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>a2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// range</comment>
        <expr_stmt><expr><call><name><name>a1</name><operator>.</operator><name>setRange</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><literal type="number">1L</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><literal type="number">2L</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>a1</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>a2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>a2</name><operator>.</operator><name>setRange</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><literal type="number">1L</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><literal type="number">2L</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>a1</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>a2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Two objects that are equal are required to return the same hashCode.
     */</comment>
    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testHashCode</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>DateAxis</name></type> <name>a1</name> <init>= <expr><operator>new</operator> <call><name>DateAxis</name><argument_list>(<argument><expr><literal type="string">"Test"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>DateAxis</name></type> <name>a2</name> <init>= <expr><operator>new</operator> <call><name>DateAxis</name><argument_list>(<argument><expr><literal type="string">"Test"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>a1</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>a2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>h1</name> <init>= <expr><call><name><name>a1</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>h2</name> <init>= <expr><call><name><name>a2</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>h1</name></expr></argument>, <argument><expr><name>h2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Confirm that cloning works.
     */</comment>
    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testCloning</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>CloneNotSupportedException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>DateAxis</name></type> <name>a1</name> <init>= <expr><operator>new</operator> <call><name>DateAxis</name><argument_list>(<argument><expr><literal type="string">"Test"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>DateAxis</name></type> <name>a2</name> <init>= <expr><operator>(</operator><name>DateAxis</name><operator>)</operator> <call><name><name>a1</name><operator>.</operator><name>clone</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><name>a1</name> <operator>!=</operator> <name>a2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>a1</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>a2</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>a1</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>a2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Test that the setRange() method works.
     */</comment>
    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testSetRange</name><parameter_list>()</parameter_list> <block>{<block_content>

        <decl_stmt><decl><type><name>DateAxis</name></type> <name>axis</name> <init>= <expr><operator>new</operator> <call><name>DateAxis</name><argument_list>(<argument><expr><literal type="string">"Test Axis"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Calendar</name></type> <name>calendar</name> <init>= <expr><call><name><name>Calendar</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>calendar</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="number">1999</literal></expr></argument>, <argument><expr><name><name>Calendar</name><operator>.</operator><name>JANUARY</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Date</name></type> <name>d1</name> <init>= <expr><call><name><name>calendar</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>calendar</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="number">1999</literal></expr></argument>, <argument><expr><name><name>Calendar</name><operator>.</operator><name>JANUARY</name></name></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Date</name></type> <name>d2</name> <init>= <expr><call><name><name>calendar</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setRange</name></name><argument_list>(<argument><expr><name>d1</name></expr></argument>, <argument><expr><name>d2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>DateRange</name></type> <name>range</name> <init>= <expr><operator>(</operator><name>DateRange</name><operator>)</operator> <call><name><name>axis</name><operator>.</operator><name>getRange</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>d1</name></expr></argument>, <argument><expr><call><name><name>range</name><operator>.</operator><name>getLowerDate</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>d2</name></expr></argument>, <argument><expr><call><name><name>range</name><operator>.</operator><name>getUpperDate</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Test that the setMaximumDate() method works.
     */</comment>
    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testSetMaximumDate</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>DateAxis</name></type> <name>axis</name> <init>= <expr><operator>new</operator> <call><name>DateAxis</name><argument_list>(<argument><expr><literal type="string">"Test Axis"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Date</name></type> <name>date</name> <init>= <expr><operator>new</operator> <call><name>Date</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setMaximumDate</name></name><argument_list>(<argument><expr><name>date</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>date</name></expr></argument>, <argument><expr><call><name><name>axis</name><operator>.</operator><name>getMaximumDate</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// check that setting the max date to something on or before the</comment>
        <comment type="line">// current min date works...</comment>
        <decl_stmt><decl><type><name>Date</name></type> <name>d1</name> <init>= <expr><operator>new</operator> <call><name>Date</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Date</name></type> <name>d2</name> <init>= <expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><call><name><name>d1</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Date</name></type> <name>d0</name> <init>= <expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><call><name><name>d1</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setMaximumDate</name></name><argument_list>(<argument><expr><name>d2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setMinimumDate</name></name><argument_list>(<argument><expr><name>d1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setMaximumDate</name></name><argument_list>(<argument><expr><name>d1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>d0</name></expr></argument>, <argument><expr><call><name><name>axis</name><operator>.</operator><name>getMinimumDate</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Test that the setMinimumDate() method works.
     */</comment>
    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testSetMinimumDate</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>DateAxis</name></type> <name>axis</name> <init>= <expr><operator>new</operator> <call><name>DateAxis</name><argument_list>(<argument><expr><literal type="string">"Test Axis"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Date</name></type> <name>d1</name> <init>= <expr><operator>new</operator> <call><name>Date</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Date</name></type> <name>d2</name> <init>= <expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><call><name><name>d1</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setMaximumDate</name></name><argument_list>(<argument><expr><name>d2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setMinimumDate</name></name><argument_list>(<argument><expr><name>d1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>d1</name></expr></argument>, <argument><expr><call><name><name>axis</name><operator>.</operator><name>getMinimumDate</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// check that setting the min date to something on or after the</comment>
        <comment type="line">// current min date works...</comment>
        <decl_stmt><decl><type><name>Date</name></type> <name>d3</name> <init>= <expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><call><name><name>d2</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setMinimumDate</name></name><argument_list>(<argument><expr><name>d2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>d3</name></expr></argument>, <argument><expr><call><name><name>axis</name><operator>.</operator><name>getMaximumDate</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Tests two doubles for 'near enough' equality.
     *
     * @param d1  number 1.
     * @param d2  number 2.
     * @param tolerance  maximum tolerance.
     *
     * @return A boolean.
     */</comment>
    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>same</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>d1</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>d2</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>tolerance</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><operator>(</operator><call><name><name>Math</name><operator>.</operator><name>abs</name></name><argument_list>(<argument><expr><name>d1</name> <operator>-</operator> <name>d2</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>tolerance</name><operator>)</operator></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Test the translation of Java2D values to data values.
     */</comment>
    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testJava2DToValue</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>DateAxis</name></type> <name>axis</name> <init>= <expr><operator>new</operator> <call><name>DateAxis</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setRange</name></name><argument_list>(<argument><expr><literal type="number">50.0</literal></expr></argument>, <argument><expr><literal type="number">100.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Rectangle2D</name></type> <name>dataArea</name> <init>= <expr><operator>new</operator> <call><name><name>Rectangle2D</name><operator>.</operator><name>Double</name></name><argument_list>(<argument><expr><literal type="number">10.0</literal></expr></argument>, <argument><expr><literal type="number">50.0</literal></expr></argument>, <argument><expr><literal type="number">400.0</literal></expr></argument>, <argument><expr><literal type="number">300.0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>y1</name> <init>= <expr><call><name><name>axis</name><operator>.</operator><name>java2DToValue</name></name><argument_list>(<argument><expr><literal type="number">75.0</literal></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name><name>RectangleEdge</name><operator>.</operator><name>LEFT</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name>same</name><argument_list>(<argument><expr><name>y1</name></expr></argument>, <argument><expr><literal type="number">95.8333333</literal></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>y2</name> <init>= <expr><call><name><name>axis</name><operator>.</operator><name>java2DToValue</name></name><argument_list>(<argument><expr><literal type="number">75.0</literal></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name><name>RectangleEdge</name><operator>.</operator><name>RIGHT</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name>same</name><argument_list>(<argument><expr><name>y2</name></expr></argument>, <argument><expr><literal type="number">95.8333333</literal></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>x1</name> <init>= <expr><call><name><name>axis</name><operator>.</operator><name>java2DToValue</name></name><argument_list>(<argument><expr><literal type="number">75.0</literal></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name><name>RectangleEdge</name><operator>.</operator><name>TOP</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name>same</name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><literal type="number">58.125</literal></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>x2</name> <init>= <expr><call><name><name>axis</name><operator>.</operator><name>java2DToValue</name></name><argument_list>(<argument><expr><literal type="number">75.0</literal></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name><name>RectangleEdge</name><operator>.</operator><name>BOTTOM</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name>same</name><argument_list>(<argument><expr><name>x2</name></expr></argument>, <argument><expr><literal type="number">58.125</literal></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setInverted</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>y3</name> <init>= <expr><call><name><name>axis</name><operator>.</operator><name>java2DToValue</name></name><argument_list>(<argument><expr><literal type="number">75.0</literal></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name><name>RectangleEdge</name><operator>.</operator><name>LEFT</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name>same</name><argument_list>(<argument><expr><name>y3</name></expr></argument>, <argument><expr><literal type="number">54.1666667</literal></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>y4</name> <init>= <expr><call><name><name>axis</name><operator>.</operator><name>java2DToValue</name></name><argument_list>(<argument><expr><literal type="number">75.0</literal></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name><name>RectangleEdge</name><operator>.</operator><name>RIGHT</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name>same</name><argument_list>(<argument><expr><name>y4</name></expr></argument>, <argument><expr><literal type="number">54.1666667</literal></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>x3</name> <init>= <expr><call><name><name>axis</name><operator>.</operator><name>java2DToValue</name></name><argument_list>(<argument><expr><literal type="number">75.0</literal></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name><name>RectangleEdge</name><operator>.</operator><name>TOP</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name>same</name><argument_list>(<argument><expr><name>x3</name></expr></argument>, <argument><expr><literal type="number">91.875</literal></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>x4</name> <init>= <expr><call><name><name>axis</name><operator>.</operator><name>java2DToValue</name></name><argument_list>(<argument><expr><literal type="number">75.0</literal></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name><name>RectangleEdge</name><operator>.</operator><name>BOTTOM</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name>same</name><argument_list>(<argument><expr><name>x4</name></expr></argument>, <argument><expr><literal type="number">91.875</literal></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Serialize an instance, restore it, and check for equality.
     */</comment>
    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testSerialization</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>DateAxis</name></type> <name>a1</name> <init>= <expr><operator>new</operator> <call><name>DateAxis</name><argument_list>(<argument><expr><literal type="string">"Test Axis"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>DateAxis</name></type> <name>a2</name> <init>= <expr><operator>(</operator><name>DateAxis</name><operator>)</operator> <call><name><name>TestUtils</name><operator>.</operator><name>serialised</name></name><argument_list>(<argument><expr><name>a1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>a1</name></expr></argument>, <argument><expr><name>a2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * A basic check for the testPreviousStandardDate() method when the
     * tick unit is 1 year.
     */</comment>
    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testPreviousStandardDateYearA</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>MyDateAxis</name></type> <name>axis</name> <init>= <expr><operator>new</operator> <call><name>MyDateAxis</name><argument_list>(<argument><expr><literal type="string">"Year"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Year</name></type> <name>y2006</name> <init>= <expr><operator>new</operator> <call><name>Year</name><argument_list>(<argument><expr><literal type="number">2006</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Year</name></type> <name>y2007</name> <init>= <expr><operator>new</operator> <call><name>Year</name><argument_list>(<argument><expr><literal type="number">2007</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// five dates to check...</comment>
        <decl_stmt><decl><type><name>Date</name></type> <name>d0</name> <init>= <expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><call><name><name>y2006</name><operator>.</operator><name>getFirstMillisecond</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Date</name></type> <name>d1</name> <init>= <expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><call><name><name>y2006</name><operator>.</operator><name>getFirstMillisecond</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">500L</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Date</name></type> <name>d2</name> <init>= <expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><call><name><name>y2006</name><operator>.</operator><name>getMiddleMillisecond</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Date</name></type> <name>d3</name> <init>= <expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><call><name><name>y2006</name><operator>.</operator><name>getMiddleMillisecond</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">500L</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Date</name></type> <name>d4</name> <init>= <expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><call><name><name>y2006</name><operator>.</operator><name>getLastMillisecond</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>Date</name></type> <name>end</name> <init>= <expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><call><name><name>y2007</name><operator>.</operator><name>getLastMillisecond</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>DateTickUnit</name></type> <name>unit</name> <init>= <expr><operator>new</operator> <call><name>DateTickUnit</name><argument_list>(<argument><expr><name><name>DateTickUnitType</name><operator>.</operator><name>YEAR</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setTickUnit</name></name><argument_list>(<argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// START: check d0 and d1</comment>
        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setTickMarkPosition</name></name><argument_list>(<argument><expr><name><name>DateTickMarkPosition</name><operator>.</operator><name>START</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setRange</name></name><argument_list>(<argument><expr><name>d0</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Date</name></type> <name>psd</name> <init>= <expr><call><name><name>axis</name><operator>.</operator><name>previousStandardDate</name></name><argument_list>(<argument><expr><name>d0</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Date</name></type> <name>nsd</name> <init>= <expr><call><name><name>unit</name><operator>.</operator><name>addToDate</name></name><argument_list>(<argument><expr><name>psd</name></expr></argument>, <argument><expr><call><name><name>TimeZone</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>psd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>d0</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>nsd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <call><name><name>d0</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setRange</name></name><argument_list>(<argument><expr><name>d1</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>psd</name> <operator>=</operator> <call><name><name>axis</name><operator>.</operator><name>previousStandardDate</name></name><argument_list>(<argument><expr><name>d1</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>nsd</name> <operator>=</operator> <call><name><name>unit</name><operator>.</operator><name>addToDate</name></name><argument_list>(<argument><expr><name>psd</name></expr></argument>, <argument><expr><call><name><name>TimeZone</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>psd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>d1</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>nsd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <call><name><name>d1</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// MIDDLE: check d1, d2 and d3</comment>
        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setTickMarkPosition</name></name><argument_list>(<argument><expr><name><name>DateTickMarkPosition</name><operator>.</operator><name>MIDDLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setRange</name></name><argument_list>(<argument><expr><name>d1</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>psd</name> <operator>=</operator> <call><name><name>axis</name><operator>.</operator><name>previousStandardDate</name></name><argument_list>(<argument><expr><name>d1</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>nsd</name> <operator>=</operator> <call><name><name>unit</name><operator>.</operator><name>addToDate</name></name><argument_list>(<argument><expr><name>psd</name></expr></argument>, <argument><expr><call><name><name>TimeZone</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>psd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>d1</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>nsd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <call><name><name>d1</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setRange</name></name><argument_list>(<argument><expr><name>d2</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>psd</name> <operator>=</operator> <call><name><name>axis</name><operator>.</operator><name>previousStandardDate</name></name><argument_list>(<argument><expr><name>d2</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>nsd</name> <operator>=</operator> <call><name><name>unit</name><operator>.</operator><name>addToDate</name></name><argument_list>(<argument><expr><name>psd</name></expr></argument>, <argument><expr><call><name><name>TimeZone</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>psd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>d2</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>nsd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <call><name><name>d2</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setRange</name></name><argument_list>(<argument><expr><name>d3</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>psd</name> <operator>=</operator> <call><name><name>axis</name><operator>.</operator><name>previousStandardDate</name></name><argument_list>(<argument><expr><name>d3</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>nsd</name> <operator>=</operator> <call><name><name>unit</name><operator>.</operator><name>addToDate</name></name><argument_list>(<argument><expr><name>psd</name></expr></argument>, <argument><expr><call><name><name>TimeZone</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>psd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>d3</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>nsd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <call><name><name>d3</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// END: check d3 and d4</comment>
        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setTickMarkPosition</name></name><argument_list>(<argument><expr><name><name>DateTickMarkPosition</name><operator>.</operator><name>END</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setRange</name></name><argument_list>(<argument><expr><name>d3</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>psd</name> <operator>=</operator> <call><name><name>axis</name><operator>.</operator><name>previousStandardDate</name></name><argument_list>(<argument><expr><name>d3</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>nsd</name> <operator>=</operator> <call><name><name>unit</name><operator>.</operator><name>addToDate</name></name><argument_list>(<argument><expr><name>psd</name></expr></argument>, <argument><expr><call><name><name>TimeZone</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>psd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>d3</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>nsd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <call><name><name>d3</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setRange</name></name><argument_list>(<argument><expr><name>d4</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>psd</name> <operator>=</operator> <call><name><name>axis</name><operator>.</operator><name>previousStandardDate</name></name><argument_list>(<argument><expr><name>d4</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>nsd</name> <operator>=</operator> <call><name><name>unit</name><operator>.</operator><name>addToDate</name></name><argument_list>(<argument><expr><name>psd</name></expr></argument>, <argument><expr><call><name><name>TimeZone</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>psd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>d4</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>nsd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <call><name><name>d4</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * A basic check for the testPreviousStandardDate() method when the
     * tick unit is 10 years (just for the sake of having a multiple).
     */</comment>
    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testPreviousStandardDateYearB</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>MyDateAxis</name></type> <name>axis</name> <init>= <expr><operator>new</operator> <call><name>MyDateAxis</name><argument_list>(<argument><expr><literal type="string">"Year"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Year</name></type> <name>y2006</name> <init>= <expr><operator>new</operator> <call><name>Year</name><argument_list>(<argument><expr><literal type="number">2006</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Year</name></type> <name>y2007</name> <init>= <expr><operator>new</operator> <call><name>Year</name><argument_list>(<argument><expr><literal type="number">2007</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// five dates to check...</comment>
        <decl_stmt><decl><type><name>Date</name></type> <name>d0</name> <init>= <expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><call><name><name>y2006</name><operator>.</operator><name>getFirstMillisecond</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Date</name></type> <name>d1</name> <init>= <expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><call><name><name>y2006</name><operator>.</operator><name>getFirstMillisecond</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">500L</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Date</name></type> <name>d2</name> <init>= <expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><call><name><name>y2006</name><operator>.</operator><name>getMiddleMillisecond</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Date</name></type> <name>d3</name> <init>= <expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><call><name><name>y2006</name><operator>.</operator><name>getMiddleMillisecond</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">500L</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Date</name></type> <name>d4</name> <init>= <expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><call><name><name>y2006</name><operator>.</operator><name>getLastMillisecond</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>Date</name></type> <name>end</name> <init>= <expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><call><name><name>y2007</name><operator>.</operator><name>getLastMillisecond</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>DateTickUnit</name></type> <name>unit</name> <init>= <expr><operator>new</operator> <call><name>DateTickUnit</name><argument_list>(<argument><expr><name><name>DateTickUnitType</name><operator>.</operator><name>YEAR</name></name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setTickUnit</name></name><argument_list>(<argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// START: check d0 and d1</comment>
        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setTickMarkPosition</name></name><argument_list>(<argument><expr><name><name>DateTickMarkPosition</name><operator>.</operator><name>START</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setRange</name></name><argument_list>(<argument><expr><name>d0</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Date</name></type> <name>psd</name> <init>= <expr><call><name><name>axis</name><operator>.</operator><name>previousStandardDate</name></name><argument_list>(<argument><expr><name>d0</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Date</name></type> <name>nsd</name> <init>= <expr><call><name><name>unit</name><operator>.</operator><name>addToDate</name></name><argument_list>(<argument><expr><name>psd</name></expr></argument>, <argument><expr><call><name><name>TimeZone</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>psd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>d0</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>nsd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <call><name><name>d0</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setRange</name></name><argument_list>(<argument><expr><name>d1</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>psd</name> <operator>=</operator> <call><name><name>axis</name><operator>.</operator><name>previousStandardDate</name></name><argument_list>(<argument><expr><name>d1</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>nsd</name> <operator>=</operator> <call><name><name>unit</name><operator>.</operator><name>addToDate</name></name><argument_list>(<argument><expr><name>psd</name></expr></argument>, <argument><expr><call><name><name>TimeZone</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>psd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>d1</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>nsd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <call><name><name>d1</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// MIDDLE: check d1, d2 and d3</comment>
        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setTickMarkPosition</name></name><argument_list>(<argument><expr><name><name>DateTickMarkPosition</name><operator>.</operator><name>MIDDLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setRange</name></name><argument_list>(<argument><expr><name>d1</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>psd</name> <operator>=</operator> <call><name><name>axis</name><operator>.</operator><name>previousStandardDate</name></name><argument_list>(<argument><expr><name>d1</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>nsd</name> <operator>=</operator> <call><name><name>unit</name><operator>.</operator><name>addToDate</name></name><argument_list>(<argument><expr><name>psd</name></expr></argument>, <argument><expr><call><name><name>TimeZone</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>psd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>d1</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>nsd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <call><name><name>d1</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setRange</name></name><argument_list>(<argument><expr><name>d2</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>psd</name> <operator>=</operator> <call><name><name>axis</name><operator>.</operator><name>previousStandardDate</name></name><argument_list>(<argument><expr><name>d2</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>nsd</name> <operator>=</operator> <call><name><name>unit</name><operator>.</operator><name>addToDate</name></name><argument_list>(<argument><expr><name>psd</name></expr></argument>, <argument><expr><call><name><name>TimeZone</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>psd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>d2</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>nsd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <call><name><name>d2</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setRange</name></name><argument_list>(<argument><expr><name>d3</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>psd</name> <operator>=</operator> <call><name><name>axis</name><operator>.</operator><name>previousStandardDate</name></name><argument_list>(<argument><expr><name>d3</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>nsd</name> <operator>=</operator> <call><name><name>unit</name><operator>.</operator><name>addToDate</name></name><argument_list>(<argument><expr><name>psd</name></expr></argument>, <argument><expr><call><name><name>TimeZone</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>psd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>d3</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>nsd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <call><name><name>d3</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// END: check d3 and d4</comment>
        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setTickMarkPosition</name></name><argument_list>(<argument><expr><name><name>DateTickMarkPosition</name><operator>.</operator><name>END</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setRange</name></name><argument_list>(<argument><expr><name>d3</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>psd</name> <operator>=</operator> <call><name><name>axis</name><operator>.</operator><name>previousStandardDate</name></name><argument_list>(<argument><expr><name>d3</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>nsd</name> <operator>=</operator> <call><name><name>unit</name><operator>.</operator><name>addToDate</name></name><argument_list>(<argument><expr><name>psd</name></expr></argument>, <argument><expr><call><name><name>TimeZone</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>psd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>d3</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>nsd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <call><name><name>d3</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setRange</name></name><argument_list>(<argument><expr><name>d4</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>psd</name> <operator>=</operator> <call><name><name>axis</name><operator>.</operator><name>previousStandardDate</name></name><argument_list>(<argument><expr><name>d4</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>nsd</name> <operator>=</operator> <call><name><name>unit</name><operator>.</operator><name>addToDate</name></name><argument_list>(<argument><expr><name>psd</name></expr></argument>, <argument><expr><call><name><name>TimeZone</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>psd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>d4</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>nsd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <call><name><name>d4</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * A basic check for the testPreviousStandardDate() method when the
     * tick unit is 1 month.
     */</comment>
    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testPreviousStandardDateMonthA</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>MyDateAxis</name></type> <name>axis</name> <init>= <expr><operator>new</operator> <call><name>MyDateAxis</name><argument_list>(<argument><expr><literal type="string">"Month"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Month</name></type> <name>nov2006</name> <init>= <expr><operator>new</operator> <call><name>Month</name><argument_list>(<argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><literal type="number">2006</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Month</name></type> <name>dec2006</name> <init>= <expr><operator>new</operator> <call><name>Month</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><literal type="number">2006</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// five dates to check...</comment>
        <decl_stmt><decl><type><name>Date</name></type> <name>d0</name> <init>= <expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><call><name><name>nov2006</name><operator>.</operator><name>getFirstMillisecond</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Date</name></type> <name>d1</name> <init>= <expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><call><name><name>nov2006</name><operator>.</operator><name>getFirstMillisecond</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">500L</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Date</name></type> <name>d2</name> <init>= <expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><call><name><name>nov2006</name><operator>.</operator><name>getMiddleMillisecond</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Date</name></type> <name>d3</name> <init>= <expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><call><name><name>nov2006</name><operator>.</operator><name>getMiddleMillisecond</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">500L</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Date</name></type> <name>d4</name> <init>= <expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><call><name><name>nov2006</name><operator>.</operator><name>getLastMillisecond</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>Date</name></type> <name>end</name> <init>= <expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><call><name><name>dec2006</name><operator>.</operator><name>getLastMillisecond</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>DateTickUnit</name></type> <name>unit</name> <init>= <expr><operator>new</operator> <call><name>DateTickUnit</name><argument_list>(<argument><expr><name><name>DateTickUnitType</name><operator>.</operator><name>MONTH</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setTickUnit</name></name><argument_list>(<argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// START: check d0 and d1</comment>
        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setTickMarkPosition</name></name><argument_list>(<argument><expr><name><name>DateTickMarkPosition</name><operator>.</operator><name>START</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setRange</name></name><argument_list>(<argument><expr><name>d0</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Date</name></type> <name>psd</name> <init>= <expr><call><name><name>axis</name><operator>.</operator><name>previousStandardDate</name></name><argument_list>(<argument><expr><name>d0</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Date</name></type> <name>nsd</name> <init>= <expr><call><name><name>unit</name><operator>.</operator><name>addToDate</name></name><argument_list>(<argument><expr><name>psd</name></expr></argument>, <argument><expr><call><name><name>TimeZone</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>psd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>d0</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>nsd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <call><name><name>d0</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setRange</name></name><argument_list>(<argument><expr><name>d1</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>psd</name> <operator>=</operator> <call><name><name>axis</name><operator>.</operator><name>previousStandardDate</name></name><argument_list>(<argument><expr><name>d1</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>nsd</name> <operator>=</operator> <call><name><name>unit</name><operator>.</operator><name>addToDate</name></name><argument_list>(<argument><expr><name>psd</name></expr></argument>, <argument><expr><call><name><name>TimeZone</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>psd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>d1</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>nsd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <call><name><name>d1</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// MIDDLE: check d1, d2 and d3</comment>
        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setTickMarkPosition</name></name><argument_list>(<argument><expr><name><name>DateTickMarkPosition</name><operator>.</operator><name>MIDDLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setRange</name></name><argument_list>(<argument><expr><name>d1</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>psd</name> <operator>=</operator> <call><name><name>axis</name><operator>.</operator><name>previousStandardDate</name></name><argument_list>(<argument><expr><name>d1</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>nsd</name> <operator>=</operator> <call><name><name>unit</name><operator>.</operator><name>addToDate</name></name><argument_list>(<argument><expr><name>psd</name></expr></argument>, <argument><expr><call><name><name>TimeZone</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>psd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>d1</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>nsd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <call><name><name>d1</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setRange</name></name><argument_list>(<argument><expr><name>d2</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>psd</name> <operator>=</operator> <call><name><name>axis</name><operator>.</operator><name>previousStandardDate</name></name><argument_list>(<argument><expr><name>d2</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>nsd</name> <operator>=</operator> <call><name><name>unit</name><operator>.</operator><name>addToDate</name></name><argument_list>(<argument><expr><name>psd</name></expr></argument>, <argument><expr><call><name><name>TimeZone</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>psd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>d2</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>nsd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <call><name><name>d2</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setRange</name></name><argument_list>(<argument><expr><name>d3</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>psd</name> <operator>=</operator> <call><name><name>axis</name><operator>.</operator><name>previousStandardDate</name></name><argument_list>(<argument><expr><name>d3</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>nsd</name> <operator>=</operator> <call><name><name>unit</name><operator>.</operator><name>addToDate</name></name><argument_list>(<argument><expr><name>psd</name></expr></argument>, <argument><expr><call><name><name>TimeZone</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>psd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>d3</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>nsd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <call><name><name>d3</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// END: check d3 and d4</comment>
        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setTickMarkPosition</name></name><argument_list>(<argument><expr><name><name>DateTickMarkPosition</name><operator>.</operator><name>END</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setRange</name></name><argument_list>(<argument><expr><name>d3</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>psd</name> <operator>=</operator> <call><name><name>axis</name><operator>.</operator><name>previousStandardDate</name></name><argument_list>(<argument><expr><name>d3</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>nsd</name> <operator>=</operator> <call><name><name>unit</name><operator>.</operator><name>addToDate</name></name><argument_list>(<argument><expr><name>psd</name></expr></argument>, <argument><expr><call><name><name>TimeZone</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>psd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>d3</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>nsd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <call><name><name>d3</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setRange</name></name><argument_list>(<argument><expr><name>d4</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>psd</name> <operator>=</operator> <call><name><name>axis</name><operator>.</operator><name>previousStandardDate</name></name><argument_list>(<argument><expr><name>d4</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>nsd</name> <operator>=</operator> <call><name><name>unit</name><operator>.</operator><name>addToDate</name></name><argument_list>(<argument><expr><name>psd</name></expr></argument>, <argument><expr><call><name><name>TimeZone</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>psd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>d4</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>nsd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <call><name><name>d4</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * A basic check for the testPreviousStandardDate() method when the
     * tick unit is 3 months (just for the sake of having a multiple).
     */</comment>
    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testPreviousStandardDateMonthB</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>MyDateAxis</name></type> <name>axis</name> <init>= <expr><operator>new</operator> <call><name>MyDateAxis</name><argument_list>(<argument><expr><literal type="string">"Month"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Month</name></type> <name>nov2006</name> <init>= <expr><operator>new</operator> <call><name>Month</name><argument_list>(<argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><literal type="number">2006</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Month</name></type> <name>dec2006</name> <init>= <expr><operator>new</operator> <call><name>Month</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><literal type="number">2006</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// five dates to check...</comment>
        <decl_stmt><decl><type><name>Date</name></type> <name>d0</name> <init>= <expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><call><name><name>nov2006</name><operator>.</operator><name>getFirstMillisecond</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Date</name></type> <name>d1</name> <init>= <expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><call><name><name>nov2006</name><operator>.</operator><name>getFirstMillisecond</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">500L</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Date</name></type> <name>d2</name> <init>= <expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><call><name><name>nov2006</name><operator>.</operator><name>getMiddleMillisecond</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Date</name></type> <name>d3</name> <init>= <expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><call><name><name>nov2006</name><operator>.</operator><name>getMiddleMillisecond</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">500L</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Date</name></type> <name>d4</name> <init>= <expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><call><name><name>nov2006</name><operator>.</operator><name>getLastMillisecond</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>Date</name></type> <name>end</name> <init>= <expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><call><name><name>dec2006</name><operator>.</operator><name>getLastMillisecond</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>DateTickUnit</name></type> <name>unit</name> <init>= <expr><operator>new</operator> <call><name>DateTickUnit</name><argument_list>(<argument><expr><name><name>DateTickUnitType</name><operator>.</operator><name>MONTH</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setTickUnit</name></name><argument_list>(<argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// START: check d0 and d1</comment>
        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setTickMarkPosition</name></name><argument_list>(<argument><expr><name><name>DateTickMarkPosition</name><operator>.</operator><name>START</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setRange</name></name><argument_list>(<argument><expr><name>d0</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Date</name></type> <name>psd</name> <init>= <expr><call><name><name>axis</name><operator>.</operator><name>previousStandardDate</name></name><argument_list>(<argument><expr><name>d0</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Date</name></type> <name>nsd</name> <init>= <expr><call><name><name>unit</name><operator>.</operator><name>addToDate</name></name><argument_list>(<argument><expr><name>psd</name></expr></argument>, <argument><expr><call><name><name>TimeZone</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>psd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>d0</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>nsd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <call><name><name>d0</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setRange</name></name><argument_list>(<argument><expr><name>d1</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>psd</name> <operator>=</operator> <call><name><name>axis</name><operator>.</operator><name>previousStandardDate</name></name><argument_list>(<argument><expr><name>d1</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>nsd</name> <operator>=</operator> <call><name><name>unit</name><operator>.</operator><name>addToDate</name></name><argument_list>(<argument><expr><name>psd</name></expr></argument>, <argument><expr><call><name><name>TimeZone</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>psd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>d1</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>nsd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <call><name><name>d1</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// MIDDLE: check d1, d2 and d3</comment>
        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setTickMarkPosition</name></name><argument_list>(<argument><expr><name><name>DateTickMarkPosition</name><operator>.</operator><name>MIDDLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setRange</name></name><argument_list>(<argument><expr><name>d1</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>psd</name> <operator>=</operator> <call><name><name>axis</name><operator>.</operator><name>previousStandardDate</name></name><argument_list>(<argument><expr><name>d1</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>nsd</name> <operator>=</operator> <call><name><name>unit</name><operator>.</operator><name>addToDate</name></name><argument_list>(<argument><expr><name>psd</name></expr></argument>, <argument><expr><call><name><name>TimeZone</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>psd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>d1</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>nsd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <call><name><name>d1</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setRange</name></name><argument_list>(<argument><expr><name>d2</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>psd</name> <operator>=</operator> <call><name><name>axis</name><operator>.</operator><name>previousStandardDate</name></name><argument_list>(<argument><expr><name>d2</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>nsd</name> <operator>=</operator> <call><name><name>unit</name><operator>.</operator><name>addToDate</name></name><argument_list>(<argument><expr><name>psd</name></expr></argument>, <argument><expr><call><name><name>TimeZone</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>psd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>d2</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>nsd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <call><name><name>d2</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setRange</name></name><argument_list>(<argument><expr><name>d3</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>psd</name> <operator>=</operator> <call><name><name>axis</name><operator>.</operator><name>previousStandardDate</name></name><argument_list>(<argument><expr><name>d3</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>nsd</name> <operator>=</operator> <call><name><name>unit</name><operator>.</operator><name>addToDate</name></name><argument_list>(<argument><expr><name>psd</name></expr></argument>, <argument><expr><call><name><name>TimeZone</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>psd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>d3</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>nsd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <call><name><name>d3</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// END: check d3 and d4</comment>
        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setTickMarkPosition</name></name><argument_list>(<argument><expr><name><name>DateTickMarkPosition</name><operator>.</operator><name>END</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setRange</name></name><argument_list>(<argument><expr><name>d3</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>psd</name> <operator>=</operator> <call><name><name>axis</name><operator>.</operator><name>previousStandardDate</name></name><argument_list>(<argument><expr><name>d3</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>nsd</name> <operator>=</operator> <call><name><name>unit</name><operator>.</operator><name>addToDate</name></name><argument_list>(<argument><expr><name>psd</name></expr></argument>, <argument><expr><call><name><name>TimeZone</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>psd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>d3</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>nsd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <call><name><name>d3</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setRange</name></name><argument_list>(<argument><expr><name>d4</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>psd</name> <operator>=</operator> <call><name><name>axis</name><operator>.</operator><name>previousStandardDate</name></name><argument_list>(<argument><expr><name>d4</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>nsd</name> <operator>=</operator> <call><name><name>unit</name><operator>.</operator><name>addToDate</name></name><argument_list>(<argument><expr><name>psd</name></expr></argument>, <argument><expr><call><name><name>TimeZone</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>psd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>d4</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>nsd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <call><name><name>d4</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * A basic check for the testPreviousStandardDate() method when the
     * tick unit is 1 day.
     */</comment>
    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testPreviousStandardDateDayA</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>MyDateAxis</name></type> <name>axis</name> <init>= <expr><operator>new</operator> <call><name>MyDateAxis</name><argument_list>(<argument><expr><literal type="string">"Day"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Day</name></type> <name>apr12007</name> <init>= <expr><operator>new</operator> <call><name>Day</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">2007</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Day</name></type> <name>apr22007</name> <init>= <expr><operator>new</operator> <call><name>Day</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">2007</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// five dates to check...</comment>
        <decl_stmt><decl><type><name>Date</name></type> <name>d0</name> <init>= <expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><call><name><name>apr12007</name><operator>.</operator><name>getFirstMillisecond</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Date</name></type> <name>d1</name> <init>= <expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><call><name><name>apr12007</name><operator>.</operator><name>getFirstMillisecond</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">500L</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Date</name></type> <name>d2</name> <init>= <expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><call><name><name>apr12007</name><operator>.</operator><name>getMiddleMillisecond</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Date</name></type> <name>d3</name> <init>= <expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><call><name><name>apr12007</name><operator>.</operator><name>getMiddleMillisecond</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">500L</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Date</name></type> <name>d4</name> <init>= <expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><call><name><name>apr12007</name><operator>.</operator><name>getLastMillisecond</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>Date</name></type> <name>end</name> <init>= <expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><call><name><name>apr22007</name><operator>.</operator><name>getLastMillisecond</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>DateTickUnit</name></type> <name>unit</name> <init>= <expr><operator>new</operator> <call><name>DateTickUnit</name><argument_list>(<argument><expr><name><name>DateTickUnitType</name><operator>.</operator><name>DAY</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setTickUnit</name></name><argument_list>(<argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// START: check d0 and d1</comment>
        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setTickMarkPosition</name></name><argument_list>(<argument><expr><name><name>DateTickMarkPosition</name><operator>.</operator><name>START</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setRange</name></name><argument_list>(<argument><expr><name>d0</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Date</name></type> <name>psd</name> <init>= <expr><call><name><name>axis</name><operator>.</operator><name>previousStandardDate</name></name><argument_list>(<argument><expr><name>d0</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Date</name></type> <name>nsd</name> <init>= <expr><call><name><name>unit</name><operator>.</operator><name>addToDate</name></name><argument_list>(<argument><expr><name>psd</name></expr></argument>, <argument><expr><call><name><name>TimeZone</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>psd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>d0</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>nsd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <call><name><name>d0</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setRange</name></name><argument_list>(<argument><expr><name>d1</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>psd</name> <operator>=</operator> <call><name><name>axis</name><operator>.</operator><name>previousStandardDate</name></name><argument_list>(<argument><expr><name>d1</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>nsd</name> <operator>=</operator> <call><name><name>unit</name><operator>.</operator><name>addToDate</name></name><argument_list>(<argument><expr><name>psd</name></expr></argument>, <argument><expr><call><name><name>TimeZone</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>psd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>d1</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>nsd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <call><name><name>d1</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// MIDDLE: check d1, d2 and d3</comment>
        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setTickMarkPosition</name></name><argument_list>(<argument><expr><name><name>DateTickMarkPosition</name><operator>.</operator><name>MIDDLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setRange</name></name><argument_list>(<argument><expr><name>d1</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>psd</name> <operator>=</operator> <call><name><name>axis</name><operator>.</operator><name>previousStandardDate</name></name><argument_list>(<argument><expr><name>d1</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>nsd</name> <operator>=</operator> <call><name><name>unit</name><operator>.</operator><name>addToDate</name></name><argument_list>(<argument><expr><name>psd</name></expr></argument>, <argument><expr><call><name><name>TimeZone</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>psd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>d1</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>nsd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <call><name><name>d1</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setRange</name></name><argument_list>(<argument><expr><name>d2</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>psd</name> <operator>=</operator> <call><name><name>axis</name><operator>.</operator><name>previousStandardDate</name></name><argument_list>(<argument><expr><name>d2</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>nsd</name> <operator>=</operator> <call><name><name>unit</name><operator>.</operator><name>addToDate</name></name><argument_list>(<argument><expr><name>psd</name></expr></argument>, <argument><expr><call><name><name>TimeZone</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>psd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>d2</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>nsd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <call><name><name>d2</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setRange</name></name><argument_list>(<argument><expr><name>d3</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>psd</name> <operator>=</operator> <call><name><name>axis</name><operator>.</operator><name>previousStandardDate</name></name><argument_list>(<argument><expr><name>d3</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>nsd</name> <operator>=</operator> <call><name><name>unit</name><operator>.</operator><name>addToDate</name></name><argument_list>(<argument><expr><name>psd</name></expr></argument>, <argument><expr><call><name><name>TimeZone</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>psd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>d3</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>nsd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <call><name><name>d3</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// END: check d3 and d4</comment>
        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setTickMarkPosition</name></name><argument_list>(<argument><expr><name><name>DateTickMarkPosition</name><operator>.</operator><name>END</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setRange</name></name><argument_list>(<argument><expr><name>d3</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>psd</name> <operator>=</operator> <call><name><name>axis</name><operator>.</operator><name>previousStandardDate</name></name><argument_list>(<argument><expr><name>d3</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>nsd</name> <operator>=</operator> <call><name><name>unit</name><operator>.</operator><name>addToDate</name></name><argument_list>(<argument><expr><name>psd</name></expr></argument>, <argument><expr><call><name><name>TimeZone</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>psd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>d3</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>nsd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <call><name><name>d3</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setRange</name></name><argument_list>(<argument><expr><name>d4</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>psd</name> <operator>=</operator> <call><name><name>axis</name><operator>.</operator><name>previousStandardDate</name></name><argument_list>(<argument><expr><name>d4</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>nsd</name> <operator>=</operator> <call><name><name>unit</name><operator>.</operator><name>addToDate</name></name><argument_list>(<argument><expr><name>psd</name></expr></argument>, <argument><expr><call><name><name>TimeZone</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>psd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>d4</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>nsd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <call><name><name>d4</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * A basic check for the testPreviousStandardDate() method when the
     * tick unit is 7 days (just for the sake of having a multiple).
     */</comment>
    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testPreviousStandardDateDayB</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>MyDateAxis</name></type> <name>axis</name> <init>= <expr><operator>new</operator> <call><name>MyDateAxis</name><argument_list>(<argument><expr><literal type="string">"Day"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Day</name></type> <name>apr12007</name> <init>= <expr><operator>new</operator> <call><name>Day</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">2007</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Day</name></type> <name>apr22007</name> <init>= <expr><operator>new</operator> <call><name>Day</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">2007</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// five dates to check...</comment>
        <decl_stmt><decl><type><name>Date</name></type> <name>d0</name> <init>= <expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><call><name><name>apr12007</name><operator>.</operator><name>getFirstMillisecond</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Date</name></type> <name>d1</name> <init>= <expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><call><name><name>apr12007</name><operator>.</operator><name>getFirstMillisecond</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">500L</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Date</name></type> <name>d2</name> <init>= <expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><call><name><name>apr12007</name><operator>.</operator><name>getMiddleMillisecond</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Date</name></type> <name>d3</name> <init>= <expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><call><name><name>apr12007</name><operator>.</operator><name>getMiddleMillisecond</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">500L</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Date</name></type> <name>d4</name> <init>= <expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><call><name><name>apr12007</name><operator>.</operator><name>getLastMillisecond</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>Date</name></type> <name>end</name> <init>= <expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><call><name><name>apr22007</name><operator>.</operator><name>getLastMillisecond</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>DateTickUnit</name></type> <name>unit</name> <init>= <expr><operator>new</operator> <call><name>DateTickUnit</name><argument_list>(<argument><expr><name><name>DateTickUnitType</name><operator>.</operator><name>DAY</name></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setTickUnit</name></name><argument_list>(<argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// START: check d0 and d1</comment>
        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setTickMarkPosition</name></name><argument_list>(<argument><expr><name><name>DateTickMarkPosition</name><operator>.</operator><name>START</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setRange</name></name><argument_list>(<argument><expr><name>d0</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Date</name></type> <name>psd</name> <init>= <expr><call><name><name>axis</name><operator>.</operator><name>previousStandardDate</name></name><argument_list>(<argument><expr><name>d0</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Date</name></type> <name>nsd</name> <init>= <expr><call><name><name>unit</name><operator>.</operator><name>addToDate</name></name><argument_list>(<argument><expr><name>psd</name></expr></argument>, <argument><expr><call><name><name>TimeZone</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>psd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>d0</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>nsd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <call><name><name>d0</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setRange</name></name><argument_list>(<argument><expr><name>d1</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>psd</name> <operator>=</operator> <call><name><name>axis</name><operator>.</operator><name>previousStandardDate</name></name><argument_list>(<argument><expr><name>d1</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>nsd</name> <operator>=</operator> <call><name><name>unit</name><operator>.</operator><name>addToDate</name></name><argument_list>(<argument><expr><name>psd</name></expr></argument>, <argument><expr><call><name><name>TimeZone</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>psd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>d1</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>nsd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <call><name><name>d1</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// MIDDLE: check d1, d2 and d3</comment>
        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setTickMarkPosition</name></name><argument_list>(<argument><expr><name><name>DateTickMarkPosition</name><operator>.</operator><name>MIDDLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setRange</name></name><argument_list>(<argument><expr><name>d1</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>psd</name> <operator>=</operator> <call><name><name>axis</name><operator>.</operator><name>previousStandardDate</name></name><argument_list>(<argument><expr><name>d1</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>nsd</name> <operator>=</operator> <call><name><name>unit</name><operator>.</operator><name>addToDate</name></name><argument_list>(<argument><expr><name>psd</name></expr></argument>, <argument><expr><call><name><name>TimeZone</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>psd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>d1</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>nsd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <call><name><name>d1</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setRange</name></name><argument_list>(<argument><expr><name>d2</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>psd</name> <operator>=</operator> <call><name><name>axis</name><operator>.</operator><name>previousStandardDate</name></name><argument_list>(<argument><expr><name>d2</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>nsd</name> <operator>=</operator> <call><name><name>unit</name><operator>.</operator><name>addToDate</name></name><argument_list>(<argument><expr><name>psd</name></expr></argument>, <argument><expr><call><name><name>TimeZone</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>psd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>d2</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>nsd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <call><name><name>d2</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setRange</name></name><argument_list>(<argument><expr><name>d3</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>psd</name> <operator>=</operator> <call><name><name>axis</name><operator>.</operator><name>previousStandardDate</name></name><argument_list>(<argument><expr><name>d3</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>nsd</name> <operator>=</operator> <call><name><name>unit</name><operator>.</operator><name>addToDate</name></name><argument_list>(<argument><expr><name>psd</name></expr></argument>, <argument><expr><call><name><name>TimeZone</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>psd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>d3</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>nsd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <call><name><name>d3</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// END: check d3 and d4</comment>
        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setTickMarkPosition</name></name><argument_list>(<argument><expr><name><name>DateTickMarkPosition</name><operator>.</operator><name>END</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setRange</name></name><argument_list>(<argument><expr><name>d3</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>psd</name> <operator>=</operator> <call><name><name>axis</name><operator>.</operator><name>previousStandardDate</name></name><argument_list>(<argument><expr><name>d3</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>nsd</name> <operator>=</operator> <call><name><name>unit</name><operator>.</operator><name>addToDate</name></name><argument_list>(<argument><expr><name>psd</name></expr></argument>, <argument><expr><call><name><name>TimeZone</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>psd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>d3</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>nsd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <call><name><name>d3</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setRange</name></name><argument_list>(<argument><expr><name>d4</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>psd</name> <operator>=</operator> <call><name><name>axis</name><operator>.</operator><name>previousStandardDate</name></name><argument_list>(<argument><expr><name>d4</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>nsd</name> <operator>=</operator> <call><name><name>unit</name><operator>.</operator><name>addToDate</name></name><argument_list>(<argument><expr><name>psd</name></expr></argument>, <argument><expr><call><name><name>TimeZone</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>psd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>d4</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>nsd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <call><name><name>d4</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * A basic check for the testPreviousStandardDate() method when the
     * tick unit is 1 hour.
     */</comment>
    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testPreviousStandardDateHourA</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>MyDateAxis</name></type> <name>axis</name> <init>= <expr><operator>new</operator> <call><name>MyDateAxis</name><argument_list>(<argument><expr><literal type="string">"Hour"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Hour</name></type> <name>h0</name> <init>= <expr><operator>new</operator> <call><name>Hour</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">2007</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Hour</name></type> <name>h1</name> <init>= <expr><operator>new</operator> <call><name>Hour</name><argument_list>(<argument><expr><literal type="number">13</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">2007</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// five dates to check...</comment>
        <decl_stmt><decl><type><name>Date</name></type> <name>d0</name> <init>= <expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><call><name><name>h0</name><operator>.</operator><name>getFirstMillisecond</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Date</name></type> <name>d1</name> <init>= <expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><call><name><name>h0</name><operator>.</operator><name>getFirstMillisecond</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">500L</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Date</name></type> <name>d2</name> <init>= <expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><call><name><name>h0</name><operator>.</operator><name>getMiddleMillisecond</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Date</name></type> <name>d3</name> <init>= <expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><call><name><name>h0</name><operator>.</operator><name>getMiddleMillisecond</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">500L</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Date</name></type> <name>d4</name> <init>= <expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><call><name><name>h0</name><operator>.</operator><name>getLastMillisecond</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>Date</name></type> <name>end</name> <init>= <expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><call><name><name>h1</name><operator>.</operator><name>getLastMillisecond</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>DateTickUnit</name></type> <name>unit</name> <init>= <expr><operator>new</operator> <call><name>DateTickUnit</name><argument_list>(<argument><expr><name><name>DateTickUnitType</name><operator>.</operator><name>HOUR</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setTickUnit</name></name><argument_list>(<argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// START: check d0 and d1</comment>
        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setTickMarkPosition</name></name><argument_list>(<argument><expr><name><name>DateTickMarkPosition</name><operator>.</operator><name>START</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setRange</name></name><argument_list>(<argument><expr><name>d0</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Date</name></type> <name>psd</name> <init>= <expr><call><name><name>axis</name><operator>.</operator><name>previousStandardDate</name></name><argument_list>(<argument><expr><name>d0</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Date</name></type> <name>nsd</name> <init>= <expr><call><name><name>unit</name><operator>.</operator><name>addToDate</name></name><argument_list>(<argument><expr><name>psd</name></expr></argument>, <argument><expr><call><name><name>TimeZone</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>psd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>d0</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>nsd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <call><name><name>d0</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setRange</name></name><argument_list>(<argument><expr><name>d1</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>psd</name> <operator>=</operator> <call><name><name>axis</name><operator>.</operator><name>previousStandardDate</name></name><argument_list>(<argument><expr><name>d1</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>nsd</name> <operator>=</operator> <call><name><name>unit</name><operator>.</operator><name>addToDate</name></name><argument_list>(<argument><expr><name>psd</name></expr></argument>, <argument><expr><call><name><name>TimeZone</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>psd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>d1</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>nsd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <call><name><name>d1</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// MIDDLE: check d1, d2 and d3</comment>
        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setTickMarkPosition</name></name><argument_list>(<argument><expr><name><name>DateTickMarkPosition</name><operator>.</operator><name>MIDDLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setRange</name></name><argument_list>(<argument><expr><name>d1</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>psd</name> <operator>=</operator> <call><name><name>axis</name><operator>.</operator><name>previousStandardDate</name></name><argument_list>(<argument><expr><name>d1</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>nsd</name> <operator>=</operator> <call><name><name>unit</name><operator>.</operator><name>addToDate</name></name><argument_list>(<argument><expr><name>psd</name></expr></argument>, <argument><expr><call><name><name>TimeZone</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>psd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>d1</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>nsd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <call><name><name>d1</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setRange</name></name><argument_list>(<argument><expr><name>d2</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>psd</name> <operator>=</operator> <call><name><name>axis</name><operator>.</operator><name>previousStandardDate</name></name><argument_list>(<argument><expr><name>d2</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>nsd</name> <operator>=</operator> <call><name><name>unit</name><operator>.</operator><name>addToDate</name></name><argument_list>(<argument><expr><name>psd</name></expr></argument>, <argument><expr><call><name><name>TimeZone</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>psd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>d2</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>nsd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <call><name><name>d2</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setRange</name></name><argument_list>(<argument><expr><name>d3</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>psd</name> <operator>=</operator> <call><name><name>axis</name><operator>.</operator><name>previousStandardDate</name></name><argument_list>(<argument><expr><name>d3</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>nsd</name> <operator>=</operator> <call><name><name>unit</name><operator>.</operator><name>addToDate</name></name><argument_list>(<argument><expr><name>psd</name></expr></argument>, <argument><expr><call><name><name>TimeZone</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>psd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>d3</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>nsd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <call><name><name>d3</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// END: check d3 and d4</comment>
        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setTickMarkPosition</name></name><argument_list>(<argument><expr><name><name>DateTickMarkPosition</name><operator>.</operator><name>END</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setRange</name></name><argument_list>(<argument><expr><name>d3</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>psd</name> <operator>=</operator> <call><name><name>axis</name><operator>.</operator><name>previousStandardDate</name></name><argument_list>(<argument><expr><name>d3</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>nsd</name> <operator>=</operator> <call><name><name>unit</name><operator>.</operator><name>addToDate</name></name><argument_list>(<argument><expr><name>psd</name></expr></argument>, <argument><expr><call><name><name>TimeZone</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>psd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>d3</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>nsd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <call><name><name>d3</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setRange</name></name><argument_list>(<argument><expr><name>d4</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>psd</name> <operator>=</operator> <call><name><name>axis</name><operator>.</operator><name>previousStandardDate</name></name><argument_list>(<argument><expr><name>d4</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>nsd</name> <operator>=</operator> <call><name><name>unit</name><operator>.</operator><name>addToDate</name></name><argument_list>(<argument><expr><name>psd</name></expr></argument>, <argument><expr><call><name><name>TimeZone</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>psd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>d4</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>nsd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <call><name><name>d4</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * A basic check for the testPreviousStandardDate() method when the
     * tick unit is 6 hours (just for the sake of having a multiple).
     */</comment>
    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testPreviousStandardDateHourB</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>MyDateAxis</name></type> <name>axis</name> <init>= <expr><operator>new</operator> <call><name>MyDateAxis</name><argument_list>(<argument><expr><literal type="string">"Hour"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Hour</name></type> <name>h0</name> <init>= <expr><operator>new</operator> <call><name>Hour</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">2007</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Hour</name></type> <name>h1</name> <init>= <expr><operator>new</operator> <call><name>Hour</name><argument_list>(<argument><expr><literal type="number">13</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">2007</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// five dates to check...</comment>
        <decl_stmt><decl><type><name>Date</name></type> <name>d0</name> <init>= <expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><call><name><name>h0</name><operator>.</operator><name>getFirstMillisecond</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Date</name></type> <name>d1</name> <init>= <expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><call><name><name>h0</name><operator>.</operator><name>getFirstMillisecond</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">500L</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Date</name></type> <name>d2</name> <init>= <expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><call><name><name>h0</name><operator>.</operator><name>getMiddleMillisecond</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Date</name></type> <name>d3</name> <init>= <expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><call><name><name>h0</name><operator>.</operator><name>getMiddleMillisecond</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">500L</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Date</name></type> <name>d4</name> <init>= <expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><call><name><name>h0</name><operator>.</operator><name>getLastMillisecond</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>Date</name></type> <name>end</name> <init>= <expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><call><name><name>h1</name><operator>.</operator><name>getLastMillisecond</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>DateTickUnit</name></type> <name>unit</name> <init>= <expr><operator>new</operator> <call><name>DateTickUnit</name><argument_list>(<argument><expr><name><name>DateTickUnitType</name><operator>.</operator><name>HOUR</name></name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setTickUnit</name></name><argument_list>(<argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// START: check d0 and d1</comment>
        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setTickMarkPosition</name></name><argument_list>(<argument><expr><name><name>DateTickMarkPosition</name><operator>.</operator><name>START</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setRange</name></name><argument_list>(<argument><expr><name>d0</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Date</name></type> <name>psd</name> <init>= <expr><call><name><name>axis</name><operator>.</operator><name>previousStandardDate</name></name><argument_list>(<argument><expr><name>d0</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Date</name></type> <name>nsd</name> <init>= <expr><call><name><name>unit</name><operator>.</operator><name>addToDate</name></name><argument_list>(<argument><expr><name>psd</name></expr></argument>, <argument><expr><call><name><name>TimeZone</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>psd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>d0</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>nsd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <call><name><name>d0</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setRange</name></name><argument_list>(<argument><expr><name>d1</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>psd</name> <operator>=</operator> <call><name><name>axis</name><operator>.</operator><name>previousStandardDate</name></name><argument_list>(<argument><expr><name>d1</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>nsd</name> <operator>=</operator> <call><name><name>unit</name><operator>.</operator><name>addToDate</name></name><argument_list>(<argument><expr><name>psd</name></expr></argument>, <argument><expr><call><name><name>TimeZone</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>psd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>d1</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>nsd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <call><name><name>d1</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// MIDDLE: check d1, d2 and d3</comment>
        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setTickMarkPosition</name></name><argument_list>(<argument><expr><name><name>DateTickMarkPosition</name><operator>.</operator><name>MIDDLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setRange</name></name><argument_list>(<argument><expr><name>d1</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>psd</name> <operator>=</operator> <call><name><name>axis</name><operator>.</operator><name>previousStandardDate</name></name><argument_list>(<argument><expr><name>d1</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>nsd</name> <operator>=</operator> <call><name><name>unit</name><operator>.</operator><name>addToDate</name></name><argument_list>(<argument><expr><name>psd</name></expr></argument>, <argument><expr><call><name><name>TimeZone</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>psd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>d1</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>nsd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <call><name><name>d1</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setRange</name></name><argument_list>(<argument><expr><name>d2</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>psd</name> <operator>=</operator> <call><name><name>axis</name><operator>.</operator><name>previousStandardDate</name></name><argument_list>(<argument><expr><name>d2</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>nsd</name> <operator>=</operator> <call><name><name>unit</name><operator>.</operator><name>addToDate</name></name><argument_list>(<argument><expr><name>psd</name></expr></argument>, <argument><expr><call><name><name>TimeZone</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>psd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>d2</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>nsd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <call><name><name>d2</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setRange</name></name><argument_list>(<argument><expr><name>d3</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>psd</name> <operator>=</operator> <call><name><name>axis</name><operator>.</operator><name>previousStandardDate</name></name><argument_list>(<argument><expr><name>d3</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>nsd</name> <operator>=</operator> <call><name><name>unit</name><operator>.</operator><name>addToDate</name></name><argument_list>(<argument><expr><name>psd</name></expr></argument>, <argument><expr><call><name><name>TimeZone</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>psd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>d3</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>nsd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <call><name><name>d3</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// END: check d3 and d4</comment>
        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setTickMarkPosition</name></name><argument_list>(<argument><expr><name><name>DateTickMarkPosition</name><operator>.</operator><name>END</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setRange</name></name><argument_list>(<argument><expr><name>d3</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>psd</name> <operator>=</operator> <call><name><name>axis</name><operator>.</operator><name>previousStandardDate</name></name><argument_list>(<argument><expr><name>d3</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>nsd</name> <operator>=</operator> <call><name><name>unit</name><operator>.</operator><name>addToDate</name></name><argument_list>(<argument><expr><name>psd</name></expr></argument>, <argument><expr><call><name><name>TimeZone</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>psd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>d3</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>nsd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <call><name><name>d3</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setRange</name></name><argument_list>(<argument><expr><name>d4</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>psd</name> <operator>=</operator> <call><name><name>axis</name><operator>.</operator><name>previousStandardDate</name></name><argument_list>(<argument><expr><name>d4</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>nsd</name> <operator>=</operator> <call><name><name>unit</name><operator>.</operator><name>addToDate</name></name><argument_list>(<argument><expr><name>psd</name></expr></argument>, <argument><expr><call><name><name>TimeZone</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>psd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>d4</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>nsd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <call><name><name>d4</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * A basic check for the testPreviousStandardDate() method when the
     * tick unit is 1 second.
     */</comment>
    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testPreviousStandardDateSecondA</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>MyDateAxis</name></type> <name>axis</name> <init>= <expr><operator>new</operator> <call><name>MyDateAxis</name><argument_list>(<argument><expr><literal type="string">"Second"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Second</name></type> <name>s0</name> <init>= <expr><operator>new</operator> <call><name>Second</name><argument_list>(<argument><expr><literal type="number">58</literal></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">2007</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Second</name></type> <name>s1</name> <init>= <expr><operator>new</operator> <call><name>Second</name><argument_list>(<argument><expr><literal type="number">59</literal></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">2007</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// five dates to check...</comment>
        <decl_stmt><decl><type><name>Date</name></type> <name>d0</name> <init>= <expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><call><name><name>s0</name><operator>.</operator><name>getFirstMillisecond</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Date</name></type> <name>d1</name> <init>= <expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><call><name><name>s0</name><operator>.</operator><name>getFirstMillisecond</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">50L</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Date</name></type> <name>d2</name> <init>= <expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><call><name><name>s0</name><operator>.</operator><name>getMiddleMillisecond</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Date</name></type> <name>d3</name> <init>= <expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><call><name><name>s0</name><operator>.</operator><name>getMiddleMillisecond</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">50L</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Date</name></type> <name>d4</name> <init>= <expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><call><name><name>s0</name><operator>.</operator><name>getLastMillisecond</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>Date</name></type> <name>end</name> <init>= <expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><call><name><name>s1</name><operator>.</operator><name>getLastMillisecond</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>DateTickUnit</name></type> <name>unit</name> <init>= <expr><operator>new</operator> <call><name>DateTickUnit</name><argument_list>(<argument><expr><name><name>DateTickUnitType</name><operator>.</operator><name>SECOND</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setTickUnit</name></name><argument_list>(<argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// START: check d0 and d1</comment>
        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setTickMarkPosition</name></name><argument_list>(<argument><expr><name><name>DateTickMarkPosition</name><operator>.</operator><name>START</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setRange</name></name><argument_list>(<argument><expr><name>d0</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Date</name></type> <name>psd</name> <init>= <expr><call><name><name>axis</name><operator>.</operator><name>previousStandardDate</name></name><argument_list>(<argument><expr><name>d0</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Date</name></type> <name>nsd</name> <init>= <expr><call><name><name>unit</name><operator>.</operator><name>addToDate</name></name><argument_list>(<argument><expr><name>psd</name></expr></argument>, <argument><expr><call><name><name>TimeZone</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>psd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>d0</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>nsd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <call><name><name>d0</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setRange</name></name><argument_list>(<argument><expr><name>d1</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>psd</name> <operator>=</operator> <call><name><name>axis</name><operator>.</operator><name>previousStandardDate</name></name><argument_list>(<argument><expr><name>d1</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>nsd</name> <operator>=</operator> <call><name><name>unit</name><operator>.</operator><name>addToDate</name></name><argument_list>(<argument><expr><name>psd</name></expr></argument>, <argument><expr><call><name><name>TimeZone</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>psd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>d1</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>nsd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <call><name><name>d1</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// MIDDLE: check d1, d2 and d3</comment>
        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setTickMarkPosition</name></name><argument_list>(<argument><expr><name><name>DateTickMarkPosition</name><operator>.</operator><name>MIDDLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setRange</name></name><argument_list>(<argument><expr><name>d1</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>psd</name> <operator>=</operator> <call><name><name>axis</name><operator>.</operator><name>previousStandardDate</name></name><argument_list>(<argument><expr><name>d1</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>nsd</name> <operator>=</operator> <call><name><name>unit</name><operator>.</operator><name>addToDate</name></name><argument_list>(<argument><expr><name>psd</name></expr></argument>, <argument><expr><call><name><name>TimeZone</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>psd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>d1</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>nsd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <call><name><name>d1</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setRange</name></name><argument_list>(<argument><expr><name>d2</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>psd</name> <operator>=</operator> <call><name><name>axis</name><operator>.</operator><name>previousStandardDate</name></name><argument_list>(<argument><expr><name>d2</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>nsd</name> <operator>=</operator> <call><name><name>unit</name><operator>.</operator><name>addToDate</name></name><argument_list>(<argument><expr><name>psd</name></expr></argument>, <argument><expr><call><name><name>TimeZone</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>psd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>d2</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>nsd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <call><name><name>d2</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setRange</name></name><argument_list>(<argument><expr><name>d3</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>psd</name> <operator>=</operator> <call><name><name>axis</name><operator>.</operator><name>previousStandardDate</name></name><argument_list>(<argument><expr><name>d3</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>nsd</name> <operator>=</operator> <call><name><name>unit</name><operator>.</operator><name>addToDate</name></name><argument_list>(<argument><expr><name>psd</name></expr></argument>, <argument><expr><call><name><name>TimeZone</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>psd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>d3</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>nsd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <call><name><name>d3</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// END: check d3 and d4</comment>
        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setTickMarkPosition</name></name><argument_list>(<argument><expr><name><name>DateTickMarkPosition</name><operator>.</operator><name>END</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setRange</name></name><argument_list>(<argument><expr><name>d3</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>psd</name> <operator>=</operator> <call><name><name>axis</name><operator>.</operator><name>previousStandardDate</name></name><argument_list>(<argument><expr><name>d3</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>nsd</name> <operator>=</operator> <call><name><name>unit</name><operator>.</operator><name>addToDate</name></name><argument_list>(<argument><expr><name>psd</name></expr></argument>, <argument><expr><call><name><name>TimeZone</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>psd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>d3</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>nsd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <call><name><name>d3</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setRange</name></name><argument_list>(<argument><expr><name>d4</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>psd</name> <operator>=</operator> <call><name><name>axis</name><operator>.</operator><name>previousStandardDate</name></name><argument_list>(<argument><expr><name>d4</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>nsd</name> <operator>=</operator> <call><name><name>unit</name><operator>.</operator><name>addToDate</name></name><argument_list>(<argument><expr><name>psd</name></expr></argument>, <argument><expr><call><name><name>TimeZone</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>psd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>d4</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>nsd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <call><name><name>d4</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * A basic check for the testPreviousStandardDate() method when the
     * tick unit is 5 seconds (just for the sake of having a multiple).
     */</comment>
    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testPreviousStandardDateSecondB</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>MyDateAxis</name></type> <name>axis</name> <init>= <expr><operator>new</operator> <call><name>MyDateAxis</name><argument_list>(<argument><expr><literal type="string">"Second"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Second</name></type> <name>s0</name> <init>= <expr><operator>new</operator> <call><name>Second</name><argument_list>(<argument><expr><literal type="number">58</literal></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">2007</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Second</name></type> <name>s1</name> <init>= <expr><operator>new</operator> <call><name>Second</name><argument_list>(<argument><expr><literal type="number">59</literal></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">2007</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// five dates to check...</comment>
        <decl_stmt><decl><type><name>Date</name></type> <name>d0</name> <init>= <expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><call><name><name>s0</name><operator>.</operator><name>getFirstMillisecond</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Date</name></type> <name>d1</name> <init>= <expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><call><name><name>s0</name><operator>.</operator><name>getFirstMillisecond</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">50L</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Date</name></type> <name>d2</name> <init>= <expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><call><name><name>s0</name><operator>.</operator><name>getMiddleMillisecond</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Date</name></type> <name>d3</name> <init>= <expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><call><name><name>s0</name><operator>.</operator><name>getMiddleMillisecond</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">50L</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Date</name></type> <name>d4</name> <init>= <expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><call><name><name>s0</name><operator>.</operator><name>getLastMillisecond</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>Date</name></type> <name>end</name> <init>= <expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><call><name><name>s1</name><operator>.</operator><name>getLastMillisecond</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>DateTickUnit</name></type> <name>unit</name> <init>= <expr><operator>new</operator> <call><name>DateTickUnit</name><argument_list>(<argument><expr><name><name>DateTickUnitType</name><operator>.</operator><name>SECOND</name></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setTickUnit</name></name><argument_list>(<argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// START: check d0 and d1</comment>
        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setTickMarkPosition</name></name><argument_list>(<argument><expr><name><name>DateTickMarkPosition</name><operator>.</operator><name>START</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setRange</name></name><argument_list>(<argument><expr><name>d0</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Date</name></type> <name>psd</name> <init>= <expr><call><name><name>axis</name><operator>.</operator><name>previousStandardDate</name></name><argument_list>(<argument><expr><name>d0</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Date</name></type> <name>nsd</name> <init>= <expr><call><name><name>unit</name><operator>.</operator><name>addToDate</name></name><argument_list>(<argument><expr><name>psd</name></expr></argument>, <argument><expr><call><name><name>TimeZone</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>psd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>d0</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>nsd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <call><name><name>d0</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setRange</name></name><argument_list>(<argument><expr><name>d1</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>psd</name> <operator>=</operator> <call><name><name>axis</name><operator>.</operator><name>previousStandardDate</name></name><argument_list>(<argument><expr><name>d1</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>nsd</name> <operator>=</operator> <call><name><name>unit</name><operator>.</operator><name>addToDate</name></name><argument_list>(<argument><expr><name>psd</name></expr></argument>, <argument><expr><call><name><name>TimeZone</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>psd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>d1</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>nsd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <call><name><name>d1</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// MIDDLE: check d1, d2 and d3</comment>
        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setTickMarkPosition</name></name><argument_list>(<argument><expr><name><name>DateTickMarkPosition</name><operator>.</operator><name>MIDDLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setRange</name></name><argument_list>(<argument><expr><name>d1</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>psd</name> <operator>=</operator> <call><name><name>axis</name><operator>.</operator><name>previousStandardDate</name></name><argument_list>(<argument><expr><name>d1</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>nsd</name> <operator>=</operator> <call><name><name>unit</name><operator>.</operator><name>addToDate</name></name><argument_list>(<argument><expr><name>psd</name></expr></argument>, <argument><expr><call><name><name>TimeZone</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>psd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>d1</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>nsd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <call><name><name>d1</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setRange</name></name><argument_list>(<argument><expr><name>d2</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>psd</name> <operator>=</operator> <call><name><name>axis</name><operator>.</operator><name>previousStandardDate</name></name><argument_list>(<argument><expr><name>d2</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>nsd</name> <operator>=</operator> <call><name><name>unit</name><operator>.</operator><name>addToDate</name></name><argument_list>(<argument><expr><name>psd</name></expr></argument>, <argument><expr><call><name><name>TimeZone</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>psd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>d2</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>nsd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <call><name><name>d2</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setRange</name></name><argument_list>(<argument><expr><name>d3</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>psd</name> <operator>=</operator> <call><name><name>axis</name><operator>.</operator><name>previousStandardDate</name></name><argument_list>(<argument><expr><name>d3</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>nsd</name> <operator>=</operator> <call><name><name>unit</name><operator>.</operator><name>addToDate</name></name><argument_list>(<argument><expr><name>psd</name></expr></argument>, <argument><expr><call><name><name>TimeZone</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>psd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>d3</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>nsd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <call><name><name>d3</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// END: check d3 and d4</comment>
        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setTickMarkPosition</name></name><argument_list>(<argument><expr><name><name>DateTickMarkPosition</name><operator>.</operator><name>END</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setRange</name></name><argument_list>(<argument><expr><name>d3</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>psd</name> <operator>=</operator> <call><name><name>axis</name><operator>.</operator><name>previousStandardDate</name></name><argument_list>(<argument><expr><name>d3</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>nsd</name> <operator>=</operator> <call><name><name>unit</name><operator>.</operator><name>addToDate</name></name><argument_list>(<argument><expr><name>psd</name></expr></argument>, <argument><expr><call><name><name>TimeZone</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>psd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>d3</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>nsd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <call><name><name>d3</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setRange</name></name><argument_list>(<argument><expr><name>d4</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>psd</name> <operator>=</operator> <call><name><name>axis</name><operator>.</operator><name>previousStandardDate</name></name><argument_list>(<argument><expr><name>d4</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>nsd</name> <operator>=</operator> <call><name><name>unit</name><operator>.</operator><name>addToDate</name></name><argument_list>(<argument><expr><name>psd</name></expr></argument>, <argument><expr><call><name><name>TimeZone</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>psd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>d4</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>nsd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <call><name><name>d4</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * A basic check for the testPreviousStandardDate() method when the
     * tick unit is 1 millisecond.
     */</comment>
    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testPreviousStandardDateMillisecondA</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>MyDateAxis</name></type> <name>axis</name> <init>= <expr><operator>new</operator> <call><name>MyDateAxis</name><argument_list>(<argument><expr><literal type="string">"Millisecond"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Millisecond</name></type> <name>m0</name> <init>= <expr><operator>new</operator> <call><name>Millisecond</name><argument_list>(<argument><expr><literal type="number">458</literal></expr></argument>, <argument><expr><literal type="number">58</literal></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">2007</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Millisecond</name></type> <name>m1</name> <init>= <expr><operator>new</operator> <call><name>Millisecond</name><argument_list>(<argument><expr><literal type="number">459</literal></expr></argument>, <argument><expr><literal type="number">58</literal></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">2007</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>Date</name></type> <name>d0</name> <init>= <expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><call><name><name>m0</name><operator>.</operator><name>getFirstMillisecond</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Date</name></type> <name>end</name> <init>= <expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><call><name><name>m1</name><operator>.</operator><name>getLastMillisecond</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>DateTickUnit</name></type> <name>unit</name> <init>= <expr><operator>new</operator> <call><name>DateTickUnit</name><argument_list>(<argument><expr><name><name>DateTickUnitType</name><operator>.</operator><name>MILLISECOND</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setTickUnit</name></name><argument_list>(<argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// START: check d0</comment>
        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setTickMarkPosition</name></name><argument_list>(<argument><expr><name><name>DateTickMarkPosition</name><operator>.</operator><name>START</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setRange</name></name><argument_list>(<argument><expr><name>d0</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Date</name></type> <name>psd</name> <init>= <expr><call><name><name>axis</name><operator>.</operator><name>previousStandardDate</name></name><argument_list>(<argument><expr><name>d0</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Date</name></type> <name>nsd</name> <init>= <expr><call><name><name>unit</name><operator>.</operator><name>addToDate</name></name><argument_list>(<argument><expr><name>psd</name></expr></argument>, <argument><expr><call><name><name>TimeZone</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>psd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>d0</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>nsd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <call><name><name>d0</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// MIDDLE: check d0</comment>
        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setTickMarkPosition</name></name><argument_list>(<argument><expr><name><name>DateTickMarkPosition</name><operator>.</operator><name>MIDDLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setRange</name></name><argument_list>(<argument><expr><name>d0</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>psd</name> <operator>=</operator> <call><name><name>axis</name><operator>.</operator><name>previousStandardDate</name></name><argument_list>(<argument><expr><name>d0</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>nsd</name> <operator>=</operator> <call><name><name>unit</name><operator>.</operator><name>addToDate</name></name><argument_list>(<argument><expr><name>psd</name></expr></argument>, <argument><expr><call><name><name>TimeZone</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>psd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>d0</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>nsd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <call><name><name>d0</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// END: check d0</comment>
        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setTickMarkPosition</name></name><argument_list>(<argument><expr><name><name>DateTickMarkPosition</name><operator>.</operator><name>END</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setRange</name></name><argument_list>(<argument><expr><name>d0</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>psd</name> <operator>=</operator> <call><name><name>axis</name><operator>.</operator><name>previousStandardDate</name></name><argument_list>(<argument><expr><name>d0</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>nsd</name> <operator>=</operator> <call><name><name>unit</name><operator>.</operator><name>addToDate</name></name><argument_list>(<argument><expr><name>psd</name></expr></argument>, <argument><expr><call><name><name>TimeZone</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>psd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>d0</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>nsd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <call><name><name>d0</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * A basic check for the testPreviousStandardDate() method when the
     * tick unit is 10 milliseconds (just for the sake of having a multiple).
     */</comment>
    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testPreviousStandardDateMillisecondB</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>MyDateAxis</name></type> <name>axis</name> <init>= <expr><operator>new</operator> <call><name>MyDateAxis</name><argument_list>(<argument><expr><literal type="string">"Millisecond"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Millisecond</name></type> <name>m0</name> <init>= <expr><operator>new</operator> <call><name>Millisecond</name><argument_list>(<argument><expr><literal type="number">458</literal></expr></argument>, <argument><expr><literal type="number">58</literal></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">2007</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Millisecond</name></type> <name>m1</name> <init>= <expr><operator>new</operator> <call><name>Millisecond</name><argument_list>(<argument><expr><literal type="number">459</literal></expr></argument>, <argument><expr><literal type="number">58</literal></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">2007</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>Date</name></type> <name>d0</name> <init>= <expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><call><name><name>m0</name><operator>.</operator><name>getFirstMillisecond</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Date</name></type> <name>end</name> <init>= <expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><call><name><name>m1</name><operator>.</operator><name>getLastMillisecond</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>DateTickUnit</name></type> <name>unit</name> <init>= <expr><operator>new</operator> <call><name>DateTickUnit</name><argument_list>(<argument><expr><name><name>DateTickUnitType</name><operator>.</operator><name>MILLISECOND</name></name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setTickUnit</name></name><argument_list>(<argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// START: check d0</comment>
        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setTickMarkPosition</name></name><argument_list>(<argument><expr><name><name>DateTickMarkPosition</name><operator>.</operator><name>START</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setRange</name></name><argument_list>(<argument><expr><name>d0</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Date</name></type> <name>psd</name> <init>= <expr><call><name><name>axis</name><operator>.</operator><name>previousStandardDate</name></name><argument_list>(<argument><expr><name>d0</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Date</name></type> <name>nsd</name> <init>= <expr><call><name><name>unit</name><operator>.</operator><name>addToDate</name></name><argument_list>(<argument><expr><name>psd</name></expr></argument>, <argument><expr><call><name><name>TimeZone</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>psd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>d0</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>nsd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <call><name><name>d0</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// MIDDLE: check d0</comment>
        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setTickMarkPosition</name></name><argument_list>(<argument><expr><name><name>DateTickMarkPosition</name><operator>.</operator><name>MIDDLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setRange</name></name><argument_list>(<argument><expr><name>d0</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>psd</name> <operator>=</operator> <call><name><name>axis</name><operator>.</operator><name>previousStandardDate</name></name><argument_list>(<argument><expr><name>d0</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>nsd</name> <operator>=</operator> <call><name><name>unit</name><operator>.</operator><name>addToDate</name></name><argument_list>(<argument><expr><name>psd</name></expr></argument>, <argument><expr><call><name><name>TimeZone</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>psd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>d0</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>nsd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <call><name><name>d0</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// END: check d0</comment>
        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setTickMarkPosition</name></name><argument_list>(<argument><expr><name><name>DateTickMarkPosition</name><operator>.</operator><name>END</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setRange</name></name><argument_list>(<argument><expr><name>d0</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>psd</name> <operator>=</operator> <call><name><name>axis</name><operator>.</operator><name>previousStandardDate</name></name><argument_list>(<argument><expr><name>d0</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>nsd</name> <operator>=</operator> <call><name><name>unit</name><operator>.</operator><name>addToDate</name></name><argument_list>(<argument><expr><name>psd</name></expr></argument>, <argument><expr><call><name><name>TimeZone</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>psd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>d0</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>nsd</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <call><name><name>d0</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * A test to reproduce bug 2201869.
     */</comment>
    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testBug2201869</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>TimeZone</name></type> <name>tz</name> <init>= <expr><call><name><name>TimeZone</name><operator>.</operator><name>getTimeZone</name></name><argument_list>(<argument><expr><literal type="string">"GMT"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>GregorianCalendar</name></type> <name>c</name> <init>= <expr><operator>new</operator> <call><name>GregorianCalendar</name><argument_list>(<argument><expr><name>tz</name></expr></argument>, <argument><expr><name><name>Locale</name><operator>.</operator><name>UK</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>DateAxis</name></type> <name>axis</name> <init>= <expr><operator>new</operator> <call><name>DateAxis</name><argument_list>(<argument><expr><literal type="string">"Date"</literal></expr></argument>, <argument><expr><name>tz</name></expr></argument>, <argument><expr><name><name>Locale</name><operator>.</operator><name>UK</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>SimpleDateFormat</name></type> <name>sdf</name> <init>= <expr><operator>new</operator> <call><name>SimpleDateFormat</name><argument_list>(<argument><expr><literal type="string">"d-MMM-yyyy"</literal></expr></argument>, <argument><expr><name><name>Locale</name><operator>.</operator><name>UK</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>sdf</name><operator>.</operator><name>setCalendar</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setTickUnit</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>DateTickUnit</name><argument_list>(<argument><expr><name><name>DateTickUnitType</name><operator>.</operator><name>MONTH</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>sdf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Day</name></type> <name>d1</name> <init>= <expr><operator>new</operator> <call><name>Day</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">2008</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>d1</name><operator>.</operator><name>peg</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Day</name></type> <name>d2</name> <init>= <expr><operator>new</operator> <call><name>Day</name><argument_list>(<argument><expr><literal type="number">30</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">2008</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>d2</name><operator>.</operator><name>peg</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setRange</name></name><argument_list>(<argument><expr><call><name><name>d1</name><operator>.</operator><name>getStart</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>d2</name><operator>.</operator><name>getEnd</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>BufferedImage</name></type> <name>image</name> <init>= <expr><operator>new</operator> <call><name>BufferedImage</name><argument_list>(<argument><expr><literal type="number">200</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>,
                <argument><expr><name><name>BufferedImage</name><operator>.</operator><name>TYPE_INT_ARGB</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Graphics2D</name></type> <name>g2</name> <init>= <expr><call><name><name>image</name><operator>.</operator><name>createGraphics</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Rectangle2D</name></type> <name>area</name> <init>= <expr><operator>new</operator> <call><name><name>Rectangle2D</name><operator>.</operator><name>Double</name></name><argument_list>(<argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><literal type="number">200</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setTickMarkPosition</name></name><argument_list>(<argument><expr><name><name>DateTickMarkPosition</name><operator>.</operator><name>END</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>List</name></type> <name>ticks</name> <init>= <expr><call><name><name>axis</name><operator>.</operator><name>refreshTicks</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>AxisState</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>area</name></expr></argument>,
                <argument><expr><name><name>RectangleEdge</name><operator>.</operator><name>BOTTOM</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><call><name><name>ticks</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>DateTick</name></type> <name>t1</name> <init>= <expr><operator>(</operator><name>DateTick</name><operator>)</operator> <call><name><name>ticks</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"31-Mar-2008"</literal></expr></argument>, <argument><expr><call><name><name>t1</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>DateTick</name></type> <name>t2</name> <init>= <expr><operator>(</operator><name>DateTick</name><operator>)</operator> <call><name><name>ticks</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"30-Apr-2008"</literal></expr></argument>, <argument><expr><call><name><name>t2</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>DateTick</name></type> <name>t3</name> <init>= <expr><operator>(</operator><name>DateTick</name><operator>)</operator> <call><name><name>ticks</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"31-May-2008"</literal></expr></argument>, <argument><expr><call><name><name>t3</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// now repeat for a vertical axis</comment>
        <expr_stmt><expr><name>ticks</name> <operator>=</operator> <call><name><name>axis</name><operator>.</operator><name>refreshTicks</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>AxisState</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>area</name></expr></argument>,
                <argument><expr><name><name>RectangleEdge</name><operator>.</operator><name>LEFT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><call><name><name>ticks</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>t1</name> <operator>=</operator> <operator>(</operator><name>DateTick</name><operator>)</operator> <call><name><name>ticks</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"31-Mar-2008"</literal></expr></argument>, <argument><expr><call><name><name>t1</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>t2</name> <operator>=</operator> <operator>(</operator><name>DateTick</name><operator>)</operator> <call><name><name>ticks</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"30-Apr-2008"</literal></expr></argument>, <argument><expr><call><name><name>t2</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>t3</name> <operator>=</operator> <operator>(</operator><name>DateTick</name><operator>)</operator> <call><name><name>ticks</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"31-May-2008"</literal></expr></argument>, <argument><expr><call><name><name>t3</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testBug3484403</name><parameter_list>()</parameter_list> <block>{<block_content>

        <decl_stmt><decl><type><specifier>final</specifier> <name><name>long</name><index>[]</index></name></type> <name>dates</name> <init>=
            <expr><block>{ <expr><literal type="number">1304892000000L</literal></expr>, <expr><literal type="number">1304632800000L</literal></expr>, <expr><literal type="number">1304546400000L</literal></expr>, <expr><literal type="number">1304460000000L</literal></expr>,
              <expr><literal type="number">1304373600000L</literal></expr>, <expr><literal type="number">1304287200000L</literal></expr>, <expr><literal type="number">1320015600000L</literal></expr>, <expr><literal type="number">1309384800000L</literal></expr>,
              <expr><literal type="number">1319752800000L</literal></expr>, <expr><literal type="number">1319666400000L</literal></expr>, <expr><literal type="number">1319580000000L</literal></expr>, <expr><literal type="number">1319493600000L</literal></expr> }</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>Arrays</name><operator>.</operator><name>sort</name></name><argument_list>(<argument><expr><name>dates</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>DateAxis</name></type> <name>axis</name> <init>= <expr><operator>new</operator> <call><name>DateAxis</name><argument_list>(<argument><expr><literal type="string">"Date"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// set start and end date</comment>
        <decl_stmt><decl><type><name>Date</name></type> <name>start</name> <init>= <expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><name><name>dates</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Date</name></type> <name>end</name> <init>= <expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><name><name>dates</name><index>[<expr><name><name>dates</name><operator>.</operator><name>length</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setMinimumDate</name></name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setMaximumDate</name></name><argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>BufferedImage</name></type> <name>image</name> <init>= <expr><operator>new</operator> <call><name>BufferedImage</name><argument_list>(<argument><expr><literal type="number">200</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>,
                <argument><expr><name><name>BufferedImage</name><operator>.</operator><name>TYPE_INT_ARGB</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Graphics2D</name></type> <name>g2</name> <init>= <expr><call><name><name>image</name><operator>.</operator><name>createGraphics</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Rectangle2D</name></type> <name>area</name> <init>= <expr><operator>new</operator> <call><name><name>Rectangle2D</name><operator>.</operator><name>Double</name></name><argument_list>(<argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><literal type="number">500</literal></expr></argument>, <argument><expr><literal type="number">200</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// if the bug is still present, this leads to an endless loop</comment>
        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>refreshTicks</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>AxisState</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>area</name></expr></argument>, <argument><expr><name><name>RectangleEdge</name><operator>.</operator><name>BOTTOM</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>
    
    <comment type="block" format="javadoc">/**
     * Test for bug #25 at Github.
     * 
     * https://github.com/jfree/jfreechart/issues/25
     * 
     */</comment>
    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testBug25</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>TimeZone</name></type> <name>tz</name> <init>= <expr><call><name><name>TimeZone</name><operator>.</operator><name>getTimeZone</name></name><argument_list>(<argument><expr><literal type="string">"GMT"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>GregorianCalendar</name></type> <name>cal</name> <init>= <expr><operator>new</operator> <call><name>GregorianCalendar</name><argument_list>(<argument><expr><name>tz</name></expr></argument>, <argument><expr><name><name>Locale</name><operator>.</operator><name>UK</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        
        <decl_stmt><decl><type><name>MyDateAxis</name></type> <name>axis</name> <init>= <expr><operator>new</operator> <call><name>MyDateAxis</name><argument_list>(<argument><expr><literal type="string">"25"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setTimeZone</name></name><argument_list>(<argument><expr><name>tz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <comment type="line">// YEAR</comment>
        <decl_stmt><decl><type><name>DateTickUnit</name></type> <name>ydtu</name> <init>= <expr><operator>new</operator> <call><name>DateTickUnit</name><argument_list>(<argument><expr><name><name>DateTickUnitType</name><operator>.</operator><name>YEAR</name></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Year</name></type> <name>y</name> <init>= <expr><operator>new</operator> <call><name>Year</name><argument_list>(<argument><expr><literal type="number">2015</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>ymillis</name> <init>= <expr><call><name><name>y</name><operator>.</operator><name>getFirstMillisecond</name></name><argument_list>(<argument><expr><name>cal</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="line">// 1420070400000L</comment>
        <decl_stmt><decl><type><name>Date</name></type> <name>yprev</name> <init>= <expr><call><name><name>axis</name><operator>.</operator><name>previousStandardDate</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><name>ymillis</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ydtu</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Year</name><argument_list>(<argument><expr><literal type="number">2010</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getFirstMillisecond</name><argument_list>(<argument><expr><name>cal</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>yprev</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <comment type="line">// MONTH </comment>
        <decl_stmt><decl><type><name>DateTickUnit</name></type> <name>mdtu</name> <init>= <expr><operator>new</operator> <call><name>DateTickUnit</name><argument_list>(<argument><expr><name><name>DateTickUnitType</name><operator>.</operator><name>MONTH</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Month</name></type> <name>m</name> <init>= <expr><operator>new</operator> <call><name>Month</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><literal type="number">2016</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>mmillis</name> <init>= <expr><call><name><name>m</name><operator>.</operator><name>getFirstMillisecond</name></name><argument_list>(<argument><expr><name>cal</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
        <decl_stmt><decl><type><name>Date</name></type> <name>mprev</name> <init>= <expr><call><name><name>axis</name><operator>.</operator><name>previousStandardDate</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><name>mmillis</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>mdtu</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Month</name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="number">2016</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getFirstMillisecond</name><argument_list>(<argument><expr><name>cal</name></expr></argument>)</argument_list></call></expr></argument>, 
                <argument><expr><call><name><name>mprev</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <comment type="line">// DAY</comment>
        <decl_stmt><decl><type><name>DateTickUnit</name></type> <name>ddtu</name> <init>= <expr><operator>new</operator> <call><name>DateTickUnit</name><argument_list>(<argument><expr><name><name>DateTickUnitType</name><operator>.</operator><name>DAY</name></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Day</name></type> <name>d</name> <init>= <expr><operator>new</operator> <call><name>Day</name><argument_list>(<argument><expr><literal type="number">14</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2016</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>dmillis</name> <init>= <expr><call><name><name>d</name><operator>.</operator><name>getFirstMillisecond</name></name><argument_list>(<argument><expr><name>cal</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
        <decl_stmt><decl><type><name>Date</name></type> <name>dprev</name> <init>= <expr><call><name><name>axis</name><operator>.</operator><name>previousStandardDate</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><name>dmillis</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ddtu</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Day</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2016</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getFirstMillisecond</name><argument_list>(<argument><expr><name>cal</name></expr></argument>)</argument_list></call></expr></argument>, 
                <argument><expr><call><name><name>dprev</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <comment type="line">// HOUR</comment>
        <decl_stmt><decl><type><name>DateTickUnit</name></type> <name>hdtu</name> <init>= <expr><operator>new</operator> <call><name>DateTickUnit</name><argument_list>(<argument><expr><name><name>DateTickUnitType</name><operator>.</operator><name>HOUR</name></name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Hour</name></type> <name>h</name> <init>= <expr><operator>new</operator> <call><name>Hour</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">2016</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>hmillis</name> <init>= <expr><call><name><name>h</name><operator>.</operator><name>getFirstMillisecond</name></name><argument_list>(<argument><expr><name>cal</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
        <decl_stmt><decl><type><name>Date</name></type> <name>hprev</name> <init>= <expr><call><name><name>axis</name><operator>.</operator><name>previousStandardDate</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><name>hmillis</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>hdtu</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Hour</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">2016</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getFirstMillisecond</name><argument_list>(<argument><expr><name>cal</name></expr></argument>)</argument_list></call></expr></argument>, 
                <argument><expr><call><name><name>hprev</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <comment type="line">// MINUTE</comment>
        <decl_stmt><decl><type><name>DateTickUnit</name></type> <name>mindtu</name> <init>= <expr><operator>new</operator> <call><name>DateTickUnit</name><argument_list>(<argument><expr><name><name>DateTickUnitType</name><operator>.</operator><name>MINUTE</name></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Minute</name></type> <name>min</name> <init>= <expr><operator>new</operator> <call><name>Minute</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">2016</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>minmillis</name> <init>= <expr><call><name><name>min</name><operator>.</operator><name>getFirstMillisecond</name></name><argument_list>(<argument><expr><name>cal</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="line">// 1472040600000L GMT</comment>
        <decl_stmt><decl><type><name>Date</name></type> <name>minprev</name> <init>= <expr><call><name><name>axis</name><operator>.</operator><name>previousStandardDate</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><name>minmillis</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>mindtu</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1472040600000L</literal> <operator>-</operator> <literal type="number">5</literal> <operator>*</operator> <literal type="number">60</literal> <operator>*</operator> <literal type="number">1000L</literal></expr></argument>, <argument><expr><call><name><name>minprev</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <comment type="line">// SECOND </comment>
        <decl_stmt><decl><type><name>DateTickUnit</name></type> <name>sdtu</name> <init>= <expr><operator>new</operator> <call><name>DateTickUnit</name><argument_list>(<argument><expr><name><name>DateTickUnitType</name><operator>.</operator><name>SECOND</name></name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Second</name></type> <name>s</name> <init>= <expr><operator>new</operator> <call><name>Second</name><argument_list>(<argument><expr><literal type="number">50</literal></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>, <argument><expr><literal type="number">18</literal></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">2016</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>smillis</name> <init>= <expr><call><name><name>s</name><operator>.</operator><name>getFirstMillisecond</name></name><argument_list>(<argument><expr><name>cal</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
        <decl_stmt><decl><type><name>Date</name></type> <name>sprev</name> <init>= <expr><call><name><name>axis</name><operator>.</operator><name>previousStandardDate</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><name>smillis</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>sdtu</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Second</name><argument_list>(<argument><expr><literal type="number">40</literal></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>, <argument><expr><literal type="number">18</literal></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">2016</literal></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>getFirstMillisecond</name><argument_list>(<argument><expr><name>cal</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>sprev</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <comment type="line">// MILLISECOND</comment>
        <decl_stmt><decl><type><name>DateTickUnit</name></type> <name>msdtu</name> <init>= <expr><operator>new</operator> <call><name>DateTickUnit</name><argument_list>(<argument><expr><name><name>DateTickUnitType</name><operator>.</operator><name>MILLISECOND</name></name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Millisecond</name></type> <name>ms</name> <init>= <expr><operator>new</operator> <call><name>Millisecond</name><argument_list>(<argument><expr><literal type="number">500</literal></expr></argument>, <argument><expr><literal type="number">50</literal></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>, <argument><expr><literal type="number">18</literal></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">2016</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>msmillis</name> <init>= <expr><call><name><name>ms</name><operator>.</operator><name>getFirstMillisecond</name></name><argument_list>(<argument><expr><name>cal</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
        <decl_stmt><decl><type><name>Date</name></type> <name>msprev</name> <init>= <expr><call><name><name>axis</name><operator>.</operator><name>previousStandardDate</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><name>msmillis</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>msdtu</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Millisecond</name><argument_list>(<argument><expr><literal type="number">490</literal></expr></argument>, <argument><expr><literal type="number">50</literal></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>, <argument><expr><literal type="number">18</literal></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">2016</literal></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>getFirstMillisecond</name><argument_list>(<argument><expr><name>cal</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>msprev</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
    </block_content>}</block></function>
    
}</block></class>
</unit>

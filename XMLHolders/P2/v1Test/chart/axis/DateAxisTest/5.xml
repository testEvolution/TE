<unit><function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testSetRange</name><parameter_list>()</parameter_list> <block>{<block_content>

        <decl_stmt><decl><type><name>DateAxis</name></type> <name>axis</name> <init>= <expr><operator>new</operator> <call><name>DateAxis</name><argument_list>(<argument><expr><literal type="string">"Test Axis"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Calendar</name></type> <name>calendar</name> <init>= <expr><call><name><name>Calendar</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>calendar</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="number">1999</literal></expr></argument>, <argument><expr><name><name>Calendar</name><operator>.</operator><name>JANUARY</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Date</name></type> <name>d1</name> <init>= <expr><call><name><name>calendar</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>calendar</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="number">1999</literal></expr></argument>, <argument><expr><name><name>Calendar</name><operator>.</operator><name>JANUARY</name></name></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Date</name></type> <name>d2</name> <init>= <expr><call><name><name>calendar</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>axis</name><operator>.</operator><name>setRange</name></name><argument_list>(<argument><expr><name>d1</name></expr></argument>, <argument><expr><name>d2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>DateRange</name></type> <name>range</name> <init>= <expr><operator>(</operator><name>DateRange</name><operator>)</operator> <call><name><name>axis</name><operator>.</operator><name>getRange</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>d1</name></expr></argument>, <argument><expr><call><name><name>range</name><operator>.</operator><name>getLowerDate</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>d2</name></expr></argument>, <argument><expr><call><name><name>range</name><operator>.</operator><name>getUpperDate</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></function>

    </unit>
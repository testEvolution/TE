<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="H:\Research\TestEvolution\DataAnalysis\jfreechart-1.5.2\jfreechart-1.5.2\src\test\java\org\jfree\chart\renderer\RendererUtilsTest.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2020, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2.1 of the License, or
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301,
 * USA.
 *
 * [Oracle and Java are registered trademarks of Oracle and/or its affiliates. 
 * Other names may be trademarks of their respective owners.]
 *
 * ----------------------
 * RendererUtilsTest.java
 * ----------------------
 * (C) Copyright 2007-2020, by Object Refinery Limited and Contributors.
 *
 * Original Author:  David Gilbert (for Object Refinery Limited);
 * Contributor(s):   -;
 *
 * Changes
 * -------
 * 19-Apr-2007 : Version 1 (DG);
 * 23-Aug-2012 : Added test3561093() (DG);
 *
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>jfree</name><operator>.</operator><name>chart</name><operator>.</operator><name>renderer</name></name>;</package>

<import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>jupiter</name><operator>.</operator><name>api</name><operator>.</operator><name>Assertions</name><operator>.</operator><name>assertEquals</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>jfree</name><operator>.</operator><name>data</name><operator>.</operator><name>DomainOrder</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>jfree</name><operator>.</operator><name>data</name><operator>.</operator><name>xy</name><operator>.</operator><name>DefaultXYDataset</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>jfree</name><operator>.</operator><name>data</name><operator>.</operator><name>xy</name><operator>.</operator><name>XYSeries</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>jfree</name><operator>.</operator><name>data</name><operator>.</operator><name>xy</name><operator>.</operator><name>XYSeriesCollection</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>jupiter</name><operator>.</operator><name>api</name><operator>.</operator><name>Test</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Some checks for the {@link RendererUtils} class.
 */</comment>
<class><specifier>public</specifier> class <name>RendererUtilsTest</name> <block>{

    <comment type="block" format="javadoc">/**
     * Some checks for the findLiveItemsLowerBound() method when the dataset is
     * unordered.
     */</comment>
    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testFindLiveItemsLowerBound_Unordered</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>DefaultXYDataset</name></type> <name>d</name> <init>= <expr><operator>new</operator> <call><name>DefaultXYDataset</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// check a series with no items</comment>
        <expr_stmt><expr><call><name><name>d</name><operator>.</operator><name>addSeries</name></name><argument_list>(<argument><expr><literal type="string">"S1"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>double</name><index>[]</index><index>[]</index></name> <block>{<expr><block>{}</block></expr>, <expr><block>{}</block></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsLowerBound</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">10.0</literal></expr></argument>,
                <argument><expr><literal type="number">11.0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// check a series with one item</comment>
        <expr_stmt><expr><call><name><name>d</name><operator>.</operator><name>addSeries</name></name><argument_list>(<argument><expr><literal type="string">"S2"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>double</name><index>[]</index><index>[]</index></name> <block>{<expr><block>{<expr><literal type="number">0.0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">9.9</literal></expr>}</block></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsLowerBound</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>,
                <argument><expr><literal type="number">1.1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsLowerBound</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2.0</literal></expr></argument>,
                <argument><expr><literal type="number">3.3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// check a series with two items</comment>
        <expr_stmt><expr><call><name><name>d</name><operator>.</operator><name>addSeries</name></name><argument_list>(<argument><expr><literal type="string">"S3"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>double</name><index>[]</index><index>[]</index></name> <block>{<expr><block>{<expr><literal type="number">0.0</literal></expr>, <expr><literal type="number">1.0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">9.9</literal></expr>, <expr><literal type="number">9.9</literal></expr>}</block></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsLowerBound</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>,
                <argument><expr><literal type="number">1.1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsLowerBound</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>,
                <argument><expr><literal type="number">2.2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsLowerBound</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2.0</literal></expr></argument>,
                <argument><expr><literal type="number">3.3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsLowerBound</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3.0</literal></expr></argument>,
                <argument><expr><literal type="number">4.4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// check a series with three items</comment>
        <expr_stmt><expr><call><name><name>d</name><operator>.</operator><name>addSeries</name></name><argument_list>(<argument><expr><literal type="string">"S4"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>double</name><index>[]</index><index>[]</index></name> <block>{<expr><block>{<expr><literal type="number">1.0</literal></expr>, <expr><literal type="number">2.0</literal></expr>, <expr><literal type="number">1.5</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">9.9</literal></expr>, <expr><literal type="number">9.9</literal></expr>, <expr><literal type="number">9.9</literal></expr>}</block></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsLowerBound</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>,
                <argument><expr><literal type="number">1.1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsLowerBound</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>,
                <argument><expr><literal type="number">2.2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsLowerBound</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">2.0</literal></expr></argument>,
                <argument><expr><literal type="number">3.3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsLowerBound</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">3.0</literal></expr></argument>,
                <argument><expr><literal type="number">4.4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// check a series with four items</comment>
        <expr_stmt><expr><call><name><name>d</name><operator>.</operator><name>addSeries</name></name><argument_list>(<argument><expr><literal type="string">"S5"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>double</name><index>[]</index><index>[]</index></name> <block>{<expr><block>{<expr><literal type="number">1.0</literal></expr>, <expr><literal type="number">2.0</literal></expr>, <expr><literal type="number">1.5</literal></expr>, <expr><literal type="number">1.8</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">9.9</literal></expr>, <expr><literal type="number">9.9</literal></expr>,
                <expr><literal type="number">9.9</literal></expr>, <expr><literal type="number">9.9</literal></expr>}</block></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsLowerBound</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>,
                <argument><expr><literal type="number">1.1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsLowerBound</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>,
                <argument><expr><literal type="number">2.2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsLowerBound</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">2.0</literal></expr></argument>,
                <argument><expr><literal type="number">3.3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsLowerBound</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">3.0</literal></expr></argument>,
                <argument><expr><literal type="number">4.4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsLowerBound</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4.0</literal></expr></argument>,
                <argument><expr><literal type="number">5.5</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Some checks for the findLiveItemsLowerBound() method when the dataset is
     * ASCENDING.
     */</comment>
    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testFindLiveItemsLowerBound_Ascending</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>DefaultXYDataset</name></type> <name>d</name> <init>= <expr><operator>new</operator> <class><super><name>DefaultXYDataset</name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <type><specifier>public</specifier> <name>DomainOrder</name></type> <name>getDomainOrder</name><parameter_list>()</parameter_list> <block>{<block_content>
                <comment type="line">// we're doing this for testing only, and make sure that we</comment>
                <comment type="line">// only add data in ascending order by x-value</comment>
                <return>return <expr><name><name>DomainOrder</name><operator>.</operator><name>ASCENDING</name></name></expr>;</return>
            </block_content>}</block></function>
        }</block></class></expr></init></decl>;</decl_stmt>
        <comment type="line">// check a series with no items</comment>
        <expr_stmt><expr><call><name><name>d</name><operator>.</operator><name>addSeries</name></name><argument_list>(<argument><expr><literal type="string">"S1"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>double</name><index>[]</index><index>[]</index></name> <block>{<expr><block>{}</block></expr>, <expr><block>{}</block></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsLowerBound</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">10.0</literal></expr></argument>,
                <argument><expr><literal type="number">11.1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// check a series with one item</comment>
        <expr_stmt><expr><call><name><name>d</name><operator>.</operator><name>addSeries</name></name><argument_list>(<argument><expr><literal type="string">"S2"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>double</name><index>[]</index><index>[]</index></name> <block>{<expr><block>{<expr><literal type="number">1.0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">9.9</literal></expr>}</block></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsLowerBound</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>,
                <argument><expr><literal type="number">1.1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsLowerBound</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2.0</literal></expr></argument>,
                <argument><expr><literal type="number">2.2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// check a series with two items</comment>
        <expr_stmt><expr><call><name><name>d</name><operator>.</operator><name>addSeries</name></name><argument_list>(<argument><expr><literal type="string">"S3"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>double</name><index>[]</index><index>[]</index></name> <block>{<expr><block>{<expr><literal type="number">1.0</literal></expr>, <expr><literal type="number">2.0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">9.9</literal></expr>, <expr><literal type="number">9.9</literal></expr>}</block></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsLowerBound</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>,
                <argument><expr><literal type="number">1.1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsLowerBound</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>,
                <argument><expr><literal type="number">2.2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsLowerBound</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2.0</literal></expr></argument>,
                <argument><expr><literal type="number">3.3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsLowerBound</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3.0</literal></expr></argument>,
                <argument><expr><literal type="number">4.4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// check a series with three items</comment>
        <expr_stmt><expr><call><name><name>d</name><operator>.</operator><name>addSeries</name></name><argument_list>(<argument><expr><literal type="string">"S4"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>double</name><index>[]</index><index>[]</index></name> <block>{<expr><block>{<expr><literal type="number">1.0</literal></expr>, <expr><literal type="number">2.0</literal></expr>, <expr><literal type="number">3.0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">9.9</literal></expr>, <expr><literal type="number">9.9</literal></expr>, <expr><literal type="number">9.9</literal></expr>}</block></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsLowerBound</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>,
                <argument><expr><literal type="number">1.1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsLowerBound</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>,
                <argument><expr><literal type="number">2.2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsLowerBound</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">2.0</literal></expr></argument>,
                <argument><expr><literal type="number">3.3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsLowerBound</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">3.0</literal></expr></argument>,
                <argument><expr><literal type="number">4.4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// check a series with four items</comment>
        <expr_stmt><expr><call><name><name>d</name><operator>.</operator><name>addSeries</name></name><argument_list>(<argument><expr><literal type="string">"S5"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>double</name><index>[]</index><index>[]</index></name> <block>{<expr><block>{<expr><literal type="number">1.0</literal></expr>, <expr><literal type="number">2.0</literal></expr>, <expr><literal type="number">3.0</literal></expr>, <expr><literal type="number">4.0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">9.9</literal></expr>, <expr><literal type="number">9.9</literal></expr>,
                <expr><literal type="number">9.9</literal></expr>, <expr><literal type="number">9.9</literal></expr>}</block></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsLowerBound</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>,
                <argument><expr><literal type="number">1.1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsLowerBound</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>,
                <argument><expr><literal type="number">2.2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsLowerBound</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">2.0</literal></expr></argument>,
                <argument><expr><literal type="number">3.3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsLowerBound</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">3.0</literal></expr></argument>,
                <argument><expr><literal type="number">4.4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsLowerBound</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4.0</literal></expr></argument>,
                <argument><expr><literal type="number">5.5</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// check a series with repeating items</comment>
        <expr_stmt><expr><call><name><name>d</name><operator>.</operator><name>addSeries</name></name><argument_list>(<argument><expr><literal type="string">"S5"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>double</name><index>[]</index><index>[]</index></name> <block>{<expr><block>{<expr><literal type="number">1.0</literal></expr>, <expr><literal type="number">2.0</literal></expr>, <expr><literal type="number">2.0</literal></expr>, <expr><literal type="number">2.0</literal></expr>, <expr><literal type="number">3.0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">9.9</literal></expr>, <expr><literal type="number">9.9</literal></expr>,
                <expr><literal type="number">9.9</literal></expr>, <expr><literal type="number">9.9</literal></expr>, <expr><literal type="number">9.9</literal></expr>}</block></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsLowerBound</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>,
                <argument><expr><literal type="number">4.0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsLowerBound</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>,
                <argument><expr><literal type="number">4.0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsLowerBound</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">2.0</literal></expr></argument>,
                <argument><expr><literal type="number">4.0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsLowerBound</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">3.0</literal></expr></argument>,
                <argument><expr><literal type="number">4.0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Some checks for the findLiveItemsLowerBound() method when the dataset is
     * DESCENDING.
     */</comment>
    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testFindLiveItemsLowerBound_Descending</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>DefaultXYDataset</name></type> <name>d</name> <init>= <expr><operator>new</operator> <class><super><name>DefaultXYDataset</name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <type><specifier>public</specifier> <name>DomainOrder</name></type> <name>getDomainOrder</name><parameter_list>()</parameter_list> <block>{<block_content>
                <comment type="line">// we're doing this for testing only, and make sure that we</comment>
                <comment type="line">// only add data in descending order by x-value</comment>
                <return>return <expr><name><name>DomainOrder</name><operator>.</operator><name>DESCENDING</name></name></expr>;</return>
            </block_content>}</block></function>
        }</block></class></expr></init></decl>;</decl_stmt>
        <comment type="line">// check a series with no items</comment>
        <expr_stmt><expr><call><name><name>d</name><operator>.</operator><name>addSeries</name></name><argument_list>(<argument><expr><literal type="string">"S1"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>double</name><index>[]</index><index>[]</index></name> <block>{<expr><block>{}</block></expr>, <expr><block>{}</block></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsLowerBound</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">10.0</literal></expr></argument>,
                <argument><expr><literal type="number">11.0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// check a series with one item</comment>
        <expr_stmt><expr><call><name><name>d</name><operator>.</operator><name>addSeries</name></name><argument_list>(<argument><expr><literal type="string">"S2"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>double</name><index>[]</index><index>[]</index></name> <block>{<expr><block>{<expr><literal type="number">1.0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">9.9</literal></expr>}</block></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsLowerBound</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>,
                <argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsLowerBound</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1.1</literal></expr></argument>,
                <argument><expr><literal type="number">2.0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// check a series with two items</comment>
        <expr_stmt><expr><call><name><name>d</name><operator>.</operator><name>addSeries</name></name><argument_list>(<argument><expr><literal type="string">"S3"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>double</name><index>[]</index><index>[]</index></name> <block>{<expr><block>{<expr><literal type="number">2.0</literal></expr>, <expr><literal type="number">1.0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">9.9</literal></expr>, <expr><literal type="number">9.9</literal></expr>}</block></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsLowerBound</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0.1</literal></expr></argument>,
                <argument><expr><literal type="number">0.5</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsLowerBound</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0.1</literal></expr></argument>,
                <argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsLowerBound</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1.1</literal></expr></argument>,
                <argument><expr><literal type="number">2.0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsLowerBound</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2.2</literal></expr></argument>,
                <argument><expr><literal type="number">3.0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsLowerBound</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3.3</literal></expr></argument>,
                <argument><expr><literal type="number">4.0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// check a series with three items</comment>
        <expr_stmt><expr><call><name><name>d</name><operator>.</operator><name>addSeries</name></name><argument_list>(<argument><expr><literal type="string">"S4"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>double</name><index>[]</index><index>[]</index></name> <block>{<expr><block>{<expr><literal type="number">3.0</literal></expr>, <expr><literal type="number">2.0</literal></expr>, <expr><literal type="number">1.0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">9.9</literal></expr>, <expr><literal type="number">9.9</literal></expr>, <expr><literal type="number">9.9</literal></expr>}</block></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsLowerBound</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>,
                <argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsLowerBound</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>,
                <argument><expr><literal type="number">2.0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsLowerBound</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">2.0</literal></expr></argument>,
                <argument><expr><literal type="number">3.0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsLowerBound</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">3.0</literal></expr></argument>,
                <argument><expr><literal type="number">4.0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// check a series with four items</comment>
        <expr_stmt><expr><call><name><name>d</name><operator>.</operator><name>addSeries</name></name><argument_list>(<argument><expr><literal type="string">"S5"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>double</name><index>[]</index><index>[]</index></name> <block>{<expr><block>{<expr><literal type="number">4.0</literal></expr>, <expr><literal type="number">3.0</literal></expr>, <expr><literal type="number">2.0</literal></expr>, <expr><literal type="number">1.0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">9.9</literal></expr>, <expr><literal type="number">9.9</literal></expr>,
                <expr><literal type="number">9.9</literal></expr>, <expr><literal type="number">9.9</literal></expr>}</block></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsLowerBound</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0.1</literal></expr></argument>,
                <argument><expr><literal type="number">0.5</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsLowerBound</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0.1</literal></expr></argument>,
                <argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsLowerBound</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">1.1</literal></expr></argument>,
                <argument><expr><literal type="number">2.0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsLowerBound</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">2.2</literal></expr></argument>,
                <argument><expr><literal type="number">3.0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsLowerBound</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">3.3</literal></expr></argument>,
                <argument><expr><literal type="number">4.0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsLowerBound</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4.4</literal></expr></argument>,
                <argument><expr><literal type="number">5.0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// check a series with repeating items</comment>
        <expr_stmt><expr><call><name><name>d</name><operator>.</operator><name>addSeries</name></name><argument_list>(<argument><expr><literal type="string">"S6"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>double</name><index>[]</index><index>[]</index></name> <block>{<expr><block>{<expr><literal type="number">3.0</literal></expr>, <expr><literal type="number">2.0</literal></expr>, <expr><literal type="number">2.0</literal></expr>, <expr><literal type="number">2.0</literal></expr>, <expr><literal type="number">1.0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">9.9</literal></expr>, <expr><literal type="number">9.9</literal></expr>,
                <expr><literal type="number">9.9</literal></expr>, <expr><literal type="number">9.9</literal></expr>, <expr><literal type="number">9.9</literal></expr>}</block></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsLowerBound</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>,
                <argument><expr><literal type="number">3.0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsLowerBound</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>,
                <argument><expr><literal type="number">2.0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsLowerBound</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>,
                <argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsLowerBound</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>,
                <argument><expr><literal type="number">0.5</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Some checks for the findLiveItemsUpperBound() method when the dataset is
     * unordered.
     */</comment>
    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testFindLiveItemsUpperBound_Unordered</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>DefaultXYDataset</name></type> <name>d</name> <init>= <expr><operator>new</operator> <call><name>DefaultXYDataset</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// check a series with no items</comment>
        <expr_stmt><expr><call><name><name>d</name><operator>.</operator><name>addSeries</name></name><argument_list>(<argument><expr><literal type="string">"S1"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>double</name><index>[]</index><index>[]</index></name> <block>{<expr><block>{}</block></expr>, <expr><block>{}</block></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsUpperBound</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">10.0</literal></expr></argument>,
                <argument><expr><literal type="number">11.0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// check a series with one item</comment>
        <expr_stmt><expr><call><name><name>d</name><operator>.</operator><name>addSeries</name></name><argument_list>(<argument><expr><literal type="string">"S2"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>double</name><index>[]</index><index>[]</index></name> <block>{<expr><block>{<expr><literal type="number">1.0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">9.9</literal></expr>}</block></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsUpperBound</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>,
                <argument><expr><literal type="number">1.1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsUpperBound</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2.0</literal></expr></argument>,
                <argument><expr><literal type="number">3.3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// check a series with two items</comment>
        <expr_stmt><expr><call><name><name>d</name><operator>.</operator><name>addSeries</name></name><argument_list>(<argument><expr><literal type="string">"S3"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>double</name><index>[]</index><index>[]</index></name> <block>{<expr><block>{<expr><literal type="number">1.0</literal></expr>, <expr><literal type="number">2.0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">9.9</literal></expr>, <expr><literal type="number">9.9</literal></expr>}</block></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsUpperBound</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>,
                <argument><expr><literal type="number">1.1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsUpperBound</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>,
                <argument><expr><literal type="number">2.2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsUpperBound</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2.0</literal></expr></argument>,
                <argument><expr><literal type="number">3.3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsUpperBound</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3.0</literal></expr></argument>,
                <argument><expr><literal type="number">4.4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// check a series with three items</comment>
        <expr_stmt><expr><call><name><name>d</name><operator>.</operator><name>addSeries</name></name><argument_list>(<argument><expr><literal type="string">"S4"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>double</name><index>[]</index><index>[]</index></name> <block>{<expr><block>{<expr><literal type="number">1.0</literal></expr>, <expr><literal type="number">2.0</literal></expr>, <expr><literal type="number">1.5</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">9.9</literal></expr>, <expr><literal type="number">9.9</literal></expr>, <expr><literal type="number">9.9</literal></expr>}</block></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsUpperBound</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>,
                <argument><expr><literal type="number">1.1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsUpperBound</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>,
                <argument><expr><literal type="number">2.2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsUpperBound</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">2.0</literal></expr></argument>,
                <argument><expr><literal type="number">3.3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsUpperBound</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">3.0</literal></expr></argument>,
                <argument><expr><literal type="number">4.4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// check a series with four items</comment>
        <expr_stmt><expr><call><name><name>d</name><operator>.</operator><name>addSeries</name></name><argument_list>(<argument><expr><literal type="string">"S5"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>double</name><index>[]</index><index>[]</index></name> <block>{<expr><block>{<expr><literal type="number">1.0</literal></expr>, <expr><literal type="number">2.0</literal></expr>, <expr><literal type="number">1.5</literal></expr>, <expr><literal type="number">1.8</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">9.9</literal></expr>, <expr><literal type="number">9.9</literal></expr>,
                <expr><literal type="number">9.9</literal></expr>, <expr><literal type="number">9.9</literal></expr>}</block></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsUpperBound</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>,
                <argument><expr><literal type="number">1.1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsUpperBound</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>,
                <argument><expr><literal type="number">2.2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsUpperBound</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">2.0</literal></expr></argument>,
                <argument><expr><literal type="number">3.3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsUpperBound</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">3.0</literal></expr></argument>,
                <argument><expr><literal type="number">4.4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsUpperBound</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4.0</literal></expr></argument>,
                <argument><expr><literal type="number">5.5</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Some checks for the findLiveItemsUpperBound() method when the dataset is
     * ASCENDING.
     */</comment>
    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testFindLiveItemsUpperBound_Ascending</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>DefaultXYDataset</name></type> <name>d</name> <init>= <expr><operator>new</operator> <class><super><name>DefaultXYDataset</name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <type><specifier>public</specifier> <name>DomainOrder</name></type> <name>getDomainOrder</name><parameter_list>()</parameter_list> <block>{<block_content>
                <comment type="line">// we're doing this for testing only, and make sure that we</comment>
                <comment type="line">// only add data in ascending order by x-value</comment>
                <return>return <expr><name><name>DomainOrder</name><operator>.</operator><name>ASCENDING</name></name></expr>;</return>
            </block_content>}</block></function>
        }</block></class></expr></init></decl>;</decl_stmt>
        <comment type="line">// check a series with no items</comment>
        <expr_stmt><expr><call><name><name>d</name><operator>.</operator><name>addSeries</name></name><argument_list>(<argument><expr><literal type="string">"S1"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>double</name><index>[]</index><index>[]</index></name> <block>{<expr><block>{}</block></expr>, <expr><block>{}</block></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsUpperBound</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">10.0</literal></expr></argument>,
                <argument><expr><literal type="number">11.1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// check a series with one item</comment>
        <expr_stmt><expr><call><name><name>d</name><operator>.</operator><name>addSeries</name></name><argument_list>(<argument><expr><literal type="string">"S2"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>double</name><index>[]</index><index>[]</index></name> <block>{<expr><block>{<expr><literal type="number">1.0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">9.9</literal></expr>}</block></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsUpperBound</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>,
                <argument><expr><literal type="number">1.1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsUpperBound</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2.0</literal></expr></argument>,
                <argument><expr><literal type="number">2.2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// check a series with two items</comment>
        <expr_stmt><expr><call><name><name>d</name><operator>.</operator><name>addSeries</name></name><argument_list>(<argument><expr><literal type="string">"S3"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>double</name><index>[]</index><index>[]</index></name> <block>{<expr><block>{<expr><literal type="number">1.0</literal></expr>, <expr><literal type="number">2.0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">9.9</literal></expr>, <expr><literal type="number">9.9</literal></expr>}</block></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsUpperBound</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>,
                <argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsUpperBound</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>,
                <argument><expr><literal type="number">2.2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsUpperBound</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2.0</literal></expr></argument>,
                <argument><expr><literal type="number">3.3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsUpperBound</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3.0</literal></expr></argument>,
                <argument><expr><literal type="number">4.4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// check a series with three items</comment>
        <expr_stmt><expr><call><name><name>d</name><operator>.</operator><name>addSeries</name></name><argument_list>(<argument><expr><literal type="string">"S4"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>double</name><index>[]</index><index>[]</index></name> <block>{<expr><block>{<expr><literal type="number">1.0</literal></expr>, <expr><literal type="number">2.0</literal></expr>, <expr><literal type="number">3.0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">9.9</literal></expr>, <expr><literal type="number">9.9</literal></expr>, <expr><literal type="number">9.9</literal></expr>}</block></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsUpperBound</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>,
                <argument><expr><literal type="number">1.1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsUpperBound</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>,
                <argument><expr><literal type="number">2.2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsUpperBound</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">2.0</literal></expr></argument>,
                <argument><expr><literal type="number">3.3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsUpperBound</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">3.0</literal></expr></argument>,
                <argument><expr><literal type="number">4.4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// check a series with four items</comment>
        <expr_stmt><expr><call><name><name>d</name><operator>.</operator><name>addSeries</name></name><argument_list>(<argument><expr><literal type="string">"S5"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>double</name><index>[]</index><index>[]</index></name> <block>{<expr><block>{<expr><literal type="number">1.0</literal></expr>, <expr><literal type="number">2.0</literal></expr>, <expr><literal type="number">3.0</literal></expr>, <expr><literal type="number">4.0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">9.9</literal></expr>, <expr><literal type="number">9.9</literal></expr>,
                <expr><literal type="number">9.9</literal></expr>, <expr><literal type="number">9.9</literal></expr>}</block></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsUpperBound</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>,
                <argument><expr><literal type="number">1.1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsUpperBound</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>,
                <argument><expr><literal type="number">2.2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsUpperBound</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">2.0</literal></expr></argument>,
                <argument><expr><literal type="number">3.3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsUpperBound</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">3.0</literal></expr></argument>,
                <argument><expr><literal type="number">4.4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsUpperBound</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4.0</literal></expr></argument>,
                <argument><expr><literal type="number">5.5</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// check a series with repeating items</comment>
        <expr_stmt><expr><call><name><name>d</name><operator>.</operator><name>addSeries</name></name><argument_list>(<argument><expr><literal type="string">"S5"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>double</name><index>[]</index><index>[]</index></name> <block>{<expr><block>{<expr><literal type="number">1.0</literal></expr>, <expr><literal type="number">2.0</literal></expr>, <expr><literal type="number">2.0</literal></expr>, <expr><literal type="number">2.0</literal></expr>, <expr><literal type="number">3.0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">9.9</literal></expr>, <expr><literal type="number">9.9</literal></expr>,
                <expr><literal type="number">9.9</literal></expr>, <expr><literal type="number">9.9</literal></expr>, <expr><literal type="number">9.9</literal></expr>}</block></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsUpperBound</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>,
                <argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsUpperBound</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>,
                <argument><expr><literal type="number">2.0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsUpperBound</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>,
                <argument><expr><literal type="number">3.0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsUpperBound</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>,
                <argument><expr><literal type="number">4.0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Some checks for the findLiveItemsUpperBound() method when the dataset is
     * DESCENDING.
     */</comment>
    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testFindLiveItemsUpperBound_Descending</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>DefaultXYDataset</name></type> <name>d</name> <init>= <expr><operator>new</operator> <class><super><name>DefaultXYDataset</name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <type><specifier>public</specifier> <name>DomainOrder</name></type> <name>getDomainOrder</name><parameter_list>()</parameter_list> <block>{<block_content>
                <comment type="line">// we're doing this for testing only, and make sure that we</comment>
                <comment type="line">// only add data in descending order by x-value</comment>
                <return>return <expr><name><name>DomainOrder</name><operator>.</operator><name>DESCENDING</name></name></expr>;</return>
            </block_content>}</block></function>
        }</block></class></expr></init></decl>;</decl_stmt>
        <comment type="line">// check a series with no items</comment>
        <expr_stmt><expr><call><name><name>d</name><operator>.</operator><name>addSeries</name></name><argument_list>(<argument><expr><literal type="string">"S1"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>double</name><index>[]</index><index>[]</index></name> <block>{<expr><block>{}</block></expr>, <expr><block>{}</block></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsUpperBound</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">10.0</literal></expr></argument>,
                <argument><expr><literal type="number">11.0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// check a series with one item</comment>
        <expr_stmt><expr><call><name><name>d</name><operator>.</operator><name>addSeries</name></name><argument_list>(<argument><expr><literal type="string">"S2"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>double</name><index>[]</index><index>[]</index></name> <block>{<expr><block>{<expr><literal type="number">1.0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">9.9</literal></expr>}</block></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsUpperBound</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>,
                <argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsUpperBound</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1.1</literal></expr></argument>,
                <argument><expr><literal type="number">2.0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// check a series with two items</comment>
        <expr_stmt><expr><call><name><name>d</name><operator>.</operator><name>addSeries</name></name><argument_list>(<argument><expr><literal type="string">"S3"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>double</name><index>[]</index><index>[]</index></name> <block>{<expr><block>{<expr><literal type="number">2.0</literal></expr>, <expr><literal type="number">1.0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">9.9</literal></expr>, <expr><literal type="number">9.9</literal></expr>}</block></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsUpperBound</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0.1</literal></expr></argument>,
                <argument><expr><literal type="number">0.5</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsUpperBound</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0.1</literal></expr></argument>,
                <argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsUpperBound</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1.1</literal></expr></argument>,
                <argument><expr><literal type="number">2.0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsUpperBound</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2.2</literal></expr></argument>,
                <argument><expr><literal type="number">3.0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsUpperBound</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3.3</literal></expr></argument>,
                <argument><expr><literal type="number">4.0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// check a series with three items</comment>
        <expr_stmt><expr><call><name><name>d</name><operator>.</operator><name>addSeries</name></name><argument_list>(<argument><expr><literal type="string">"S4"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>double</name><index>[]</index><index>[]</index></name> <block>{<expr><block>{<expr><literal type="number">3.0</literal></expr>, <expr><literal type="number">2.0</literal></expr>, <expr><literal type="number">1.0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">9.9</literal></expr>, <expr><literal type="number">9.9</literal></expr>, <expr><literal type="number">9.9</literal></expr>}</block></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsUpperBound</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>,
                <argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsUpperBound</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>,
                <argument><expr><literal type="number">2.0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsUpperBound</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">2.0</literal></expr></argument>,
                <argument><expr><literal type="number">3.0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsUpperBound</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">3.0</literal></expr></argument>,
                <argument><expr><literal type="number">4.0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// check a series with four items</comment>
        <expr_stmt><expr><call><name><name>d</name><operator>.</operator><name>addSeries</name></name><argument_list>(<argument><expr><literal type="string">"S5"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>double</name><index>[]</index><index>[]</index></name> <block>{<expr><block>{<expr><literal type="number">4.0</literal></expr>, <expr><literal type="number">3.0</literal></expr>, <expr><literal type="number">2.0</literal></expr>, <expr><literal type="number">1.0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">9.9</literal></expr>, <expr><literal type="number">9.9</literal></expr>,
                <expr><literal type="number">9.9</literal></expr>, <expr><literal type="number">9.9</literal></expr>}</block></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsUpperBound</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0.1</literal></expr></argument>,
                <argument><expr><literal type="number">0.5</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsUpperBound</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0.1</literal></expr></argument>,
                <argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsUpperBound</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">1.1</literal></expr></argument>,
                <argument><expr><literal type="number">2.0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsUpperBound</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">2.2</literal></expr></argument>,
                <argument><expr><literal type="number">3.0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsUpperBound</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">3.3</literal></expr></argument>,
                <argument><expr><literal type="number">4.0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsUpperBound</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4.4</literal></expr></argument>,
                <argument><expr><literal type="number">5.0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// check a series with repeating items</comment>
        <expr_stmt><expr><call><name><name>d</name><operator>.</operator><name>addSeries</name></name><argument_list>(<argument><expr><literal type="string">"S6"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>double</name><index>[]</index><index>[]</index></name> <block>{<expr><block>{<expr><literal type="number">3.0</literal></expr>, <expr><literal type="number">2.0</literal></expr>, <expr><literal type="number">2.0</literal></expr>, <expr><literal type="number">2.0</literal></expr>, <expr><literal type="number">1.0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">9.9</literal></expr>, <expr><literal type="number">9.9</literal></expr>,
                <expr><literal type="number">9.9</literal></expr>, <expr><literal type="number">9.9</literal></expr>, <expr><literal type="number">9.9</literal></expr>}</block></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsUpperBound</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>,
                <argument><expr><literal type="number">5.0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsUpperBound</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>,
                <argument><expr><literal type="number">5.0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsUpperBound</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">2.0</literal></expr></argument>,
                <argument><expr><literal type="number">5.0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsUpperBound</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">3.0</literal></expr></argument>,
                <argument><expr><literal type="number">5.0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Checks the bounds calculation for a series where the x-ordering is not
     * known.  See bug 3561093.
     */</comment>
    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>test3561093</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>XYSeries</name></type> <name>s</name> <init>= <expr><operator>new</operator> <call><name>XYSeries</name><argument_list>(<argument><expr><literal type="string">"S1"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="number">21.0</literal></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="number">2.0</literal></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="number">23.0</literal></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>XYSeriesCollection</name></type> <name>dataset</name> <init>= <expr><operator>new</operator> <call><name>XYSeriesCollection</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>dataset</name><operator>.</operator><name>addSeries</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsLowerBound</name></name><argument_list>(<argument><expr><name>dataset</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, 
                <argument><expr><literal type="number">10.0</literal></expr></argument>, <argument><expr><literal type="number">20.0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsUpperBound</name></name><argument_list>(<argument><expr><name>dataset</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, 
                <argument><expr><literal type="number">10.0</literal></expr></argument>, <argument><expr><literal type="number">20.0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>bounds</name> <init>= <expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItems</name></name><argument_list>(<argument><expr><name>dataset</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">10.0</literal></expr></argument>, <argument><expr><literal type="number">20.0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>bounds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>bounds</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

}</block></class>
</unit>

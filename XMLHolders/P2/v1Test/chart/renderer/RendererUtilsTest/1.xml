<unit><function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testFindLiveItemsLowerBound_Ascending</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>DefaultXYDataset</name></type> <name>d</name> <init>= <expr><operator>new</operator> <class><super><name>DefaultXYDataset</name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <type><specifier>public</specifier> <name>DomainOrder</name></type> <name>getDomainOrder</name><parameter_list>()</parameter_list> <block>{<block_content>
                <comment type="line">// we're doing this for testing only, and make sure that we</comment>
                <comment type="line">// only add data in ascending order by x-value</comment>
                <return>return <expr><name><name>DomainOrder</name><operator>.</operator><name>ASCENDING</name></name></expr>;</return>
            </block_content>}</block></function>
        }</block></class></expr></init></decl>;</decl_stmt>
        <comment type="line">// check a series with no items</comment>
        <expr_stmt><expr><call><name><name>d</name><operator>.</operator><name>addSeries</name></name><argument_list>(<argument><expr><literal type="string">"S1"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>double</name><index>[]</index><index>[]</index></name> <block>{<expr><block>{}</block></expr>, <expr><block>{}</block></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsLowerBound</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">10.0</literal></expr></argument>,
                <argument><expr><literal type="number">11.1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// check a series with one item</comment>
        <expr_stmt><expr><call><name><name>d</name><operator>.</operator><name>addSeries</name></name><argument_list>(<argument><expr><literal type="string">"S2"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>double</name><index>[]</index><index>[]</index></name> <block>{<expr><block>{<expr><literal type="number">1.0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">9.9</literal></expr>}</block></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsLowerBound</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>,
                <argument><expr><literal type="number">1.1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsLowerBound</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2.0</literal></expr></argument>,
                <argument><expr><literal type="number">2.2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// check a series with two items</comment>
        <expr_stmt><expr><call><name><name>d</name><operator>.</operator><name>addSeries</name></name><argument_list>(<argument><expr><literal type="string">"S3"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>double</name><index>[]</index><index>[]</index></name> <block>{<expr><block>{<expr><literal type="number">1.0</literal></expr>, <expr><literal type="number">2.0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">9.9</literal></expr>, <expr><literal type="number">9.9</literal></expr>}</block></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsLowerBound</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>,
                <argument><expr><literal type="number">1.1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsLowerBound</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>,
                <argument><expr><literal type="number">2.2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsLowerBound</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2.0</literal></expr></argument>,
                <argument><expr><literal type="number">3.3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsLowerBound</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3.0</literal></expr></argument>,
                <argument><expr><literal type="number">4.4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// check a series with three items</comment>
        <expr_stmt><expr><call><name><name>d</name><operator>.</operator><name>addSeries</name></name><argument_list>(<argument><expr><literal type="string">"S4"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>double</name><index>[]</index><index>[]</index></name> <block>{<expr><block>{<expr><literal type="number">1.0</literal></expr>, <expr><literal type="number">2.0</literal></expr>, <expr><literal type="number">3.0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">9.9</literal></expr>, <expr><literal type="number">9.9</literal></expr>, <expr><literal type="number">9.9</literal></expr>}</block></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsLowerBound</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>,
                <argument><expr><literal type="number">1.1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsLowerBound</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>,
                <argument><expr><literal type="number">2.2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsLowerBound</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">2.0</literal></expr></argument>,
                <argument><expr><literal type="number">3.3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsLowerBound</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">3.0</literal></expr></argument>,
                <argument><expr><literal type="number">4.4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// check a series with four items</comment>
        <expr_stmt><expr><call><name><name>d</name><operator>.</operator><name>addSeries</name></name><argument_list>(<argument><expr><literal type="string">"S5"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>double</name><index>[]</index><index>[]</index></name> <block>{<expr><block>{<expr><literal type="number">1.0</literal></expr>, <expr><literal type="number">2.0</literal></expr>, <expr><literal type="number">3.0</literal></expr>, <expr><literal type="number">4.0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">9.9</literal></expr>, <expr><literal type="number">9.9</literal></expr>,
                <expr><literal type="number">9.9</literal></expr>, <expr><literal type="number">9.9</literal></expr>}</block></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsLowerBound</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>,
                <argument><expr><literal type="number">1.1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsLowerBound</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>,
                <argument><expr><literal type="number">2.2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsLowerBound</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">2.0</literal></expr></argument>,
                <argument><expr><literal type="number">3.3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsLowerBound</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">3.0</literal></expr></argument>,
                <argument><expr><literal type="number">4.4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsLowerBound</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4.0</literal></expr></argument>,
                <argument><expr><literal type="number">5.5</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// check a series with repeating items</comment>
        <expr_stmt><expr><call><name><name>d</name><operator>.</operator><name>addSeries</name></name><argument_list>(<argument><expr><literal type="string">"S5"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>double</name><index>[]</index><index>[]</index></name> <block>{<expr><block>{<expr><literal type="number">1.0</literal></expr>, <expr><literal type="number">2.0</literal></expr>, <expr><literal type="number">2.0</literal></expr>, <expr><literal type="number">2.0</literal></expr>, <expr><literal type="number">3.0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">9.9</literal></expr>, <expr><literal type="number">9.9</literal></expr>,
                <expr><literal type="number">9.9</literal></expr>, <expr><literal type="number">9.9</literal></expr>, <expr><literal type="number">9.9</literal></expr>}</block></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsLowerBound</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>,
                <argument><expr><literal type="number">4.0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsLowerBound</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>,
                <argument><expr><literal type="number">4.0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsLowerBound</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">2.0</literal></expr></argument>,
                <argument><expr><literal type="number">4.0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><call><name><name>RendererUtils</name><operator>.</operator><name>findLiveItemsLowerBound</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">3.0</literal></expr></argument>,
                <argument><expr><literal type="number">4.0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></function>

    </unit>
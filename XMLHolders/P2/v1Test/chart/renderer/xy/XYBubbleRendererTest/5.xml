<unit><function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testGetLegendItemSeriesIndex</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>DefaultXYZDataset</name></type> <name>d1</name> <init>= <expr><operator>new</operator> <call><name>DefaultXYZDataset</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>double</name><index>[]</index></name></type> <name>x</name> <init>= <expr><block>{<expr><literal type="number">2.1</literal></expr>, <expr><literal type="number">2.3</literal></expr>, <expr><literal type="number">2.3</literal></expr>, <expr><literal type="number">2.2</literal></expr>, <expr><literal type="number">2.2</literal></expr>, <expr><literal type="number">1.8</literal></expr>, <expr><literal type="number">1.8</literal></expr>, <expr><literal type="number">1.9</literal></expr>, <expr><literal type="number">2.3</literal></expr>, <expr><literal type="number">3.8</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>double</name><index>[]</index></name></type> <name>y</name> <init>= <expr><block>{<expr><literal type="number">14.1</literal></expr>, <expr><literal type="number">11.1</literal></expr>, <expr><literal type="number">10.0</literal></expr>, <expr><literal type="number">8.8</literal></expr>, <expr><literal type="number">8.7</literal></expr>, <expr><literal type="number">8.4</literal></expr>, <expr><literal type="number">5.4</literal></expr>, <expr><literal type="number">4.1</literal></expr>, <expr><literal type="number">4.1</literal></expr>, <expr><literal type="number">25</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>double</name><index>[]</index></name></type> <name>z</name> <init>= <expr><block>{<expr><literal type="number">2.4</literal></expr>, <expr><literal type="number">2.7</literal></expr>, <expr><literal type="number">2.7</literal></expr>, <expr><literal type="number">2.2</literal></expr>, <expr><literal type="number">2.2</literal></expr>, <expr><literal type="number">2.2</literal></expr>, <expr><literal type="number">2.1</literal></expr>, <expr><literal type="number">2.2</literal></expr>, <expr><literal type="number">1.6</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>double</name><index>[]</index><index>[]</index></name></type> <name>s1</name> <init>= <expr><operator>new</operator> <name><name>double</name><index>[]</index><index>[]</index></name> <block>{<expr><name>x</name></expr>, <expr><name>y</name></expr>, <expr><name>z</name></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>d1</name><operator>.</operator><name>addSeries</name></name><argument_list>(<argument><expr><literal type="string">"S1"</literal></expr></argument>, <argument><expr><name>s1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>x</name> <operator>=</operator> <operator>new</operator> <name><name>double</name><index>[]</index></name> <block>{<expr><literal type="number">2.1</literal></expr>}</block></expr>;</expr_stmt>
        <expr_stmt><expr><name>y</name> <operator>=</operator> <operator>new</operator> <name><name>double</name><index>[]</index></name> <block>{<expr><literal type="number">14.1</literal></expr>}</block></expr>;</expr_stmt>
        <expr_stmt><expr><name>z</name> <operator>=</operator> <operator>new</operator> <name><name>double</name><index>[]</index></name> <block>{<expr><literal type="number">2.4</literal></expr>}</block></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>double</name><index>[]</index><index>[]</index></name></type> <name>s2</name> <init>= <expr><operator>new</operator> <name><name>double</name><index>[]</index><index>[]</index></name> <block>{<expr><name>x</name></expr>, <expr><name>y</name></expr>, <expr><name>z</name></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>d1</name><operator>.</operator><name>addSeries</name></name><argument_list>(<argument><expr><literal type="string">"S2"</literal></expr></argument>, <argument><expr><name>s2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>DefaultXYZDataset</name></type> <name>d2</name> <init>= <expr><operator>new</operator> <call><name>DefaultXYZDataset</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>x</name> <operator>=</operator> <operator>new</operator> <name><name>double</name><index>[]</index></name> <block>{<expr><literal type="number">2.1</literal></expr>}</block></expr>;</expr_stmt>
        <expr_stmt><expr><name>y</name> <operator>=</operator> <operator>new</operator> <name><name>double</name><index>[]</index></name> <block>{<expr><literal type="number">14.1</literal></expr>}</block></expr>;</expr_stmt>
        <expr_stmt><expr><name>z</name> <operator>=</operator> <operator>new</operator> <name><name>double</name><index>[]</index></name> <block>{<expr><literal type="number">2.4</literal></expr>}</block></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>double</name><index>[]</index><index>[]</index></name></type> <name>s3</name> <init>= <expr><operator>new</operator> <name><name>double</name><index>[]</index><index>[]</index></name> <block>{<expr><name>x</name></expr>, <expr><name>y</name></expr>, <expr><name>z</name></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>d2</name><operator>.</operator><name>addSeries</name></name><argument_list>(<argument><expr><literal type="string">"S3"</literal></expr></argument>, <argument><expr><name>s3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>x</name> <operator>=</operator> <operator>new</operator> <name><name>double</name><index>[]</index></name> <block>{<expr><literal type="number">2.1</literal></expr>}</block></expr>;</expr_stmt>
        <expr_stmt><expr><name>y</name> <operator>=</operator> <operator>new</operator> <name><name>double</name><index>[]</index></name> <block>{<expr><literal type="number">14.1</literal></expr>}</block></expr>;</expr_stmt>
        <expr_stmt><expr><name>z</name> <operator>=</operator> <operator>new</operator> <name><name>double</name><index>[]</index></name> <block>{<expr><literal type="number">2.4</literal></expr>}</block></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>double</name><index>[]</index><index>[]</index></name></type> <name>s4</name> <init>= <expr><operator>new</operator> <name><name>double</name><index>[]</index><index>[]</index></name> <block>{<expr><name>x</name></expr>, <expr><name>y</name></expr>, <expr><name>z</name></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>d2</name><operator>.</operator><name>addSeries</name></name><argument_list>(<argument><expr><literal type="string">"S4"</literal></expr></argument>, <argument><expr><name>s4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>x</name> <operator>=</operator> <operator>new</operator> <name><name>double</name><index>[]</index></name> <block>{<expr><literal type="number">2.1</literal></expr>}</block></expr>;</expr_stmt>
        <expr_stmt><expr><name>y</name> <operator>=</operator> <operator>new</operator> <name><name>double</name><index>[]</index></name> <block>{<expr><literal type="number">14.1</literal></expr>}</block></expr>;</expr_stmt>
        <expr_stmt><expr><name>z</name> <operator>=</operator> <operator>new</operator> <name><name>double</name><index>[]</index></name> <block>{<expr><literal type="number">2.4</literal></expr>}</block></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>double</name><index>[]</index><index>[]</index></name></type> <name>s5</name> <init>= <expr><operator>new</operator> <name><name>double</name><index>[]</index><index>[]</index></name> <block>{<expr><name>x</name></expr>, <expr><name>y</name></expr>, <expr><name>z</name></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>d2</name><operator>.</operator><name>addSeries</name></name><argument_list>(<argument><expr><literal type="string">"S5"</literal></expr></argument>, <argument><expr><name>s5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>XYBubbleRenderer</name></type> <name>r</name> <init>= <expr><operator>new</operator> <call><name>XYBubbleRenderer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>XYPlot</name></type> <name>plot</name> <init>= <expr><operator>new</operator> <call><name>XYPlot</name><argument_list>(<argument><expr><name>d1</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>NumberAxis</name><argument_list>(<argument><expr><literal type="string">"x"</literal></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><operator>new</operator> <call><name>NumberAxis</name><argument_list>(<argument><expr><literal type="string">"y"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>plot</name><operator>.</operator><name>setDataset</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>d2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/*JFreeChart chart =*/</comment> <expr_stmt><expr><operator>new</operator> <call><name>JFreeChart</name><argument_list>(<argument><expr><name>plot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>LegendItem</name></type> <name>li</name> <init>= <expr><call><name><name>r</name><operator>.</operator><name>getLegendItem</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"S5"</literal></expr></argument>, <argument><expr><call><name><name>li</name><operator>.</operator><name>getLabel</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>li</name><operator>.</operator><name>getDatasetIndex</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name><name>li</name><operator>.</operator><name>getSeriesIndex</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

}</unit>
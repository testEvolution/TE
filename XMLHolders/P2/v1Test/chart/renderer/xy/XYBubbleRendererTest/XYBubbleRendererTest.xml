<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="H:\Research\TestEvolution\DataAnalysis\jfreechart-1.5.2\jfreechart-1.5.2\src\test\java\org\jfree\chart\renderer\xy\XYBubbleRendererTest.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2020, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2.1 of the License, or
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301,
 * USA.
 *
 * [Oracle and Java are registered trademarks of Oracle and/or its affiliates. 
 * Other names may be trademarks of their respective owners.]
 *
 * -------------------------
 * XYBubbleRendererTest.java
 * -------------------------
 * (C) Copyright 2003-2020, by Object Refinery Limited and Contributors.
 *
 * Original Author:  David Gilbert (for Object Refinery Limited);
 * Contributor(s):   -;
 *
 * Changes
 * -------
 * 25-Mar-2003 : Version 1 (DG);
 * 24-Jan-2007 : Added more checks to testEquals() (DG);
 * 17-May-2007 : Added testGetLegendItemSeriesIndex() (DG);
 * 22-Apr-2008 : Added testPublicCloneable (DG);
 *
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>jfree</name><operator>.</operator><name>chart</name><operator>.</operator><name>renderer</name><operator>.</operator><name>xy</name></name>;</package>

<import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>jupiter</name><operator>.</operator><name>api</name><operator>.</operator><name>Assertions</name><operator>.</operator><name>assertEquals</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>jupiter</name><operator>.</operator><name>api</name><operator>.</operator><name>Assertions</name><operator>.</operator><name>assertTrue</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>jupiter</name><operator>.</operator><name>api</name><operator>.</operator><name>Assertions</name><operator>.</operator><name>assertFalse</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>jfree</name><operator>.</operator><name>chart</name><operator>.</operator><name>JFreeChart</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>jfree</name><operator>.</operator><name>chart</name><operator>.</operator><name>LegendItem</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>jfree</name><operator>.</operator><name>chart</name><operator>.</operator><name>TestUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>jfree</name><operator>.</operator><name>chart</name><operator>.</operator><name>axis</name><operator>.</operator><name>NumberAxis</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>jfree</name><operator>.</operator><name>chart</name><operator>.</operator><name>plot</name><operator>.</operator><name>XYPlot</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>jfree</name><operator>.</operator><name>chart</name><operator>.</operator><name>util</name><operator>.</operator><name>PublicCloneable</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>jfree</name><operator>.</operator><name>data</name><operator>.</operator><name>xy</name><operator>.</operator><name>DefaultXYZDataset</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>jupiter</name><operator>.</operator><name>api</name><operator>.</operator><name>Test</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Tests for the {@link XYBubbleRenderer} class.
 */</comment>
<class><specifier>public</specifier> class <name>XYBubbleRendererTest</name> <block>{

    <comment type="block" format="javadoc">/**
     * Check that the equals() method distinguishes all fields.
     */</comment>
    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testEquals</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>XYBubbleRenderer</name></type> <name>r1</name> <init>= <expr><operator>new</operator> <call><name>XYBubbleRenderer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>XYBubbleRenderer</name></type> <name>r2</name> <init>= <expr><operator>new</operator> <call><name>XYBubbleRenderer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>r1</name></expr></argument>, <argument><expr><name>r2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>r1</name> <operator>=</operator> <operator>new</operator> <call><name>XYBubbleRenderer</name><argument_list>(<argument><expr><name><name>XYBubbleRenderer</name><operator>.</operator><name>SCALE_ON_RANGE_AXIS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>r1</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>r2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>r2</name> <operator>=</operator> <operator>new</operator> <call><name>XYBubbleRenderer</name><argument_list>(<argument><expr><name><name>XYBubbleRenderer</name><operator>.</operator><name>SCALE_ON_RANGE_AXIS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>r1</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>r2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Two objects that are equal are required to return the same hashCode.
     */</comment>
    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testHashcode</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>XYBubbleRenderer</name></type> <name>r1</name> <init>= <expr><operator>new</operator> <call><name>XYBubbleRenderer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>XYBubbleRenderer</name></type> <name>r2</name> <init>= <expr><operator>new</operator> <call><name>XYBubbleRenderer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>r1</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>r2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>h1</name> <init>= <expr><call><name><name>r1</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>h2</name> <init>= <expr><call><name><name>r2</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>h1</name></expr></argument>, <argument><expr><name>h2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Confirm that cloning works.
     */</comment>
    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testCloning</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>CloneNotSupportedException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>XYBubbleRenderer</name></type> <name>r1</name> <init>= <expr><operator>new</operator> <call><name>XYBubbleRenderer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>XYBubbleRenderer</name></type> <name>r2</name> <init>= <expr><operator>(</operator><name>XYBubbleRenderer</name><operator>)</operator> <call><name><name>r1</name><operator>.</operator><name>clone</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><name>r1</name> <operator>!=</operator> <name>r2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>r1</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>r2</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>r1</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>r2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Verify that this class implements {@link PublicCloneable}.
     */</comment>
    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testPublicCloneable</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>XYBubbleRenderer</name></type> <name>r1</name> <init>= <expr><operator>new</operator> <call><name>XYBubbleRenderer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><name>r1</name> <operator>instanceof</operator> <name>PublicCloneable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Serialize an instance, restore it, and check for equality.
     */</comment>
    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testSerialization</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>XYBubbleRenderer</name></type> <name>r1</name> <init>= <expr><operator>new</operator> <call><name>XYBubbleRenderer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>XYBubbleRenderer</name></type> <name>r2</name> <init>= <expr><operator>(</operator><name>XYBubbleRenderer</name><operator>)</operator> <call><name><name>TestUtils</name><operator>.</operator><name>serialised</name></name><argument_list>(<argument><expr><name>r1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>r1</name></expr></argument>, <argument><expr><name>r2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * A check for the datasetIndex and seriesIndex fields in the LegendItem
     * returned by the getLegendItem() method.
     */</comment>
    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testGetLegendItemSeriesIndex</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>DefaultXYZDataset</name></type> <name>d1</name> <init>= <expr><operator>new</operator> <call><name>DefaultXYZDataset</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>double</name><index>[]</index></name></type> <name>x</name> <init>= <expr><block>{<expr><literal type="number">2.1</literal></expr>, <expr><literal type="number">2.3</literal></expr>, <expr><literal type="number">2.3</literal></expr>, <expr><literal type="number">2.2</literal></expr>, <expr><literal type="number">2.2</literal></expr>, <expr><literal type="number">1.8</literal></expr>, <expr><literal type="number">1.8</literal></expr>, <expr><literal type="number">1.9</literal></expr>, <expr><literal type="number">2.3</literal></expr>, <expr><literal type="number">3.8</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>double</name><index>[]</index></name></type> <name>y</name> <init>= <expr><block>{<expr><literal type="number">14.1</literal></expr>, <expr><literal type="number">11.1</literal></expr>, <expr><literal type="number">10.0</literal></expr>, <expr><literal type="number">8.8</literal></expr>, <expr><literal type="number">8.7</literal></expr>, <expr><literal type="number">8.4</literal></expr>, <expr><literal type="number">5.4</literal></expr>, <expr><literal type="number">4.1</literal></expr>, <expr><literal type="number">4.1</literal></expr>, <expr><literal type="number">25</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>double</name><index>[]</index></name></type> <name>z</name> <init>= <expr><block>{<expr><literal type="number">2.4</literal></expr>, <expr><literal type="number">2.7</literal></expr>, <expr><literal type="number">2.7</literal></expr>, <expr><literal type="number">2.2</literal></expr>, <expr><literal type="number">2.2</literal></expr>, <expr><literal type="number">2.2</literal></expr>, <expr><literal type="number">2.1</literal></expr>, <expr><literal type="number">2.2</literal></expr>, <expr><literal type="number">1.6</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>double</name><index>[]</index><index>[]</index></name></type> <name>s1</name> <init>= <expr><operator>new</operator> <name><name>double</name><index>[]</index><index>[]</index></name> <block>{<expr><name>x</name></expr>, <expr><name>y</name></expr>, <expr><name>z</name></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>d1</name><operator>.</operator><name>addSeries</name></name><argument_list>(<argument><expr><literal type="string">"S1"</literal></expr></argument>, <argument><expr><name>s1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>x</name> <operator>=</operator> <operator>new</operator> <name><name>double</name><index>[]</index></name> <block>{<expr><literal type="number">2.1</literal></expr>}</block></expr>;</expr_stmt>
        <expr_stmt><expr><name>y</name> <operator>=</operator> <operator>new</operator> <name><name>double</name><index>[]</index></name> <block>{<expr><literal type="number">14.1</literal></expr>}</block></expr>;</expr_stmt>
        <expr_stmt><expr><name>z</name> <operator>=</operator> <operator>new</operator> <name><name>double</name><index>[]</index></name> <block>{<expr><literal type="number">2.4</literal></expr>}</block></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>double</name><index>[]</index><index>[]</index></name></type> <name>s2</name> <init>= <expr><operator>new</operator> <name><name>double</name><index>[]</index><index>[]</index></name> <block>{<expr><name>x</name></expr>, <expr><name>y</name></expr>, <expr><name>z</name></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>d1</name><operator>.</operator><name>addSeries</name></name><argument_list>(<argument><expr><literal type="string">"S2"</literal></expr></argument>, <argument><expr><name>s2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>DefaultXYZDataset</name></type> <name>d2</name> <init>= <expr><operator>new</operator> <call><name>DefaultXYZDataset</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>x</name> <operator>=</operator> <operator>new</operator> <name><name>double</name><index>[]</index></name> <block>{<expr><literal type="number">2.1</literal></expr>}</block></expr>;</expr_stmt>
        <expr_stmt><expr><name>y</name> <operator>=</operator> <operator>new</operator> <name><name>double</name><index>[]</index></name> <block>{<expr><literal type="number">14.1</literal></expr>}</block></expr>;</expr_stmt>
        <expr_stmt><expr><name>z</name> <operator>=</operator> <operator>new</operator> <name><name>double</name><index>[]</index></name> <block>{<expr><literal type="number">2.4</literal></expr>}</block></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>double</name><index>[]</index><index>[]</index></name></type> <name>s3</name> <init>= <expr><operator>new</operator> <name><name>double</name><index>[]</index><index>[]</index></name> <block>{<expr><name>x</name></expr>, <expr><name>y</name></expr>, <expr><name>z</name></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>d2</name><operator>.</operator><name>addSeries</name></name><argument_list>(<argument><expr><literal type="string">"S3"</literal></expr></argument>, <argument><expr><name>s3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>x</name> <operator>=</operator> <operator>new</operator> <name><name>double</name><index>[]</index></name> <block>{<expr><literal type="number">2.1</literal></expr>}</block></expr>;</expr_stmt>
        <expr_stmt><expr><name>y</name> <operator>=</operator> <operator>new</operator> <name><name>double</name><index>[]</index></name> <block>{<expr><literal type="number">14.1</literal></expr>}</block></expr>;</expr_stmt>
        <expr_stmt><expr><name>z</name> <operator>=</operator> <operator>new</operator> <name><name>double</name><index>[]</index></name> <block>{<expr><literal type="number">2.4</literal></expr>}</block></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>double</name><index>[]</index><index>[]</index></name></type> <name>s4</name> <init>= <expr><operator>new</operator> <name><name>double</name><index>[]</index><index>[]</index></name> <block>{<expr><name>x</name></expr>, <expr><name>y</name></expr>, <expr><name>z</name></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>d2</name><operator>.</operator><name>addSeries</name></name><argument_list>(<argument><expr><literal type="string">"S4"</literal></expr></argument>, <argument><expr><name>s4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>x</name> <operator>=</operator> <operator>new</operator> <name><name>double</name><index>[]</index></name> <block>{<expr><literal type="number">2.1</literal></expr>}</block></expr>;</expr_stmt>
        <expr_stmt><expr><name>y</name> <operator>=</operator> <operator>new</operator> <name><name>double</name><index>[]</index></name> <block>{<expr><literal type="number">14.1</literal></expr>}</block></expr>;</expr_stmt>
        <expr_stmt><expr><name>z</name> <operator>=</operator> <operator>new</operator> <name><name>double</name><index>[]</index></name> <block>{<expr><literal type="number">2.4</literal></expr>}</block></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>double</name><index>[]</index><index>[]</index></name></type> <name>s5</name> <init>= <expr><operator>new</operator> <name><name>double</name><index>[]</index><index>[]</index></name> <block>{<expr><name>x</name></expr>, <expr><name>y</name></expr>, <expr><name>z</name></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>d2</name><operator>.</operator><name>addSeries</name></name><argument_list>(<argument><expr><literal type="string">"S5"</literal></expr></argument>, <argument><expr><name>s5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>XYBubbleRenderer</name></type> <name>r</name> <init>= <expr><operator>new</operator> <call><name>XYBubbleRenderer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>XYPlot</name></type> <name>plot</name> <init>= <expr><operator>new</operator> <call><name>XYPlot</name><argument_list>(<argument><expr><name>d1</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>NumberAxis</name><argument_list>(<argument><expr><literal type="string">"x"</literal></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><operator>new</operator> <call><name>NumberAxis</name><argument_list>(<argument><expr><literal type="string">"y"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>plot</name><operator>.</operator><name>setDataset</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>d2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/*JFreeChart chart =*/</comment> <expr_stmt><expr><operator>new</operator> <call><name>JFreeChart</name><argument_list>(<argument><expr><name>plot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>LegendItem</name></type> <name>li</name> <init>= <expr><call><name><name>r</name><operator>.</operator><name>getLegendItem</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"S5"</literal></expr></argument>, <argument><expr><call><name><name>li</name><operator>.</operator><name>getLabel</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>li</name><operator>.</operator><name>getDatasetIndex</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name><name>li</name><operator>.</operator><name>getSeriesIndex</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

}</block></class>
</unit>

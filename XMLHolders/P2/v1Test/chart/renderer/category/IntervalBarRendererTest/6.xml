<unit><function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testFindRangeBounds</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>IntervalBarRenderer</name></type> <name>r</name> <init>= <expr><operator>new</operator> <call><name>IntervalBarRenderer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertNull</name><argument_list>(<argument><expr><call><name><name>r</name><operator>.</operator><name>findRangeBounds</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// an empty dataset should return a null range</comment>
        <decl_stmt><decl><type><name>DefaultIntervalCategoryDataset</name></type> <name>dataset</name>
                <init>= <expr><operator>new</operator> <call><name>DefaultIntervalCategoryDataset</name><argument_list>(<argument><expr><operator>new</operator> <name><name>double</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
                <argument><expr><operator>new</operator> <name><name>double</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertNull</name><argument_list>(<argument><expr><call><name><name>r</name><operator>.</operator><name>findRangeBounds</name></name><argument_list>(<argument><expr><name>dataset</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name><name>double</name><index>[]</index><index>[]</index></name></type> <name>starts</name> <init>= <expr><operator>new</operator> <name><name>double</name><index>[]</index><index>[]</index></name> <block>{<expr><block>{<expr><literal type="number">0.1</literal></expr>, <expr><literal type="number">0.2</literal></expr>, <expr><literal type="number">0.3</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0.3</literal></expr>, <expr><literal type="number">0.4</literal></expr>, <expr><literal type="number">0.5</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>double</name><index>[]</index><index>[]</index></name></type> <name>ends</name> <init>= <expr><operator>new</operator> <name><name>double</name><index>[]</index><index>[]</index></name> <block>{<expr><block>{<expr><literal type="number">0.5</literal></expr>, <expr><literal type="number">0.6</literal></expr>, <expr><literal type="number">0.7</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0.7</literal></expr>, <expr><literal type="number">0.8</literal></expr>, <expr><literal type="number">0.9</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>dataset</name> <operator>=</operator> <operator>new</operator> <call><name>DefaultIntervalCategoryDataset</name><argument_list>(<argument><expr><name>starts</name></expr></argument>, <argument><expr><name>ends</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Range</name><argument_list>(<argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><literal type="number">0.9</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>r</name><operator>.</operator><name>findRangeBounds</name></name><argument_list>(<argument><expr><name>dataset</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>r</name><operator>.</operator><name>setIncludeBaseInRange</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Range</name><argument_list>(<argument><expr><literal type="number">0.1</literal></expr></argument>, <argument><expr><literal type="number">0.9</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>r</name><operator>.</operator><name>findRangeBounds</name></name><argument_list>(<argument><expr><name>dataset</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>r</name><operator>.</operator><name>setIncludeBaseInRange</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>r</name><operator>.</operator><name>setSeriesVisible</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>Boolean</name><operator>.</operator><name>FALSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Range</name><argument_list>(<argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><literal type="number">0.7</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>r</name><operator>.</operator><name>findRangeBounds</name></name><argument_list>(<argument><expr><name>dataset</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

}</unit>
<unit><function><type><specifier>private</specifier> <name>boolean</name></type> <name>lineEquals</name><parameter_list>(<parameter><decl><type><name>Line2D</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>x1</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>y1</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>x2</name></decl></parameter>,
            <parameter><decl><type><name>double</name></type> <name>y2</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>boolean</name></type> <name>result</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>epsilon</name> <init>= <expr><literal type="number">0.0000000001</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>Math</name><operator>.</operator><name>abs</name></name><argument_list>(<argument><expr><call><name><name>line</name><operator>.</operator><name>getX1</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name>x1</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>epsilon</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>Math</name><operator>.</operator><name>abs</name></name><argument_list>(<argument><expr><call><name><name>line</name><operator>.</operator><name>getY1</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name>y1</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>epsilon</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>Math</name><operator>.</operator><name>abs</name></name><argument_list>(<argument><expr><call><name><name>line</name><operator>.</operator><name>getX2</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name>x2</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>epsilon</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>Math</name><operator>.</operator><name>abs</name></name><argument_list>(<argument><expr><call><name><name>line</name><operator>.</operator><name>getY2</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name>y2</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>epsilon</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
        <return>return <expr><name>result</name></expr>;</return>
    </block_content>}</block></function>

    </unit>
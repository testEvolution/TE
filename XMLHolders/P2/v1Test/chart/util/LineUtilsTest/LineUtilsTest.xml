<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="H:\Research\TestEvolution\DataAnalysis\jfreechart-1.5.2\jfreechart-1.5.2\src\test\java\org\jfree\chart\util\LineUtilsTest.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2020, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2.1 of the License, or
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301,
 * USA.
 *
 * [Oracle and Java are registered trademarks of Oracle and/or its affiliates.
 * Other names may be trademarks of their respective owners.]
 *
 * ------------------
 * LineUtilsTest.java
 * ------------------
 * (C) Copyright 2008-2020, by Object Refinery Limited and Contributors.
 *
 * Original Author:  David Gilbert (for Object Refinery Limited);
 * Contributor(s):   -;
 *
 * Changes
 * -------
 * 05-Nov-2008 : Version 1 (DG);
 *
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>jfree</name><operator>.</operator><name>chart</name><operator>.</operator><name>util</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>geom</name><operator>.</operator><name>Line2D</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>geom</name><operator>.</operator><name>Rectangle2D</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>jupiter</name><operator>.</operator><name>api</name><operator>.</operator><name>Test</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>jupiter</name><operator>.</operator><name>api</name><operator>.</operator><name>Assertions</name><operator>.</operator><name>assertTrue</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>jupiter</name><operator>.</operator><name>api</name><operator>.</operator><name>Assertions</name><operator>.</operator><name>assertFalse</name></name>;</import>
<comment type="block" format="javadoc">/**
 * Tests for the {@link LineUtils} class.
 */</comment>
<class><specifier>public</specifier> class <name>LineUtilsTest</name> <block>{

    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>lineEquals</name><parameter_list>(<parameter><decl><type><name>Line2D</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>x1</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>y1</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>x2</name></decl></parameter>,
            <parameter><decl><type><name>double</name></type> <name>y2</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>boolean</name></type> <name>result</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>epsilon</name> <init>= <expr><literal type="number">0.0000000001</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>Math</name><operator>.</operator><name>abs</name></name><argument_list>(<argument><expr><call><name><name>line</name><operator>.</operator><name>getX1</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name>x1</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>epsilon</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>Math</name><operator>.</operator><name>abs</name></name><argument_list>(<argument><expr><call><name><name>line</name><operator>.</operator><name>getY1</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name>y1</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>epsilon</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>Math</name><operator>.</operator><name>abs</name></name><argument_list>(<argument><expr><call><name><name>line</name><operator>.</operator><name>getX2</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name>x2</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>epsilon</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>Math</name><operator>.</operator><name>abs</name></name><argument_list>(<argument><expr><call><name><name>line</name><operator>.</operator><name>getY2</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name>y2</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>epsilon</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
        <return>return <expr><name>result</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testClipLine</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Rectangle2D</name></type> <name>rect</name> <init>= <expr><operator>new</operator> <call><name><name>Rectangle2D</name><operator>.</operator><name>Double</name></name><argument_list>(<argument><expr><literal type="number">1.0</literal></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Line2D</name></type> <name>line</name> <init>= <expr><operator>new</operator> <call><name><name>Line2D</name><operator>.</operator><name>Double</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>LineUtils</name><operator>.</operator><name>clipLine</name></name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>rect</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name>lineEquals</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>line</name><operator>.</operator><name>setLine</name></name><argument_list>(<argument><expr><literal type="number">0.5</literal></expr></argument>, <argument><expr><literal type="number">0.5</literal></expr></argument>, <argument><expr><literal type="number">0.6</literal></expr></argument>, <argument><expr><literal type="number">0.6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>LineUtils</name><operator>.</operator><name>clipLine</name></name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>rect</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name>lineEquals</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="number">0.5</literal></expr></argument>, <argument><expr><literal type="number">0.5</literal></expr></argument>, <argument><expr><literal type="number">0.6</literal></expr></argument>, <argument><expr><literal type="number">0.6</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>line</name><operator>.</operator><name>setLine</name></name><argument_list>(<argument><expr><literal type="number">0.5</literal></expr></argument>, <argument><expr><literal type="number">0.5</literal></expr></argument>, <argument><expr><literal type="number">1.6</literal></expr></argument>, <argument><expr><literal type="number">0.6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>LineUtils</name><operator>.</operator><name>clipLine</name></name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>rect</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name>lineEquals</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="number">0.5</literal></expr></argument>, <argument><expr><literal type="number">0.5</literal></expr></argument>, <argument><expr><literal type="number">1.6</literal></expr></argument>, <argument><expr><literal type="number">0.6</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>line</name><operator>.</operator><name>setLine</name></name><argument_list>(<argument><expr><literal type="number">0.5</literal></expr></argument>, <argument><expr><literal type="number">0.5</literal></expr></argument>, <argument><expr><literal type="number">2.6</literal></expr></argument>, <argument><expr><literal type="number">0.6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>LineUtils</name><operator>.</operator><name>clipLine</name></name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>rect</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name>lineEquals</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="number">0.5</literal></expr></argument>, <argument><expr><literal type="number">0.5</literal></expr></argument>, <argument><expr><literal type="number">2.6</literal></expr></argument>, <argument><expr><literal type="number">0.6</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>line</name><operator>.</operator><name>setLine</name></name><argument_list>(<argument><expr><literal type="number">0.5</literal></expr></argument>, <argument><expr><literal type="number">0.5</literal></expr></argument>, <argument><expr><literal type="number">0.6</literal></expr></argument>, <argument><expr><literal type="number">1.6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>LineUtils</name><operator>.</operator><name>clipLine</name></name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>rect</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name>lineEquals</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="number">0.5</literal></expr></argument>, <argument><expr><literal type="number">0.5</literal></expr></argument>, <argument><expr><literal type="number">0.6</literal></expr></argument>, <argument><expr><literal type="number">1.6</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>line</name><operator>.</operator><name>setLine</name></name><argument_list>(<argument><expr><literal type="number">0.5</literal></expr></argument>, <argument><expr><literal type="number">0.5</literal></expr></argument>, <argument><expr><literal type="number">1.6</literal></expr></argument>, <argument><expr><literal type="number">1.6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>LineUtils</name><operator>.</operator><name>clipLine</name></name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>rect</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name>lineEquals</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>, <argument><expr><literal type="number">1.6</literal></expr></argument>, <argument><expr><literal type="number">1.6</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>line</name><operator>.</operator><name>setLine</name></name><argument_list>(<argument><expr><literal type="number">0.5</literal></expr></argument>, <argument><expr><literal type="number">0.5</literal></expr></argument>, <argument><expr><literal type="number">2.6</literal></expr></argument>, <argument><expr><literal type="number">1.6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>LineUtils</name><operator>.</operator><name>clipLine</name></name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>rect</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name>lineEquals</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="number">1.4545454545454546</literal></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>, <argument><expr><literal type="number">2.0</literal></expr></argument>,
                <argument><expr><literal type="number">1.2857142857142858</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>line</name><operator>.</operator><name>setLine</name></name><argument_list>(<argument><expr><literal type="number">0.5</literal></expr></argument>, <argument><expr><literal type="number">0.5</literal></expr></argument>, <argument><expr><literal type="number">0.5</literal></expr></argument>, <argument><expr><literal type="number">2.6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>LineUtils</name><operator>.</operator><name>clipLine</name></name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>rect</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name>lineEquals</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="number">0.5</literal></expr></argument>, <argument><expr><literal type="number">0.5</literal></expr></argument>, <argument><expr><literal type="number">0.5</literal></expr></argument>, <argument><expr><literal type="number">2.6</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>line</name><operator>.</operator><name>setLine</name></name><argument_list>(<argument><expr><literal type="number">0.5</literal></expr></argument>, <argument><expr><literal type="number">0.5</literal></expr></argument>, <argument><expr><literal type="number">1.5</literal></expr></argument>, <argument><expr><literal type="number">2.6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>LineUtils</name><operator>.</operator><name>clipLine</name></name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>rect</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name>lineEquals</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>, <argument><expr><literal type="number">1.55</literal></expr></argument>, <argument><expr><literal type="number">1.2142857142857142</literal></expr></argument>, <argument><expr><literal type="number">2.0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>line</name><operator>.</operator><name>setLine</name></name><argument_list>(<argument><expr><literal type="number">0.5</literal></expr></argument>, <argument><expr><literal type="number">0.5</literal></expr></argument>, <argument><expr><literal type="number">2.5</literal></expr></argument>, <argument><expr><literal type="number">2.6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>LineUtils</name><operator>.</operator><name>clipLine</name></name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>rect</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name>lineEquals</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>, <argument><expr><literal type="number">1.025</literal></expr></argument>, <argument><expr><literal type="number">1.9285714285714284</literal></expr></argument>, <argument><expr><literal type="number">2.0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>line</name><operator>.</operator><name>setLine</name></name><argument_list>(<argument><expr><literal type="number">0.5</literal></expr></argument>, <argument><expr><literal type="number">0.5</literal></expr></argument>, <argument><expr><literal type="number">1.5</literal></expr></argument>, <argument><expr><literal type="number">1.5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>LineUtils</name><operator>.</operator><name>clipLine</name></name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>rect</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name>lineEquals</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>, <argument><expr><literal type="number">1.5</literal></expr></argument>, <argument><expr><literal type="number">1.5</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>line</name><operator>.</operator><name>setLine</name></name><argument_list>(<argument><expr><literal type="number">2.5</literal></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>, <argument><expr><literal type="number">1.5</literal></expr></argument>, <argument><expr><literal type="number">1.5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>LineUtils</name><operator>.</operator><name>clipLine</name></name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>rect</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name>lineEquals</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="number">2.0</literal></expr></argument>, <argument><expr><literal type="number">1.25</literal></expr></argument>, <argument><expr><literal type="number">1.5</literal></expr></argument>, <argument><expr><literal type="number">1.5</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>line</name><operator>.</operator><name>setLine</name></name><argument_list>(<argument><expr><literal type="number">1.5</literal></expr></argument>, <argument><expr><literal type="number">1.5</literal></expr></argument>, <argument><expr><literal type="number">2.5</literal></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>LineUtils</name><operator>.</operator><name>clipLine</name></name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>rect</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name>lineEquals</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="number">1.5</literal></expr></argument>, <argument><expr><literal type="number">1.5</literal></expr></argument>, <argument><expr><literal type="number">2.0</literal></expr></argument>, <argument><expr><literal type="number">1.25</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

}</block></class>
</unit>

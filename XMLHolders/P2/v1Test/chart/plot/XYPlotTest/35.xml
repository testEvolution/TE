<unit><function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testGetRangeAxisForDataset</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>XYDataset</name></type> <name>dataset</name> <init>= <expr><operator>new</operator> <call><name>XYSeriesCollection</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>NumberAxis</name></type> <name>xAxis</name> <init>= <expr><operator>new</operator> <call><name>NumberAxis</name><argument_list>(<argument><expr><literal type="string">"X"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>NumberAxis</name></type> <name>yAxis</name> <init>= <expr><operator>new</operator> <call><name>NumberAxis</name><argument_list>(<argument><expr><literal type="string">"Y"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>XYItemRenderer</name></type> <name>renderer</name> <init>= <expr><operator>new</operator> <call><name>DefaultXYItemRenderer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>XYPlot</name></type> <name>plot</name> <init>= <expr><operator>new</operator> <call><name>XYPlot</name><argument_list>(<argument><expr><name>dataset</name></expr></argument>, <argument><expr><name>xAxis</name></expr></argument>, <argument><expr><name>yAxis</name></expr></argument>, <argument><expr><name>renderer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>yAxis</name></expr></argument>, <argument><expr><call><name><name>plot</name><operator>.</operator><name>getRangeAxisForDataset</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// should get IllegalArgumentException for negative index</comment>
        <decl_stmt><decl><type><name>boolean</name></type> <name>pass</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
        <try>try <block>{<block_content>
            <expr_stmt><expr><call><name><name>plot</name><operator>.</operator><name>getRangeAxisForDataset</name></name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>IllegalArgumentException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name>pass</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        </block_content>}</block></catch></try>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><name>pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// if multiple axes are mapped, the first in the list should be</comment>
        <comment type="line">// returned...</comment>
        <decl_stmt><decl><type><name>NumberAxis</name></type> <name>yAxis2</name> <init>= <expr><operator>new</operator> <call><name>NumberAxis</name><argument_list>(<argument><expr><literal type="string">"Y2"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>plot</name><operator>.</operator><name>setRangeAxis</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>yAxis2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>yAxis</name></expr></argument>, <argument><expr><call><name><name>plot</name><operator>.</operator><name>getRangeAxisForDataset</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>plot</name><operator>.</operator><name>mapDatasetToRangeAxis</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>yAxis2</name></expr></argument>, <argument><expr><call><name><name>plot</name><operator>.</operator><name>getRangeAxisForDataset</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>axisIndices</name> <init>= <expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>Integer</name><index>[]</index></name> <block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>plot</name><operator>.</operator><name>mapDatasetToRangeAxes</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>axisIndices</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>yAxis</name></expr></argument>, <argument><expr><call><name><name>plot</name><operator>.</operator><name>getRangeAxisForDataset</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>axisIndices</name> <operator>=</operator> <call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>Integer</name><index>[]</index></name> <block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>plot</name><operator>.</operator><name>mapDatasetToRangeAxes</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>axisIndices</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>yAxis2</name></expr></argument>, <argument><expr><call><name><name>plot</name><operator>.</operator><name>getRangeAxisForDataset</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>
    
    </unit>
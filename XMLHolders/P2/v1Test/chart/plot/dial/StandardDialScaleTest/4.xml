<unit><function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testValueToAngle</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>StandardDialScale</name></type> <name>s</name> <init>= <expr><operator>new</operator> <call><name>StandardDialScale</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">175.0</literal></expr></argument>, <argument><expr><call><name><name>s</name><operator>.</operator><name>valueToAngle</name></name><argument_list>(<argument><expr><literal type="number">0.0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>EPSILON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">90.0</literal></expr></argument>, <argument><expr><call><name><name>s</name><operator>.</operator><name>valueToAngle</name></name><argument_list>(<argument><expr><literal type="number">50.0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>EPSILON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">5.0</literal></expr></argument>, <argument><expr><call><name><name>s</name><operator>.</operator><name>valueToAngle</name></name><argument_list>(<argument><expr><literal type="number">100.0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>EPSILON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">192.0</literal></expr></argument>, <argument><expr><call><name><name>s</name><operator>.</operator><name>valueToAngle</name></name><argument_list>(<argument><expr><operator>-</operator><literal type="number">10.0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>EPSILON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">12.0</literal></expr></argument>, <argument><expr><call><name><name>s</name><operator>.</operator><name>valueToAngle</name></name><argument_list>(<argument><expr><literal type="number">110.0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>EPSILON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>s</name> <operator>=</operator> <operator>new</operator> <call><name>StandardDialScale</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">180</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">180.0</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">180.0</literal></expr></argument>, <argument><expr><call><name><name>s</name><operator>.</operator><name>valueToAngle</name></name><argument_list>(<argument><expr><literal type="number">0.0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>EPSILON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">90.0</literal></expr></argument>, <argument><expr><call><name><name>s</name><operator>.</operator><name>valueToAngle</name></name><argument_list>(<argument><expr><literal type="number">10.0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>EPSILON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><call><name><name>s</name><operator>.</operator><name>valueToAngle</name></name><argument_list>(<argument><expr><literal type="number">20.0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>EPSILON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    </unit>
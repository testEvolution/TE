<unit><function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testEquals</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>DefaultDrawingSupplier</name></type> <name>r1</name> <init>= <expr><operator>new</operator> <call><name>DefaultDrawingSupplier</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>DefaultDrawingSupplier</name></type> <name>r2</name> <init>= <expr><operator>new</operator> <call><name>DefaultDrawingSupplier</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>r1</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>r2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>r2</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>r1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// set up some objects...</comment>
        <decl_stmt><decl><type><name><name>Paint</name><index>[]</index></name></type> <name>ps1A</name> <init>= <expr><operator>new</operator> <name><name>Paint</name><index>[]</index></name> <block>{<expr><name><name>Color</name><operator>.</operator><name>RED</name></name></expr>, <expr><name><name>Color</name><operator>.</operator><name>BLUE</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Paint</name><index>[]</index></name></type> <name>ps2A</name> <init>= <expr><operator>new</operator> <name><name>Paint</name><index>[]</index></name> <block>{<expr><name><name>Color</name><operator>.</operator><name>GREEN</name></name></expr>, <expr><name><name>Color</name><operator>.</operator><name>YELLOW</name></name></expr>, <expr><name><name>Color</name><operator>.</operator><name>WHITE</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Paint</name><index>[]</index></name></type> <name>ops1A</name> <init>= <expr><operator>new</operator> <name><name>Paint</name><index>[]</index></name> <block>{<expr><name><name>Color</name><operator>.</operator><name>LIGHT_GRAY</name></name></expr>, <expr><name><name>Color</name><operator>.</operator><name>BLUE</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Paint</name><index>[]</index></name></type> <name>ops2A</name> <init>= <expr><operator>new</operator> <name><name>Paint</name><index>[]</index></name> <block>{<expr><name><name>Color</name><operator>.</operator><name>BLACK</name></name></expr>, <expr><name><name>Color</name><operator>.</operator><name>YELLOW</name></name></expr>, <expr><name><name>Color</name><operator>.</operator><name>CYAN</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Stroke</name><index>[]</index></name></type> <name>ss1A</name> <init>= <expr><operator>new</operator> <name><name>Stroke</name><index>[]</index></name> <block>{<expr><operator>new</operator> <call><name>BasicStroke</name><argument_list>(<argument><expr><literal type="number">1.1f</literal></expr></argument>)</argument_list></call></expr>}</block></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Stroke</name><index>[]</index></name></type> <name>ss2A</name>
            <init>= <expr><operator>new</operator> <name><name>Stroke</name><index>[]</index></name> <block>{<expr><operator>new</operator> <call><name>BasicStroke</name><argument_list>(<argument><expr><literal type="number">2.2f</literal></expr></argument>)</argument_list></call></expr>, <expr><operator>new</operator> <call><name>BasicStroke</name><argument_list>(<argument><expr><literal type="number">3.3f</literal></expr></argument>)</argument_list></call></expr>}</block></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Stroke</name><index>[]</index></name></type> <name>oss1A</name> <init>= <expr><operator>new</operator> <name><name>Stroke</name><index>[]</index></name> <block>{<expr><operator>new</operator> <call><name>BasicStroke</name><argument_list>(<argument><expr><literal type="number">4.4f</literal></expr></argument>)</argument_list></call></expr>}</block></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Stroke</name><index>[]</index></name></type> <name>oss2A</name>
            <init>= <expr><operator>new</operator> <name><name>Stroke</name><index>[]</index></name> <block>{<expr><operator>new</operator> <call><name>BasicStroke</name><argument_list>(<argument><expr><literal type="number">5.5f</literal></expr></argument>)</argument_list></call></expr>, <expr><operator>new</operator> <call><name>BasicStroke</name><argument_list>(<argument><expr><literal type="number">6.6f</literal></expr></argument>)</argument_list></call></expr>}</block></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Shape</name><index>[]</index></name></type> <name>shapes1A</name> <init>= <expr><operator>new</operator> <name><name>Shape</name><index>[]</index></name> <block>{
            <expr><operator>new</operator> <call><name><name>Rectangle2D</name><operator>.</operator><name>Double</name></name><argument_list>(<argument><expr><literal type="number">1.0</literal></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr>
        }</block></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Shape</name><index>[]</index></name></type> <name>shapes2A</name> <init>= <expr><operator>new</operator> <name><name>Shape</name><index>[]</index></name> <block>{
            <expr><operator>new</operator> <call><name><name>Rectangle2D</name><operator>.</operator><name>Double</name></name><argument_list>(<argument><expr><literal type="number">2.0</literal></expr></argument>, <argument><expr><literal type="number">2.0</literal></expr></argument>, <argument><expr><literal type="number">2.0</literal></expr></argument>, <argument><expr><literal type="number">2.0</literal></expr></argument>)</argument_list></call></expr>,
            <expr><operator>new</operator> <call><name><name>Rectangle2D</name><operator>.</operator><name>Double</name></name><argument_list>(<argument><expr><literal type="number">2.0</literal></expr></argument>, <argument><expr><literal type="number">2.0</literal></expr></argument>, <argument><expr><literal type="number">2.0</literal></expr></argument>, <argument><expr><literal type="number">2.0</literal></expr></argument>)</argument_list></call></expr>
        }</block></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Paint</name><index>[]</index></name></type> <name>ps1B</name> <init>= <expr><operator>new</operator> <name><name>Paint</name><index>[]</index></name> <block>{<expr><name><name>Color</name><operator>.</operator><name>RED</name></name></expr>, <expr><name><name>Color</name><operator>.</operator><name>BLUE</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Paint</name><index>[]</index></name></type> <name>ps2B</name> <init>= <expr><operator>new</operator> <name><name>Paint</name><index>[]</index></name> <block>{<expr><name><name>Color</name><operator>.</operator><name>GREEN</name></name></expr>, <expr><name><name>Color</name><operator>.</operator><name>YELLOW</name></name></expr>, <expr><name><name>Color</name><operator>.</operator><name>WHITE</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Paint</name><index>[]</index></name></type> <name>ops1B</name> <init>= <expr><operator>new</operator> <name><name>Paint</name><index>[]</index></name> <block>{<expr><name><name>Color</name><operator>.</operator><name>LIGHT_GRAY</name></name></expr>, <expr><name><name>Color</name><operator>.</operator><name>BLUE</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Paint</name><index>[]</index></name></type> <name>ops2B</name> <init>= <expr><operator>new</operator> <name><name>Paint</name><index>[]</index></name> <block>{<expr><name><name>Color</name><operator>.</operator><name>BLACK</name></name></expr>, <expr><name><name>Color</name><operator>.</operator><name>YELLOW</name></name></expr>, <expr><name><name>Color</name><operator>.</operator><name>CYAN</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Stroke</name><index>[]</index></name></type> <name>ss1B</name> <init>= <expr><operator>new</operator> <name><name>Stroke</name><index>[]</index></name> <block>{<expr><operator>new</operator> <call><name>BasicStroke</name><argument_list>(<argument><expr><literal type="number">1.1f</literal></expr></argument>)</argument_list></call></expr>}</block></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Stroke</name><index>[]</index></name></type> <name>ss2B</name>
            <init>= <expr><operator>new</operator> <name><name>Stroke</name><index>[]</index></name> <block>{<expr><operator>new</operator> <call><name>BasicStroke</name><argument_list>(<argument><expr><literal type="number">2.2f</literal></expr></argument>)</argument_list></call></expr>, <expr><operator>new</operator> <call><name>BasicStroke</name><argument_list>(<argument><expr><literal type="number">3.3f</literal></expr></argument>)</argument_list></call></expr>}</block></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Stroke</name><index>[]</index></name></type> <name>oss1B</name> <init>= <expr><operator>new</operator> <name><name>Stroke</name><index>[]</index></name> <block>{<expr><operator>new</operator> <call><name>BasicStroke</name><argument_list>(<argument><expr><literal type="number">4.4f</literal></expr></argument>)</argument_list></call></expr>}</block></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Stroke</name><index>[]</index></name></type> <name>oss2B</name>
            <init>= <expr><operator>new</operator> <name><name>Stroke</name><index>[]</index></name> <block>{<expr><operator>new</operator> <call><name>BasicStroke</name><argument_list>(<argument><expr><literal type="number">5.5f</literal></expr></argument>)</argument_list></call></expr>, <expr><operator>new</operator> <call><name>BasicStroke</name><argument_list>(<argument><expr><literal type="number">6.6f</literal></expr></argument>)</argument_list></call></expr>}</block></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Shape</name><index>[]</index></name></type> <name>shapes1B</name> <init>= <expr><operator>new</operator> <name><name>Shape</name><index>[]</index></name> <block>{
            <expr><operator>new</operator> <call><name><name>Rectangle2D</name><operator>.</operator><name>Double</name></name><argument_list>(<argument><expr><literal type="number">1.0</literal></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr>
        }</block></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Shape</name><index>[]</index></name></type> <name>shapes2B</name> <init>= <expr><operator>new</operator> <name><name>Shape</name><index>[]</index></name> <block>{
            <expr><operator>new</operator> <call><name><name>Rectangle2D</name><operator>.</operator><name>Double</name></name><argument_list>(<argument><expr><literal type="number">2.0</literal></expr></argument>, <argument><expr><literal type="number">2.0</literal></expr></argument>, <argument><expr><literal type="number">2.0</literal></expr></argument>, <argument><expr><literal type="number">2.0</literal></expr></argument>)</argument_list></call></expr>,
            <expr><operator>new</operator> <call><name><name>Rectangle2D</name><operator>.</operator><name>Double</name></name><argument_list>(<argument><expr><literal type="number">2.0</literal></expr></argument>, <argument><expr><literal type="number">2.0</literal></expr></argument>, <argument><expr><literal type="number">2.0</literal></expr></argument>, <argument><expr><literal type="number">2.0</literal></expr></argument>)</argument_list></call></expr>
        }</block></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name>r1</name> <operator>=</operator> <operator>new</operator> <call><name>DefaultDrawingSupplier</name><argument_list>(<argument><expr><name>ps1A</name></expr></argument>, <argument><expr><name>ops1A</name></expr></argument>, <argument><expr><name>ss1A</name></expr></argument>, <argument><expr><name>oss1A</name></expr></argument>, <argument><expr><name>shapes1A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>r2</name> <operator>=</operator> <operator>new</operator> <call><name>DefaultDrawingSupplier</name><argument_list>(<argument><expr><name>ps1B</name></expr></argument>, <argument><expr><name>ops1B</name></expr></argument>, <argument><expr><name>ss1B</name></expr></argument>, <argument><expr><name>oss1B</name></expr></argument>, <argument><expr><name>shapes1B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>r1</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>r2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// paint sequence</comment>
        <expr_stmt><expr><name>r1</name> <operator>=</operator> <operator>new</operator> <call><name>DefaultDrawingSupplier</name><argument_list>(<argument><expr><name>ps2A</name></expr></argument>, <argument><expr><name>ops1A</name></expr></argument>, <argument><expr><name>ss1A</name></expr></argument>, <argument><expr><name>oss1A</name></expr></argument>, <argument><expr><name>shapes1A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>r1</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>r2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>r2</name> <operator>=</operator> <operator>new</operator> <call><name>DefaultDrawingSupplier</name><argument_list>(<argument><expr><name>ps2B</name></expr></argument>, <argument><expr><name>ops1B</name></expr></argument>, <argument><expr><name>ss1B</name></expr></argument>, <argument><expr><name>oss1B</name></expr></argument>, <argument><expr><name>shapes1B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>r1</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>r2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// outline paint sequence</comment>
        <expr_stmt><expr><name>r1</name> <operator>=</operator> <operator>new</operator> <call><name>DefaultDrawingSupplier</name><argument_list>(<argument><expr><name>ps2A</name></expr></argument>, <argument><expr><name>ops2A</name></expr></argument>, <argument><expr><name>ss1A</name></expr></argument>, <argument><expr><name>oss1A</name></expr></argument>, <argument><expr><name>shapes1A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>r1</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>r2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>r2</name> <operator>=</operator> <operator>new</operator> <call><name>DefaultDrawingSupplier</name><argument_list>(<argument><expr><name>ps2B</name></expr></argument>, <argument><expr><name>ops2B</name></expr></argument>, <argument><expr><name>ss1B</name></expr></argument>, <argument><expr><name>oss1B</name></expr></argument>, <argument><expr><name>shapes1B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>r1</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>r2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// stroke sequence</comment>
        <expr_stmt><expr><name>r1</name> <operator>=</operator> <operator>new</operator> <call><name>DefaultDrawingSupplier</name><argument_list>(<argument><expr><name>ps2A</name></expr></argument>, <argument><expr><name>ops2A</name></expr></argument>, <argument><expr><name>ss2A</name></expr></argument>, <argument><expr><name>oss1A</name></expr></argument>, <argument><expr><name>shapes1A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>r1</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>r2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>r2</name> <operator>=</operator> <operator>new</operator> <call><name>DefaultDrawingSupplier</name><argument_list>(<argument><expr><name>ps2B</name></expr></argument>, <argument><expr><name>ops2B</name></expr></argument>, <argument><expr><name>ss2B</name></expr></argument>, <argument><expr><name>oss1B</name></expr></argument>, <argument><expr><name>shapes1B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>r1</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>r2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// outline stroke sequence</comment>
        <expr_stmt><expr><name>r1</name> <operator>=</operator> <operator>new</operator> <call><name>DefaultDrawingSupplier</name><argument_list>(<argument><expr><name>ps2A</name></expr></argument>, <argument><expr><name>ops2A</name></expr></argument>, <argument><expr><name>ss2A</name></expr></argument>, <argument><expr><name>oss2A</name></expr></argument>, <argument><expr><name>shapes1A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>r1</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>r2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>r2</name> <operator>=</operator> <operator>new</operator> <call><name>DefaultDrawingSupplier</name><argument_list>(<argument><expr><name>ps2B</name></expr></argument>, <argument><expr><name>ops2B</name></expr></argument>, <argument><expr><name>ss2B</name></expr></argument>, <argument><expr><name>oss2B</name></expr></argument>, <argument><expr><name>shapes1B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>r1</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>r2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// shape sequence</comment>
        <expr_stmt><expr><name>r1</name> <operator>=</operator> <operator>new</operator> <call><name>DefaultDrawingSupplier</name><argument_list>(<argument><expr><name>ps2A</name></expr></argument>, <argument><expr><name>ops2A</name></expr></argument>, <argument><expr><name>ss2A</name></expr></argument>, <argument><expr><name>oss2A</name></expr></argument>, <argument><expr><name>shapes2A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>r1</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>r2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>r2</name> <operator>=</operator> <operator>new</operator> <call><name>DefaultDrawingSupplier</name><argument_list>(<argument><expr><name>ps2B</name></expr></argument>, <argument><expr><name>ops2B</name></expr></argument>, <argument><expr><name>ss2B</name></expr></argument>, <argument><expr><name>oss2B</name></expr></argument>, <argument><expr><name>shapes2B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>r1</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>r2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// paint index</comment>
        <expr_stmt><expr><call><name><name>r1</name><operator>.</operator><name>getNextPaint</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>r1</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>r2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>r2</name><operator>.</operator><name>getNextPaint</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>r1</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>r2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// outline paint index</comment>
        <expr_stmt><expr><call><name><name>r1</name><operator>.</operator><name>getNextOutlinePaint</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>r1</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>r2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>r2</name><operator>.</operator><name>getNextOutlinePaint</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>r1</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>r2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// stroke index</comment>
        <expr_stmt><expr><call><name><name>r1</name><operator>.</operator><name>getNextStroke</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>r1</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>r2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>r2</name><operator>.</operator><name>getNextStroke</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>r1</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>r2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// outline stroke index</comment>
        <expr_stmt><expr><call><name><name>r1</name><operator>.</operator><name>getNextOutlineStroke</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>r1</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>r2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>r2</name><operator>.</operator><name>getNextOutlineStroke</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>r1</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>r2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// shape index</comment>
        <expr_stmt><expr><call><name><name>r1</name><operator>.</operator><name>getNextShape</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>r1</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>r2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>r2</name><operator>.</operator><name>getNextShape</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>r1</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>r2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    </unit>
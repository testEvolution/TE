<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="H:\Research\TestEvolution\DataAnalysis\jfreechart-1.5.2\jfreechart-1.5.2\src\test\java\org\jfree\chart\plot\MyPlotChangeListener.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2020, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2.1 of the License, or
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301,
 * USA.
 *
 * [Oracle and Java are registered trademarks of Oracle and/or its affiliates. 
 * Other names may be trademarks of their respective owners.]
 *
 * -------------------------
 * MyPlotChangeListener.java
 * -------------------------
 * (C) Copyright 2005-2008, by Object Refinery Limited and Contributors.
 *
 * Original Author:  David Gilbert (for Object Refinery Limited);
 * Contributor(s):   -;
 *
 * Changes
 * -------
 * 21-Mar-2005 : Version 1 (DG);
 *
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>jfree</name><operator>.</operator><name>chart</name><operator>.</operator><name>plot</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>jfree</name><operator>.</operator><name>chart</name><operator>.</operator><name>event</name><operator>.</operator><name>PlotChangeEvent</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>jfree</name><operator>.</operator><name>chart</name><operator>.</operator><name>event</name><operator>.</operator><name>PlotChangeListener</name></name>;</import>

<comment type="block" format="javadoc">/**
 * A utility class for testing plot events.
 */</comment>
<class><specifier>public</specifier> class <name>MyPlotChangeListener</name> <super_list><implements>implements <super><name>PlotChangeListener</name></super></implements></super_list> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <name>PlotChangeEvent</name></type> <name>event</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Creates a new instance.
     */</comment>
    <constructor><specifier>public</specifier> <name>MyPlotChangeListener</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>event</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/**
     * Returns the last event received by the listener.
     *
     * @return The event.
     */</comment>
    <function><type><specifier>public</specifier> <name>PlotChangeEvent</name></type> <name>getEvent</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name><name>this</name><operator>.</operator><name>event</name></name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Sets the event for the listener.
     *
     * @param e  the event.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setEvent</name><parameter_list>(<parameter><decl><type><name>PlotChangeEvent</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>event</name></name> <operator>=</operator> <name>e</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Receives notification of a plot change event.
     *
     * @param e  the event.
     */</comment>
    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>plotChanged</name><parameter_list>(<parameter><decl><type><name>PlotChangeEvent</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>event</name></name> <operator>=</operator> <name>e</name></expr>;</expr_stmt>
    </block_content>}</block></function>

}</block></class>
</unit>

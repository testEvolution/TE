<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="H:\Research\TestEvolution\DataAnalysis\jfreechart-1.5.2\jfreechart-1.5.2\src\test\java\org\jfree\chart\plot\CombinedDomainCategoryPlotTest.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2020, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2.1 of the License, or
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301,
 * USA.
 *
 * [Oracle and Java are registered trademarks of Oracle and/or its affiliates. 
 * Other names may be trademarks of their respective owners.]
 *
 * -----------------------------------
 * CombinedDomainCategoryPlotTest.java
 * -----------------------------------
 * (C) Copyright 2003-2020, by Object Refinery Limited and Contributors.
 *
 * Original Author:  David Gilbert (for Object Refinery Limited);
 * Contributor(s):   -;
 *
 * Changes
 * -------
 * 19-Aug-2003 : Version 1 (DG);
 * 03-Jan-2008 : Added testNotification() (DG);
 *
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>jfree</name><operator>.</operator><name>chart</name><operator>.</operator><name>plot</name></name>;</package>

<import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>jupiter</name><operator>.</operator><name>api</name><operator>.</operator><name>Assertions</name><operator>.</operator><name>assertEquals</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>jupiter</name><operator>.</operator><name>api</name><operator>.</operator><name>Assertions</name><operator>.</operator><name>assertTrue</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>Graphics2D</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>geom</name><operator>.</operator><name>Rectangle2D</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>image</name><operator>.</operator><name>BufferedImage</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>jfree</name><operator>.</operator><name>chart</name><operator>.</operator><name>JFreeChart</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>jfree</name><operator>.</operator><name>chart</name><operator>.</operator><name>TestUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>jfree</name><operator>.</operator><name>chart</name><operator>.</operator><name>axis</name><operator>.</operator><name>CategoryAxis</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>jfree</name><operator>.</operator><name>chart</name><operator>.</operator><name>axis</name><operator>.</operator><name>NumberAxis</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>jfree</name><operator>.</operator><name>chart</name><operator>.</operator><name>event</name><operator>.</operator><name>ChartChangeEvent</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>jfree</name><operator>.</operator><name>chart</name><operator>.</operator><name>event</name><operator>.</operator><name>ChartChangeListener</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>jfree</name><operator>.</operator><name>chart</name><operator>.</operator><name>labels</name><operator>.</operator><name>StandardCategoryToolTipGenerator</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>jfree</name><operator>.</operator><name>chart</name><operator>.</operator><name>renderer</name><operator>.</operator><name>category</name><operator>.</operator><name>BarRenderer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>jfree</name><operator>.</operator><name>chart</name><operator>.</operator><name>renderer</name><operator>.</operator><name>category</name><operator>.</operator><name>LineAndShapeRenderer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>jfree</name><operator>.</operator><name>data</name><operator>.</operator><name>category</name><operator>.</operator><name>CategoryDataset</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>jfree</name><operator>.</operator><name>data</name><operator>.</operator><name>category</name><operator>.</operator><name>DefaultCategoryDataset</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>jupiter</name><operator>.</operator><name>api</name><operator>.</operator><name>Test</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Tests for the {@link CombinedDomainCategoryPlot} class.
 */</comment>
<class><specifier>public</specifier> class <name>CombinedDomainCategoryPlotTest</name> <super_list><implements>implements <super><name>ChartChangeListener</name></super></implements></super_list> <block>{

    <comment type="block" format="javadoc">/** A list of the events received. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>List</name></type> <name>events</name> <init>= <expr><operator>new</operator> <call><name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Receives a chart change event.
     *
     * @param event  the event.
     */</comment>
    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>chartChanged</name><parameter_list>(<parameter><decl><type><name>ChartChangeEvent</name></type> <name>event</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>events</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * This is a test to replicate the bug report 987080.
     */</comment>
    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testRemoveSubplot</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>CombinedDomainCategoryPlot</name></type> <name>plot</name> <init>= <expr><operator>new</operator> <call><name>CombinedDomainCategoryPlot</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CategoryPlot</name></type> <name>plot1</name> <init>= <expr><operator>new</operator> <call><name>CategoryPlot</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CategoryPlot</name></type> <name>plot2</name> <init>= <expr><operator>new</operator> <call><name>CategoryPlot</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>plot</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>plot1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>plot</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>plot2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// remove plot2, but plot1 is removed instead</comment>
        <expr_stmt><expr><call><name><name>plot</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>plot2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>List</name></type> <name>plots</name> <init>= <expr><call><name><name>plot</name><operator>.</operator><name>getSubplots</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>plots</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>plot1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>plots</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Some checks for the equals() method.
     */</comment>
    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testEquals</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>CombinedDomainCategoryPlot</name></type> <name>plot1</name> <init>= <expr><call><name>createPlot</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CombinedDomainCategoryPlot</name></type> <name>plot2</name> <init>= <expr><call><name>createPlot</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>plot1</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>plot2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Some checks for cloning.
     */</comment>
    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testCloning</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>CloneNotSupportedException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>CombinedDomainCategoryPlot</name></type> <name>plot1</name> <init>= <expr><call><name>createPlot</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CombinedDomainCategoryPlot</name></type> <name>plot2</name> <init>= <expr><operator>(</operator><name>CombinedDomainCategoryPlot</name><operator>)</operator> 
                <call><name><name>plot1</name><operator>.</operator><name>clone</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><name>plot1</name> <operator>!=</operator> <name>plot2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>plot1</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>plot2</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>plot1</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>plot2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Serialize an instance, restore it, and check for equality.
     */</comment>
    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testSerialization</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>CombinedDomainCategoryPlot</name></type> <name>plot1</name> <init>= <expr><call><name>createPlot</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CombinedDomainCategoryPlot</name></type> <name>plot2</name> <init>= <expr><operator>(</operator><name>CombinedDomainCategoryPlot</name><operator>)</operator> 
                <call><name><name>TestUtils</name><operator>.</operator><name>serialised</name></name><argument_list>(<argument><expr><name>plot1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>plot1</name></expr></argument>, <argument><expr><name>plot2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Check that only one chart change event is generated by a change to a
     * subplot.
     */</comment>
    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testNotification</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>CombinedDomainCategoryPlot</name></type> <name>plot</name> <init>= <expr><call><name>createPlot</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>JFreeChart</name></type> <name>chart</name> <init>= <expr><operator>new</operator> <call><name>JFreeChart</name><argument_list>(<argument><expr><name>plot</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>chart</name><operator>.</operator><name>addChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>CategoryPlot</name></type> <name>subplot1</name> <init>= <expr><operator>(</operator><name>CategoryPlot</name><operator>)</operator> <call><name><name>plot</name><operator>.</operator><name>getSubplots</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>NumberAxis</name></type> <name>yAxis</name> <init>= <expr><operator>(</operator><name>NumberAxis</name><operator>)</operator> <call><name><name>subplot1</name><operator>.</operator><name>getRangeAxis</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>yAxis</name><operator>.</operator><name>setAutoRangeIncludesZero</name></name><argument_list>(<argument><expr><operator>!</operator><call><name><name>yAxis</name><operator>.</operator><name>getAutoRangeIncludesZero</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>this</name><operator>.</operator><name>events</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// a redraw should NOT trigger another change event</comment>
        <decl_stmt><decl><type><name>BufferedImage</name></type> <name>image</name> <init>= <expr><operator>new</operator> <call><name>BufferedImage</name><argument_list>(<argument><expr><literal type="number">200</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>,
                <argument><expr><name><name>BufferedImage</name><operator>.</operator><name>TYPE_INT_RGB</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Graphics2D</name></type> <name>g2</name> <init>= <expr><call><name><name>image</name><operator>.</operator><name>createGraphics</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>events</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>chart</name><operator>.</operator><name>draw</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><operator>new</operator> <call><name><name>Rectangle2D</name><operator>.</operator><name>Double</name></name><argument_list>(<argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><literal type="number">200.0</literal></expr></argument>, <argument><expr><literal type="number">100.0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>this</name><operator>.</operator><name>events</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Creates a dataset.
     *
     * @return A dataset.
     */</comment>
    <function><type><specifier>public</specifier> <name>CategoryDataset</name></type> <name>createDataset1</name><parameter_list>()</parameter_list> <block>{<block_content>

        <decl_stmt><decl><type><name>DefaultCategoryDataset</name></type> <name>result</name> <init>= <expr><operator>new</operator> <call><name>DefaultCategoryDataset</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// row keys...</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>series1</name> <init>= <expr><literal type="string">"First"</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>series2</name> <init>= <expr><literal type="string">"Second"</literal></expr></init></decl>;</decl_stmt>

        <comment type="line">// column keys...</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>type1</name> <init>= <expr><literal type="string">"Type 1"</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>type2</name> <init>= <expr><literal type="string">"Type 2"</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>type3</name> <init>= <expr><literal type="string">"Type 3"</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>type4</name> <init>= <expr><literal type="string">"Type 4"</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>type5</name> <init>= <expr><literal type="string">"Type 5"</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>type6</name> <init>= <expr><literal type="string">"Type 6"</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>type7</name> <init>= <expr><literal type="string">"Type 7"</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>type8</name> <init>= <expr><literal type="string">"Type 8"</literal></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addValue</name></name><argument_list>(<argument><expr><literal type="number">1.0</literal></expr></argument>, <argument><expr><name>series1</name></expr></argument>, <argument><expr><name>type1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addValue</name></name><argument_list>(<argument><expr><literal type="number">4.0</literal></expr></argument>, <argument><expr><name>series1</name></expr></argument>, <argument><expr><name>type2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addValue</name></name><argument_list>(<argument><expr><literal type="number">3.0</literal></expr></argument>, <argument><expr><name>series1</name></expr></argument>, <argument><expr><name>type3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addValue</name></name><argument_list>(<argument><expr><literal type="number">5.0</literal></expr></argument>, <argument><expr><name>series1</name></expr></argument>, <argument><expr><name>type4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addValue</name></name><argument_list>(<argument><expr><literal type="number">5.0</literal></expr></argument>, <argument><expr><name>series1</name></expr></argument>, <argument><expr><name>type5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addValue</name></name><argument_list>(<argument><expr><literal type="number">7.0</literal></expr></argument>, <argument><expr><name>series1</name></expr></argument>, <argument><expr><name>type6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addValue</name></name><argument_list>(<argument><expr><literal type="number">7.0</literal></expr></argument>, <argument><expr><name>series1</name></expr></argument>, <argument><expr><name>type7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addValue</name></name><argument_list>(<argument><expr><literal type="number">8.0</literal></expr></argument>, <argument><expr><name>series1</name></expr></argument>, <argument><expr><name>type8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addValue</name></name><argument_list>(<argument><expr><literal type="number">5.0</literal></expr></argument>, <argument><expr><name>series2</name></expr></argument>, <argument><expr><name>type1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addValue</name></name><argument_list>(<argument><expr><literal type="number">7.0</literal></expr></argument>, <argument><expr><name>series2</name></expr></argument>, <argument><expr><name>type2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addValue</name></name><argument_list>(<argument><expr><literal type="number">6.0</literal></expr></argument>, <argument><expr><name>series2</name></expr></argument>, <argument><expr><name>type3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addValue</name></name><argument_list>(<argument><expr><literal type="number">8.0</literal></expr></argument>, <argument><expr><name>series2</name></expr></argument>, <argument><expr><name>type4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addValue</name></name><argument_list>(<argument><expr><literal type="number">4.0</literal></expr></argument>, <argument><expr><name>series2</name></expr></argument>, <argument><expr><name>type5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addValue</name></name><argument_list>(<argument><expr><literal type="number">4.0</literal></expr></argument>, <argument><expr><name>series2</name></expr></argument>, <argument><expr><name>type6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addValue</name></name><argument_list>(<argument><expr><literal type="number">2.0</literal></expr></argument>, <argument><expr><name>series2</name></expr></argument>, <argument><expr><name>type7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addValue</name></name><argument_list>(<argument><expr><literal type="number">1.0</literal></expr></argument>, <argument><expr><name>series2</name></expr></argument>, <argument><expr><name>type8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>result</name></expr>;</return>

    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Creates a dataset.
     *
     * @return A dataset.
     */</comment>
    <function><type><specifier>public</specifier> <name>CategoryDataset</name></type> <name>createDataset2</name><parameter_list>()</parameter_list> <block>{<block_content>

        <decl_stmt><decl><type><name>DefaultCategoryDataset</name></type> <name>result</name> <init>= <expr><operator>new</operator> <call><name>DefaultCategoryDataset</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// row keys...</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>series1</name> <init>= <expr><literal type="string">"Third"</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>series2</name> <init>= <expr><literal type="string">"Fourth"</literal></expr></init></decl>;</decl_stmt>

        <comment type="line">// column keys...</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>type1</name> <init>= <expr><literal type="string">"Type 1"</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>type2</name> <init>= <expr><literal type="string">"Type 2"</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>type3</name> <init>= <expr><literal type="string">"Type 3"</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>type4</name> <init>= <expr><literal type="string">"Type 4"</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>type5</name> <init>= <expr><literal type="string">"Type 5"</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>type6</name> <init>= <expr><literal type="string">"Type 6"</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>type7</name> <init>= <expr><literal type="string">"Type 7"</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>type8</name> <init>= <expr><literal type="string">"Type 8"</literal></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addValue</name></name><argument_list>(<argument><expr><literal type="number">11.0</literal></expr></argument>, <argument><expr><name>series1</name></expr></argument>, <argument><expr><name>type1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addValue</name></name><argument_list>(<argument><expr><literal type="number">14.0</literal></expr></argument>, <argument><expr><name>series1</name></expr></argument>, <argument><expr><name>type2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addValue</name></name><argument_list>(<argument><expr><literal type="number">13.0</literal></expr></argument>, <argument><expr><name>series1</name></expr></argument>, <argument><expr><name>type3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addValue</name></name><argument_list>(<argument><expr><literal type="number">15.0</literal></expr></argument>, <argument><expr><name>series1</name></expr></argument>, <argument><expr><name>type4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addValue</name></name><argument_list>(<argument><expr><literal type="number">15.0</literal></expr></argument>, <argument><expr><name>series1</name></expr></argument>, <argument><expr><name>type5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addValue</name></name><argument_list>(<argument><expr><literal type="number">17.0</literal></expr></argument>, <argument><expr><name>series1</name></expr></argument>, <argument><expr><name>type6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addValue</name></name><argument_list>(<argument><expr><literal type="number">17.0</literal></expr></argument>, <argument><expr><name>series1</name></expr></argument>, <argument><expr><name>type7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addValue</name></name><argument_list>(<argument><expr><literal type="number">18.0</literal></expr></argument>, <argument><expr><name>series1</name></expr></argument>, <argument><expr><name>type8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addValue</name></name><argument_list>(<argument><expr><literal type="number">15.0</literal></expr></argument>, <argument><expr><name>series2</name></expr></argument>, <argument><expr><name>type1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addValue</name></name><argument_list>(<argument><expr><literal type="number">17.0</literal></expr></argument>, <argument><expr><name>series2</name></expr></argument>, <argument><expr><name>type2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addValue</name></name><argument_list>(<argument><expr><literal type="number">16.0</literal></expr></argument>, <argument><expr><name>series2</name></expr></argument>, <argument><expr><name>type3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addValue</name></name><argument_list>(<argument><expr><literal type="number">18.0</literal></expr></argument>, <argument><expr><name>series2</name></expr></argument>, <argument><expr><name>type4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addValue</name></name><argument_list>(<argument><expr><literal type="number">14.0</literal></expr></argument>, <argument><expr><name>series2</name></expr></argument>, <argument><expr><name>type5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addValue</name></name><argument_list>(<argument><expr><literal type="number">14.0</literal></expr></argument>, <argument><expr><name>series2</name></expr></argument>, <argument><expr><name>type6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addValue</name></name><argument_list>(<argument><expr><literal type="number">12.0</literal></expr></argument>, <argument><expr><name>series2</name></expr></argument>, <argument><expr><name>type7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addValue</name></name><argument_list>(<argument><expr><literal type="number">11.0</literal></expr></argument>, <argument><expr><name>series2</name></expr></argument>, <argument><expr><name>type8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>result</name></expr>;</return>

    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Creates a sample plot.
     *
     * @return A sample plot.
     */</comment>
    <function><type><specifier>private</specifier> <name>CombinedDomainCategoryPlot</name></type> <name>createPlot</name><parameter_list>()</parameter_list> <block>{<block_content>

        <decl_stmt><decl><type><name>CategoryDataset</name></type> <name>dataset1</name> <init>= <expr><call><name>createDataset1</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>NumberAxis</name></type> <name>rangeAxis1</name> <init>= <expr><operator>new</operator> <call><name>NumberAxis</name><argument_list>(<argument><expr><literal type="string">"Value"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>rangeAxis1</name><operator>.</operator><name>setStandardTickUnits</name></name><argument_list>(<argument><expr><call><name><name>NumberAxis</name><operator>.</operator><name>createIntegerTickUnits</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>LineAndShapeRenderer</name></type> <name>renderer1</name> <init>= <expr><operator>new</operator> <call><name>LineAndShapeRenderer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>renderer1</name><operator>.</operator><name>setDefaultToolTipGenerator</name></name><argument_list>(
            <argument><expr><operator>new</operator> <call><name>StandardCategoryToolTipGenerator</name><argument_list>()</argument_list></call></expr></argument>
        )</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>CategoryPlot</name></type> <name>subplot1</name> <init>= <expr><operator>new</operator> <call><name>CategoryPlot</name><argument_list>(
            <argument><expr><name>dataset1</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>rangeAxis1</name></expr></argument>, <argument><expr><name>renderer1</name></expr></argument>
        )</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>subplot1</name><operator>.</operator><name>setDomainGridlinesVisible</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>CategoryDataset</name></type> <name>dataset2</name> <init>= <expr><call><name>createDataset2</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>NumberAxis</name></type> <name>rangeAxis2</name> <init>= <expr><operator>new</operator> <call><name>NumberAxis</name><argument_list>(<argument><expr><literal type="string">"Value"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>rangeAxis2</name><operator>.</operator><name>setStandardTickUnits</name></name><argument_list>(<argument><expr><call><name><name>NumberAxis</name><operator>.</operator><name>createIntegerTickUnits</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>BarRenderer</name></type> <name>renderer2</name> <init>= <expr><operator>new</operator> <call><name>BarRenderer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>renderer2</name><operator>.</operator><name>setDefaultToolTipGenerator</name></name><argument_list>(
            <argument><expr><operator>new</operator> <call><name>StandardCategoryToolTipGenerator</name><argument_list>()</argument_list></call></expr></argument>
        )</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>CategoryPlot</name></type> <name>subplot2</name> <init>= <expr><operator>new</operator> <call><name>CategoryPlot</name><argument_list>(
            <argument><expr><name>dataset2</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>rangeAxis2</name></expr></argument>, <argument><expr><name>renderer2</name></expr></argument>
        )</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>subplot2</name><operator>.</operator><name>setDomainGridlinesVisible</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>CategoryAxis</name></type> <name>domainAxis</name> <init>= <expr><operator>new</operator> <call><name>CategoryAxis</name><argument_list>(<argument><expr><literal type="string">"Category"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CombinedDomainCategoryPlot</name></type> <name>plot</name>
            <init>= <expr><operator>new</operator> <call><name>CombinedDomainCategoryPlot</name><argument_list>(<argument><expr><name>domainAxis</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>plot</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>subplot1</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>plot</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>subplot2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>plot</name></expr>;</return>

    </block_content>}</block></function>

}</block></class>
</unit>

<unit><function><annotation>@<name>Test</name></annotation>  
    <type><specifier>public</specifier> <name>void</name></type> <name>testBugX</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>RectangleConstraint</name></type> <name>constraint</name> <init>= <expr><operator>new</operator> <call><name>RectangleConstraint</name><argument_list>(
                <argument><expr><operator>new</operator> <call><name>Range</name><argument_list>(<argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><literal type="number">200.0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>Range</name><argument_list>(<argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><literal type="number">100.0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>BlockContainer</name></type> <name>container</name> <init>= <expr><operator>new</operator> <call><name>BlockContainer</name><argument_list>(<argument><expr><operator>new</operator> <call><name>BorderArrangement</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>BufferedImage</name></type> <name>image</name> <init>= <expr><operator>new</operator> <call><name>BufferedImage</name><argument_list>(<argument><expr><literal type="number">200</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>,
                <argument><expr><name><name>BufferedImage</name><operator>.</operator><name>TYPE_INT_RGB</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Graphics2D</name></type> <name>g2</name> <init>= <expr><call><name><name>image</name><operator>.</operator><name>createGraphics</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>container</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>EmptyBlock</name><argument_list>(<argument><expr><literal type="number">10.0</literal></expr></argument>, <argument><expr><literal type="number">6.0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>RectangleEdge</name><operator>.</operator><name>LEFT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>container</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>EmptyBlock</name><argument_list>(<argument><expr><literal type="number">20.0</literal></expr></argument>, <argument><expr><literal type="number">6.0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>RectangleEdge</name><operator>.</operator><name>RIGHT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>container</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>EmptyBlock</name><argument_list>(<argument><expr><literal type="number">30.0</literal></expr></argument>, <argument><expr><literal type="number">6.0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Size2D</name></type> <name>size</name> <init>= <expr><call><name><name>container</name><operator>.</operator><name>arrange</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>constraint</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">60.0</literal></expr></argument>, <argument><expr><name><name>size</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name>EPSILON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">6.0</literal></expr></argument>, <argument><expr><name><name>size</name><operator>.</operator><name>height</name></name></expr></argument>, <argument><expr><name>EPSILON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>container</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>container</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>EmptyBlock</name><argument_list>(<argument><expr><literal type="number">10.0</literal></expr></argument>, <argument><expr><literal type="number">6.0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>RectangleEdge</name><operator>.</operator><name>LEFT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>container</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>EmptyBlock</name><argument_list>(<argument><expr><literal type="number">20.0</literal></expr></argument>, <argument><expr><literal type="number">6.0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>RectangleEdge</name><operator>.</operator><name>RIGHT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>container</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>EmptyBlock</name><argument_list>(<argument><expr><literal type="number">300.0</literal></expr></argument>, <argument><expr><literal type="number">6.0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>size</name> <operator>=</operator> <call><name><name>container</name><operator>.</operator><name>arrange</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>constraint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">200.0</literal></expr></argument>, <argument><expr><name><name>size</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name>EPSILON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">6.0</literal></expr></argument>, <argument><expr><name><name>size</name><operator>.</operator><name>height</name></name></expr></argument>, <argument><expr><name>EPSILON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>
}</unit>
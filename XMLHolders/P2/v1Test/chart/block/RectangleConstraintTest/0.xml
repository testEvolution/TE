<unit><function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testCalculateConstrainedSize</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Size2D</name></type> <name>s</name></decl>;</decl_stmt>

        <comment type="line">// NONE / NONE</comment>
        <decl_stmt><decl><type><name>RectangleConstraint</name></type> <name>c1</name> <init>= <expr><name><name>RectangleConstraint</name><operator>.</operator><name>NONE</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name><name>c1</name><operator>.</operator><name>calculateConstrainedSize</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Size2D</name><argument_list>(<argument><expr><literal type="number">1.2</literal></expr></argument>, <argument><expr><literal type="number">3.4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>s</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><literal type="number">1.2</literal></expr></argument>, <argument><expr><name>EPSILON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>s</name><operator>.</operator><name>height</name></name></expr></argument>, <argument><expr><literal type="number">3.4</literal></expr></argument>, <argument><expr><name>EPSILON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// NONE / RANGE</comment>
        <decl_stmt><decl><type><name>RectangleConstraint</name></type> <name>c2</name> <init>= <expr><operator>new</operator> <call><name>RectangleConstraint</name><argument_list>(
            <argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>Range</name><argument_list>(<argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>LengthConstraintType</name><operator>.</operator><name>NONE</name></name></expr></argument>,
            <argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>Range</name><argument_list>(<argument><expr><literal type="number">2.0</literal></expr></argument>, <argument><expr><literal type="number">3.0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>LengthConstraintType</name><operator>.</operator><name>RANGE</name></name></expr></argument>
        )</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name><name>c2</name><operator>.</operator><name>calculateConstrainedSize</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Size2D</name><argument_list>(<argument><expr><literal type="number">1.2</literal></expr></argument>, <argument><expr><literal type="number">3.4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>s</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><literal type="number">1.2</literal></expr></argument>, <argument><expr><name>EPSILON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>s</name><operator>.</operator><name>height</name></name></expr></argument>, <argument><expr><literal type="number">3.0</literal></expr></argument>, <argument><expr><name>EPSILON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// NONE / FIXED</comment>
        <decl_stmt><decl><type><name>RectangleConstraint</name></type> <name>c3</name> <init>= <expr><operator>new</operator> <call><name>RectangleConstraint</name><argument_list>(
            <argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name><name>LengthConstraintType</name><operator>.</operator><name>NONE</name></name></expr></argument>,
            <argument><expr><literal type="number">9.9</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name><name>LengthConstraintType</name><operator>.</operator><name>FIXED</name></name></expr></argument>
        )</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name><name>c3</name><operator>.</operator><name>calculateConstrainedSize</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Size2D</name><argument_list>(<argument><expr><literal type="number">1.2</literal></expr></argument>, <argument><expr><literal type="number">3.4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>s</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><literal type="number">1.2</literal></expr></argument>, <argument><expr><name>EPSILON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>s</name><operator>.</operator><name>height</name></name></expr></argument>, <argument><expr><literal type="number">9.9</literal></expr></argument>, <argument><expr><name>EPSILON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// RANGE / NONE</comment>
        <decl_stmt><decl><type><name>RectangleConstraint</name></type> <name>c4</name> <init>= <expr><operator>new</operator> <call><name>RectangleConstraint</name><argument_list>(
            <argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>Range</name><argument_list>(<argument><expr><literal type="number">2.0</literal></expr></argument>, <argument><expr><literal type="number">3.0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>LengthConstraintType</name><operator>.</operator><name>RANGE</name></name></expr></argument>,
            <argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>Range</name><argument_list>(<argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>LengthConstraintType</name><operator>.</operator><name>NONE</name></name></expr></argument>
        )</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name><name>c4</name><operator>.</operator><name>calculateConstrainedSize</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Size2D</name><argument_list>(<argument><expr><literal type="number">1.2</literal></expr></argument>, <argument><expr><literal type="number">3.4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>s</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><literal type="number">2.0</literal></expr></argument>, <argument><expr><name>EPSILON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>s</name><operator>.</operator><name>height</name></name></expr></argument>, <argument><expr><literal type="number">3.4</literal></expr></argument>, <argument><expr><name>EPSILON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// RANGE / RANGE</comment>
        <decl_stmt><decl><type><name>RectangleConstraint</name></type> <name>c5</name> <init>= <expr><operator>new</operator> <call><name>RectangleConstraint</name><argument_list>(
            <argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>Range</name><argument_list>(<argument><expr><literal type="number">2.0</literal></expr></argument>, <argument><expr><literal type="number">3.0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>LengthConstraintType</name><operator>.</operator><name>RANGE</name></name></expr></argument>,
            <argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>Range</name><argument_list>(<argument><expr><literal type="number">2.0</literal></expr></argument>, <argument><expr><literal type="number">3.0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>LengthConstraintType</name><operator>.</operator><name>RANGE</name></name></expr></argument>
        )</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name><name>c5</name><operator>.</operator><name>calculateConstrainedSize</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Size2D</name><argument_list>(<argument><expr><literal type="number">1.2</literal></expr></argument>, <argument><expr><literal type="number">3.4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>s</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><literal type="number">2.0</literal></expr></argument>, <argument><expr><name>EPSILON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>s</name><operator>.</operator><name>height</name></name></expr></argument>, <argument><expr><literal type="number">3.0</literal></expr></argument>, <argument><expr><name>EPSILON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// RANGE / FIXED</comment>
        <decl_stmt><decl><type><name>RectangleConstraint</name></type> <name>c6</name> <init>= <expr><operator>new</operator> <call><name>RectangleConstraint</name><argument_list>(
            <argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name><name>LengthConstraintType</name><operator>.</operator><name>NONE</name></name></expr></argument>,
            <argument><expr><literal type="number">9.9</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name><name>LengthConstraintType</name><operator>.</operator><name>FIXED</name></name></expr></argument>
        )</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name><name>c6</name><operator>.</operator><name>calculateConstrainedSize</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Size2D</name><argument_list>(<argument><expr><literal type="number">1.2</literal></expr></argument>, <argument><expr><literal type="number">3.4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>s</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><literal type="number">1.2</literal></expr></argument>, <argument><expr><name>EPSILON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>s</name><operator>.</operator><name>height</name></name></expr></argument>, <argument><expr><literal type="number">9.9</literal></expr></argument>, <argument><expr><name>EPSILON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// FIXED / NONE</comment>
        <decl_stmt><decl><type><name>RectangleConstraint</name></type> <name>c7</name> <init>= <expr><name><name>RectangleConstraint</name><operator>.</operator><name>NONE</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name><name>c7</name><operator>.</operator><name>calculateConstrainedSize</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Size2D</name><argument_list>(<argument><expr><literal type="number">1.2</literal></expr></argument>, <argument><expr><literal type="number">3.4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>s</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><literal type="number">1.2</literal></expr></argument>, <argument><expr><name>EPSILON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>s</name><operator>.</operator><name>height</name></name></expr></argument>, <argument><expr><literal type="number">3.4</literal></expr></argument>, <argument><expr><name>EPSILON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// FIXED / RANGE</comment>
        <decl_stmt><decl><type><name>RectangleConstraint</name></type> <name>c8</name> <init>= <expr><operator>new</operator> <call><name>RectangleConstraint</name><argument_list>(
            <argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>Range</name><argument_list>(<argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>LengthConstraintType</name><operator>.</operator><name>NONE</name></name></expr></argument>,
            <argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>Range</name><argument_list>(<argument><expr><literal type="number">2.0</literal></expr></argument>, <argument><expr><literal type="number">3.0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>LengthConstraintType</name><operator>.</operator><name>RANGE</name></name></expr></argument>
        )</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name><name>c8</name><operator>.</operator><name>calculateConstrainedSize</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Size2D</name><argument_list>(<argument><expr><literal type="number">1.2</literal></expr></argument>, <argument><expr><literal type="number">3.4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>s</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><literal type="number">1.2</literal></expr></argument>, <argument><expr><name>EPSILON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>s</name><operator>.</operator><name>height</name></name></expr></argument>, <argument><expr><literal type="number">3.0</literal></expr></argument>, <argument><expr><name>EPSILON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// FIXED / FIXED</comment>
        <decl_stmt><decl><type><name>RectangleConstraint</name></type> <name>c9</name> <init>= <expr><operator>new</operator> <call><name>RectangleConstraint</name><argument_list>(
            <argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name><name>LengthConstraintType</name><operator>.</operator><name>NONE</name></name></expr></argument>,
            <argument><expr><literal type="number">9.9</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name><name>LengthConstraintType</name><operator>.</operator><name>FIXED</name></name></expr></argument>
        )</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name><name>c9</name><operator>.</operator><name>calculateConstrainedSize</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Size2D</name><argument_list>(<argument><expr><literal type="number">1.2</literal></expr></argument>, <argument><expr><literal type="number">3.4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>s</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><literal type="number">1.2</literal></expr></argument>, <argument><expr><name>EPSILON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>s</name><operator>.</operator><name>height</name></name></expr></argument>, <argument><expr><literal type="number">9.9</literal></expr></argument>, <argument><expr><name>EPSILON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>
}</unit>
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="H:\Research\TestEvolution\DataAnalysis\jfreechart-1.5.2\jfreechart-1.5.2\src\test\java\org\jfree\data\RangeTest.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2020, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2.1 of the License, or
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301,
 * USA.
 *
 * [Oracle and Java are registered trademarks of Oracle and/or its affiliates. 
 * Other names may be trademarks of their respective owners.]
 *
 * --------------
 * RangeTest.java
 * --------------
 * (C) Copyright 2003-2020, by Object Refinery Limited and Contributors.
 *
 * Original Author:  David Gilbert (for Object Refinery Limited);
 * Contributor(s):   Sergei Ivanov;
 *
 * Changes
 * -------
 * 14-Aug-2003 : Version 1 (DG);
 * 18-Dec-2007 : Additional tests from Sergei Ivanov (DG);
 * 08-Jan-2012 : Added test for combine() method (DG);
 * 23-Feb-2014 : Added isNaNRange() test (DG);
 * 
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>jfree</name><operator>.</operator><name>data</name></name>;</package>

<import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>jupiter</name><operator>.</operator><name>api</name><operator>.</operator><name>Assertions</name><operator>.</operator><name>assertEquals</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>jupiter</name><operator>.</operator><name>api</name><operator>.</operator><name>Assertions</name><operator>.</operator><name>assertFalse</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>jupiter</name><operator>.</operator><name>api</name><operator>.</operator><name>Assertions</name><operator>.</operator><name>assertTrue</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>jupiter</name><operator>.</operator><name>api</name><operator>.</operator><name>Assertions</name><operator>.</operator><name>assertNull</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>jupiter</name><operator>.</operator><name>api</name><operator>.</operator><name>Assertions</name><operator>.</operator><name>fail</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>jfree</name><operator>.</operator><name>chart</name><operator>.</operator><name>TestUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>jupiter</name><operator>.</operator><name>api</name><operator>.</operator><name>Test</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Tests for the {@link Range} class.
 */</comment>
<class><specifier>public</specifier> class <name>RangeTest</name> <block>{

    <comment type="block" format="javadoc">/**
     * Confirm that the constructor initializes all the required fields.
     */</comment>
    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testConstructor</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Range</name></type> <name>r1</name> <init>= <expr><operator>new</operator> <call><name>Range</name><argument_list>(<argument><expr><literal type="number">0.1</literal></expr></argument>, <argument><expr><literal type="number">1000.0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>r1</name><operator>.</operator><name>getLowerBound</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0.1</literal></expr></argument>, <argument><expr><literal type="number">0.0d</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>r1</name><operator>.</operator><name>getUpperBound</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">1000.0</literal></expr></argument>, <argument><expr><literal type="number">0.0d</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <try>try <block>{<block_content>
            <comment type="block">/*Range r2 =*/</comment> <expr_stmt><expr><operator>new</operator> <call><name>Range</name><argument_list>(<argument><expr><literal type="number">10.0</literal></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"Lower bound cannot be greater than the upper"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <comment type="line">// expected</comment>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Confirm that the equals method can distinguish all the required fields.
     */</comment>
    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testEquals</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Range</name></type> <name>r1</name> <init>= <expr><operator>new</operator> <call><name>Range</name><argument_list>(<argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Range</name></type> <name>r2</name> <init>= <expr><operator>new</operator> <call><name>Range</name><argument_list>(<argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>r1</name></expr></argument>, <argument><expr><name>r2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>r2</name></expr></argument>, <argument><expr><name>r1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>r1</name> <operator>=</operator> <operator>new</operator> <call><name>Range</name><argument_list>(<argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>r2</name> <operator>=</operator> <operator>new</operator> <call><name>Range</name><argument_list>(<argument><expr><literal type="number">0.5</literal></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>r1</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>r2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>r1</name> <operator>=</operator> <operator>new</operator> <call><name>Range</name><argument_list>(<argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>r2</name> <operator>=</operator> <operator>new</operator> <call><name>Range</name><argument_list>(<argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><literal type="number">2.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>r1</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>r2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// a Range object cannot be equal to a different object type</comment>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>r1</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="number">0.0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Two objects that are equal are required to return the same hashCode.
     */</comment>
    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testHashCode</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Range</name></type> <name>a1</name> <init>= <expr><operator>new</operator> <call><name>Range</name><argument_list>(<argument><expr><literal type="number">1.0</literal></expr></argument>, <argument><expr><literal type="number">100.0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Range</name></type> <name>a2</name> <init>= <expr><operator>new</operator> <call><name>Range</name><argument_list>(<argument><expr><literal type="number">1.0</literal></expr></argument>, <argument><expr><literal type="number">100.0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>a1</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>a2</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>a1</name> <operator>=</operator> <operator>new</operator> <call><name>Range</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">100.0</literal></expr></argument>, <argument><expr><literal type="number">2.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>a2</name> <operator>=</operator> <operator>new</operator> <call><name>Range</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">100.0</literal></expr></argument>, <argument><expr><literal type="number">2.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>a1</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>a2</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Simple tests for the contains() method.
     */</comment>
    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testContains</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Range</name></type> <name>r1</name> <init>= <expr><operator>new</operator> <call><name>Range</name><argument_list>(<argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>r1</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name><name>Double</name><operator>.</operator><name>NaN</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>r1</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name><name>Double</name><operator>.</operator><name>NEGATIVE_INFINITY</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>r1</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>r1</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><literal type="number">0.0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>r1</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><literal type="number">0.5</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>r1</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>r1</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><literal type="number">2.0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>r1</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name><name>Double</name><operator>.</operator><name>POSITIVE_INFINITY</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Tests the constrain() method for various values.
     */</comment>
    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testConstrain</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Range</name></type> <name>r1</name> <init>= <expr><operator>new</operator> <call><name>Range</name><argument_list>(<argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>double</name></type> <name>d</name> <init>= <expr><call><name><name>r1</name><operator>.</operator><name>constrain</name></name><argument_list>(<argument><expr><literal type="number">0.5</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0.5</literal></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">0.0000001</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>d</name> <operator>=</operator> <call><name><name>r1</name><operator>.</operator><name>constrain</name></name><argument_list>(<argument><expr><literal type="number">0.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">0.0000001</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>d</name> <operator>=</operator> <call><name><name>r1</name><operator>.</operator><name>constrain</name></name><argument_list>(<argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1.0</literal></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">0.0000001</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>d</name> <operator>=</operator> <call><name><name>r1</name><operator>.</operator><name>constrain</name></name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">0.0000001</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>d</name> <operator>=</operator> <call><name><name>r1</name><operator>.</operator><name>constrain</name></name><argument_list>(<argument><expr><literal type="number">2.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1.0</literal></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">0.0000001</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>d</name> <operator>=</operator> <call><name><name>r1</name><operator>.</operator><name>constrain</name></name><argument_list>(<argument><expr><name><name>Double</name><operator>.</operator><name>POSITIVE_INFINITY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1.0</literal></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">0.0000001</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>d</name> <operator>=</operator> <call><name><name>r1</name><operator>.</operator><name>constrain</name></name><argument_list>(<argument><expr><name><name>Double</name><operator>.</operator><name>NEGATIVE_INFINITY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">0.0000001</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>d</name> <operator>=</operator> <call><name><name>r1</name><operator>.</operator><name>constrain</name></name><argument_list>(<argument><expr><name><name>Double</name><operator>.</operator><name>NaN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>Double</name><operator>.</operator><name>isNaN</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Simple tests for the intersects() method.
     */</comment>
    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testIntersects</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Range</name></type> <name>r1</name> <init>= <expr><operator>new</operator> <call><name>Range</name><argument_list>(<argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>r1</name><operator>.</operator><name>intersects</name></name><argument_list>(<argument><expr><operator>-</operator><literal type="number">2.0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>r1</name><operator>.</operator><name>intersects</name></name><argument_list>(<argument><expr><operator>-</operator><literal type="number">2.0</literal></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>r1</name><operator>.</operator><name>intersects</name></name><argument_list>(<argument><expr><operator>-</operator><literal type="number">2.0</literal></expr></argument>, <argument><expr><literal type="number">0.5</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>r1</name><operator>.</operator><name>intersects</name></name><argument_list>(<argument><expr><operator>-</operator><literal type="number">2.0</literal></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>r1</name><operator>.</operator><name>intersects</name></name><argument_list>(<argument><expr><operator>-</operator><literal type="number">2.0</literal></expr></argument>, <argument><expr><literal type="number">1.5</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>r1</name><operator>.</operator><name>intersects</name></name><argument_list>(<argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><literal type="number">0.5</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>r1</name><operator>.</operator><name>intersects</name></name><argument_list>(<argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>r1</name><operator>.</operator><name>intersects</name></name><argument_list>(<argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><literal type="number">1.5</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>r1</name><operator>.</operator><name>intersects</name></name><argument_list>(<argument><expr><literal type="number">0.5</literal></expr></argument>, <argument><expr><literal type="number">0.6</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>r1</name><operator>.</operator><name>intersects</name></name><argument_list>(<argument><expr><literal type="number">0.5</literal></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>r1</name><operator>.</operator><name>intersects</name></name><argument_list>(<argument><expr><literal type="number">0.5</literal></expr></argument>, <argument><expr><literal type="number">1.5</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>r1</name><operator>.</operator><name>intersects</name></name><argument_list>(<argument><expr><literal type="number">1.0</literal></expr></argument>, <argument><expr><literal type="number">1.1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>r1</name><operator>.</operator><name>intersects</name></name><argument_list>(<argument><expr><literal type="number">1.5</literal></expr></argument>, <argument><expr><literal type="number">2.0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * A simple test for the expand() method.
     */</comment>
    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testExpand</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Range</name></type> <name>r1</name> <init>= <expr><operator>new</operator> <call><name>Range</name><argument_list>(<argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><literal type="number">100.0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Range</name></type> <name>r2</name> <init>= <expr><call><name><name>Range</name><operator>.</operator><name>expand</name></name><argument_list>(<argument><expr><name>r1</name></expr></argument>, <argument><expr><literal type="number">0.10</literal></expr></argument>, <argument><expr><literal type="number">0.10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">10.0</literal></expr></argument>, <argument><expr><call><name><name>r2</name><operator>.</operator><name>getLowerBound</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0.001</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">110.0</literal></expr></argument>, <argument><expr><call><name><name>r2</name><operator>.</operator><name>getUpperBound</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0.001</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Expand by 0% does not change the range</comment>
        <expr_stmt><expr><name>r2</name> <operator>=</operator> <call><name><name>Range</name><operator>.</operator><name>expand</name></name><argument_list>(<argument><expr><name>r1</name></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>r1</name></expr></argument>, <argument><expr><name>r2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <try>try <block>{<block_content>
            <expr_stmt><expr><call><name><name>Range</name><operator>.</operator><name>expand</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="number">0.1</literal></expr></argument>, <argument><expr><literal type="number">0.1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"Null value is accepted"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        </block_content>}</block></catch></try>

        <comment type="line">// Lower &gt; upper: mid point is used</comment>
        <expr_stmt><expr><name>r2</name> <operator>=</operator> <call><name><name>Range</name><operator>.</operator><name>expand</name></name><argument_list>(<argument><expr><name>r1</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">0.8</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">0.5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">65.0</literal></expr></argument>, <argument><expr><call><name><name>r2</name><operator>.</operator><name>getLowerBound</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0.001</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">65.0</literal></expr></argument>, <argument><expr><call><name><name>r2</name><operator>.</operator><name>getUpperBound</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0.001</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * A simple test for the scale() method.
     */</comment>
    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testShift</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Range</name></type> <name>r1</name> <init>= <expr><operator>new</operator> <call><name>Range</name><argument_list>(<argument><expr><literal type="number">10.0</literal></expr></argument>, <argument><expr><literal type="number">20.0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Range</name></type> <name>r2</name> <init>= <expr><call><name><name>Range</name><operator>.</operator><name>shift</name></name><argument_list>(<argument><expr><name>r1</name></expr></argument>, <argument><expr><literal type="number">20.0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">30.0</literal></expr></argument>, <argument><expr><call><name><name>r2</name><operator>.</operator><name>getLowerBound</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0.001</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">40.0</literal></expr></argument>, <argument><expr><call><name><name>r2</name><operator>.</operator><name>getUpperBound</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0.001</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>r1</name> <operator>=</operator> <operator>new</operator> <call><name>Range</name><argument_list>(<argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><literal type="number">100.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>r2</name> <operator>=</operator> <call><name><name>Range</name><operator>.</operator><name>shift</name></name><argument_list>(<argument><expr><name>r1</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">50.0</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">50.0</literal></expr></argument>, <argument><expr><call><name><name>r2</name><operator>.</operator><name>getLowerBound</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0.001</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">50.0</literal></expr></argument>, <argument><expr><call><name><name>r2</name><operator>.</operator><name>getUpperBound</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0.001</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>r1</name> <operator>=</operator> <operator>new</operator> <call><name>Range</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">10.0</literal></expr></argument>, <argument><expr><literal type="number">20.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>r2</name> <operator>=</operator> <call><name><name>Range</name><operator>.</operator><name>shift</name></name><argument_list>(<argument><expr><name>r1</name></expr></argument>, <argument><expr><literal type="number">20.0</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">10.0</literal></expr></argument>, <argument><expr><call><name><name>r2</name><operator>.</operator><name>getLowerBound</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0.001</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">40.0</literal></expr></argument>, <argument><expr><call><name><name>r2</name><operator>.</operator><name>getUpperBound</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0.001</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>r1</name> <operator>=</operator> <operator>new</operator> <call><name>Range</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">10.0</literal></expr></argument>, <argument><expr><literal type="number">20.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>r2</name> <operator>=</operator> <call><name><name>Range</name><operator>.</operator><name>shift</name></name><argument_list>(<argument><expr><name>r1</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">30.0</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">40.0</literal></expr></argument>, <argument><expr><call><name><name>r2</name><operator>.</operator><name>getLowerBound</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0.001</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">10.0</literal></expr></argument>, <argument><expr><call><name><name>r2</name><operator>.</operator><name>getUpperBound</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0.001</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>r1</name> <operator>=</operator> <operator>new</operator> <call><name>Range</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">10.0</literal></expr></argument>, <argument><expr><literal type="number">20.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>r2</name> <operator>=</operator> <call><name><name>Range</name><operator>.</operator><name>shift</name></name><argument_list>(<argument><expr><name>r1</name></expr></argument>, <argument><expr><literal type="number">20.0</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><call><name><name>r2</name><operator>.</operator><name>getLowerBound</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0.001</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">40.0</literal></expr></argument>, <argument><expr><call><name><name>r2</name><operator>.</operator><name>getUpperBound</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0.001</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>r1</name> <operator>=</operator> <operator>new</operator> <call><name>Range</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">10.0</literal></expr></argument>, <argument><expr><literal type="number">20.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>r2</name> <operator>=</operator> <call><name><name>Range</name><operator>.</operator><name>shift</name></name><argument_list>(<argument><expr><name>r1</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">30.0</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">40.0</literal></expr></argument>, <argument><expr><call><name><name>r2</name><operator>.</operator><name>getLowerBound</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0.001</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><call><name><name>r2</name><operator>.</operator><name>getUpperBound</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0.001</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Shifting with a delta of 0 does not change the range</comment>
        <expr_stmt><expr><name>r2</name> <operator>=</operator> <call><name><name>Range</name><operator>.</operator><name>shift</name></name><argument_list>(<argument><expr><name>r1</name></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>r1</name></expr></argument>, <argument><expr><name>r2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <try>try <block>{<block_content>
            <expr_stmt><expr><call><name><name>Range</name><operator>.</operator><name>shift</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="number">0.1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"Null value is accepted"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * A simple test for the scale() method.
     */</comment>
    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testScale</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Range</name></type> <name>r1</name> <init>= <expr><operator>new</operator> <call><name>Range</name><argument_list>(<argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><literal type="number">100.0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Range</name></type> <name>r2</name> <init>= <expr><call><name><name>Range</name><operator>.</operator><name>scale</name></name><argument_list>(<argument><expr><name>r1</name></expr></argument>, <argument><expr><literal type="number">0.10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><call><name><name>r2</name><operator>.</operator><name>getLowerBound</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0.001</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">10.0</literal></expr></argument>, <argument><expr><call><name><name>r2</name><operator>.</operator><name>getUpperBound</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0.001</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>r1</name> <operator>=</operator> <operator>new</operator> <call><name>Range</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">10.0</literal></expr></argument>, <argument><expr><literal type="number">100.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>r2</name> <operator>=</operator> <call><name><name>Range</name><operator>.</operator><name>scale</name></name><argument_list>(<argument><expr><name>r1</name></expr></argument>, <argument><expr><literal type="number">2.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">20.0</literal></expr></argument>, <argument><expr><call><name><name>r2</name><operator>.</operator><name>getLowerBound</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0.001</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">200.0</literal></expr></argument>, <argument><expr><call><name><name>r2</name><operator>.</operator><name>getUpperBound</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0.001</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Scaling with a factor of 1 does not change the range</comment>
        <expr_stmt><expr><name>r2</name> <operator>=</operator> <call><name><name>Range</name><operator>.</operator><name>scale</name></name><argument_list>(<argument><expr><name>r1</name></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>r1</name></expr></argument>, <argument><expr><name>r2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <try>try <block>{<block_content>
            <expr_stmt><expr><call><name><name>Range</name><operator>.</operator><name>scale</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="number">0.1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"Null value is accepted"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        </block_content>}</block></catch></try>

        <try>try <block>{<block_content>
            <expr_stmt><expr><call><name><name>Range</name><operator>.</operator><name>scale</name></name><argument_list>(<argument><expr><name>r1</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">0.5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"Negative factor accepted"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Serialize an instance, restore it, and check for equality.
     */</comment>
    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testSerialization</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Range</name></type> <name>r1</name> <init>= <expr><operator>new</operator> <call><name>Range</name><argument_list>(<argument><expr><literal type="number">25.0</literal></expr></argument>, <argument><expr><literal type="number">133.42</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Range</name></type> <name>r2</name> <init>= <expr><operator>(</operator><name>Range</name><operator>)</operator> <call><name><name>TestUtils</name><operator>.</operator><name>serialised</name></name><argument_list>(<argument><expr><name>r1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>r1</name></expr></argument>, <argument><expr><name>r2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>double</name></type> <name>EPSILON</name> <init>= <expr><literal type="number">0.0000000001</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Some checks for the combine method.
     */</comment>
    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testCombine</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Range</name></type> <name>r1</name> <init>= <expr><operator>new</operator> <call><name>Range</name><argument_list>(<argument><expr><literal type="number">1.0</literal></expr></argument>, <argument><expr><literal type="number">2.0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Range</name></type> <name>r2</name> <init>= <expr><operator>new</operator> <call><name>Range</name><argument_list>(<argument><expr><literal type="number">1.5</literal></expr></argument>, <argument><expr><literal type="number">2.5</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>assertNull</name><argument_list>(<argument><expr><call><name><name>Range</name><operator>.</operator><name>combine</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>r1</name></expr></argument>, <argument><expr><call><name><name>Range</name><operator>.</operator><name>combine</name></name><argument_list>(<argument><expr><name>r1</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>r2</name></expr></argument>, <argument><expr><call><name><name>Range</name><operator>.</operator><name>combine</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>r2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Range</name><argument_list>(<argument><expr><literal type="number">1.0</literal></expr></argument>, <argument><expr><literal type="number">2.5</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>Range</name><operator>.</operator><name>combine</name></name><argument_list>(<argument><expr><name>r1</name></expr></argument>, <argument><expr><name>r2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Range</name></type> <name>r3</name> <init>= <expr><operator>new</operator> <call><name>Range</name><argument_list>(<argument><expr><name><name>Double</name><operator>.</operator><name>NaN</name></name></expr></argument>, <argument><expr><literal type="number">1.3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Range</name></type> <name>rr</name> <init>= <expr><call><name><name>Range</name><operator>.</operator><name>combine</name></name><argument_list>(<argument><expr><name>r1</name></expr></argument>, <argument><expr><name>r3</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>Double</name><operator>.</operator><name>isNaN</name></name><argument_list>(<argument><expr><call><name><name>rr</name><operator>.</operator><name>getLowerBound</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">2.0</literal></expr></argument>, <argument><expr><call><name><name>rr</name><operator>.</operator><name>getUpperBound</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>EPSILON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Range</name></type> <name>r4</name> <init>= <expr><operator>new</operator> <call><name>Range</name><argument_list>(<argument><expr><literal type="number">1.7</literal></expr></argument>, <argument><expr><name><name>Double</name><operator>.</operator><name>NaN</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>rr</name> <operator>=</operator> <call><name><name>Range</name><operator>.</operator><name>combine</name></name><argument_list>(<argument><expr><name>r4</name></expr></argument>, <argument><expr><name>r1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1.0</literal></expr></argument>, <argument><expr><call><name><name>rr</name><operator>.</operator><name>getLowerBound</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>EPSILON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>Double</name><operator>.</operator><name>isNaN</name></name><argument_list>(<argument><expr><call><name><name>rr</name><operator>.</operator><name>getUpperBound</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Some checks for the combineIgnoringNaN() method.
     */</comment>
    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testCombineIgnoringNaN</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Range</name></type> <name>r1</name> <init>= <expr><operator>new</operator> <call><name>Range</name><argument_list>(<argument><expr><literal type="number">1.0</literal></expr></argument>, <argument><expr><literal type="number">2.0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Range</name></type> <name>r2</name> <init>= <expr><operator>new</operator> <call><name>Range</name><argument_list>(<argument><expr><literal type="number">1.5</literal></expr></argument>, <argument><expr><literal type="number">2.5</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>assertNull</name><argument_list>(<argument><expr><call><name><name>Range</name><operator>.</operator><name>combineIgnoringNaN</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>r1</name></expr></argument>, <argument><expr><call><name><name>Range</name><operator>.</operator><name>combineIgnoringNaN</name></name><argument_list>(<argument><expr><name>r1</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>r2</name></expr></argument>, <argument><expr><call><name><name>Range</name><operator>.</operator><name>combineIgnoringNaN</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>r2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Range</name><argument_list>(<argument><expr><literal type="number">1.0</literal></expr></argument>, <argument><expr><literal type="number">2.5</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>Range</name><operator>.</operator><name>combineIgnoringNaN</name></name><argument_list>(<argument><expr><name>r1</name></expr></argument>, <argument><expr><name>r2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Range</name></type> <name>r3</name> <init>= <expr><operator>new</operator> <call><name>Range</name><argument_list>(<argument><expr><name><name>Double</name><operator>.</operator><name>NaN</name></name></expr></argument>, <argument><expr><literal type="number">1.3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Range</name></type> <name>rr</name> <init>= <expr><call><name><name>Range</name><operator>.</operator><name>combineIgnoringNaN</name></name><argument_list>(<argument><expr><name>r1</name></expr></argument>, <argument><expr><name>r3</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1.0</literal></expr></argument>, <argument><expr><call><name><name>rr</name><operator>.</operator><name>getLowerBound</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>EPSILON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">2.0</literal></expr></argument>, <argument><expr><call><name><name>rr</name><operator>.</operator><name>getUpperBound</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>EPSILON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Range</name></type> <name>r4</name> <init>= <expr><operator>new</operator> <call><name>Range</name><argument_list>(<argument><expr><literal type="number">1.7</literal></expr></argument>, <argument><expr><name><name>Double</name><operator>.</operator><name>NaN</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>rr</name> <operator>=</operator> <call><name><name>Range</name><operator>.</operator><name>combineIgnoringNaN</name></name><argument_list>(<argument><expr><name>r4</name></expr></argument>, <argument><expr><name>r1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1.0</literal></expr></argument>, <argument><expr><call><name><name>rr</name><operator>.</operator><name>getLowerBound</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>EPSILON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">2.0</literal></expr></argument>, <argument><expr><call><name><name>rr</name><operator>.</operator><name>getUpperBound</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>EPSILON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>
    
    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testIsNaNRange</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Range</name><argument_list>(<argument><expr><name><name>Double</name><operator>.</operator><name>NaN</name></name></expr></argument>, <argument><expr><name><name>Double</name><operator>.</operator><name>NaN</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>isNaNRange</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Range</name><argument_list>(<argument><expr><literal type="number">1.0</literal></expr></argument>, <argument><expr><literal type="number">2.0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>isNaNRange</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Range</name><argument_list>(<argument><expr><name><name>Double</name><operator>.</operator><name>NaN</name></name></expr></argument>, <argument><expr><literal type="number">2.0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>isNaNRange</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Range</name><argument_list>(<argument><expr><literal type="number">1.0</literal></expr></argument>, <argument><expr><name><name>Double</name><operator>.</operator><name>NaN</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>isNaNRange</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>
}</block></class>
</unit>

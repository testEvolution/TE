<unit><function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testMaximumStackedRangeValue</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>double</name></type> <name>v1</name> <init>= <expr><literal type="number">24.3</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>v2</name> <init>= <expr><literal type="number">14.2</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>v3</name> <init>= <expr><literal type="number">33.2</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>v4</name> <init>= <expr><literal type="number">32.4</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>v5</name> <init>= <expr><literal type="number">26.3</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>v6</name> <init>= <expr><literal type="number">22.6</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Number</name></type> <name>answer</name> <init>= <expr><call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><name>v1</name> <operator>+</operator> <name>v2</name> <operator>+</operator> <name>v3</name></expr></argument>, <argument><expr><name>v4</name> <operator>+</operator> <name>v5</name> <operator>+</operator> <name>v6</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>DefaultCategoryDataset</name></type> <name>d</name> <init>= <expr><operator>new</operator> <call><name>DefaultCategoryDataset</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>d</name><operator>.</operator><name>addValue</name></name><argument_list>(<argument><expr><name>v1</name></expr></argument>, <argument><expr><literal type="string">"Row 0"</literal></expr></argument>, <argument><expr><literal type="string">"Column 0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>d</name><operator>.</operator><name>addValue</name></name><argument_list>(<argument><expr><name>v2</name></expr></argument>, <argument><expr><literal type="string">"Row 1"</literal></expr></argument>, <argument><expr><literal type="string">"Column 0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>d</name><operator>.</operator><name>addValue</name></name><argument_list>(<argument><expr><name>v3</name></expr></argument>, <argument><expr><literal type="string">"Row 2"</literal></expr></argument>, <argument><expr><literal type="string">"Column 0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>d</name><operator>.</operator><name>addValue</name></name><argument_list>(<argument><expr><name>v4</name></expr></argument>, <argument><expr><literal type="string">"Row 0"</literal></expr></argument>, <argument><expr><literal type="string">"Column 1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>d</name><operator>.</operator><name>addValue</name></name><argument_list>(<argument><expr><name>v5</name></expr></argument>, <argument><expr><literal type="string">"Row 1"</literal></expr></argument>, <argument><expr><literal type="string">"Column 1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>d</name><operator>.</operator><name>addValue</name></name><argument_list>(<argument><expr><name>v6</name></expr></argument>, <argument><expr><literal type="string">"Row 2"</literal></expr></argument>, <argument><expr><literal type="string">"Column 1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Number</name></type> <name>max</name> <init>= <expr><call><name><name>DatasetUtils</name><operator>.</operator><name>findMaximumStackedRangeValue</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>max</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>answer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    </unit>
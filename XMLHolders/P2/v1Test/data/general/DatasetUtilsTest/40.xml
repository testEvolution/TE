<unit><function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testLimitPieDataset</name><parameter_list>()</parameter_list> <block>{<block_content>

        <comment type="line">// check that empty dataset is handled OK</comment>
        <decl_stmt><decl><type><name>DefaultPieDataset</name></type> <name>d1</name> <init>= <expr><operator>new</operator> <call><name>DefaultPieDataset</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>PieDataset</name></type> <name>d2</name> <init>= <expr><call><name><name>DatasetUtils</name><operator>.</operator><name>createConsolidatedPieDataset</name></name><argument_list>(<argument><expr><name>d1</name></expr></argument>,
                <argument><expr><literal type="string">"Other"</literal></expr></argument>, <argument><expr><literal type="number">0.05</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>d2</name><operator>.</operator><name>getItemCount</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// check that minItem limit is observed</comment>
        <expr_stmt><expr><call><name><name>d1</name><operator>.</operator><name>setValue</name></name><argument_list>(<argument><expr><literal type="string">"Item 1"</literal></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>d1</name><operator>.</operator><name>setValue</name></name><argument_list>(<argument><expr><literal type="string">"Item 2"</literal></expr></argument>, <argument><expr><literal type="number">49.50</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>d1</name><operator>.</operator><name>setValue</name></name><argument_list>(<argument><expr><literal type="string">"Item 3"</literal></expr></argument>, <argument><expr><literal type="number">49.50</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>d2</name> <operator>=</operator> <call><name><name>DatasetUtils</name><operator>.</operator><name>createConsolidatedPieDataset</name></name><argument_list>(<argument><expr><name>d1</name></expr></argument>, <argument><expr><literal type="string">"Other"</literal></expr></argument>, <argument><expr><literal type="number">0.05</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><call><name><name>d2</name><operator>.</operator><name>getItemCount</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"Item 1"</literal></expr></argument>, <argument><expr><call><name><name>d2</name><operator>.</operator><name>getKey</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"Item 2"</literal></expr></argument>, <argument><expr><call><name><name>d2</name><operator>.</operator><name>getKey</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"Item 3"</literal></expr></argument>, <argument><expr><call><name><name>d2</name><operator>.</operator><name>getKey</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// check that minItem limit is observed</comment>
        <expr_stmt><expr><call><name><name>d1</name><operator>.</operator><name>setValue</name></name><argument_list>(<argument><expr><literal type="string">"Item 4"</literal></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>d2</name> <operator>=</operator> <call><name><name>DatasetUtils</name><operator>.</operator><name>createConsolidatedPieDataset</name></name><argument_list>(<argument><expr><name>d1</name></expr></argument>, <argument><expr><literal type="string">"Other"</literal></expr></argument>, <argument><expr><literal type="number">0.05</literal></expr></argument>,
                <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// and that simple aggregation works</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><call><name><name>d2</name><operator>.</operator><name>getItemCount</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"Item 2"</literal></expr></argument>, <argument><expr><call><name><name>d2</name><operator>.</operator><name>getKey</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"Item 3"</literal></expr></argument>, <argument><expr><call><name><name>d2</name><operator>.</operator><name>getKey</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"Other"</literal></expr></argument>, <argument><expr><call><name><name>d2</name><operator>.</operator><name>getKey</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">2.0</literal></expr></argument>, <argument><expr><call><name><name>d2</name><operator>.</operator><name>getValue</name></name><argument_list>(<argument><expr><literal type="string">"Other"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></function>

    </unit>
<unit><function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testKeyCount</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>KeyToGroupMap</name></type> <name>m1</name> <init>= <expr><operator>new</operator> <call><name>KeyToGroupMap</name><argument_list>(<argument><expr><literal type="string">"Default Group"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// a new map always has 1 group (the default group)</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>m1</name><operator>.</operator><name>getKeyCount</name></name><argument_list>(<argument><expr><literal type="string">"Default Group"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// simple case</comment>
        <expr_stmt><expr><call><name><name>m1</name><operator>.</operator><name>mapKeyToGroup</name></name><argument_list>(<argument><expr><literal type="string">"K1"</literal></expr></argument>, <argument><expr><literal type="string">"G1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>m1</name><operator>.</operator><name>getKeyCount</name></name><argument_list>(<argument><expr><literal type="string">"G1"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>m1</name><operator>.</operator><name>mapKeyToGroup</name></name><argument_list>(<argument><expr><literal type="string">"K1"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>m1</name><operator>.</operator><name>getKeyCount</name></name><argument_list>(<argument><expr><literal type="string">"G1"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// if there is an explicit mapping to the default group, it is counted</comment>
        <expr_stmt><expr><call><name><name>m1</name><operator>.</operator><name>mapKeyToGroup</name></name><argument_list>(<argument><expr><literal type="string">"K2"</literal></expr></argument>, <argument><expr><literal type="string">"Default Group"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>m1</name><operator>.</operator><name>getKeyCount</name></name><argument_list>(<argument><expr><literal type="string">"Default Group"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// complicate things a little...</comment>
        <expr_stmt><expr><call><name><name>m1</name><operator>.</operator><name>mapKeyToGroup</name></name><argument_list>(<argument><expr><literal type="string">"K3"</literal></expr></argument>, <argument><expr><literal type="string">"Default Group"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>m1</name><operator>.</operator><name>mapKeyToGroup</name></name><argument_list>(<argument><expr><literal type="string">"K4"</literal></expr></argument>, <argument><expr><literal type="string">"G2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>m1</name><operator>.</operator><name>mapKeyToGroup</name></name><argument_list>(<argument><expr><literal type="string">"K5"</literal></expr></argument>, <argument><expr><literal type="string">"G2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>m1</name><operator>.</operator><name>mapKeyToGroup</name></name><argument_list>(<argument><expr><literal type="string">"K6"</literal></expr></argument>, <argument><expr><literal type="string">"Default Group"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><call><name><name>m1</name><operator>.</operator><name>getKeyCount</name></name><argument_list>(<argument><expr><literal type="string">"Default Group"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name><name>m1</name><operator>.</operator><name>getKeyCount</name></name><argument_list>(<argument><expr><literal type="string">"G2"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// now overwrite group "G2"...</comment>
        <expr_stmt><expr><call><name><name>m1</name><operator>.</operator><name>mapKeyToGroup</name></name><argument_list>(<argument><expr><literal type="string">"K4"</literal></expr></argument>, <argument><expr><literal type="string">"G1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>m1</name><operator>.</operator><name>mapKeyToGroup</name></name><argument_list>(<argument><expr><literal type="string">"K5"</literal></expr></argument>, <argument><expr><literal type="string">"G1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name><name>m1</name><operator>.</operator><name>getKeyCount</name></name><argument_list>(<argument><expr><literal type="string">"G1"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>m1</name><operator>.</operator><name>getKeyCount</name></name><argument_list>(<argument><expr><literal type="string">"G2"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    </unit>
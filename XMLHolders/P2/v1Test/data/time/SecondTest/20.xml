<unit><function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testNext</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Second</name></type> <name>s</name> <init>= <expr><operator>new</operator> <call><name>Second</name><argument_list>(<argument><expr><literal type="number">55</literal></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><literal type="number">2000</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>s</name> <operator>=</operator> <operator>(</operator><name>Second</name><operator>)</operator> <call><name><name>s</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">2000</literal></expr></argument>, <argument><expr><call><name><name>s</name><operator>.</operator><name>getMinute</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getHour</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getYear</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><call><name><name>s</name><operator>.</operator><name>getMinute</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getHour</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getMonth</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><call><name><name>s</name><operator>.</operator><name>getMinute</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getHour</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDayOfMonth</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>s</name><operator>.</operator><name>getMinute</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getHour</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getHour</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">30</literal></expr></argument>, <argument><expr><call><name><name>s</name><operator>.</operator><name>getMinute</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getMinute</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">56</literal></expr></argument>, <argument><expr><call><name><name>s</name><operator>.</operator><name>getSecond</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>s</name> <operator>=</operator> <operator>new</operator> <call><name>Second</name><argument_list>(<argument><expr><literal type="number">59</literal></expr></argument>, <argument><expr><literal type="number">59</literal></expr></argument>, <argument><expr><literal type="number">23</literal></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><literal type="number">9999</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertNull</name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    </unit>
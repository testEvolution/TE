<unit><function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testHashcode</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Millisecond</name></type> <name>m1</name> <init>= <expr><operator>new</operator> <call><name>Millisecond</name><argument_list>(<argument><expr><literal type="number">599</literal></expr></argument>, <argument><expr><literal type="number">23</literal></expr></argument>, <argument><expr><literal type="number">45</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">2007</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Millisecond</name></type> <name>m2</name> <init>= <expr><operator>new</operator> <call><name>Millisecond</name><argument_list>(<argument><expr><literal type="number">599</literal></expr></argument>, <argument><expr><literal type="number">23</literal></expr></argument>, <argument><expr><literal type="number">45</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">2007</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>m1</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>m2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>hash1</name> <init>= <expr><call><name><name>m1</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>hash2</name> <init>= <expr><call><name><name>m2</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>hash1</name></expr></argument>, <argument><expr><name>hash2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    </unit>
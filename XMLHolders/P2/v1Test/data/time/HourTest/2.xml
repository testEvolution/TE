<unit><function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testDateConstructor1</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>TimeZone</name></type> <name>zone</name> <init>= <expr><call><name><name>TimeZone</name><operator>.</operator><name>getTimeZone</name></name><argument_list>(<argument><expr><literal type="string">"GMT"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Calendar</name></type> <name>cal</name> <init>= <expr><call><name><name>Calendar</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><name>zone</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Locale</name></type> <name>locale</name> <init>= <expr><call><name><name>Locale</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>  <comment type="line">// locale should not matter here</comment>
        <decl_stmt><decl><type><name>Hour</name></type> <name>h1</name> <init>= <expr><operator>new</operator> <call><name>Hour</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><literal type="number">1014307199999L</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>zone</name></expr></argument>, <argument><expr><name>locale</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Hour</name></type> <name>h2</name> <init>= <expr><operator>new</operator> <call><name>Hour</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><literal type="number">1014307200000L</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>zone</name></expr></argument>, <argument><expr><name>locale</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">15</literal></expr></argument>, <argument><expr><call><name><name>h1</name><operator>.</operator><name>getHour</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1014307199999L</literal></expr></argument>, <argument><expr><call><name><name>h1</name><operator>.</operator><name>getLastMillisecond</name></name><argument_list>(<argument><expr><name>cal</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><call><name><name>h2</name><operator>.</operator><name>getHour</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1014307200000L</literal></expr></argument>, <argument><expr><call><name><name>h2</name><operator>.</operator><name>getFirstMillisecond</name></name><argument_list>(<argument><expr><name>cal</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    </unit>
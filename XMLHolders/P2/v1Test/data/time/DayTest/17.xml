<unit><function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testParseDay</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>ParseException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>GregorianCalendar</name></type> <name>gc</name> <init>= <expr><operator>new</operator> <call><name>GregorianCalendar</name><argument_list>(<argument><expr><literal type="number">2001</literal></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>SimpleDateFormat</name></type> <name>format</name> <init>= <expr><operator>new</operator> <call><name>SimpleDateFormat</name><argument_list>(<argument><expr><literal type="string">"dd/MM/yyyy"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Date</name></type> <name>reference</name> <init>= <expr><call><name><name>format</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><literal type="string">"31/12/2001"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>reference</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>gc</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <comment type="line">// test 1...</comment>
            <decl_stmt><decl><type><name>Day</name></type> <name>d</name> <init>= <expr><call><name><name>Day</name><operator>.</operator><name>parseDay</name></name><argument_list>(<argument><expr><literal type="string">"31/12/2001"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">37256</literal></expr></argument>, <argument><expr><call><name><name>d</name><operator>.</operator><name>getSerialDate</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toSerial</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// test 2...</comment>
        <decl_stmt><decl><type><name>Day</name></type> <name>d</name> <init>= <expr><call><name><name>Day</name><operator>.</operator><name>parseDay</name></name><argument_list>(<argument><expr><literal type="string">"2001-12-31"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">37256</literal></expr></argument>, <argument><expr><call><name><name>d</name><operator>.</operator><name>getSerialDate</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toSerial</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    </unit>
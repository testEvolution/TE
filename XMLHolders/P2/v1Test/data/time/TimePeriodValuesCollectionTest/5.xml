<unit><function><annotation>@<name>Test</name></annotation> 
    <type><specifier>public</specifier> <name>void</name></type> <name>testGetDomainBoundsWithInterval</name><parameter_list>()</parameter_list> <block>{<block_content>
        <comment type="line">// check empty dataset</comment>
        <decl_stmt><decl><type><name>TimePeriodValuesCollection</name></type> <name>dataset</name> <init>= <expr><operator>new</operator> <call><name>TimePeriodValuesCollection</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Range</name></type> <name>r</name> <init>= <expr><call><name><name>dataset</name><operator>.</operator><name>getDomainBounds</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertNull</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <comment type="line">// check dataset with one time period</comment>
        <decl_stmt><decl><type><name>TimePeriodValues</name></type> <name>s1</name> <init>= <expr><operator>new</operator> <call><name>TimePeriodValues</name><argument_list>(<argument><expr><literal type="string">"S1"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>s1</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>SimpleTimePeriod</name><argument_list>(<argument><expr><literal type="number">1000L</literal></expr></argument>, <argument><expr><literal type="number">2000L</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>dataset</name><operator>.</operator><name>addSeries</name></name><argument_list>(<argument><expr><name>s1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name><name>dataset</name><operator>.</operator><name>getDomainBounds</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1000.0</literal></expr></argument>, <argument><expr><call><name><name>r</name><operator>.</operator><name>getLowerBound</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>EPSILON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">2000.0</literal></expr></argument>, <argument><expr><call><name><name>r</name><operator>.</operator><name>getUpperBound</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>EPSILON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <comment type="line">// check dataset with two time periods</comment>
        <expr_stmt><expr><call><name><name>s1</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>SimpleTimePeriod</name><argument_list>(<argument><expr><literal type="number">1500L</literal></expr></argument>, <argument><expr><literal type="number">3000L</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">2.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name><name>dataset</name><operator>.</operator><name>getDomainBounds</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1000.0</literal></expr></argument>, <argument><expr><call><name><name>r</name><operator>.</operator><name>getLowerBound</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>EPSILON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">3000.0</literal></expr></argument>, <argument><expr><call><name><name>r</name><operator>.</operator><name>getUpperBound</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>EPSILON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <comment type="line">// add a third time period</comment>
        <expr_stmt><expr><call><name><name>s1</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>SimpleTimePeriod</name><argument_list>(<argument><expr><literal type="number">6000L</literal></expr></argument>, <argument><expr><literal type="number">7000L</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1.5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name><name>dataset</name><operator>.</operator><name>getDomainBounds</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1000.0</literal></expr></argument>, <argument><expr><call><name><name>r</name><operator>.</operator><name>getLowerBound</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>EPSILON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">7000.0</literal></expr></argument>, <argument><expr><call><name><name>r</name><operator>.</operator><name>getUpperBound</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>EPSILON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// add a fourth time period</comment>
        <expr_stmt><expr><call><name><name>s1</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>SimpleTimePeriod</name><argument_list>(<argument><expr><literal type="number">4000L</literal></expr></argument>, <argument><expr><literal type="number">5000L</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1.4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name><name>dataset</name><operator>.</operator><name>getDomainBounds</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1000.0</literal></expr></argument>, <argument><expr><call><name><name>r</name><operator>.</operator><name>getLowerBound</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>EPSILON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">7000.0</literal></expr></argument>, <argument><expr><call><name><name>r</name><operator>.</operator><name>getUpperBound</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>EPSILON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
    </block_content>}</block></function>
}</unit>
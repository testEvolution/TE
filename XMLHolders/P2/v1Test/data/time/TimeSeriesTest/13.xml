<unit><function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testCreateCopy1</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>TimeSeries</name></type> <name>series</name> <init>= <expr><operator>new</operator> <call><name>TimeSeries</name><argument_list>(<argument><expr><literal type="string">"Series"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>series</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Month</name><argument_list>(<argument><expr><name><name>MonthConstants</name><operator>.</operator><name>JANUARY</name></name></expr></argument>, <argument><expr><literal type="number">2003</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">45.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>series</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Month</name><argument_list>(<argument><expr><name><name>MonthConstants</name><operator>.</operator><name>FEBRUARY</name></name></expr></argument>, <argument><expr><literal type="number">2003</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">55.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>series</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Month</name><argument_list>(<argument><expr><name><name>MonthConstants</name><operator>.</operator><name>JUNE</name></name></expr></argument>, <argument><expr><literal type="number">2003</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">35.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>series</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Month</name><argument_list>(<argument><expr><name><name>MonthConstants</name><operator>.</operator><name>NOVEMBER</name></name></expr></argument>, <argument><expr><literal type="number">2003</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">85.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>series</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Month</name><argument_list>(<argument><expr><name><name>MonthConstants</name><operator>.</operator><name>DECEMBER</name></name></expr></argument>, <argument><expr><literal type="number">2003</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">75.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <try>try <block>{<block_content>
            <comment type="line">// copy a range before the start of the series data...</comment>
            <decl_stmt><decl><type><name>TimeSeries</name></type> <name>result1</name> <init>= <expr><call><name><name>series</name><operator>.</operator><name>createCopy</name></name><argument_list>(
                    <argument><expr><operator>new</operator> <call><name>Month</name><argument_list>(<argument><expr><name><name>MonthConstants</name><operator>.</operator><name>NOVEMBER</name></name></expr></argument>, <argument><expr><literal type="number">2002</literal></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><operator>new</operator> <call><name>Month</name><argument_list>(<argument><expr><name><name>MonthConstants</name><operator>.</operator><name>DECEMBER</name></name></expr></argument>, <argument><expr><literal type="number">2002</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>result1</name><operator>.</operator><name>getItemCount</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// copy a range that includes only the first item in the series...</comment>
            <decl_stmt><decl><type><name>TimeSeries</name></type> <name>result2</name> <init>= <expr><call><name><name>series</name><operator>.</operator><name>createCopy</name></name><argument_list>(
                    <argument><expr><operator>new</operator> <call><name>Month</name><argument_list>(<argument><expr><name><name>MonthConstants</name><operator>.</operator><name>NOVEMBER</name></name></expr></argument>, <argument><expr><literal type="number">2002</literal></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><operator>new</operator> <call><name>Month</name><argument_list>(<argument><expr><name><name>MonthConstants</name><operator>.</operator><name>JANUARY</name></name></expr></argument>, <argument><expr><literal type="number">2003</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>result2</name><operator>.</operator><name>getItemCount</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// copy a range that begins before and ends in the middle of the</comment>
            <comment type="line">// series...</comment>
            <decl_stmt><decl><type><name>TimeSeries</name></type> <name>result3</name> <init>= <expr><call><name><name>series</name><operator>.</operator><name>createCopy</name></name><argument_list>(
                    <argument><expr><operator>new</operator> <call><name>Month</name><argument_list>(<argument><expr><name><name>MonthConstants</name><operator>.</operator><name>NOVEMBER</name></name></expr></argument>, <argument><expr><literal type="number">2002</literal></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><operator>new</operator> <call><name>Month</name><argument_list>(<argument><expr><name><name>MonthConstants</name><operator>.</operator><name>APRIL</name></name></expr></argument>, <argument><expr><literal type="number">2003</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name><name>result3</name><operator>.</operator><name>getItemCount</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>TimeSeries</name></type> <name>result4</name> <init>= <expr><call><name><name>series</name><operator>.</operator><name>createCopy</name></name><argument_list>(
                    <argument><expr><operator>new</operator> <call><name>Month</name><argument_list>(<argument><expr><name><name>MonthConstants</name><operator>.</operator><name>NOVEMBER</name></name></expr></argument>, <argument><expr><literal type="number">2002</literal></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><operator>new</operator> <call><name>Month</name><argument_list>(<argument><expr><name><name>MonthConstants</name><operator>.</operator><name>DECEMBER</name></name></expr></argument>, <argument><expr><literal type="number">2003</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><call><name><name>result4</name><operator>.</operator><name>getItemCount</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>TimeSeries</name></type> <name>result5</name> <init>= <expr><call><name><name>series</name><operator>.</operator><name>createCopy</name></name><argument_list>(
                    <argument><expr><operator>new</operator> <call><name>Month</name><argument_list>(<argument><expr><name><name>MonthConstants</name><operator>.</operator><name>NOVEMBER</name></name></expr></argument>, <argument><expr><literal type="number">2002</literal></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><operator>new</operator> <call><name>Month</name><argument_list>(<argument><expr><name><name>MonthConstants</name><operator>.</operator><name>MARCH</name></name></expr></argument>, <argument><expr><literal type="number">2004</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><call><name><name>result5</name><operator>.</operator><name>getItemCount</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>TimeSeries</name></type> <name>result6</name> <init>= <expr><call><name><name>series</name><operator>.</operator><name>createCopy</name></name><argument_list>(
                    <argument><expr><operator>new</operator> <call><name>Month</name><argument_list>(<argument><expr><name><name>MonthConstants</name><operator>.</operator><name>JANUARY</name></name></expr></argument>, <argument><expr><literal type="number">2003</literal></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><operator>new</operator> <call><name>Month</name><argument_list>(<argument><expr><name><name>MonthConstants</name><operator>.</operator><name>JANUARY</name></name></expr></argument>, <argument><expr><literal type="number">2003</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>result6</name><operator>.</operator><name>getItemCount</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>TimeSeries</name></type> <name>result7</name> <init>= <expr><call><name><name>series</name><operator>.</operator><name>createCopy</name></name><argument_list>(
                    <argument><expr><operator>new</operator> <call><name>Month</name><argument_list>(<argument><expr><name><name>MonthConstants</name><operator>.</operator><name>JANUARY</name></name></expr></argument>, <argument><expr><literal type="number">2003</literal></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><operator>new</operator> <call><name>Month</name><argument_list>(<argument><expr><name><name>MonthConstants</name><operator>.</operator><name>APRIL</name></name></expr></argument>, <argument><expr><literal type="number">2003</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name><name>result7</name><operator>.</operator><name>getItemCount</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>TimeSeries</name></type> <name>result8</name> <init>= <expr><call><name><name>series</name><operator>.</operator><name>createCopy</name></name><argument_list>(
                    <argument><expr><operator>new</operator> <call><name>Month</name><argument_list>(<argument><expr><name><name>MonthConstants</name><operator>.</operator><name>JANUARY</name></name></expr></argument>, <argument><expr><literal type="number">2003</literal></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><operator>new</operator> <call><name>Month</name><argument_list>(<argument><expr><name><name>MonthConstants</name><operator>.</operator><name>DECEMBER</name></name></expr></argument>, <argument><expr><literal type="number">2003</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><call><name><name>result8</name><operator>.</operator><name>getItemCount</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>TimeSeries</name></type> <name>result9</name> <init>= <expr><call><name><name>series</name><operator>.</operator><name>createCopy</name></name><argument_list>(
                    <argument><expr><operator>new</operator> <call><name>Month</name><argument_list>(<argument><expr><name><name>MonthConstants</name><operator>.</operator><name>JANUARY</name></name></expr></argument>, <argument><expr><literal type="number">2003</literal></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><operator>new</operator> <call><name>Month</name><argument_list>(<argument><expr><name><name>MonthConstants</name><operator>.</operator><name>MARCH</name></name></expr></argument>, <argument><expr><literal type="number">2004</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><call><name><name>result9</name><operator>.</operator><name>getItemCount</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>TimeSeries</name></type> <name>result10</name> <init>= <expr><call><name><name>series</name><operator>.</operator><name>createCopy</name></name><argument_list>(
                    <argument><expr><operator>new</operator> <call><name>Month</name><argument_list>(<argument><expr><name><name>MonthConstants</name><operator>.</operator><name>MAY</name></name></expr></argument>, <argument><expr><literal type="number">2003</literal></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><operator>new</operator> <call><name>Month</name><argument_list>(<argument><expr><name><name>MonthConstants</name><operator>.</operator><name>DECEMBER</name></name></expr></argument>, <argument><expr><literal type="number">2003</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><call><name><name>result10</name><operator>.</operator><name>getItemCount</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>TimeSeries</name></type> <name>result11</name> <init>= <expr><call><name><name>series</name><operator>.</operator><name>createCopy</name></name><argument_list>(
                    <argument><expr><operator>new</operator> <call><name>Month</name><argument_list>(<argument><expr><name><name>MonthConstants</name><operator>.</operator><name>MAY</name></name></expr></argument>, <argument><expr><literal type="number">2003</literal></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><operator>new</operator> <call><name>Month</name><argument_list>(<argument><expr><name><name>MonthConstants</name><operator>.</operator><name>MARCH</name></name></expr></argument>, <argument><expr><literal type="number">2004</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><call><name><name>result11</name><operator>.</operator><name>getItemCount</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>TimeSeries</name></type> <name>result12</name> <init>= <expr><call><name><name>series</name><operator>.</operator><name>createCopy</name></name><argument_list>(
                    <argument><expr><operator>new</operator> <call><name>Month</name><argument_list>(<argument><expr><name><name>MonthConstants</name><operator>.</operator><name>DECEMBER</name></name></expr></argument>, <argument><expr><literal type="number">2003</literal></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><operator>new</operator> <call><name>Month</name><argument_list>(<argument><expr><name><name>MonthConstants</name><operator>.</operator><name>DECEMBER</name></name></expr></argument>, <argument><expr><literal type="number">2003</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>result12</name><operator>.</operator><name>getItemCount</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>TimeSeries</name></type> <name>result13</name> <init>= <expr><call><name><name>series</name><operator>.</operator><name>createCopy</name></name><argument_list>(
                    <argument><expr><operator>new</operator> <call><name>Month</name><argument_list>(<argument><expr><name><name>MonthConstants</name><operator>.</operator><name>DECEMBER</name></name></expr></argument>, <argument><expr><literal type="number">2003</literal></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><operator>new</operator> <call><name>Month</name><argument_list>(<argument><expr><name><name>MonthConstants</name><operator>.</operator><name>MARCH</name></name></expr></argument>, <argument><expr><literal type="number">2004</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>result13</name><operator>.</operator><name>getItemCount</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>TimeSeries</name></type> <name>result14</name> <init>= <expr><call><name><name>series</name><operator>.</operator><name>createCopy</name></name><argument_list>(
                    <argument><expr><operator>new</operator> <call><name>Month</name><argument_list>(<argument><expr><name><name>MonthConstants</name><operator>.</operator><name>JANUARY</name></name></expr></argument>, <argument><expr><literal type="number">2004</literal></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><operator>new</operator> <call><name>Month</name><argument_list>(<argument><expr><name><name>MonthConstants</name><operator>.</operator><name>MARCH</name></name></expr></argument>, <argument><expr><literal type="number">2004</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>result14</name><operator>.</operator><name>getItemCount</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>CloneNotSupportedException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    </unit>
<unit><function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testCreateCopy2</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>TimeSeries</name></type> <name>series</name> <init>= <expr><operator>new</operator> <call><name>TimeSeries</name><argument_list>(<argument><expr><literal type="string">"Series"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>series</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Month</name><argument_list>(<argument><expr><name><name>MonthConstants</name><operator>.</operator><name>JANUARY</name></name></expr></argument>, <argument><expr><literal type="number">2003</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">45.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>series</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Month</name><argument_list>(<argument><expr><name><name>MonthConstants</name><operator>.</operator><name>FEBRUARY</name></name></expr></argument>, <argument><expr><literal type="number">2003</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">55.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>series</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Month</name><argument_list>(<argument><expr><name><name>MonthConstants</name><operator>.</operator><name>JUNE</name></name></expr></argument>, <argument><expr><literal type="number">2003</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">35.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>series</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Month</name><argument_list>(<argument><expr><name><name>MonthConstants</name><operator>.</operator><name>NOVEMBER</name></name></expr></argument>, <argument><expr><literal type="number">2003</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">85.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>series</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Month</name><argument_list>(<argument><expr><name><name>MonthConstants</name><operator>.</operator><name>DECEMBER</name></name></expr></argument>, <argument><expr><literal type="number">2003</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">75.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <try>try <block>{<block_content>
            <comment type="line">// copy just the first item...</comment>
            <decl_stmt><decl><type><name>TimeSeries</name></type> <name>result1</name> <init>= <expr><call><name><name>series</name><operator>.</operator><name>createCopy</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Month</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2003</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>result1</name><operator>.</operator><name>getTimePeriod</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// copy the first two items...</comment>
            <expr_stmt><expr><name>result1</name> <operator>=</operator> <call><name><name>series</name><operator>.</operator><name>createCopy</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Month</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2003</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>result1</name><operator>.</operator><name>getTimePeriod</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// copy the middle three items...</comment>
            <expr_stmt><expr><name>result1</name> <operator>=</operator> <call><name><name>series</name><operator>.</operator><name>createCopy</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Month</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2003</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>result1</name><operator>.</operator><name>getTimePeriod</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Month</name><argument_list>(<argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><literal type="number">2003</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>result1</name><operator>.</operator><name>getTimePeriod</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// copy the last two items...</comment>
            <expr_stmt><expr><name>result1</name> <operator>=</operator> <call><name><name>series</name><operator>.</operator><name>createCopy</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Month</name><argument_list>(<argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><literal type="number">2003</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>result1</name><operator>.</operator><name>getTimePeriod</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Month</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><literal type="number">2003</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>result1</name><operator>.</operator><name>getTimePeriod</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// copy the last item...</comment>
            <expr_stmt><expr><name>result1</name> <operator>=</operator> <call><name><name>series</name><operator>.</operator><name>createCopy</name></name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Month</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><literal type="number">2003</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>result1</name><operator>.</operator><name>getTimePeriod</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>CloneNotSupportedException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></catch></try>

        <comment type="line">// check negative first argument</comment>
        <decl_stmt><decl><type><name>boolean</name></type> <name>pass</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
        <try>try <block>{<block_content>
            <comment type="block">/* TimeSeries result = */</comment> <expr_stmt><expr><call><name><name>series</name><operator>.</operator><name>createCopy</name></name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>IllegalArgumentException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name>pass</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        </block_content>}</block></catch>
        <catch>catch <parameter_list>(<parameter><decl><type><name>CloneNotSupportedException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name>pass</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        </block_content>}</block></catch></try>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><name>pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// check second argument less than first argument</comment>
        <expr_stmt><expr><name>pass</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        <try>try <block>{<block_content>
            <comment type="block">/* TimeSeries result = */</comment> <expr_stmt><expr><call><name><name>series</name><operator>.</operator><name>createCopy</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>IllegalArgumentException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name>pass</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        </block_content>}</block></catch>
        <catch>catch <parameter_list>(<parameter><decl><type><name>CloneNotSupportedException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name>pass</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        </block_content>}</block></catch></try>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><name>pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>TimeSeries</name></type> <name>series2</name> <init>= <expr><operator>new</operator> <call><name>TimeSeries</name><argument_list>(<argument><expr><literal type="string">"Series 2"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <block>{<block_content>
            <decl_stmt><decl><type><name>TimeSeries</name></type> <name>series3</name> <init>= <expr><call><name><name>series2</name><operator>.</operator><name>createCopy</name></name><argument_list>(<argument><expr><literal type="number">99</literal></expr></argument>, <argument><expr><literal type="number">999</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>series3</name><operator>.</operator><name>getItemCount</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>CloneNotSupportedException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    </unit>
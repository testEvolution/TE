<unit><function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testConstructor</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Locale</name></type> <name>savedLocale</name> <init>= <expr><call><name><name>Locale</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>TimeZone</name></type> <name>savedZone</name> <init>= <expr><call><name><name>TimeZone</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>Locale</name><operator>.</operator><name>setDefault</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Locale</name><argument_list>(<argument><expr><literal type="string">"da"</literal></expr></argument>, <argument><expr><literal type="string">"DK"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>TimeZone</name><operator>.</operator><name>setDefault</name></name><argument_list>(<argument><expr><call><name><name>TimeZone</name><operator>.</operator><name>getTimeZone</name></name><argument_list>(<argument><expr><literal type="string">"Europe/Copenhagen"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>GregorianCalendar</name></type> <name>cal</name> <init>= <expr><operator>(</operator><name>GregorianCalendar</name><operator>)</operator> <call><name><name>Calendar</name><operator>.</operator><name>getInstance</name></name><argument_list>(
                <argument><expr><call><name><name>TimeZone</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>Locale</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// first day of week is monday</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Calendar</name><operator>.</operator><name>MONDAY</name></name></expr></argument>, <argument><expr><call><name><name>cal</name><operator>.</operator><name>getFirstDayOfWeek</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cal</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="number">2007</literal></expr></argument>, <argument><expr><name><name>Calendar</name><operator>.</operator><name>AUGUST</name></name></expr></argument>, <argument><expr><literal type="number">26</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cal</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name><name>Calendar</name><operator>.</operator><name>MILLISECOND</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Date</name></type> <name>t</name> <init>= <expr><call><name><name>cal</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Week</name></type> <name>w</name> <init>= <expr><operator>new</operator> <call><name>Week</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><call><name><name>TimeZone</name><operator>.</operator><name>getTimeZone</name></name><argument_list>(<argument><expr><literal type="string">"Europe/Copenhagen"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>Locale</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">34</literal></expr></argument>, <argument><expr><call><name><name>w</name><operator>.</operator><name>getWeek</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>Locale</name><operator>.</operator><name>setDefault</name></name><argument_list>(<argument><expr><name><name>Locale</name><operator>.</operator><name>US</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>TimeZone</name><operator>.</operator><name>setDefault</name></name><argument_list>(<argument><expr><call><name><name>TimeZone</name><operator>.</operator><name>getTimeZone</name></name><argument_list>(<argument><expr><literal type="string">"US/Detroit"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>cal</name> <operator>=</operator> <operator>(</operator><name>GregorianCalendar</name><operator>)</operator> <call><name><name>Calendar</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><call><name><name>TimeZone</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// first day of week is Sunday</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Calendar</name><operator>.</operator><name>SUNDAY</name></name></expr></argument>, <argument><expr><call><name><name>cal</name><operator>.</operator><name>getFirstDayOfWeek</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cal</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="number">2007</literal></expr></argument>, <argument><expr><name><name>Calendar</name><operator>.</operator><name>AUGUST</name></name></expr></argument>, <argument><expr><literal type="number">26</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cal</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name><name>Calendar</name><operator>.</operator><name>MILLISECOND</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>t</name> <operator>=</operator> <call><name><name>cal</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>w</name> <operator>=</operator> <operator>new</operator> <call><name>Week</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><call><name><name>TimeZone</name><operator>.</operator><name>getTimeZone</name></name><argument_list>(<argument><expr><literal type="string">"Europe/Copenhagen"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>Locale</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">35</literal></expr></argument>, <argument><expr><call><name><name>w</name><operator>.</operator><name>getWeek</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>w</name> <operator>=</operator> <operator>new</operator> <call><name>Week</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><call><name><name>TimeZone</name><operator>.</operator><name>getTimeZone</name></name><argument_list>(<argument><expr><literal type="string">"Europe/Copenhagen"</literal></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><operator>new</operator> <call><name>Locale</name><argument_list>(<argument><expr><literal type="string">"da"</literal></expr></argument>, <argument><expr><literal type="string">"DK"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">34</literal></expr></argument>, <argument><expr><call><name><name>w</name><operator>.</operator><name>getWeek</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>Locale</name><operator>.</operator><name>setDefault</name></name><argument_list>(<argument><expr><name>savedLocale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>TimeZone</name><operator>.</operator><name>setDefault</name></name><argument_list>(<argument><expr><name>savedZone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    </unit>
<unit><function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testCalculateBoxAndWhiskerStatistics</name><parameter_list>()</parameter_list> <block>{<block_content>

        <comment type="line">// try null list</comment>
        <decl_stmt><decl><type><name>boolean</name></type> <name>pass</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
        <try>try <block>{<block_content>
            <expr_stmt><expr><call><name><name>BoxAndWhiskerCalculator</name><operator>.</operator><name>calculateBoxAndWhiskerStatistics</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>IllegalArgumentException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name>pass</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        </block_content>}</block></catch></try>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><name>pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// try a list containing a single value</comment>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Double</name></argument>&gt;</argument_list></name></type> <name>values</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>values</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="number">1.1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>BoxAndWhiskerItem</name></type> <name>item</name>
            <init>= <expr><call><name><name>BoxAndWhiskerCalculator</name><operator>.</operator><name>calculateBoxAndWhiskerStatistics</name></name><argument_list>(<argument><expr><name>values</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1.1</literal></expr></argument>, <argument><expr><call><name><name>item</name><operator>.</operator><name>getMean</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>doubleValue</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>EPSILON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1.1</literal></expr></argument>, <argument><expr><call><name><name>item</name><operator>.</operator><name>getMedian</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>doubleValue</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>EPSILON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1.1</literal></expr></argument>, <argument><expr><call><name><name>item</name><operator>.</operator><name>getQ1</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>doubleValue</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>EPSILON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1.1</literal></expr></argument>, <argument><expr><call><name><name>item</name><operator>.</operator><name>getQ3</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>doubleValue</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>EPSILON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    </unit>
<unit><function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testGetRangeBounds</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>DefaultStatisticalCategoryDataset</name></type> <name>d</name>
                <init>= <expr><operator>new</operator> <call><name>DefaultStatisticalCategoryDataset</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// an empty dataset should return null for bounds</comment>
        <expr_stmt><expr><call><name>assertNull</name><argument_list>(<argument><expr><call><name><name>d</name><operator>.</operator><name>getRangeBounds</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// try a dataset with a single value</comment>
        <expr_stmt><expr><call><name><name>d</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="number">4.5</literal></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>, <argument><expr><literal type="string">"R1"</literal></expr></argument>, <argument><expr><literal type="string">"C1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Range</name><argument_list>(<argument><expr><literal type="number">4.5</literal></expr></argument>, <argument><expr><literal type="number">4.5</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>d</name><operator>.</operator><name>getRangeBounds</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Range</name><argument_list>(<argument><expr><literal type="number">3.5</literal></expr></argument>, <argument><expr><literal type="number">5.5</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>d</name><operator>.</operator><name>getRangeBounds</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// try a dataset with two values</comment>
        <expr_stmt><expr><call><name><name>d</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="number">0.5</literal></expr></argument>, <argument><expr><literal type="number">2.0</literal></expr></argument>, <argument><expr><literal type="string">"R1"</literal></expr></argument>, <argument><expr><literal type="string">"C2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Range</name><argument_list>(<argument><expr><literal type="number">0.5</literal></expr></argument>, <argument><expr><literal type="number">4.5</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>d</name><operator>.</operator><name>getRangeBounds</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Range</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1.5</literal></expr></argument>, <argument><expr><literal type="number">5.5</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>d</name><operator>.</operator><name>getRangeBounds</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// try a Double.NaN</comment>
        <expr_stmt><expr><call><name><name>d</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>Double</name><operator>.</operator><name>NaN</name></name></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><literal type="string">"R1"</literal></expr></argument>, <argument><expr><literal type="string">"C3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Range</name><argument_list>(<argument><expr><literal type="number">0.5</literal></expr></argument>, <argument><expr><literal type="number">4.5</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>d</name><operator>.</operator><name>getRangeBounds</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Range</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1.5</literal></expr></argument>, <argument><expr><literal type="number">5.5</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>d</name><operator>.</operator><name>getRangeBounds</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// try a Double.NEGATIVE_INFINITY</comment>
        <expr_stmt><expr><call><name><name>d</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>Double</name><operator>.</operator><name>NEGATIVE_INFINITY</name></name></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><literal type="string">"R1"</literal></expr></argument>, <argument><expr><literal type="string">"C3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Range</name><argument_list>(<argument><expr><name><name>Double</name><operator>.</operator><name>NEGATIVE_INFINITY</name></name></expr></argument>, <argument><expr><literal type="number">4.5</literal></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><call><name><name>d</name><operator>.</operator><name>getRangeBounds</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Range</name><argument_list>(<argument><expr><name><name>Double</name><operator>.</operator><name>NEGATIVE_INFINITY</name></name></expr></argument>, <argument><expr><literal type="number">5.5</literal></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><call><name><name>d</name><operator>.</operator><name>getRangeBounds</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// try a Double.POSITIVE_INFINITY</comment>
        <expr_stmt><expr><call><name><name>d</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>Double</name><operator>.</operator><name>POSITIVE_INFINITY</name></name></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><literal type="string">"R1"</literal></expr></argument>, <argument><expr><literal type="string">"C3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Range</name><argument_list>(<argument><expr><literal type="number">0.5</literal></expr></argument>, <argument><expr><name><name>Double</name><operator>.</operator><name>POSITIVE_INFINITY</name></name></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><call><name><name>d</name><operator>.</operator><name>getRangeBounds</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Range</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1.5</literal></expr></argument>, <argument><expr><name><name>Double</name><operator>.</operator><name>POSITIVE_INFINITY</name></name></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><call><name><name>d</name><operator>.</operator><name>getRangeBounds</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    </unit>
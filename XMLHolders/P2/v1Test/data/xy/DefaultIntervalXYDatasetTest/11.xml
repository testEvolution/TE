<unit><function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testCloning2</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>CloneNotSupportedException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>DefaultIntervalXYDataset</name></type> <name>d1</name> <init>= <expr><operator>new</operator> <call><name>DefaultIntervalXYDataset</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>double</name><index>[]</index></name></type> <name>x1</name> <init>= <expr><operator>new</operator> <name><name>double</name><index>[]</index></name> <block>{<expr><literal type="number">1.0</literal></expr>, <expr><literal type="number">2.0</literal></expr>, <expr><literal type="number">3.0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>double</name><index>[]</index></name></type> <name>x1Start</name> <init>= <expr><operator>new</operator> <name><name>double</name><index>[]</index></name> <block>{<expr><literal type="number">0.9</literal></expr>, <expr><literal type="number">1.9</literal></expr>, <expr><literal type="number">2.9</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>double</name><index>[]</index></name></type> <name>x1End</name> <init>= <expr><operator>new</operator> <name><name>double</name><index>[]</index></name> <block>{<expr><literal type="number">1.1</literal></expr>, <expr><literal type="number">2.1</literal></expr>, <expr><literal type="number">3.1</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>double</name><index>[]</index></name></type> <name>y1</name> <init>= <expr><operator>new</operator> <name><name>double</name><index>[]</index></name> <block>{<expr><literal type="number">4.0</literal></expr>, <expr><literal type="number">5.0</literal></expr>, <expr><literal type="number">6.0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>double</name><index>[]</index></name></type> <name>y1Start</name> <init>= <expr><operator>new</operator> <name><name>double</name><index>[]</index></name> <block>{<expr><literal type="number">1.09</literal></expr>, <expr><literal type="number">2.09</literal></expr>, <expr><literal type="number">3.09</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>double</name><index>[]</index></name></type> <name>y1End</name> <init>= <expr><operator>new</operator> <name><name>double</name><index>[]</index></name> <block>{<expr><literal type="number">1.11</literal></expr>, <expr><literal type="number">2.11</literal></expr>, <expr><literal type="number">3.11</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>double</name><index>[]</index><index>[]</index></name></type> <name>data1</name> <init>= <expr><operator>new</operator> <name><name>double</name><index>[]</index><index>[]</index></name> <block>{<expr><name>x1</name></expr>, <expr><name>x1Start</name></expr>, <expr><name>x1End</name></expr>, <expr><name>y1</name></expr>, <expr><name>y1Start</name></expr>,
                <expr><name>y1End</name></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>d1</name><operator>.</operator><name>addSeries</name></name><argument_list>(<argument><expr><literal type="string">"S1"</literal></expr></argument>, <argument><expr><name>data1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>DefaultIntervalXYDataset</name></type> <name>d2</name> <init>= <expr><operator>(</operator><name>DefaultIntervalXYDataset</name><operator>)</operator> <call><name><name>d1</name><operator>.</operator><name>clone</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><name>d1</name> <operator>!=</operator> <name>d2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>d1</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>d2</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>d1</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>d2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// check independence</comment>
        <expr_stmt><expr><name><name>x1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">111.1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>d1</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>d2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    </unit>
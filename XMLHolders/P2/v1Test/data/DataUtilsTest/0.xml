<unit><function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testCreateNumberArray2D</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>double</name><index>[]</index><index>[]</index></name></type> <name>d</name> <init>= <expr><operator>new</operator> <name><name>double</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>new</operator> <name><name>double</name><index>[]</index></name> <block>{<expr><literal type="number">1.1</literal></expr>, <expr><literal type="number">2.2</literal></expr>, <expr><literal type="number">3.3</literal></expr>, <expr><literal type="number">4.4</literal></expr>}</block></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>new</operator> <name><name>double</name><index>[]</index></name> <block>{<expr><literal type="number">1.1</literal></expr>, <expr><literal type="number">2.2</literal></expr>, <expr><literal type="number">3.3</literal></expr>, <expr><literal type="number">4.4</literal></expr>, <expr><literal type="number">5.5</literal></expr>}</block></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>Number</name><index>[]</index><index>[]</index></name></type> <name>n</name> <init>= <expr><call><name><name>DataUtils</name><operator>.</operator><name>createNumberArray2D</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>n</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name><name>n</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name><name>n</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    </unit>
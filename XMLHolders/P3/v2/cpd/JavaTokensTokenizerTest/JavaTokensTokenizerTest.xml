<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="H:\Research\TestEvolution\DataAnalysis\pmd-pmd_releases-6.21.0\pmd-pmd_releases-6.21.0\pmd-java\src\test\java\net\sourceforge\pmd\cpd\JavaTokensTokenizerTest.java"><comment type="block" format="javadoc">/**
 * BSD-style license; for more info see http://pmd.sourceforge.net/license.html
 */</comment>

<package>package <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>cpd</name></name>;</package>

<import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name><operator>.</operator><name>assertEquals</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Test</name></name>;</import>

<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>PMD</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>java</name><operator>.</operator><name>ast</name><operator>.</operator><name>JavaParserConstants</name></name>;</import>

<class><specifier>public</specifier> class <name>JavaTokensTokenizerTest</name> <block>{

    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>test1</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>Tokenizer</name></type> <name>tokenizer</name> <init>= <expr><operator>new</operator> <call><name>JavaTokenizer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>SourceCode</name></type> <name>sourceCode</name> <init>= <expr><operator>new</operator> <call><name>SourceCode</name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>SourceCode</name><operator>.</operator><name>StringCodeLoader</name></name><argument_list>(<argument><expr><literal type="string">"public class Foo {}"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Tokens</name></type> <name>tokens</name> <init>= <expr><operator>new</operator> <call><name>Tokens</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>tokenizer</name><operator>.</operator><name>tokenize</name></name><argument_list>(<argument><expr><name>sourceCode</name></expr></argument>, <argument><expr><name>tokens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><call><name><name>tokens</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"public class Foo {}"</literal></expr></argument>, <argument><expr><call><name><name>sourceCode</name><operator>.</operator><name>getSlice</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testCommentsIgnored</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>Tokenizer</name></type> <name>tokenizer</name> <init>= <expr><operator>new</operator> <call><name>JavaTokenizer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>SourceCode</name></type> <name>sourceCode</name> <init>= <expr><operator>new</operator> <call><name>SourceCode</name><argument_list>(
                <argument><expr><operator>new</operator> <call><name><name>SourceCode</name><operator>.</operator><name>StringCodeLoader</name></name><argument_list>(<argument><expr><literal type="string">"public class Foo { // class Bar */ \n }"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Tokens</name></type> <name>tokens</name> <init>= <expr><operator>new</operator> <call><name>Tokens</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>tokenizer</name><operator>.</operator><name>tokenize</name></name><argument_list>(<argument><expr><name>sourceCode</name></expr></argument>, <argument><expr><name>tokens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><call><name><name>tokens</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>test2</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>Tokenizer</name></type> <name>t</name> <init>= <expr><operator>new</operator> <call><name>JavaTokenizer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>data</name> <init>= <expr><literal type="string">"public class Foo {"</literal> <operator>+</operator> <name><name>PMD</name><operator>.</operator><name>EOL</name></name> <operator>+</operator> <literal type="string">"public void bar() {}"</literal> <operator>+</operator> <name><name>PMD</name><operator>.</operator><name>EOL</name></name> <operator>+</operator> <literal type="string">"public void buz() {}"</literal>
                <operator>+</operator> <name><name>PMD</name><operator>.</operator><name>EOL</name></name> <operator>+</operator> <literal type="string">"}"</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>SourceCode</name></type> <name>sourceCode</name> <init>= <expr><operator>new</operator> <call><name>SourceCode</name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>SourceCode</name><operator>.</operator><name>StringCodeLoader</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Tokens</name></type> <name>tokens</name> <init>= <expr><operator>new</operator> <call><name>Tokens</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>t</name><operator>.</operator><name>tokenize</name></name><argument_list>(<argument><expr><name>sourceCode</name></expr></argument>, <argument><expr><name>tokens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"public class Foo {"</literal> <operator>+</operator> <name><name>PMD</name><operator>.</operator><name>EOL</name></name> <operator>+</operator> <literal type="string">"public void bar() {}"</literal></expr></argument>, <argument><expr><call><name><name>sourceCode</name><operator>.</operator><name>getSlice</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testDiscardSemicolons</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>Tokenizer</name></type> <name>t</name> <init>= <expr><operator>new</operator> <call><name>JavaTokenizer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>SourceCode</name></type> <name>sourceCode</name> <init>= <expr><operator>new</operator> <call><name>SourceCode</name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>SourceCode</name><operator>.</operator><name>StringCodeLoader</name></name><argument_list>(<argument><expr><literal type="string">"public class Foo {private int x;}"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Tokens</name></type> <name>tokens</name> <init>= <expr><operator>new</operator> <call><name>Tokens</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>t</name><operator>.</operator><name>tokenize</name></name><argument_list>(<argument><expr><name>sourceCode</name></expr></argument>, <argument><expr><name>tokens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><call><name><name>tokens</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testDiscardImports</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>Tokenizer</name></type> <name>t</name> <init>= <expr><operator>new</operator> <call><name>JavaTokenizer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>SourceCode</name></type> <name>sourceCode</name> <init>= <expr><operator>new</operator> <call><name>SourceCode</name><argument_list>(
                <argument><expr><operator>new</operator> <call><name><name>SourceCode</name><operator>.</operator><name>StringCodeLoader</name></name><argument_list>(<argument><expr><literal type="string">"import java.io.File;"</literal> <operator>+</operator> <name><name>PMD</name><operator>.</operator><name>EOL</name></name> <operator>+</operator> <literal type="string">"public class Foo {}"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Tokens</name></type> <name>tokens</name> <init>= <expr><operator>new</operator> <call><name>Tokens</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>t</name><operator>.</operator><name>tokenize</name></name><argument_list>(<argument><expr><name>sourceCode</name></expr></argument>, <argument><expr><name>tokens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><call><name><name>tokens</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testDiscardPkgStmts</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>Tokenizer</name></type> <name>t</name> <init>= <expr><operator>new</operator> <call><name>JavaTokenizer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>SourceCode</name></type> <name>sourceCode</name> <init>= <expr><operator>new</operator> <call><name>SourceCode</name><argument_list>(
                <argument><expr><operator>new</operator> <call><name><name>SourceCode</name><operator>.</operator><name>StringCodeLoader</name></name><argument_list>(<argument><expr><literal type="string">"package foo.bar.baz;"</literal> <operator>+</operator> <name><name>PMD</name><operator>.</operator><name>EOL</name></name> <operator>+</operator> <literal type="string">"public class Foo {}"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Tokens</name></type> <name>tokens</name> <init>= <expr><operator>new</operator> <call><name>Tokens</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>t</name><operator>.</operator><name>tokenize</name></name><argument_list>(<argument><expr><name>sourceCode</name></expr></argument>, <argument><expr><name>tokens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><call><name><name>tokens</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testDiscardSimpleOneLineAnnotation</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>JavaTokenizer</name></type> <name>t</name> <init>= <expr><operator>new</operator> <call><name>JavaTokenizer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>t</name><operator>.</operator><name>setIgnoreAnnotations</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>SourceCode</name></type> <name>sourceCode</name> <init>= <expr><operator>new</operator> <call><name>SourceCode</name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>SourceCode</name><operator>.</operator><name>StringCodeLoader</name></name><argument_list>(
                <argument><expr><literal type="string">"package foo.bar.baz;"</literal> <operator>+</operator> <name><name>PMD</name><operator>.</operator><name>EOL</name></name> <operator>+</operator> <literal type="string">"@MyAnnotation"</literal> <operator>+</operator> <name><name>PMD</name><operator>.</operator><name>EOL</name></name> <operator>+</operator> <literal type="string">"public class Foo {}"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Tokens</name></type> <name>tokens</name> <init>= <expr><operator>new</operator> <call><name>Tokens</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>t</name><operator>.</operator><name>tokenize</name></name><argument_list>(<argument><expr><name>sourceCode</name></expr></argument>, <argument><expr><name>tokens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><call><name><name>tokens</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testIgnoreComments</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>JavaTokenizer</name></type> <name>t</name> <init>= <expr><operator>new</operator> <call><name>JavaTokenizer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>t</name><operator>.</operator><name>setIgnoreAnnotations</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>SourceCode</name></type> <name>sourceCode</name> <init>= <expr><operator>new</operator> <call><name>SourceCode</name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>SourceCode</name><operator>.</operator><name>StringCodeLoader</name></name><argument_list>(<argument><expr><literal type="string">"package foo.bar.baz;"</literal> <operator>+</operator> <name><name>PMD</name><operator>.</operator><name>EOL</name></name>
                <operator>+</operator> <literal type="string">"/*****"</literal> <operator>+</operator> <name><name>PMD</name><operator>.</operator><name>EOL</name></name> <operator>+</operator> <literal type="string">" * ugh"</literal> <operator>+</operator> <name><name>PMD</name><operator>.</operator><name>EOL</name></name> <operator>+</operator> <literal type="string">" *****/"</literal> <operator>+</operator> <name><name>PMD</name><operator>.</operator><name>EOL</name></name> <operator>+</operator> <literal type="string">"public class Foo {}"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Tokens</name></type> <name>tokens</name> <init>= <expr><operator>new</operator> <call><name>Tokens</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>t</name><operator>.</operator><name>tokenize</name></name><argument_list>(<argument><expr><name>sourceCode</name></expr></argument>, <argument><expr><name>tokens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><call><name><name>tokens</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testDiscardOneLineAnnotationWithParams</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>JavaTokenizer</name></type> <name>t</name> <init>= <expr><operator>new</operator> <call><name>JavaTokenizer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>t</name><operator>.</operator><name>setIgnoreAnnotations</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>SourceCode</name></type> <name>sourceCode</name> <init>= <expr><operator>new</operator> <call><name>SourceCode</name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>SourceCode</name><operator>.</operator><name>StringCodeLoader</name></name><argument_list>(
                <argument><expr><literal type="string">"package foo.bar.baz;"</literal> <operator>+</operator> <name><name>PMD</name><operator>.</operator><name>EOL</name></name> <operator>+</operator> <literal type="string">"@ MyAnnotation (\"ugh\")"</literal> <operator>+</operator> <name><name>PMD</name><operator>.</operator><name>EOL</name></name> <operator>+</operator> <literal type="string">"@NamedQueries({"</literal> <operator>+</operator> <name><name>PMD</name><operator>.</operator><name>EOL</name></name>
                        <operator>+</operator> <literal type="string">"@NamedQuery("</literal> <operator>+</operator> <name><name>PMD</name><operator>.</operator><name>EOL</name></name> <operator>+</operator> <literal type="string">")})"</literal> <operator>+</operator> <name><name>PMD</name><operator>.</operator><name>EOL</name></name> <operator>+</operator> <literal type="string">"public class Foo {"</literal> <operator>+</operator> <name><name>PMD</name><operator>.</operator><name>EOL</name></name> <operator>+</operator> <literal type="string">"}"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Tokens</name></type> <name>tokens</name> <init>= <expr><operator>new</operator> <call><name>Tokens</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>t</name><operator>.</operator><name>tokenize</name></name><argument_list>(<argument><expr><name>sourceCode</name></expr></argument>, <argument><expr><name>tokens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>TokenEntry</name><operator>.</operator><name>getEOF</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><call><name><name>tokens</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testIgnoreBetweenSpecialComments</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>JavaTokenizer</name></type> <name>t</name> <init>= <expr><operator>new</operator> <call><name>JavaTokenizer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>t</name><operator>.</operator><name>setIgnoreAnnotations</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>SourceCode</name></type> <name>sourceCode</name> <init>= <expr><operator>new</operator> <call><name>SourceCode</name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>SourceCode</name><operator>.</operator><name>StringCodeLoader</name></name><argument_list>(<argument><expr><literal type="string">"package foo.bar.baz;"</literal> <operator>+</operator> <name><name>PMD</name><operator>.</operator><name>EOL</name></name>
                <operator>+</operator> <literal type="string">"// CPD-OFF"</literal> <operator>+</operator> <name><name>PMD</name><operator>.</operator><name>EOL</name></name> <operator>+</operator> <literal type="string">"// CPD-OFF"</literal> <operator>+</operator> <name><name>PMD</name><operator>.</operator><name>EOL</name></name>
                <operator>+</operator> <literal type="string">"@ MyAnnotation (\"ugh\")"</literal> <operator>+</operator> <name><name>PMD</name><operator>.</operator><name>EOL</name></name> <operator>+</operator> <literal type="string">"@NamedQueries({"</literal> <operator>+</operator> <name><name>PMD</name><operator>.</operator><name>EOL</name></name> <operator>+</operator> <literal type="string">"@NamedQuery("</literal> <operator>+</operator> <name><name>PMD</name><operator>.</operator><name>EOL</name></name> <operator>+</operator> <literal type="string">")})"</literal>
                <operator>+</operator> <name><name>PMD</name><operator>.</operator><name>EOL</name></name> <operator>+</operator> <literal type="string">"public class Foo {"</literal> <operator>+</operator> <literal type="string">"// CPD-ON"</literal> <operator>+</operator> <name><name>PMD</name><operator>.</operator><name>EOL</name></name>
                <operator>+</operator> <literal type="string">"}"</literal></expr></argument>
        )</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Tokens</name></type> <name>tokens</name> <init>= <expr><operator>new</operator> <call><name>Tokens</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>t</name><operator>.</operator><name>tokenize</name></name><argument_list>(<argument><expr><name>sourceCode</name></expr></argument>, <argument><expr><name>tokens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>TokenEntry</name><operator>.</operator><name>getEOF</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name><name>tokens</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// 2 tokens: "}" + EOF</comment>
    </block_content>}</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testIgnoreBetweenSpecialCommentsMultiple</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>JavaTokenizer</name></type> <name>t</name> <init>= <expr><operator>new</operator> <call><name>JavaTokenizer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>t</name><operator>.</operator><name>setIgnoreAnnotations</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>SourceCode</name></type> <name>sourceCode</name> <init>= <expr><operator>new</operator> <call><name>SourceCode</name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>SourceCode</name><operator>.</operator><name>StringCodeLoader</name></name><argument_list>(<argument><expr><literal type="string">"package foo.bar.baz;"</literal> <operator>+</operator> <name><name>PMD</name><operator>.</operator><name>EOL</name></name>
                <operator>+</operator> <literal type="string">"// CPD-OFF"</literal> <operator>+</operator> <name><name>PMD</name><operator>.</operator><name>EOL</name></name> <operator>+</operator> <literal type="string">"// another irrelevant comment"</literal> <operator>+</operator> <name><name>PMD</name><operator>.</operator><name>EOL</name></name>
                <operator>+</operator> <literal type="string">"@ MyAnnotation (\"ugh\")"</literal> <operator>+</operator> <name><name>PMD</name><operator>.</operator><name>EOL</name></name> <operator>+</operator> <literal type="string">"@NamedQueries({"</literal> <operator>+</operator> <name><name>PMD</name><operator>.</operator><name>EOL</name></name> <operator>+</operator> <literal type="string">"@NamedQuery("</literal> <operator>+</operator> <name><name>PMD</name><operator>.</operator><name>EOL</name></name> <operator>+</operator> <literal type="string">")})"</literal>
                <operator>+</operator> <name><name>PMD</name><operator>.</operator><name>EOL</name></name> <operator>+</operator> <literal type="string">"public class Foo {"</literal> <operator>+</operator> <literal type="string">"// CPD-ON"</literal> <operator>+</operator> <name><name>PMD</name><operator>.</operator><name>EOL</name></name>
                <operator>+</operator> <literal type="string">"}"</literal></expr></argument>
        )</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Tokens</name></type> <name>tokens</name> <init>= <expr><operator>new</operator> <call><name>Tokens</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>t</name><operator>.</operator><name>tokenize</name></name><argument_list>(<argument><expr><name>sourceCode</name></expr></argument>, <argument><expr><name>tokens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>TokenEntry</name><operator>.</operator><name>getEOF</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name><name>tokens</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// 2 tokens: "}" + EOF</comment>
    </block_content>}</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testIgnoreBetweenSpecialCommentsMultiline</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>JavaTokenizer</name></type> <name>t</name> <init>= <expr><operator>new</operator> <call><name>JavaTokenizer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>t</name><operator>.</operator><name>setIgnoreAnnotations</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>SourceCode</name></type> <name>sourceCode</name> <init>= <expr><operator>new</operator> <call><name>SourceCode</name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>SourceCode</name><operator>.</operator><name>StringCodeLoader</name></name><argument_list>(<argument><expr><literal type="string">"package foo.bar.baz;"</literal> <operator>+</operator> <name><name>PMD</name><operator>.</operator><name>EOL</name></name>
                <operator>+</operator> <literal type="string">"/* "</literal> <operator>+</operator> <name><name>PMD</name><operator>.</operator><name>EOL</name></name> <operator>+</operator> <literal type="string">" * CPD-OFF"</literal> <operator>+</operator> <name><name>PMD</name><operator>.</operator><name>EOL</name></name> <operator>+</operator> <literal type="string">"*/"</literal> <operator>+</operator> <name><name>PMD</name><operator>.</operator><name>EOL</name></name>
                <operator>+</operator> <literal type="string">"@ MyAnnotation (\"ugh\")"</literal> <operator>+</operator> <name><name>PMD</name><operator>.</operator><name>EOL</name></name> <operator>+</operator> <literal type="string">"@NamedQueries({"</literal> <operator>+</operator> <name><name>PMD</name><operator>.</operator><name>EOL</name></name> <operator>+</operator> <literal type="string">"@NamedQuery("</literal> <operator>+</operator> <name><name>PMD</name><operator>.</operator><name>EOL</name></name> <operator>+</operator> <literal type="string">")})"</literal>
                <operator>+</operator> <name><name>PMD</name><operator>.</operator><name>EOL</name></name> <operator>+</operator> <literal type="string">"public class Foo {"</literal> <operator>+</operator> <name><name>PMD</name><operator>.</operator><name>EOL</name></name>
                <operator>+</operator> <literal type="string">"/* "</literal> <operator>+</operator> <name><name>PMD</name><operator>.</operator><name>EOL</name></name> <operator>+</operator> <literal type="string">" * CPD-ON"</literal> <operator>+</operator> <name><name>PMD</name><operator>.</operator><name>EOL</name></name> <operator>+</operator> <literal type="string">"*/"</literal> <operator>+</operator> <name><name>PMD</name><operator>.</operator><name>EOL</name></name>
                <operator>+</operator> <literal type="string">"}"</literal></expr></argument>
        )</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Tokens</name></type> <name>tokens</name> <init>= <expr><operator>new</operator> <call><name>Tokens</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>t</name><operator>.</operator><name>tokenize</name></name><argument_list>(<argument><expr><name>sourceCode</name></expr></argument>, <argument><expr><name>tokens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>TokenEntry</name><operator>.</operator><name>getEOF</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name><name>tokens</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// 2 tokens: "}" + EOF</comment>
    </block_content>}</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testIgnoreBetweenSpecialAnnotation</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>JavaTokenizer</name></type> <name>t</name> <init>= <expr><operator>new</operator> <call><name>JavaTokenizer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>t</name><operator>.</operator><name>setIgnoreAnnotations</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>SourceCode</name></type> <name>sourceCode</name> <init>= <expr><operator>new</operator> <call><name>SourceCode</name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>SourceCode</name><operator>.</operator><name>StringCodeLoader</name></name><argument_list>(<argument><expr><literal type="string">"package foo.bar.baz;"</literal> <operator>+</operator> <name><name>PMD</name><operator>.</operator><name>EOL</name></name>
                <operator>+</operator> <literal type="string">"@SuppressWarnings({\"woof\",\"CPD-START\"})"</literal> <operator>+</operator> <name><name>PMD</name><operator>.</operator><name>EOL</name></name> <operator>+</operator> <literal type="string">"@SuppressWarnings(\"CPD-START\")"</literal> <operator>+</operator> <name><name>PMD</name><operator>.</operator><name>EOL</name></name>
                <operator>+</operator> <literal type="string">"@ MyAnnotation (\"ugh\")"</literal> <operator>+</operator> <name><name>PMD</name><operator>.</operator><name>EOL</name></name> <operator>+</operator> <literal type="string">"@NamedQueries({"</literal> <operator>+</operator> <name><name>PMD</name><operator>.</operator><name>EOL</name></name> <operator>+</operator> <literal type="string">"@NamedQuery("</literal> <operator>+</operator> <name><name>PMD</name><operator>.</operator><name>EOL</name></name> <operator>+</operator> <literal type="string">")})"</literal>
                <operator>+</operator> <name><name>PMD</name><operator>.</operator><name>EOL</name></name> <operator>+</operator> <literal type="string">"public class Foo {}"</literal> <operator>+</operator> <literal type="string">"@SuppressWarnings({\"ugh\",\"CPD-END\"})"</literal> <operator>+</operator> <name><name>PMD</name><operator>.</operator><name>EOL</name></name></expr></argument>

        )</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Tokens</name></type> <name>tokens</name> <init>= <expr><operator>new</operator> <call><name>Tokens</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>t</name><operator>.</operator><name>tokenize</name></name><argument_list>(<argument><expr><name>sourceCode</name></expr></argument>, <argument><expr><name>tokens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>TokenEntry</name><operator>.</operator><name>getEOF</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><call><name><name>tokens</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testIgnoreBetweenSpecialAnnotationAndIgnoreAnnotations</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>JavaTokenizer</name></type> <name>t</name> <init>= <expr><operator>new</operator> <call><name>JavaTokenizer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>t</name><operator>.</operator><name>setIgnoreAnnotations</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>SourceCode</name></type> <name>sourceCode</name> <init>= <expr><operator>new</operator> <call><name>SourceCode</name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>SourceCode</name><operator>.</operator><name>StringCodeLoader</name></name><argument_list>(<argument><expr><literal type="string">"package foo.bar.baz;"</literal> <operator>+</operator> <name><name>PMD</name><operator>.</operator><name>EOL</name></name>
                <operator>+</operator> <literal type="string">"@SuppressWarnings({\"woof\",\"CPD-START\"})"</literal> <operator>+</operator> <name><name>PMD</name><operator>.</operator><name>EOL</name></name> <operator>+</operator> <literal type="string">"@SuppressWarnings(\"CPD-START\")"</literal> <operator>+</operator> <name><name>PMD</name><operator>.</operator><name>EOL</name></name>
                <operator>+</operator> <literal type="string">"@ MyAnnotation (\"ugh\")"</literal> <operator>+</operator> <name><name>PMD</name><operator>.</operator><name>EOL</name></name> <operator>+</operator> <literal type="string">"@NamedQueries({"</literal> <operator>+</operator> <name><name>PMD</name><operator>.</operator><name>EOL</name></name> <operator>+</operator> <literal type="string">"@NamedQuery("</literal> <operator>+</operator> <name><name>PMD</name><operator>.</operator><name>EOL</name></name> <operator>+</operator> <literal type="string">")})"</literal>
                <operator>+</operator> <name><name>PMD</name><operator>.</operator><name>EOL</name></name> <operator>+</operator> <literal type="string">"public class Foo {}"</literal> <operator>+</operator> <name><name>PMD</name><operator>.</operator><name>EOL</name></name> <operator>+</operator> <literal type="string">"@SuppressWarnings({\"ugh\",\"CPD-END\"})"</literal> <operator>+</operator> <name><name>PMD</name><operator>.</operator><name>EOL</name></name></expr></argument>

        )</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Tokens</name></type> <name>tokens</name> <init>= <expr><operator>new</operator> <call><name>Tokens</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>t</name><operator>.</operator><name>tokenize</name></name><argument_list>(<argument><expr><name>sourceCode</name></expr></argument>, <argument><expr><name>tokens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>TokenEntry</name><operator>.</operator><name>getEOF</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>tokens</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testIgnoreIdentifiersDontAffectConstructors</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>JavaTokenizer</name></type> <name>t</name> <init>= <expr><operator>new</operator> <call><name>JavaTokenizer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>t</name><operator>.</operator><name>setIgnoreAnnotations</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>t</name><operator>.</operator><name>setIgnoreIdentifiers</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>SourceCode</name></type> <name>sourceCode</name> <init>= <expr><operator>new</operator> <call><name>SourceCode</name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>SourceCode</name><operator>.</operator><name>StringCodeLoader</name></name><argument_list>(<argument><expr><literal type="string">"package foo.bar.baz;"</literal> <operator>+</operator> <name><name>PMD</name><operator>.</operator><name>EOL</name></name>
                <operator>+</operator> <literal type="string">"public class Foo extends Bar {"</literal> <operator>+</operator> <name><name>PMD</name><operator>.</operator><name>EOL</name></name> <operator>+</operator> <literal type="string">"private Foo notAConstructor;"</literal> <operator>+</operator> <name><name>PMD</name><operator>.</operator><name>EOL</name></name>
                <operator>+</operator> <literal type="string">"public Foo(int i) { super(i); }"</literal> <operator>+</operator> <name><name>PMD</name><operator>.</operator><name>EOL</name></name> <operator>+</operator> <literal type="string">"private Foo(int i, String s) { super(i, s); }"</literal>
                <operator>+</operator> <name><name>PMD</name><operator>.</operator><name>EOL</name></name> <operator>+</operator> <literal type="string">"/* default */ Foo(int i, String s, Object o) { super(i, s, o); }"</literal> <operator>+</operator> <name><name>PMD</name><operator>.</operator><name>EOL</name></name>
                <operator>+</operator> <literal type="string">"private static class Inner {"</literal> <operator>+</operator> <name><name>PMD</name><operator>.</operator><name>EOL</name></name> <operator>+</operator> <literal type="string">"Inner() { System.out.println(\"Guess who?\"); }"</literal> <operator>+</operator> <name><name>PMD</name><operator>.</operator><name>EOL</name></name>
                <operator>+</operator> <literal type="string">"}"</literal> <operator>+</operator> <name><name>PMD</name><operator>.</operator><name>EOL</name></name> <operator>+</operator> <literal type="string">"}"</literal> <operator>+</operator> <name><name>PMD</name><operator>.</operator><name>EOL</name></name></expr></argument>

        )</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Tokens</name></type> <name>tokens</name> <init>= <expr><operator>new</operator> <call><name>Tokens</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>t</name><operator>.</operator><name>tokenize</name></name><argument_list>(<argument><expr><name>sourceCode</name></expr></argument>, <argument><expr><name>tokens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>TokenEntry</name><operator>.</operator><name>getEOF</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>TokenEntry</name></argument>&gt;</argument_list></name></type> <name>tokenList</name> <init>= <expr><call><name><name>tokens</name><operator>.</operator><name>getTokens</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// Member variable of type Foo</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name><name>JavaParserConstants</name><operator>.</operator><name>IDENTIFIER</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>tokenList</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// Public constructor</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"Foo"</literal></expr></argument>, <argument><expr><call><name><name>tokenList</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// Private constructor</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"Foo"</literal></expr></argument>, <argument><expr><call><name><name>tokenList</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">22</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// Package-private constructor</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"Foo"</literal></expr></argument>, <argument><expr><call><name><name>tokenList</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">38</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// Inner class constructor</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"Inner"</literal></expr></argument>, <argument><expr><call><name><name>tokenList</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testIgnoreIdentifiersHandlesEnums</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>JavaTokenizer</name></type> <name>t</name> <init>= <expr><operator>new</operator> <call><name>JavaTokenizer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>t</name><operator>.</operator><name>setIgnoreAnnotations</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>t</name><operator>.</operator><name>setIgnoreIdentifiers</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>SourceCode</name></type> <name>sourceCode</name> <init>= <expr><operator>new</operator> <call><name>SourceCode</name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>SourceCode</name><operator>.</operator><name>StringCodeLoader</name></name><argument_list>(
                <argument><expr><literal type="string">"package foo.bar.baz;"</literal> <operator>+</operator> <name><name>PMD</name><operator>.</operator><name>EOL</name></name> <operator>+</operator> <literal type="string">"public enum Foo {"</literal> <operator>+</operator> <name><name>PMD</name><operator>.</operator><name>EOL</name></name> <operator>+</operator> <literal type="string">"BAR(1),"</literal> <operator>+</operator> <name><name>PMD</name><operator>.</operator><name>EOL</name></name> <operator>+</operator> <literal type="string">"BAZ(2);"</literal>
                        <operator>+</operator> <name><name>PMD</name><operator>.</operator><name>EOL</name></name> <operator>+</operator> <literal type="string">"Foo(int val) {"</literal> <operator>+</operator> <name><name>PMD</name><operator>.</operator><name>EOL</name></name> <operator>+</operator> <literal type="string">"}"</literal> <operator>+</operator> <name><name>PMD</name><operator>.</operator><name>EOL</name></name> <operator>+</operator> <literal type="string">"}"</literal> <operator>+</operator> <name><name>PMD</name><operator>.</operator><name>EOL</name></name></expr></argument>

        )</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Tokens</name></type> <name>tokens</name> <init>= <expr><operator>new</operator> <call><name>Tokens</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>t</name><operator>.</operator><name>tokenize</name></name><argument_list>(<argument><expr><name>sourceCode</name></expr></argument>, <argument><expr><name>tokens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>TokenEntry</name><operator>.</operator><name>getEOF</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>TokenEntry</name></argument>&gt;</argument_list></name></type> <name>tokenList</name> <init>= <expr><call><name><name>tokens</name><operator>.</operator><name>getTokens</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// Enum member</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name><name>JavaParserConstants</name><operator>.</operator><name>IDENTIFIER</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>tokenList</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name><name>JavaParserConstants</name><operator>.</operator><name>IDENTIFIER</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>tokenList</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// Enum constructor</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"Foo"</literal></expr></argument>, <argument><expr><call><name><name>tokenList</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testIgnoreIdentifiersWithClassKeyword</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>JavaTokenizer</name></type> <name>t</name> <init>= <expr><operator>new</operator> <call><name>JavaTokenizer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>t</name><operator>.</operator><name>setIgnoreAnnotations</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>t</name><operator>.</operator><name>setIgnoreIdentifiers</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>SourceCode</name></type> <name>sourceCode</name> <init>= <expr><operator>new</operator> <call><name>SourceCode</name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>SourceCode</name><operator>.</operator><name>StringCodeLoader</name></name><argument_list>(
                <argument><expr><literal type="string">"package foo.bar.baz;"</literal> <operator>+</operator> <name><name>PMD</name><operator>.</operator><name>EOL</name></name> <operator>+</operator> <literal type="string">"public class Foo {"</literal> <operator>+</operator> <name><name>PMD</name><operator>.</operator><name>EOL</name></name> <operator>+</operator> <literal type="string">"Foo() {"</literal> <operator>+</operator> <name><name>PMD</name><operator>.</operator><name>EOL</name></name>
                        <operator>+</operator> <literal type="string">"}"</literal> <operator>+</operator> <name><name>PMD</name><operator>.</operator><name>EOL</name></name> <operator>+</operator> <literal type="string">"public void bar() {"</literal> <operator>+</operator> <name><name>PMD</name><operator>.</operator><name>EOL</name></name> <operator>+</operator> <literal type="string">"Bar.baz(Foo.class, () -&gt; {});"</literal>
                        <operator>+</operator> <name><name>PMD</name><operator>.</operator><name>EOL</name></name> <operator>+</operator> <literal type="string">"}"</literal> <operator>+</operator> <name><name>PMD</name><operator>.</operator><name>EOL</name></name> <operator>+</operator> <literal type="string">"}"</literal> <operator>+</operator> <name><name>PMD</name><operator>.</operator><name>EOL</name></name></expr></argument>
        )</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Tokens</name></type> <name>tokens</name> <init>= <expr><operator>new</operator> <call><name>Tokens</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>t</name><operator>.</operator><name>tokenize</name></name><argument_list>(<argument><expr><name>sourceCode</name></expr></argument>, <argument><expr><name>tokens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>TokenEntry</name><operator>.</operator><name>getEOF</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>TokenEntry</name></argument>&gt;</argument_list></name></type> <name>tokenList</name> <init>= <expr><call><name><name>tokens</name><operator>.</operator><name>getTokens</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// Class constructor</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"Foo"</literal></expr></argument>, <argument><expr><call><name><name>tokenList</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name><name>JavaParserConstants</name><operator>.</operator><name>IDENTIFIER</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>tokenList</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>
}</block></class>
</unit>

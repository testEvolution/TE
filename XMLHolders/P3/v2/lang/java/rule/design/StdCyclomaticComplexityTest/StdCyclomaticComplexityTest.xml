<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="H:\Research\TestEvolution\DataAnalysis\pmd-pmd_releases-6.21.0\pmd-pmd_releases-6.21.0\pmd-java\src\test\java\net\sourceforge\pmd\lang\java\rule\design\StdCyclomaticComplexityTest.java"><comment type="block" format="javadoc">/**
 * BSD-style license; for more info see http://pmd.sourceforge.net/license.html
 */</comment>

<package>package <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>java</name><operator>.</operator><name>rule</name><operator>.</operator><name>design</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>StringReader</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Test</name></name>;</import>

<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>RuleContext</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>LanguageRegistry</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>LanguageVersion</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>Parser</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>ParserOptions</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>ast</name><operator>.</operator><name>Node</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>java</name><operator>.</operator><name>JavaLanguageModule</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>testframework</name><operator>.</operator><name>PmdRuleTst</name></name>;</import>

<class><specifier>public</specifier> class <name>StdCyclomaticComplexityTest</name> <super_list><extends>extends <super><name>PmdRuleTst</name></super></extends></super_list> <block>{
    <comment type="block" format="javadoc">/**
     * Make sure the entry stack is empty, if show classes complexity is
     * disabled.
     *
     * @see &lt;a href="https://sourceforge.net/p/pmd/bugs/1501/"&gt;bug #1501&lt;/a&gt;
     */</comment>
    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>entryStackMustBeEmpty</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>StdCyclomaticComplexityRule</name></type> <name>rule</name> <init>= <expr><operator>new</operator> <call><name>StdCyclomaticComplexityRule</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>rule</name><operator>.</operator><name>setProperty</name></name><argument_list>(<argument><expr><name><name>StdCyclomaticComplexityRule</name><operator>.</operator><name>SHOW_CLASSES_COMPLEXITY_DESCRIPTOR</name></name></expr></argument>, <argument><expr><name><name>Boolean</name><operator>.</operator><name>FALSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>RuleContext</name></type> <name>ctx</name> <init>= <expr><operator>new</operator> <call><name>RuleContext</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>LanguageVersion</name></type> <name>javaLanguageVersion</name> <init>= <expr><call><name><name>LanguageRegistry</name><operator>.</operator><name>getLanguage</name></name><argument_list>(<argument><expr><name><name>JavaLanguageModule</name><operator>.</operator><name>NAME</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getVersion</name><argument_list>(<argument><expr><literal type="string">"1.8"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ParserOptions</name></type> <name>parserOptions</name> <init>= <expr><call><name><name>javaLanguageVersion</name><operator>.</operator><name>getLanguageVersionHandler</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDefaultParserOptions</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Parser</name></type> <name>parser</name> <init>= <expr><call><name><name>javaLanguageVersion</name><operator>.</operator><name>getLanguageVersionHandler</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getParser</name><argument_list>(<argument><expr><name>parserOptions</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Node</name></type> <name>node</name> <init>= <expr><call><name><name>parser</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><literal type="string">"test"</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>StringReader</name><argument_list>(<argument><expr><literal type="string">"public class SampleClass {}"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>rule</name><operator>.</operator><name>apply</name></name><argument_list>(<argument><expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertTrue</name></name><argument_list>(<argument><expr><call><name><name>rule</name><operator>.</operator><name>entryStack</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>
}</block></class>
</unit>

<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="H:\Research\TestEvolution\DataAnalysis\pmd-pmd_releases-6.21.0\pmd-pmd_releases-6.21.0\pmd-java\src\test\java\net\sourceforge\pmd\lang\java\rule\JavaRuleViolationTest.java"><comment type="block" format="javadoc">/**
 * BSD-style license; for more info see http://pmd.sourceforge.net/license.html
 */</comment>

<package>package <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>java</name><operator>.</operator><name>rule</name></name>;</package>

<import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name><operator>.</operator><name>assertEquals</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>StringReader</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Test</name></name>;</import>

<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>RuleContext</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>LanguageRegistry</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>LanguageVersionHandler</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>ParserOptions</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>java</name><operator>.</operator><name>JavaLanguageModule</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>java</name><operator>.</operator><name>ast</name><operator>.</operator><name>ASTClassOrInterfaceDeclaration</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>java</name><operator>.</operator><name>ast</name><operator>.</operator><name>ASTCompilationUnit</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>java</name><operator>.</operator><name>ast</name><operator>.</operator><name>ASTFieldDeclaration</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>java</name><operator>.</operator><name>ast</name><operator>.</operator><name>ASTFormalParameter</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>java</name><operator>.</operator><name>ast</name><operator>.</operator><name>ASTImportDeclaration</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>java</name><operator>.</operator><name>ast</name><operator>.</operator><name>ASTMethodDeclaration</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>java</name><operator>.</operator><name>symboltable</name><operator>.</operator><name>ScopeAndDeclarationFinder</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Philip Graf
 */</comment>
<class><specifier>public</specifier> class <name>JavaRuleViolationTest</name> <block>{
    <comment type="block" format="javadoc">/**
     * Verifies that {@link JavaRuleViolation} sets the variable name for an
     * {@link ASTFormalParameter} node.
     */</comment>
    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testASTFormalParameterVariableName</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>ASTCompilationUnit</name></type> <name>ast</name> <init>= <expr><call><name>parse</name><argument_list>(<argument><expr><literal type="string">"class Foo { void bar(int x) {} }"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>ASTFormalParameter</name></type> <name>node</name> <init>= <expr><call><name><name>ast</name><operator>.</operator><name>getFirstDescendantOfType</name></name><argument_list>(<argument><expr><name><name>ASTFormalParameter</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>RuleContext</name></type> <name>context</name> <init>= <expr><operator>new</operator> <call><name>RuleContext</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>JavaRuleViolation</name></type> <name>violation</name> <init>= <expr><operator>new</operator> <call><name>JavaRuleViolation</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"x"</literal></expr></argument>, <argument><expr><call><name><name>violation</name><operator>.</operator><name>getVariableName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>ASTCompilationUnit</name></type> <name>parse</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>code</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><specifier>final</specifier> <name>LanguageVersionHandler</name></type> <name>languageVersionHandler</name> <init>= <expr><call><name><name>LanguageRegistry</name><operator>.</operator><name>getLanguage</name></name><argument_list>(<argument><expr><name><name>JavaLanguageModule</name><operator>.</operator><name>NAME</name></name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>getDefaultVersion</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getLanguageVersionHandler</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>ParserOptions</name></type> <name>options</name> <init>= <expr><call><name><name>languageVersionHandler</name><operator>.</operator><name>getDefaultParserOptions</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>ASTCompilationUnit</name></type> <name>ast</name> <init>= <expr><operator>(</operator><name>ASTCompilationUnit</name><operator>)</operator> <call><name><name>languageVersionHandler</name><operator>.</operator><name>getParser</name></name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>parse</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>,
                <argument><expr><operator>new</operator> <call><name>StringReader</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// set scope of AST nodes</comment>
        <expr_stmt><expr><call><name><name>ast</name><operator>.</operator><name>jjtAccept</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ScopeAndDeclarationFinder</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>ast</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Tests that the method name is taken correctly from the given node.
     * 
     * @see &lt;a href="https://sourceforge.net/p/pmd/bugs/1250/"&gt;#1250&lt;/a&gt;
     */</comment>
    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testMethodName</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>ASTCompilationUnit</name></type> <name>ast</name> <init>= <expr><call><name>parse</name><argument_list>(<argument><expr><literal type="string">"class Foo { void bar(int x) {} }"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ASTMethodDeclaration</name></type> <name>md</name> <init>= <expr><call><name><name>ast</name><operator>.</operator><name>getFirstDescendantOfType</name></name><argument_list>(<argument><expr><name><name>ASTMethodDeclaration</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>RuleContext</name></type> <name>context</name> <init>= <expr><operator>new</operator> <call><name>RuleContext</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>JavaRuleViolation</name></type> <name>violation</name> <init>= <expr><operator>new</operator> <call><name>JavaRuleViolation</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>, <argument><expr><name>md</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"bar"</literal></expr></argument>, <argument><expr><call><name><name>violation</name><operator>.</operator><name>getMethodName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Tests that the enum name is taken correctly from the given node.
     */</comment>
    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testEnumName</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>ASTCompilationUnit</name></type> <name>ast</name> <init>= <expr><call><name>parse</name><argument_list>(<argument><expr><literal type="string">"enum Foo {FOO; void bar(int x) {} }"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ASTMethodDeclaration</name></type> <name>md</name> <init>= <expr><call><name><name>ast</name><operator>.</operator><name>getFirstDescendantOfType</name></name><argument_list>(<argument><expr><name><name>ASTMethodDeclaration</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>RuleContext</name></type> <name>context</name> <init>= <expr><operator>new</operator> <call><name>RuleContext</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>JavaRuleViolation</name></type> <name>violation</name> <init>= <expr><operator>new</operator> <call><name>JavaRuleViolation</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>, <argument><expr><name>md</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"Foo"</literal></expr></argument>, <argument><expr><call><name><name>violation</name><operator>.</operator><name>getClassName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Tests that the class name is taken correctly, even if the node is outside
     * of a class scope, e.g. a import declaration.
     * 
     * @see &lt;a href="https://sourceforge.net/p/pmd/bugs/1529/"&gt;#1529&lt;/a&gt;
     */</comment>
    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testPackageAndClassNameForImport</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>ASTCompilationUnit</name></type> <name>ast</name> <init>= <expr><call><name>parse</name><argument_list>(<argument><expr><literal type="string">"package pkg; import java.util.List; public class Foo { }"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ASTImportDeclaration</name></type> <name>importNode</name> <init>= <expr><call><name><name>ast</name><operator>.</operator><name>getFirstDescendantOfType</name></name><argument_list>(<argument><expr><name><name>ASTImportDeclaration</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>JavaRuleViolation</name></type> <name>violation</name> <init>= <expr><operator>new</operator> <call><name>JavaRuleViolation</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>RuleContext</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>importNode</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"pkg"</literal></expr></argument>, <argument><expr><call><name><name>violation</name><operator>.</operator><name>getPackageName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"Foo"</literal></expr></argument>, <argument><expr><call><name><name>violation</name><operator>.</operator><name>getClassName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testPackageAndClassNameForField</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>ASTCompilationUnit</name></type> <name>ast</name> <init>= <expr><call><name>parse</name><argument_list>(<argument><expr><literal type="string">"package pkg; public class Foo { int a; }"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ASTClassOrInterfaceDeclaration</name></type> <name>classDeclaration</name> <init>= <expr><call><name><name>ast</name><operator>.</operator><name>getFirstDescendantOfType</name></name><argument_list>(<argument><expr><name><name>ASTClassOrInterfaceDeclaration</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ASTFieldDeclaration</name></type> <name>field</name> <init>= <expr><call><name><name>ast</name><operator>.</operator><name>getFirstDescendantOfType</name></name><argument_list>(<argument><expr><name><name>ASTFieldDeclaration</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>JavaRuleViolation</name></type> <name>violation</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>violation</name> <operator>=</operator> <operator>new</operator> <call><name>JavaRuleViolation</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>RuleContext</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>classDeclaration</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"pkg"</literal></expr></argument>, <argument><expr><call><name><name>violation</name><operator>.</operator><name>getPackageName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"Foo"</literal></expr></argument>, <argument><expr><call><name><name>violation</name><operator>.</operator><name>getClassName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>violation</name> <operator>=</operator> <operator>new</operator> <call><name>JavaRuleViolation</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>RuleContext</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>field</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"pkg"</literal></expr></argument>, <argument><expr><call><name><name>violation</name><operator>.</operator><name>getPackageName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"Foo"</literal></expr></argument>, <argument><expr><call><name><name>violation</name><operator>.</operator><name>getClassName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testPackageAndEnumName</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>ASTCompilationUnit</name></type> <name>ast</name> <init>= <expr><call><name>parse</name><argument_list>(<argument><expr><literal type="string">"package pkg; import java.util.List; public enum FooE { }"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ASTImportDeclaration</name></type> <name>importNode</name> <init>= <expr><call><name><name>ast</name><operator>.</operator><name>getFirstDescendantOfType</name></name><argument_list>(<argument><expr><name><name>ASTImportDeclaration</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>JavaRuleViolation</name></type> <name>violation</name> <init>= <expr><operator>new</operator> <call><name>JavaRuleViolation</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>RuleContext</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>importNode</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"pkg"</literal></expr></argument>, <argument><expr><call><name><name>violation</name><operator>.</operator><name>getPackageName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"FooE"</literal></expr></argument>, <argument><expr><call><name><name>violation</name><operator>.</operator><name>getClassName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testDefaultPackageAndClassName</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>ASTCompilationUnit</name></type> <name>ast</name> <init>= <expr><call><name>parse</name><argument_list>(<argument><expr><literal type="string">"import java.util.List; public class Foo { }"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ASTImportDeclaration</name></type> <name>importNode</name> <init>= <expr><call><name><name>ast</name><operator>.</operator><name>getFirstDescendantOfType</name></name><argument_list>(<argument><expr><name><name>ASTImportDeclaration</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>JavaRuleViolation</name></type> <name>violation</name> <init>= <expr><operator>new</operator> <call><name>JavaRuleViolation</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>RuleContext</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>importNode</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><call><name><name>violation</name><operator>.</operator><name>getPackageName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"Foo"</literal></expr></argument>, <argument><expr><call><name><name>violation</name><operator>.</operator><name>getClassName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testPackageAndMultipleClassesName</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>ASTCompilationUnit</name></type> <name>ast</name> <init>= <expr><call><name>parse</name><argument_list>(<argument><expr><literal type="string">"package pkg; import java.util.List; class Foo { } public class Bar { }"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ASTImportDeclaration</name></type> <name>importNode</name> <init>= <expr><call><name><name>ast</name><operator>.</operator><name>getFirstDescendantOfType</name></name><argument_list>(<argument><expr><name><name>ASTImportDeclaration</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>JavaRuleViolation</name></type> <name>violation</name> <init>= <expr><operator>new</operator> <call><name>JavaRuleViolation</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>RuleContext</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>importNode</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"pkg"</literal></expr></argument>, <argument><expr><call><name><name>violation</name><operator>.</operator><name>getPackageName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"Bar"</literal></expr></argument>, <argument><expr><call><name><name>violation</name><operator>.</operator><name>getClassName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>
    
    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testPackageAndPackagePrivateClassesName</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>ASTCompilationUnit</name></type> <name>ast</name> <init>= <expr><call><name>parse</name><argument_list>(<argument><expr><literal type="string">"package pkg; import java.util.List; class Foo { }"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ASTImportDeclaration</name></type> <name>importNode</name> <init>= <expr><call><name><name>ast</name><operator>.</operator><name>getFirstDescendantOfType</name></name><argument_list>(<argument><expr><name><name>ASTImportDeclaration</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>JavaRuleViolation</name></type> <name>violation</name> <init>= <expr><operator>new</operator> <call><name>JavaRuleViolation</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>RuleContext</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>importNode</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"pkg"</literal></expr></argument>, <argument><expr><call><name><name>violation</name><operator>.</operator><name>getPackageName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"Foo"</literal></expr></argument>, <argument><expr><call><name><name>violation</name><operator>.</operator><name>getClassName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Test that the name of the inner class is taken correctly.
     * Also check fields.
     */</comment>
    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testInnerClass</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>ASTCompilationUnit</name></type> <name>ast</name> <init>= <expr><call><name>parse</name><argument_list>(<argument><expr><literal type="string">"class Foo { int a; class Bar { int a; } }"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ASTClassOrInterfaceDeclaration</name></argument>&gt;</argument_list></name></type> <name>classes</name> <init>= <expr><call><name><name>ast</name><operator>.</operator><name>findDescendantsOfType</name></name><argument_list>(<argument><expr><name><name>ASTClassOrInterfaceDeclaration</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name><name>classes</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>JavaRuleViolation</name></type> <name>fooViolation</name> <init>= <expr><operator>new</operator> <call><name>JavaRuleViolation</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>RuleContext</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>classes</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"Foo"</literal></expr></argument>, <argument><expr><call><name><name>fooViolation</name><operator>.</operator><name>getClassName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>JavaRuleViolation</name></type> <name>barViolation</name> <init>= <expr><operator>new</operator> <call><name>JavaRuleViolation</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>RuleContext</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>classes</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"Foo$Bar"</literal></expr></argument>, <argument><expr><call><name><name>barViolation</name><operator>.</operator><name>getClassName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ASTFieldDeclaration</name></argument>&gt;</argument_list></name></type> <name>fields</name> <init>= <expr><call><name><name>ast</name><operator>.</operator><name>findDescendantsOfType</name></name><argument_list>(<argument><expr><name><name>ASTFieldDeclaration</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name><name>fields</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>JavaRuleViolation</name></type> <name>fieldViolation</name> <init>= <expr><operator>new</operator> <call><name>JavaRuleViolation</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>RuleContext</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>fields</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"Foo"</literal></expr></argument>, <argument><expr><call><name><name>fieldViolation</name><operator>.</operator><name>getClassName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>JavaRuleViolation</name></type> <name>innerFieldViolation</name> <init>= <expr><operator>new</operator> <call><name>JavaRuleViolation</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>RuleContext</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>fields</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"Foo$Bar"</literal></expr></argument>, <argument><expr><call><name><name>innerFieldViolation</name><operator>.</operator><name>getClassName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>
}</block></class>
</unit>

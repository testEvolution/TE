<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="H:\Research\TestEvolution\DataAnalysis\pmd-pmd_releases-6.21.0\pmd-pmd_releases-6.21.0\pmd-java\src\test\java\net\sourceforge\pmd\lang\java\multifile\JavaMultifileVisitorTest.java"><comment type="block" format="javadoc">/**
 * BSD-style license; for more info see http://pmd.sourceforge.net/license.html
 */</comment>

<package>package <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>java</name><operator>.</operator><name>multifile</name></name>;</package>

<import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name><operator>.</operator><name>assertNotNull</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name><operator>.</operator><name>assertTrue</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Before</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Test</name></name>;</import>

<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>java</name><operator>.</operator><name>ast</name><operator>.</operator><name>ASTCompilationUnit</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>java</name><operator>.</operator><name>ast</name><operator>.</operator><name>ASTMethodDeclaration</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>java</name><operator>.</operator><name>ast</name><operator>.</operator><name>JavaParserVisitorAdapter</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>java</name><operator>.</operator><name>ast</name><operator>.</operator><name>JavaQualifiedName</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>java</name><operator>.</operator><name>multifile</name><operator>.</operator><name>signature</name><operator>.</operator><name>JavaFieldSigMask</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>java</name><operator>.</operator><name>multifile</name><operator>.</operator><name>signature</name><operator>.</operator><name>JavaOperationSigMask</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>java</name><operator>.</operator><name>multifile</name><operator>.</operator><name>signature</name><operator>.</operator><name>JavaOperationSignature</name><operator>.</operator><name>Role</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>java</name><operator>.</operator><name>multifile</name><operator>.</operator><name>signature</name><operator>.</operator><name>JavaSignature</name><operator>.</operator><name>Visibility</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>java</name><operator>.</operator><name>multifile</name><operator>.</operator><name>testdata</name><operator>.</operator><name>MultifileVisitorTestData2</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>java</name><operator>.</operator><name>qname</name><operator>.</operator><name>JavaOperationQualifiedName</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>java</name><operator>.</operator><name>qname</name><operator>.</operator><name>JavaTypeQualifiedName</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>java</name><operator>.</operator><name>qname</name><operator>.</operator><name>QualifiedNameFactory</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>java</name><operator>.</operator><name>symboltable</name><operator>.</operator><name>BaseNonParserTest</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Tests of the multifile visitor.
 *
 * @author ClÃ©ment Fournier
 */</comment>
<class><specifier>public</specifier> class <name>JavaMultifileVisitorTest</name> <super_list><extends>extends <super><name>BaseNonParserTest</name></super></extends></super_list> <block>{


    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testPackageStatsNotNull</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr><name><name>PackageStats</name><operator>.</operator><name>INSTANCE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>


    <function><annotation>@<name>Before</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>resetMultifile</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>PackageStats</name><operator>.</operator><name>INSTANCE</name><operator>.</operator><name>reset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>


    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testOperationsAreThere</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>ASTCompilationUnit</name></type> <name>acu</name> <init>= <expr><call><name><name>java</name><operator>.</operator><name>parseClass</name></name><argument_list>(<argument><expr><name><name>MultifileVisitorTestData2</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>ProjectMirror</name></type> <name>toplevel</name> <init>= <expr><name><name>PackageStats</name><operator>.</operator><name>INSTANCE</name></name></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>JavaOperationSigMask</name></type> <name>opMask</name> <init>= <expr><operator>new</operator> <call><name>JavaOperationSigMask</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// We could parse qnames from string but probably simpler to do that</comment>
        <expr_stmt><expr><call><name><name>acu</name><operator>.</operator><name>jjtAccept</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>JavaParserVisitorAdapter</name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <type><specifier>public</specifier> <name>Object</name></type> <name>visit</name><parameter_list>(<parameter><decl><type><name>ASTMethodDeclaration</name></type> <name>node</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>toplevel</name><operator>.</operator><name>hasMatchingSig</name></name><argument_list>(<argument><expr><call><name><name>node</name><operator>.</operator><name>getQualifiedName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>opMask</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>data</name></expr>;</return>
            </block_content>}</block></function>
        }</block></class></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>


    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testFieldsAreThere</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>java</name><operator>.</operator><name>parseClass</name></name><argument_list>(<argument><expr><name><name>MultifileVisitorTestData2</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>ProjectMirror</name></type> <name>toplevel</name> <init>= <expr><name><name>PackageStats</name><operator>.</operator><name>INSTANCE</name></name></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>JavaFieldSigMask</name></type> <name>fieldSigMask</name> <init>= <expr><operator>new</operator> <call><name>JavaFieldSigMask</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>JavaTypeQualifiedName</name></type> <name>clazz</name> <init>= <expr><call><name><name>QualifiedNameFactory</name><operator>.</operator><name>ofClass</name></name><argument_list>(<argument><expr><name><name>MultifileVisitorTestData2</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>fieldNames</name> <init>= <expr><block>{<expr><literal type="string">"x"</literal></expr>, <expr><literal type="string">"y"</literal></expr>, <expr><literal type="string">"z"</literal></expr>, <expr><literal type="string">"t"</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Visibility</name><index>[]</index></name></type> <name>visibilities</name> <init>= <expr><block>{<expr><name><name>Visibility</name><operator>.</operator><name>PUBLIC</name></name></expr>, <expr><name><name>Visibility</name><operator>.</operator><name>PRIVATE</name></name></expr>, <expr><name><name>Visibility</name><operator>.</operator><name>PROTECTED</name></name></expr>, <expr><name><name>Visibility</name><operator>.</operator><name>PACKAGE</name></name></expr>}</block></expr></init></decl>;</decl_stmt>

        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>fieldNames</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name><name>fieldSigMask</name><operator>.</operator><name>restrictVisibilitiesTo</name></name><argument_list>(<argument><expr><name><name>visibilities</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>toplevel</name><operator>.</operator><name>hasMatchingSig</name></name><argument_list>(<argument><expr><name>clazz</name></expr></argument>, <argument><expr><name><name>fieldNames</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>fieldSigMask</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></function>


    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testBothClassesOperationsAreThere</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>java</name><operator>.</operator><name>parseClass</name></name><argument_list>(<argument><expr><name><name>MultifileVisitorTestData2</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>java</name><operator>.</operator><name>parseClass</name></name><argument_list>(<argument><expr><name><name>MultifileVisitorTestData2</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>ProjectMirror</name></type> <name>toplevel</name> <init>= <expr><name><name>PackageStats</name><operator>.</operator><name>INSTANCE</name></name></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>JavaOperationSigMask</name></type> <name>operationSigMask</name> <init>= <expr><operator>new</operator> <call><name>JavaOperationSigMask</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>JavaQualifiedName</name></type> <name>clazz</name> <init>= <expr><call><name><name>QualifiedNameFactory</name><operator>.</operator><name>ofClass</name></name><argument_list>(<argument><expr><name><name>MultifileVisitorTestData2</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>JavaQualifiedName</name></type> <name>clazz2</name> <init>= <expr><call><name><name>QualifiedNameFactory</name><operator>.</operator><name>ofClass</name></name><argument_list>(<argument><expr><name><name>MultifileVisitorTestData2</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>opNames</name> <init>= <expr><block>{<expr><literal type="string">"getX()"</literal></expr>, <expr><literal type="string">"getY()"</literal></expr>, <expr><literal type="string">"setX(String)"</literal></expr>, <expr><literal type="string">"setY(String)"</literal></expr>,
                            <expr><literal type="string">"mymethod1()"</literal></expr>, <expr><literal type="string">"mymethod2()"</literal></expr>, <expr><literal type="string">"mystatic1()"</literal></expr>,
                            <expr><literal type="string">"mystatic2(String)"</literal></expr>, <expr><literal type="string">"mystatic2(String, String)"</literal></expr>, }</block></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Role</name><index>[]</index></name></type> <name>roles</name> <init>= <expr><block>{<expr><name><name>Role</name><operator>.</operator><name>GETTER_OR_SETTER</name></name></expr>, <expr><name><name>Role</name><operator>.</operator><name>GETTER_OR_SETTER</name></name></expr>, <expr><name><name>Role</name><operator>.</operator><name>GETTER_OR_SETTER</name></name></expr>, <expr><name><name>Role</name><operator>.</operator><name>GETTER_OR_SETTER</name></name></expr>,
                        <expr><name><name>Role</name><operator>.</operator><name>METHOD</name></name></expr>, <expr><name><name>Role</name><operator>.</operator><name>METHOD</name></name></expr>, <expr><name><name>Role</name><operator>.</operator><name>STATIC</name></name></expr>, <expr><name><name>Role</name><operator>.</operator><name>STATIC</name></name></expr>, <expr><name><name>Role</name><operator>.</operator><name>STATIC</name></name></expr>, }</block></expr></init></decl>;</decl_stmt>


        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>opNames</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name><name>operationSigMask</name><operator>.</operator><name>restrictRolesTo</name></name><argument_list>(<argument><expr><name><name>roles</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>JavaOperationQualifiedName</name></type> <name>name1</name> <init>= <expr><operator>(</operator><name>JavaOperationQualifiedName</name><operator>)</operator> <call><name><name>QualifiedNameFactory</name><operator>.</operator><name>ofString</name></name><argument_list>(<argument><expr><call><name><name>clazz</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"#"</literal> <operator>+</operator> <name><name>opNames</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>JavaOperationQualifiedName</name></type> <name>name2</name> <init>= <expr><operator>(</operator><name>JavaOperationQualifiedName</name><operator>)</operator> <call><name><name>QualifiedNameFactory</name><operator>.</operator><name>ofString</name></name><argument_list>(<argument><expr><call><name><name>clazz2</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"#"</literal> <operator>+</operator> <name><name>opNames</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>toplevel</name><operator>.</operator><name>hasMatchingSig</name></name><argument_list>(<argument><expr><name>name1</name></expr></argument>, <argument><expr><name>operationSigMask</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>toplevel</name><operator>.</operator><name>hasMatchingSig</name></name><argument_list>(<argument><expr><name>name2</name></expr></argument>, <argument><expr><name>operationSigMask</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></function>


    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testBothClassesFieldsAreThere</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>java</name><operator>.</operator><name>parseClass</name></name><argument_list>(<argument><expr><name><name>MultifileVisitorTestData2</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>java</name><operator>.</operator><name>parseClass</name></name><argument_list>(<argument><expr><name><name>MultifileVisitorTestData2</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>ProjectMirror</name></type> <name>toplevel</name> <init>= <expr><name><name>PackageStats</name><operator>.</operator><name>INSTANCE</name></name></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>JavaFieldSigMask</name></type> <name>fieldSigMask</name> <init>= <expr><operator>new</operator> <call><name>JavaFieldSigMask</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>JavaTypeQualifiedName</name></type> <name>clazz</name> <init>= <expr><call><name><name>QualifiedNameFactory</name><operator>.</operator><name>ofClass</name></name><argument_list>(<argument><expr><name><name>MultifileVisitorTestData2</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>JavaTypeQualifiedName</name></type> <name>clazz2</name> <init>= <expr><call><name><name>QualifiedNameFactory</name><operator>.</operator><name>ofClass</name></name><argument_list>(<argument><expr><name><name>MultifileVisitorTestData2</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>fieldNames</name> <init>= <expr><block>{<expr><literal type="string">"x"</literal></expr>, <expr><literal type="string">"y"</literal></expr>, <expr><literal type="string">"z"</literal></expr>, <expr><literal type="string">"t"</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Visibility</name><index>[]</index></name></type> <name>visibilities</name> <init>= <expr><block>{<expr><name><name>Visibility</name><operator>.</operator><name>PUBLIC</name></name></expr>, <expr><name><name>Visibility</name><operator>.</operator><name>PRIVATE</name></name></expr>, <expr><name><name>Visibility</name><operator>.</operator><name>PROTECTED</name></name></expr>, <expr><name><name>Visibility</name><operator>.</operator><name>PACKAGE</name></name></expr>}</block></expr></init></decl>;</decl_stmt>


        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>fieldNames</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name><name>fieldSigMask</name><operator>.</operator><name>restrictVisibilitiesTo</name></name><argument_list>(<argument><expr><name><name>visibilities</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>toplevel</name><operator>.</operator><name>hasMatchingSig</name></name><argument_list>(<argument><expr><name>clazz</name></expr></argument>, <argument><expr><name><name>fieldNames</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>fieldSigMask</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>toplevel</name><operator>.</operator><name>hasMatchingSig</name></name><argument_list>(<argument><expr><name>clazz2</name></expr></argument>, <argument><expr><name><name>fieldNames</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>fieldSigMask</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></function>


}</block></class>
</unit>

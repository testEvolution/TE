<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="H:\Research\TestEvolution\DataAnalysis\pmd-pmd_releases-6.21.0\pmd-pmd_releases-6.21.0\pmd-java\src\test\java\net\sourceforge\pmd\lang\java\ast\BaseParserTest.java"><comment type="block" format="javadoc">/**
 * BSD-style license; for more info see http://pmd.sourceforge.net/license.html
 */</comment>

<package>package <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>java</name><operator>.</operator><name>ast</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>ast</name><operator>.</operator><name>Node</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>java</name><operator>.</operator><name>JavaParsingHelper</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Base class for tests that usually need processing stages to run when
 * parsing code.
 */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>BaseParserTest</name> <block>{

    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>final</specifier> <name>JavaParsingHelper</name></type> <name>java</name> <init>= <expr><call><name><name>JavaParsingHelper</name><operator>.</operator><name>JUST_PARSE</name><operator>.</operator><name>withResourceContext</name></name><argument_list>(<argument><expr><call><name>getClass</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>final</specifier> <name>JavaParsingHelper</name></type> <name>java5</name> <init>= <expr><call><name><name>java</name><operator>.</operator><name>withDefaultVersion</name></name><argument_list>(<argument><expr><literal type="string">"1.5"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>final</specifier> <name>JavaParsingHelper</name></type> <name>java8</name> <init>= <expr><call><name><name>java</name><operator>.</operator><name>withDefaultVersion</name></name><argument_list>(<argument><expr><literal type="string">"1.8"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>final</specifier> <name>JavaParsingHelper</name></type> <name>java9</name> <init>= <expr><call><name><name>java</name><operator>.</operator><name>withDefaultVersion</name></name><argument_list>(<argument><expr><literal type="string">"9"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


    <function><type><specifier>protected</specifier> <name>ASTCompilationUnit</name></type> <name>parseCode</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>code</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>java</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>protected</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name> <extends>extends <name>Node</name></extends></parameter>&gt;</parameter_list> <name><name>List</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>getNodes</name><parameter_list>(<parameter><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>code</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>JavaParsingHelper</name><operator>.</operator><name>WITH_PROCESSING</name><operator>.</operator><name>getNodes</name></name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
}</block></class>
</unit>

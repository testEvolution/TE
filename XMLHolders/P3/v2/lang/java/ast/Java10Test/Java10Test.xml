<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="H:\Research\TestEvolution\DataAnalysis\pmd-pmd_releases-6.21.0\pmd-pmd_releases-6.21.0\pmd-java\src\test\java\net\sourceforge\pmd\lang\java\ast\Java10Test.java"><comment type="block" format="javadoc">/**
 * BSD-style license; for more info see http://pmd.sourceforge.net/license.html
 */</comment>

<package>package <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>java</name><operator>.</operator><name>ast</name></name>;</package>

<import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name><operator>.</operator><name>assertEquals</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name><operator>.</operator><name>assertNotNull</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name><operator>.</operator><name>assertNull</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name><operator>.</operator><name>assertSame</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>FileInputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Test</name></name>;</import>

<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>java</name><operator>.</operator><name>JavaParsingHelper</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>java</name><operator>.</operator><name>typeresolution</name><operator>.</operator><name>typedefinition</name><operator>.</operator><name>JavaTypeDefinition</name></name>;</import>

<class><specifier>public</specifier> class <name>Java10Test</name> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>JavaParsingHelper</name></type> <name>java10</name> <init>=
        <expr><call><name><name>JavaParsingHelper</name><operator>.</operator><name>WITH_PROCESSING</name><operator>.</operator><name>withDefaultVersion</name></name><argument_list>(<argument><expr><literal type="string">"10"</literal></expr></argument>)</argument_list></call>
                                         <operator>.</operator><call><name>withResourceContext</name><argument_list>(<argument><expr><name><name>Java10Test</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><literal type="string">"jdkversiontests/java10/"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>JavaParsingHelper</name></type> <name>java9</name> <init>= <expr><call><name><name>java10</name><operator>.</operator><name>withDefaultVersion</name></name><argument_list>(<argument><expr><literal type="string">"9"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testLocalVarInferenceBeforeJava10</name><parameter_list>()</parameter_list> <block>{<block_content>
        <comment type="line">// note, it can be parsed, but we'll have a ReferenceType of "var"</comment>

        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ASTLocalVariableDeclaration</name></argument>&gt;</argument_list></name></type> <name>localVars</name> <init>= <expr><call><name><name>java9</name><operator>.</operator><name>parseResource</name></name><argument_list>(<argument><expr><literal type="string">"LocalVariableTypeInference.java"</literal></expr></argument>)</argument_list></call>
                                                           <operator>.</operator><call><name>findDescendantsOfType</name><argument_list>(<argument><expr><name><name>ASTLocalVariableDeclaration</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><call><name><name>localVars</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// first: var list = new ArrayList&lt;String&gt;();</comment>
        <decl_stmt><decl><type><name>ASTType</name></type> <name>type</name> <init>= <expr><call><name><name>localVars</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getFirstChildOfType</name><argument_list>(<argument><expr><name><name>ASTType</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"var"</literal></expr></argument>, <argument><expr><call><name><name>type</name><operator>.</operator><name>getTypeImage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>type</name><operator>.</operator><name>getNumChildren</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>ASTReferenceType</name></type> <name>referenceType</name> <init>= <expr><call><name><name>type</name><operator>.</operator><name>getFirstChildOfType</name></name><argument_list>(<argument><expr><name><name>ASTReferenceType</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr><name>referenceType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>referenceType</name><operator>.</operator><name>getNumChildren</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>ASTClassOrInterfaceType</name></type> <name>classType</name> <init>= <expr><call><name><name>referenceType</name><operator>.</operator><name>getFirstChildOfType</name></name><argument_list>(<argument><expr><name><name>ASTClassOrInterfaceType</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr><name>classType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"var"</literal></expr></argument>, <argument><expr><call><name><name>classType</name><operator>.</operator><name>getImage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// in that case, we don't have a class named "var", so the type will be null</comment>
        <expr_stmt><expr><call><name>assertNull</name><argument_list>(<argument><expr><call><name><name>classType</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertNull</name><argument_list>(<argument><expr><call><name><name>type</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// check the type of the variable initializer's expression</comment>
        <decl_stmt><decl><type><name>ASTExpression</name></type> <name>initExpression</name> <init>= <expr><call><name><name>localVars</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>getFirstChildOfType</name><argument_list>(<argument><expr><name><name>ASTVariableDeclarator</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>getFirstChildOfType</name><argument_list>(<argument><expr><name><name>ASTVariableInitializer</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>getFirstChildOfType</name><argument_list>(<argument><expr><name><name>ASTExpression</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertSame</name><argument_list>(<argument><expr><literal type="string">"type should be ArrayList"</literal></expr></argument>, <argument><expr><name><name>ArrayList</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>initExpression</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testLocalVarInferenceCanBeParsedJava10</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>ASTCompilationUnit</name></type> <name>compilationUnit</name> <init>= <expr><call><name><name>java10</name><operator>.</operator><name>parseResource</name></name><argument_list>(<argument><expr><literal type="string">"LocalVariableTypeInference.java"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ASTLocalVariableDeclaration</name></argument>&gt;</argument_list></name></type> <name>localVars</name> <init>= <expr><call><name><name>compilationUnit</name><operator>.</operator><name>findDescendantsOfType</name></name><argument_list>(<argument><expr><name><name>ASTLocalVariableDeclaration</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><call><name><name>localVars</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// first: var list = new ArrayList&lt;String&gt;();</comment>
        <expr_stmt><expr><call><name>assertNull</name><argument_list>(<argument><expr><call><name><name>localVars</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getTypeNode</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>ASTVariableDeclarator</name></type> <name>varDecl</name> <init>= <expr><call><name><name>localVars</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getFirstChildOfType</name><argument_list>(<argument><expr><name><name>ASTVariableDeclarator</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertSame</name><argument_list>(<argument><expr><literal type="string">"type should be ArrayList"</literal></expr></argument>, <argument><expr><name><name>ArrayList</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>varDecl</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"type should be ArrayList&lt;String&gt;"</literal></expr></argument>, <argument><expr><call><name><name>JavaTypeDefinition</name><operator>.</operator><name>forClass</name></name><argument_list>(<argument><expr><name><name>ArrayList</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>JavaTypeDefinition</name><operator>.</operator><name>forClass</name></name><argument_list>(<argument><expr><name><name>String</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><call><name><name>varDecl</name><operator>.</operator><name>getTypeDefinition</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>ASTVariableDeclaratorId</name></type> <name>varId</name> <init>= <expr><call><name><name>varDecl</name><operator>.</operator><name>getFirstChildOfType</name></name><argument_list>(<argument><expr><name><name>ASTVariableDeclaratorId</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"type should be equal"</literal></expr></argument>, <argument><expr><call><name><name>varDecl</name><operator>.</operator><name>getTypeDefinition</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>varId</name><operator>.</operator><name>getTypeDefinition</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// second: var stream = list.stream();</comment>
        <expr_stmt><expr><call><name>assertNull</name><argument_list>(<argument><expr><call><name><name>localVars</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getTypeNode</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">//ASTVariableDeclarator varDecl2 = localVars.get(1).getFirstChildOfType(ASTVariableDeclarator.class);</comment>
        <comment type="line">// TODO: return type of method call is unknown</comment>
        <comment type="line">// assertEquals("type should be Stream&lt;String&gt;", JavaTypeDefinition.forClass(Stream.class, JavaTypeDefinition.forClass(String.class)),</comment>
        <comment type="line">//         varDecl2.getTypeDefinition());</comment>

        <comment type="line">// third: var s = "Java 10";</comment>
        <expr_stmt><expr><call><name>assertNull</name><argument_list>(<argument><expr><call><name><name>localVars</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getTypeNode</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>ASTVariableDeclarator</name></type> <name>varDecl3</name> <init>= <expr><call><name><name>localVars</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getFirstChildOfType</name><argument_list>(<argument><expr><name><name>ASTVariableDeclarator</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"type should be String"</literal></expr></argument>, <argument><expr><call><name><name>JavaTypeDefinition</name><operator>.</operator><name>forClass</name></name><argument_list>(<argument><expr><name><name>String</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>varDecl3</name><operator>.</operator><name>getTypeDefinition</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>ASTArgumentList</name></type> <name>argumentList</name> <init>= <expr><call><name><name>compilationUnit</name><operator>.</operator><name>getFirstDescendantOfType</name></name><argument_list>(<argument><expr><name><name>ASTArgumentList</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ASTExpression</name></type> <name>expression3</name> <init>= <expr><call><name><name>argumentList</name><operator>.</operator><name>getFirstChildOfType</name></name><argument_list>(<argument><expr><name><name>ASTExpression</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"type should be String"</literal></expr></argument>, <argument><expr><call><name><name>JavaTypeDefinition</name><operator>.</operator><name>forClass</name></name><argument_list>(<argument><expr><name><name>String</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>expression3</name><operator>.</operator><name>getTypeDefinition</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testForLoopWithVar</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ASTLocalVariableDeclaration</name></argument>&gt;</argument_list></name></type> <name>localVars</name> <init>= <expr><call><name><name>java10</name><operator>.</operator><name>parseResource</name></name><argument_list>(<argument><expr><literal type="string">"LocalVariableTypeInferenceForLoop.java"</literal></expr></argument>)</argument_list></call>
                                                            <operator>.</operator><call><name>findDescendantsOfType</name><argument_list>(<argument><expr><name><name>ASTLocalVariableDeclaration</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>localVars</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>assertNull</name><argument_list>(<argument><expr><call><name><name>localVars</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getTypeNode</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>ASTVariableDeclarator</name></type> <name>varDecl</name> <init>= <expr><call><name><name>localVars</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getFirstChildOfType</name><argument_list>(<argument><expr><name><name>ASTVariableDeclarator</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertSame</name><argument_list>(<argument><expr><literal type="string">"type should be int"</literal></expr></argument>, <argument><expr><name><name>Integer</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>varDecl</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testForLoopEnhancedWithVar</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ASTLocalVariableDeclaration</name></argument>&gt;</argument_list></name></type> <name>localVars</name> <init>= <expr><call><name><name>java10</name><operator>.</operator><name>parseResource</name></name><argument_list>(<argument><expr><literal type="string">"LocalVariableTypeInferenceForLoopEnhanced.java"</literal></expr></argument>)</argument_list></call>
                                                            <operator>.</operator><call><name>findDescendantsOfType</name><argument_list>(<argument><expr><name><name>ASTLocalVariableDeclaration</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>localVars</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>assertNull</name><argument_list>(<argument><expr><call><name><name>localVars</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getTypeNode</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>ASTVariableDeclarator</name></type> <name>varDecl</name> <init>= <expr><call><name><name>localVars</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getFirstChildOfType</name><argument_list>(<argument><expr><name><name>ASTVariableDeclarator</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertSame</name><argument_list>(<argument><expr><literal type="string">"type should be String"</literal></expr></argument>, <argument><expr><name><name>String</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>varDecl</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testForLoopEnhancedWithVar2</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ASTLocalVariableDeclaration</name></argument>&gt;</argument_list></name></type> <name>localVars</name> <init>= <expr><call><name><name>java10</name><operator>.</operator><name>parseResource</name></name><argument_list>(<argument><expr><literal type="string">"LocalVariableTypeInferenceForLoopEnhanced2.java"</literal></expr></argument>)</argument_list></call>
                                                            <operator>.</operator><call><name>findDescendantsOfType</name><argument_list>(<argument><expr><name><name>ASTLocalVariableDeclaration</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><call><name><name>localVars</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>assertNull</name><argument_list>(<argument><expr><call><name><name>localVars</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getTypeNode</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>ASTVariableDeclarator</name></type> <name>varDecl2</name> <init>= <expr><call><name><name>localVars</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getFirstChildOfType</name><argument_list>(<argument><expr><name><name>ASTVariableDeclarator</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertSame</name><argument_list>(<argument><expr><literal type="string">"type should be String"</literal></expr></argument>, <argument><expr><name><name>String</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>varDecl2</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>ASTVariableDeclaratorId</name></type> <name>varId2</name> <init>= <expr><call><name><name>varDecl2</name><operator>.</operator><name>getFirstChildOfType</name></name><argument_list>(<argument><expr><name><name>ASTVariableDeclaratorId</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertSame</name><argument_list>(<argument><expr><literal type="string">"type should be String"</literal></expr></argument>, <argument><expr><name><name>String</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>varId2</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>assertNull</name><argument_list>(<argument><expr><call><name><name>localVars</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getTypeNode</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>ASTVariableDeclarator</name></type> <name>varDecl4</name> <init>= <expr><call><name><name>localVars</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getFirstChildOfType</name><argument_list>(<argument><expr><name><name>ASTVariableDeclarator</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertSame</name><argument_list>(<argument><expr><literal type="string">"type should be int"</literal></expr></argument>, <argument><expr><name><name>Integer</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>varDecl4</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testTryWithResourcesWithVar</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ASTResource</name></argument>&gt;</argument_list></name></type> <name>resources</name> <init>= <expr><call><name><name>java10</name><operator>.</operator><name>parseResource</name></name><argument_list>(<argument><expr><literal type="string">"LocalVariableTypeInferenceTryWithResources.java"</literal></expr></argument>)</argument_list></call>
                                            <operator>.</operator><call><name>findDescendantsOfType</name><argument_list>(<argument><expr><name><name>ASTResource</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>resources</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>assertNull</name><argument_list>(<argument><expr><call><name><name>resources</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getTypeNode</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>ASTVariableDeclaratorId</name></type> <name>varId</name> <init>= <expr><call><name><name>resources</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getVariableDeclaratorId</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertSame</name><argument_list>(<argument><expr><literal type="string">"type should be FileInputStream"</literal></expr></argument>, <argument><expr><name><name>FileInputStream</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>varId</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testTypeResNullPointer</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>java10</name><operator>.</operator><name>parseResource</name></name><argument_list>(<argument><expr><literal type="string">"LocalVariableTypeInference_typeres.java"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testVarAsIdentifier</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>java10</name><operator>.</operator><name>parseResource</name></name><argument_list>(<argument><expr><literal type="string">"LocalVariableTypeInference_varAsIdentifier.java"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Test</name><argument_list>(<argument><expr><name>expected</name> <operator>=</operator> <name><name>ParseException</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testVarAsTypeIdentifier</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>java10</name><operator>.</operator><name>parseResource</name></name><argument_list>(<argument><expr><literal type="string">"LocalVariableTypeInference_varAsTypeIdentifier.java"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Test</name><argument_list>(<argument><expr><name>expected</name> <operator>=</operator> <name><name>ParseException</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testVarAsAnnotationName</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>java10</name><operator>.</operator><name>parseResource</name></name><argument_list>(<argument><expr><literal type="string">"LocalVariableTypeInference_varAsAnnotationName.java"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Test</name><argument_list>(<argument><expr><name>expected</name> <operator>=</operator> <name><name>ParseException</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testVarAsEnumName</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>java10</name><operator>.</operator><name>parseResource</name></name><argument_list>(<argument><expr><literal type="string">"LocalVariableTypeInference_varAsEnumName.java"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>
}</block></class>
</unit>

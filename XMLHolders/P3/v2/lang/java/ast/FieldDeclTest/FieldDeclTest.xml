<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="H:\Research\TestEvolution\DataAnalysis\pmd-pmd_releases-6.21.0\pmd-pmd_releases-6.21.0\pmd-java\src\test\java\net\sourceforge\pmd\lang\java\ast\FieldDeclTest.java"><comment type="block" format="javadoc">/**
 * BSD-style license; for more info see http://pmd.sourceforge.net/license.html
 */</comment>

<package>package <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>java</name><operator>.</operator><name>ast</name></name>;</package>

<import>import static <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>java</name><operator>.</operator><name>ast</name><operator>.</operator><name>AccessNodeTest</name><operator>.</operator><name>getDeclWithModifiers</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name><operator>.</operator><name>assertTrue</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Test</name></name>;</import>

<class><specifier>public</specifier> class <name>FieldDeclTest</name> <super_list><extends>extends <super><name>BaseParserTest</name></super></extends></super_list> <block>{


    <function><type><specifier>public</specifier> <name>ASTFieldDeclaration</name></type> <name>getFieldDecl</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>access</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>getDeclWithModifiers</name><argument_list>(<argument><expr><name>access</name></expr></argument>, <argument><expr><name><name>ASTFieldDeclaration</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><literal type="string">"int j;"</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>


    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testPublic</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>access</name> <init>= <expr><block>{ <expr><literal type="string">"public"</literal></expr> }</block></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ASTFieldDeclaration</name></type> <name>afd</name> <init>= <expr><call><name>getFieldDecl</name><argument_list>(<argument><expr><name>access</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><literal type="string">"Expecting field to be public."</literal></expr></argument>, <argument><expr><call><name><name>afd</name><operator>.</operator><name>isPublic</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testProtected</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>access</name> <init>= <expr><block>{ <expr><literal type="string">"protected"</literal></expr> }</block></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ASTFieldDeclaration</name></type> <name>afd</name> <init>= <expr><call><name>getFieldDecl</name><argument_list>(<argument><expr><name>access</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><literal type="string">"Expecting field to be protected."</literal></expr></argument>, <argument><expr><call><name><name>afd</name><operator>.</operator><name>isProtected</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testPrivate</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>access</name> <init>= <expr><block>{ <expr><literal type="string">"private"</literal></expr> }</block></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ASTFieldDeclaration</name></type> <name>afd</name> <init>= <expr><call><name>getFieldDecl</name><argument_list>(<argument><expr><name>access</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><literal type="string">"Expecting field to be private."</literal></expr></argument>, <argument><expr><call><name><name>afd</name><operator>.</operator><name>isPrivate</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testStatic</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>access</name> <init>= <expr><block>{ <expr><literal type="string">"private"</literal></expr>, <expr><literal type="string">"static"</literal></expr> }</block></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ASTFieldDeclaration</name></type> <name>afd</name> <init>= <expr><call><name>getFieldDecl</name><argument_list>(<argument><expr><name>access</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><literal type="string">"Expecting field to be static."</literal></expr></argument>, <argument><expr><call><name><name>afd</name><operator>.</operator><name>isStatic</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><literal type="string">"Expecting field to be private."</literal></expr></argument>, <argument><expr><call><name><name>afd</name><operator>.</operator><name>isPrivate</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testFinal</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>access</name> <init>= <expr><block>{ <expr><literal type="string">"public"</literal></expr>, <expr><literal type="string">"final"</literal></expr> }</block></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ASTFieldDeclaration</name></type> <name>afd</name> <init>= <expr><call><name>getFieldDecl</name><argument_list>(<argument><expr><name>access</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><literal type="string">"Expecting field to be final."</literal></expr></argument>, <argument><expr><call><name><name>afd</name><operator>.</operator><name>isFinal</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><literal type="string">"Expecting field to be public."</literal></expr></argument>, <argument><expr><call><name><name>afd</name><operator>.</operator><name>isPublic</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testTransient</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>access</name> <init>= <expr><block>{ <expr><literal type="string">"private"</literal></expr>, <expr><literal type="string">"transient"</literal></expr> }</block></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ASTFieldDeclaration</name></type> <name>afd</name> <init>= <expr><call><name>getFieldDecl</name><argument_list>(<argument><expr><name>access</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><literal type="string">"Expecting field to be private."</literal></expr></argument>, <argument><expr><call><name><name>afd</name><operator>.</operator><name>isPrivate</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><literal type="string">"Expecting field to be transient."</literal></expr></argument>, <argument><expr><call><name><name>afd</name><operator>.</operator><name>isTransient</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testVolatile</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>access</name> <init>= <expr><block>{ <expr><literal type="string">"private"</literal></expr>, <expr><literal type="string">"volatile"</literal></expr> }</block></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ASTFieldDeclaration</name></type> <name>afd</name> <init>= <expr><call><name>getFieldDecl</name><argument_list>(<argument><expr><name>access</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><literal type="string">"Expecting field to be volatile."</literal></expr></argument>, <argument><expr><call><name><name>afd</name><operator>.</operator><name>isVolatile</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><literal type="string">"Expecting field to be private."</literal></expr></argument>, <argument><expr><call><name><name>afd</name><operator>.</operator><name>isPrivate</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>
}</block></class>
</unit>

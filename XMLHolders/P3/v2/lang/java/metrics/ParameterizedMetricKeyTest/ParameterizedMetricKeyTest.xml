<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="H:\Research\TestEvolution\DataAnalysis\pmd-pmd_releases-6.21.0\pmd-pmd_releases-6.21.0\pmd-java\src\test\java\net\sourceforge\pmd\lang\java\metrics\ParameterizedMetricKeyTest.java"><comment type="block" format="javadoc">/**
 * BSD-style license; for more info see http://pmd.sourceforge.net/license.html
 */</comment>

<package>package <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>java</name><operator>.</operator><name>metrics</name></name>;</package>

<import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name><operator>.</operator><name>assertEquals</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name><operator>.</operator><name>assertFalse</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name><operator>.</operator><name>assertNotEquals</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name><operator>.</operator><name>assertNotNull</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name><operator>.</operator><name>assertTrue</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Test</name></name>;</import>

<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>java</name><operator>.</operator><name>ast</name><operator>.</operator><name>ASTAnyTypeDeclaration</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>java</name><operator>.</operator><name>metrics</name><operator>.</operator><name>api</name><operator>.</operator><name>JavaClassMetricKey</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>java</name><operator>.</operator><name>metrics</name><operator>.</operator><name>api</name><operator>.</operator><name>JavaOperationMetricKey</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>metrics</name><operator>.</operator><name>MetricKey</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>metrics</name><operator>.</operator><name>MetricKeyUtil</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>metrics</name><operator>.</operator><name>MetricOption</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>metrics</name><operator>.</operator><name>MetricOptions</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>metrics</name><operator>.</operator><name>ParameterizedMetricKey</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author ClÃ©ment Fournier
 */</comment>
<class><specifier>public</specifier> class <name>ParameterizedMetricKeyTest</name> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>MetricOptions</name></type> <name>DUMMY_VERSION_1</name> <init>= <expr><call><name><name>MetricOptions</name><operator>.</operator><name>ofOptions</name></name><argument_list>(<argument><expr><name><name>Options</name><operator>.</operator><name>DUMMY1</name></name></expr></argument>, <argument><expr><name><name>Options</name><operator>.</operator><name>DUMMY2</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>MetricOptions</name></type> <name>DUMMY_VERSION_2</name> <init>= <expr><call><name><name>MetricOptions</name><operator>.</operator><name>ofOptions</name></name><argument_list>(<argument><expr><name><name>Options</name><operator>.</operator><name>DUMMY2</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testIdentity</name><parameter_list>()</parameter_list> <block>{<block_content>
        <for>for <control>(<init><decl><type><name>JavaClassMetricKey</name></type> <name>key</name> <range>: <expr><call><name><name>JavaClassMetricKey</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>ParameterizedMetricKey</name></type> <name>key1</name> <init>= <expr><call><name><name>ParameterizedMetricKey</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>DUMMY_VERSION_1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ParameterizedMetricKey</name></type> <name>key2</name> <init>= <expr><call><name><name>ParameterizedMetricKey</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>DUMMY_VERSION_1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>key1</name></expr></argument>, <argument><expr><name>key2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><name>key1</name> <operator>==</operator> <name>key2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>

        <for>for <control>(<init><decl><type><name>JavaOperationMetricKey</name></type> <name>key</name> <range>: <expr><call><name><name>JavaOperationMetricKey</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>ParameterizedMetricKey</name></type> <name>key1</name> <init>= <expr><call><name><name>ParameterizedMetricKey</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>DUMMY_VERSION_1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ParameterizedMetricKey</name></type> <name>key2</name> <init>= <expr><call><name><name>ParameterizedMetricKey</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>DUMMY_VERSION_1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>key1</name></expr></argument>, <argument><expr><name>key2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><name>key1</name> <operator>==</operator> <name>key2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></function>


    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testVersioning</name><parameter_list>()</parameter_list> <block>{<block_content>
        <for>for <control>(<init><decl><type><name>JavaClassMetricKey</name></type> <name>key</name> <range>: <expr><call><name><name>JavaClassMetricKey</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>ParameterizedMetricKey</name></type> <name>key1</name> <init>= <expr><call><name><name>ParameterizedMetricKey</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>DUMMY_VERSION_1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ParameterizedMetricKey</name></type> <name>key2</name> <init>= <expr><call><name><name>ParameterizedMetricKey</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>DUMMY_VERSION_2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>assertNotEquals</name><argument_list>(<argument><expr><name>key1</name></expr></argument>, <argument><expr><name>key2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><name>key1</name> <operator>==</operator> <name>key2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>

        <for>for <control>(<init><decl><type><name>JavaOperationMetricKey</name></type> <name>key</name> <range>: <expr><call><name><name>JavaOperationMetricKey</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>ParameterizedMetricKey</name></type> <name>key1</name> <init>= <expr><call><name><name>ParameterizedMetricKey</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>DUMMY_VERSION_1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ParameterizedMetricKey</name></type> <name>key2</name> <init>= <expr><call><name><name>ParameterizedMetricKey</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>DUMMY_VERSION_2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>assertNotEquals</name><argument_list>(<argument><expr><name>key1</name></expr></argument>, <argument><expr><name>key2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><name>key1</name> <operator>==</operator> <name>key2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></function>


    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testToString</name><parameter_list>()</parameter_list> <block>{<block_content>
        <for>for <control>(<init><decl><type><name>JavaClassMetricKey</name></type> <name>key</name> <range>: <expr><call><name><name>JavaClassMetricKey</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>ParameterizedMetricKey</name></type> <name>key1</name> <init>= <expr><call><name><name>ParameterizedMetricKey</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>DUMMY_VERSION_1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>key1</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>contains</name><argument_list>(<argument><expr><call><name><name>key1</name><operator>.</operator><name>key</name><operator>.</operator><name>name</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>key1</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>contains</name><argument_list>(<argument><expr><call><name><name>key1</name><operator>.</operator><name>options</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></function>


    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testAdHocMetricKey</name><parameter_list>()</parameter_list> <block>{<block_content>

        <decl_stmt><decl><type><name><name>MetricKey</name><argument_list type="generic">&lt;<argument><name>ASTAnyTypeDeclaration</name></argument>&gt;</argument_list></name></type> <name>adHocKey</name> <init>= <expr><call><name><name>MetricKeyUtil</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><literal type="string">"metric"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


        <decl_stmt><decl><type><name>ParameterizedMetricKey</name></type> <name>key1</name> <init>= <expr><call><name><name>ParameterizedMetricKey</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><name>adHocKey</name></expr></argument>, <argument><expr><name>DUMMY_VERSION_1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ParameterizedMetricKey</name></type> <name>key2</name> <init>= <expr><call><name><name>ParameterizedMetricKey</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><name>adHocKey</name></expr></argument>, <argument><expr><name>DUMMY_VERSION_1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr><name>key1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr><name>key2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><name>key1</name> <operator>==</operator> <name>key2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>key1</name></expr></argument>, <argument><expr><name>key2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>key1</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>contains</name><argument_list>(<argument><expr><call><name><name>key1</name><operator>.</operator><name>key</name><operator>.</operator><name>name</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>key1</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>contains</name><argument_list>(<argument><expr><call><name><name>key1</name><operator>.</operator><name>options</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></function>


    <enum><specifier>private</specifier> enum <name>Options</name> <super_list><implements>implements <super><name>MetricOption</name></super></implements></super_list> <block>{
        <decl><name>DUMMY1</name></decl>,
        <decl><name>DUMMY2</name></decl>;


        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>String</name></type> <name>valueName</name><parameter_list>()</parameter_list> <block>{<block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></function>
    }</block></enum>


}</block></class>
</unit>

<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="H:\Research\TestEvolution\DataAnalysis\pmd-pmd_releases-6.21.0\pmd-pmd_releases-6.21.0\pmd-java\src\test\java\net\sourceforge\pmd\lang\java\metrics\testdata\GetterDetection.java"><comment type="block" format="javadoc">/**
 * BSD-style license; for more info see http://pmd.sourceforge.net/license.html
 */</comment>

<package>package <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>java</name><operator>.</operator><name>metrics</name><operator>.</operator><name>testdata</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>lang3</name><operator>.</operator><name>mutable</name><operator>.</operator><name>MutableInt</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author ClÃ©ment Fournier
 */</comment>
<class><specifier>public</specifier> class <name>GetterDetection</name> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>value</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>speed</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>MutableInt</name></type> <name>mutX</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>bool</name></decl>;</decl_stmt>


    <function><type><specifier>public</specifier> <name>int</name></type> <name>getValue</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>value</name></expr>;</return>
    </block_content>}</block></function>


    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isBool</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>bool</name></expr>;</return>
    </block_content>}</block></function>


    <function><type><specifier>public</specifier> <name>int</name></type> <name>value</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>value</name></expr>;</return>
    </block_content>}</block></function>


    <comment type="block">/*  public double speedModified() {
        return speed * 12 + 1;
    }

    public int mutableInt() {
        return mutX.getValue();
    }

    public MutableInt theMutable() {
        return mutX;
    }

    public int mutableIntIf() {
        if (mutX == null) {
            return 0;
        } else {
            return mutX.getValue();
        }
    }

    public int mutableIntConditional() {
        return mutX == null ? 0 : mutX.getValue();
    }
    */</comment>
}</block></class>
</unit>

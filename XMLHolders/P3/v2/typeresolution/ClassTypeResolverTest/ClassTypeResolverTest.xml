<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="H:\Research\TestEvolution\DataAnalysis\pmd-pmd_releases-6.21.0\pmd-pmd_releases-6.21.0\pmd-java\src\test\java\net\sourceforge\pmd\typeresolution\ClassTypeResolverTest.java"><comment type="block" format="javadoc">/**
 * BSD-style license; for more info see http://pmd.sourceforge.net/license.html
 */</comment>

<package>package <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>typeresolution</name></name>;</package>

<import>import static <name><name>junit</name><operator>.</operator><name>framework</name><operator>.</operator><name>TestCase</name><operator>.</operator><name>assertTrue</name></name>;</import>
<import>import static <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>java</name><operator>.</operator><name>typeresolution</name><operator>.</operator><name>typedefinition</name><operator>.</operator><name>JavaTypeDefinition</name><operator>.</operator><name>forClass</name></name>;</import>
<import>import static <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>java</name><operator>.</operator><name>typeresolution</name><operator>.</operator><name>typedefinition</name><operator>.</operator><name>TypeDefinitionType</name><operator>.</operator><name>LOWER_WILDCARD</name></name>;</import>
<import>import static <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>java</name><operator>.</operator><name>typeresolution</name><operator>.</operator><name>typedefinition</name><operator>.</operator><name>TypeDefinitionType</name><operator>.</operator><name>UPPER_WILDCARD</name></name>;</import>
<import>import static <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>java</name><operator>.</operator><name>typeresolution</name><operator>.</operator><name>typeinference</name><operator>.</operator><name>InferenceRuleType</name><operator>.</operator><name>LOOSE_INVOCATION</name></name>;</import>
<import>import static <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>java</name><operator>.</operator><name>typeresolution</name><operator>.</operator><name>typeinference</name><operator>.</operator><name>InferenceRuleType</name><operator>.</operator><name>SUBTYPE</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name><operator>.</operator><name>assertEquals</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name><operator>.</operator><name>assertFalse</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name><operator>.</operator><name>assertNotEquals</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name><operator>.</operator><name>assertNotNull</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name><operator>.</operator><name>assertNull</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name><operator>.</operator><name>assertSame</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>reflect</name><operator>.</operator><name>Method</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collection</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Comparator</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Objects</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>StringTokenizer</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>jaxen</name><operator>.</operator><name>JaxenException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Test</name></name>;</import>

<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>ast</name><operator>.</operator><name>Node</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>java</name><operator>.</operator><name>JavaParsingHelper</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>java</name><operator>.</operator><name>ast</name><operator>.</operator><name>ASTAllocationExpression</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>java</name><operator>.</operator><name>ast</name><operator>.</operator><name>ASTArgumentList</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>java</name><operator>.</operator><name>ast</name><operator>.</operator><name>ASTBooleanLiteral</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>java</name><operator>.</operator><name>ast</name><operator>.</operator><name>ASTClassOrInterfaceBodyDeclaration</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>java</name><operator>.</operator><name>ast</name><operator>.</operator><name>ASTClassOrInterfaceDeclaration</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>java</name><operator>.</operator><name>ast</name><operator>.</operator><name>ASTClassOrInterfaceType</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>java</name><operator>.</operator><name>ast</name><operator>.</operator><name>ASTCompilationUnit</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>java</name><operator>.</operator><name>ast</name><operator>.</operator><name>ASTEnumConstant</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>java</name><operator>.</operator><name>ast</name><operator>.</operator><name>ASTExpression</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>java</name><operator>.</operator><name>ast</name><operator>.</operator><name>ASTFieldDeclaration</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>java</name><operator>.</operator><name>ast</name><operator>.</operator><name>ASTFormalParameter</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>java</name><operator>.</operator><name>ast</name><operator>.</operator><name>ASTImportDeclaration</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>java</name><operator>.</operator><name>ast</name><operator>.</operator><name>ASTLiteral</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>java</name><operator>.</operator><name>ast</name><operator>.</operator><name>ASTLocalVariableDeclaration</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>java</name><operator>.</operator><name>ast</name><operator>.</operator><name>ASTName</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>java</name><operator>.</operator><name>ast</name><operator>.</operator><name>ASTNullLiteral</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>java</name><operator>.</operator><name>ast</name><operator>.</operator><name>ASTPrimaryExpression</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>java</name><operator>.</operator><name>ast</name><operator>.</operator><name>ASTPrimaryPrefix</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>java</name><operator>.</operator><name>ast</name><operator>.</operator><name>ASTPrimitiveType</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>java</name><operator>.</operator><name>ast</name><operator>.</operator><name>ASTReferenceType</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>java</name><operator>.</operator><name>ast</name><operator>.</operator><name>ASTStatementExpression</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>java</name><operator>.</operator><name>ast</name><operator>.</operator><name>ASTType</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>java</name><operator>.</operator><name>ast</name><operator>.</operator><name>ASTTypeDeclaration</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>java</name><operator>.</operator><name>ast</name><operator>.</operator><name>ASTVariableDeclarator</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>java</name><operator>.</operator><name>ast</name><operator>.</operator><name>ASTVariableDeclaratorId</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>java</name><operator>.</operator><name>ast</name><operator>.</operator><name>AbstractJavaNode</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>java</name><operator>.</operator><name>ast</name><operator>.</operator><name>AbstractJavaTypeNode</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>java</name><operator>.</operator><name>ast</name><operator>.</operator><name>TypeNode</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>java</name><operator>.</operator><name>symboltable</name><operator>.</operator><name>VariableNameDeclaration</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>java</name><operator>.</operator><name>typeresolution</name><operator>.</operator><name>ClassTypeResolver</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>java</name><operator>.</operator><name>typeresolution</name><operator>.</operator><name>MethodType</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>java</name><operator>.</operator><name>typeresolution</name><operator>.</operator><name>MethodTypeResolution</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>java</name><operator>.</operator><name>typeresolution</name><operator>.</operator><name>typedefinition</name><operator>.</operator><name>JavaTypeDefinition</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>java</name><operator>.</operator><name>typeresolution</name><operator>.</operator><name>typeinference</name><operator>.</operator><name>Bound</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>java</name><operator>.</operator><name>typeresolution</name><operator>.</operator><name>typeinference</name><operator>.</operator><name>Constraint</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>java</name><operator>.</operator><name>typeresolution</name><operator>.</operator><name>typeinference</name><operator>.</operator><name>Variable</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>typeresolution</name><operator>.</operator><name>testdata</name><operator>.</operator><name>AbstractReturnTypeUseCase</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>typeresolution</name><operator>.</operator><name>testdata</name><operator>.</operator><name>AnonymousClassFromInterface</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>typeresolution</name><operator>.</operator><name>testdata</name><operator>.</operator><name>AnonymousInnerClass</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>typeresolution</name><operator>.</operator><name>testdata</name><operator>.</operator><name>AnoymousExtendingObject</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>typeresolution</name><operator>.</operator><name>testdata</name><operator>.</operator><name>ArrayAccess</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>typeresolution</name><operator>.</operator><name>testdata</name><operator>.</operator><name>ArrayListFound</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>typeresolution</name><operator>.</operator><name>testdata</name><operator>.</operator><name>ArrayTypes</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>typeresolution</name><operator>.</operator><name>testdata</name><operator>.</operator><name>ArrayVariableDeclaration</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>typeresolution</name><operator>.</operator><name>testdata</name><operator>.</operator><name>DefaultJavaLangImport</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>typeresolution</name><operator>.</operator><name>testdata</name><operator>.</operator><name>EnumWithAnonymousInnerClass</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>typeresolution</name><operator>.</operator><name>testdata</name><operator>.</operator><name>ExtraTopLevelClass</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>typeresolution</name><operator>.</operator><name>testdata</name><operator>.</operator><name>FieldAccess</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>typeresolution</name><operator>.</operator><name>testdata</name><operator>.</operator><name>FieldAccessGenericBounds</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>typeresolution</name><operator>.</operator><name>testdata</name><operator>.</operator><name>FieldAccessGenericNested</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>typeresolution</name><operator>.</operator><name>testdata</name><operator>.</operator><name>FieldAccessGenericParameter</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>typeresolution</name><operator>.</operator><name>testdata</name><operator>.</operator><name>FieldAccessGenericRaw</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>typeresolution</name><operator>.</operator><name>testdata</name><operator>.</operator><name>FieldAccessGenericSimple</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>typeresolution</name><operator>.</operator><name>testdata</name><operator>.</operator><name>FieldAccessNested</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>typeresolution</name><operator>.</operator><name>testdata</name><operator>.</operator><name>FieldAccessPrimaryGenericSimple</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>typeresolution</name><operator>.</operator><name>testdata</name><operator>.</operator><name>FieldAccessShadow</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>typeresolution</name><operator>.</operator><name>testdata</name><operator>.</operator><name>FieldAccessStatic</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>typeresolution</name><operator>.</operator><name>testdata</name><operator>.</operator><name>FieldAccessSuper</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>typeresolution</name><operator>.</operator><name>testdata</name><operator>.</operator><name>GenericMethodsImplicit</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>typeresolution</name><operator>.</operator><name>testdata</name><operator>.</operator><name>GenericsArrays</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>typeresolution</name><operator>.</operator><name>testdata</name><operator>.</operator><name>InnerClass</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>typeresolution</name><operator>.</operator><name>testdata</name><operator>.</operator><name>JavaTypeDefinitionToStringNPE</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>typeresolution</name><operator>.</operator><name>testdata</name><operator>.</operator><name>Literals</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>typeresolution</name><operator>.</operator><name>testdata</name><operator>.</operator><name>LocalGenericClass</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>typeresolution</name><operator>.</operator><name>testdata</name><operator>.</operator><name>MethodAccessibility</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>typeresolution</name><operator>.</operator><name>testdata</name><operator>.</operator><name>MethodCallExpressionTypes</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>typeresolution</name><operator>.</operator><name>testdata</name><operator>.</operator><name>MethodFirstPhase</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>typeresolution</name><operator>.</operator><name>testdata</name><operator>.</operator><name>MethodGenericExplicit</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>typeresolution</name><operator>.</operator><name>testdata</name><operator>.</operator><name>MethodGenericParam</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>typeresolution</name><operator>.</operator><name>testdata</name><operator>.</operator><name>MethodMostSpecific</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>typeresolution</name><operator>.</operator><name>testdata</name><operator>.</operator><name>MethodPotentialApplicability</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>typeresolution</name><operator>.</operator><name>testdata</name><operator>.</operator><name>MethodSecondPhase</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>typeresolution</name><operator>.</operator><name>testdata</name><operator>.</operator><name>MethodStaticAccess</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>typeresolution</name><operator>.</operator><name>testdata</name><operator>.</operator><name>MethodThirdPhase</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>typeresolution</name><operator>.</operator><name>testdata</name><operator>.</operator><name>NestedAllocationExpressions</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>typeresolution</name><operator>.</operator><name>testdata</name><operator>.</operator><name>NestedAnonymousClass</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>typeresolution</name><operator>.</operator><name>testdata</name><operator>.</operator><name>Operators</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>typeresolution</name><operator>.</operator><name>testdata</name><operator>.</operator><name>OverloadedMethodsUsage</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>typeresolution</name><operator>.</operator><name>testdata</name><operator>.</operator><name>PmdStackOverflow</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>typeresolution</name><operator>.</operator><name>testdata</name><operator>.</operator><name>Promotion</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>typeresolution</name><operator>.</operator><name>testdata</name><operator>.</operator><name>SubTypeUsage</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>typeresolution</name><operator>.</operator><name>testdata</name><operator>.</operator><name>SuperExpression</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>typeresolution</name><operator>.</operator><name>testdata</name><operator>.</operator><name>ThisExpression</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>typeresolution</name><operator>.</operator><name>testdata</name><operator>.</operator><name>VarArgsMethodUseCase</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>typeresolution</name><operator>.</operator><name>testdata</name><operator>.</operator><name>VarargsAsFixedArity</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>typeresolution</name><operator>.</operator><name>testdata</name><operator>.</operator><name>VarargsZeroArity</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>typeresolution</name><operator>.</operator><name>testdata</name><operator>.</operator><name>dummytypes</name><operator>.</operator><name>Converter</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>typeresolution</name><operator>.</operator><name>testdata</name><operator>.</operator><name>dummytypes</name><operator>.</operator><name>GenericClass</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>typeresolution</name><operator>.</operator><name>testdata</name><operator>.</operator><name>dummytypes</name><operator>.</operator><name>JavaTypeDefinitionEquals</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>typeresolution</name><operator>.</operator><name>testdata</name><operator>.</operator><name>dummytypes</name><operator>.</operator><name>StaticMembers</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>typeresolution</name><operator>.</operator><name>testdata</name><operator>.</operator><name>dummytypes</name><operator>.</operator><name>SuperClassA</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>typeresolution</name><operator>.</operator><name>testdata</name><operator>.</operator><name>dummytypes</name><operator>.</operator><name>SuperClassA2</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>typeresolution</name><operator>.</operator><name>testdata</name><operator>.</operator><name>dummytypes</name><operator>.</operator><name>SuperClassAOther</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>typeresolution</name><operator>.</operator><name>testdata</name><operator>.</operator><name>dummytypes</name><operator>.</operator><name>SuperClassAOther2</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>typeresolution</name><operator>.</operator><name>testdata</name><operator>.</operator><name>dummytypes</name><operator>.</operator><name>SuperClassB</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>typeresolution</name><operator>.</operator><name>testdata</name><operator>.</operator><name>dummytypes</name><operator>.</operator><name>SuperClassB2</name></name>;</import>

<comment type="line">// TODO split that class</comment>
<class><specifier>public</specifier> class <name>ClassTypeResolverTest</name> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>JavaParsingHelper</name></type> <name>java8</name> <init>= <expr><call><name><name>JavaParsingHelper</name><operator>.</operator><name>WITH_PROCESSING</name><operator>.</operator><name>withDefaultVersion</name></name><argument_list>(<argument><expr><literal type="string">"1.8"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>JavaParsingHelper</name></type> <name>java4</name> <init>= <expr><call><name><name>java8</name><operator>.</operator><name>withDefaultVersion</name></name><argument_list>(<argument><expr><literal type="string">"1.4"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>JavaParsingHelper</name></type> <name>java5</name> <init>= <expr><call><name><name>java8</name><operator>.</operator><name>withDefaultVersion</name></name><argument_list>(<argument><expr><literal type="string">"1.5"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>JavaParsingHelper</name></type> <name>java7</name> <init>= <expr><call><name><name>java8</name><operator>.</operator><name>withDefaultVersion</name></name><argument_list>(<argument><expr><literal type="string">"1.7"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>JavaParsingHelper</name></type> <name>java11</name> <init>= <expr><call><name><name>java8</name><operator>.</operator><name>withDefaultVersion</name></name><argument_list>(<argument><expr><literal type="string">"11"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>JavaParsingHelper</name></type> <name>java9</name> <init>= <expr><call><name><name>java8</name><operator>.</operator><name>withDefaultVersion</name></name><argument_list>(<argument><expr><literal type="string">"9"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>stackOverflowTest</name><parameter_list>()</parameter_list> <block>{<block_content>
        <comment type="line">// See #831 https://github.com/pmd/pmd/issues/831 - [java] StackOverflow in JavaTypeDefinitionSimple.toString</comment>
        <expr_stmt><expr><call><name><name>java5</name><operator>.</operator><name>parseClass</name></name><argument_list>(<argument><expr><name><name>PmdStackOverflow</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testClassNameExists</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>ClassTypeResolver</name></type> <name>classTypeResolver</name> <init>= <expr><operator>new</operator> <call><name>ClassTypeResolver</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><call><name><name>classTypeResolver</name><operator>.</operator><name>classNameExists</name></name><argument_list>(<argument><expr><literal type="string">"java.lang.System"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><call><name><name>classTypeResolver</name><operator>.</operator><name>classNameExists</name></name><argument_list>(<argument><expr><literal type="string">"im.sure.that.this.does.not.Exist"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><call><name><name>classTypeResolver</name><operator>.</operator><name>classNameExists</name></name><argument_list>(<argument><expr><literal type="string">"java.awt.List"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>acceptanceTest</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>ASTCompilationUnit</name></type> <name>acu</name> <init>= <expr><call><name><name>java5</name><operator>.</operator><name>parseClass</name></name><argument_list>(<argument><expr><name><name>ArrayListFound</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>ArrayListFound</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>acu</name><operator>.</operator><name>getFirstDescendantOfType</name></name><argument_list>(<argument><expr><name><name>ASTTypeDeclaration</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>ArrayListFound</name><operator>.</operator><name>class</name></name></expr></argument>,
                     <argument><expr><call><name><name>acu</name><operator>.</operator><name>getFirstDescendantOfType</name></name><argument_list>(<argument><expr><name><name>ASTClassOrInterfaceDeclaration</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>ASTImportDeclaration</name></type> <name>id</name> <init>= <expr><call><name><name>acu</name><operator>.</operator><name>getFirstDescendantOfType</name></name><argument_list>(<argument><expr><name><name>ASTImportDeclaration</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"java.util"</literal></expr></argument>, <argument><expr><call><name><name>id</name><operator>.</operator><name>getPackage</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>ArrayList</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>id</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>ArrayList</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>acu</name><operator>.</operator><name>getFirstDescendantOfType</name></name><argument_list>(<argument><expr><name><name>ASTClassOrInterfaceType</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>ArrayList</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>acu</name><operator>.</operator><name>getFirstDescendantOfType</name></name><argument_list>(<argument><expr><name><name>ASTReferenceType</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>ArrayList</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>acu</name><operator>.</operator><name>getFirstDescendantOfType</name></name><argument_list>(<argument><expr><name><name>ASTType</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>ArrayList</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>acu</name><operator>.</operator><name>getFirstDescendantOfType</name></name><argument_list>(<argument><expr><name><name>ASTVariableDeclaratorId</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>ArrayList</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>acu</name><operator>.</operator><name>getFirstDescendantOfType</name></name><argument_list>(<argument><expr><name><name>ASTVariableDeclarator</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>ArrayList</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>acu</name><operator>.</operator><name>getFirstDescendantOfType</name></name><argument_list>(<argument><expr><name><name>ASTFieldDeclaration</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>acu</name> <operator>=</operator> <call><name><name>java5</name><operator>.</operator><name>parseClass</name></name><argument_list>(<argument><expr><name><name>DefaultJavaLangImport</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>String</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>acu</name><operator>.</operator><name>getFirstDescendantOfType</name></name><argument_list>(<argument><expr><name><name>ASTClassOrInterfaceType</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Override</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>acu</name><operator>.</operator><name>findDescendantsOfType</name></name><argument_list>(<argument><expr><name><name>ASTName</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * See bug #1138 Anonymous inner class in enum causes NPE
     */</comment>
    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testEnumAnonymousInnerClass</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>ASTCompilationUnit</name></type> <name>acu</name> <init>= <expr><call><name><name>java5</name><operator>.</operator><name>parseClass</name></name><argument_list>(<argument><expr><name><name>EnumWithAnonymousInnerClass</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// try it in jshell, an enum constant with a body is compiled to an anonymous class,</comment>
        <comment type="line">// the counter is shared with other anonymous classes of the enum</comment>
        <decl_stmt><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>enumAnon</name> <init>= <expr><call><name><name>acu</name><operator>.</operator><name>getFirstDescendantOfType</name></name><argument_list>(<argument><expr><name><name>ASTEnumConstant</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getQualifiedName</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"net.sourceforge.pmd.typeresolution.testdata.EnumWithAnonymousInnerClass$1"</literal></expr></argument>, <argument><expr><call><name><name>enumAnon</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>inner</name> <init>= <expr><call><name><name>acu</name><operator>.</operator><name>getFirstDescendantOfType</name></name><argument_list>(<argument><expr><name><name>ASTAllocationExpression</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>getFirstDescendantOfType</name><argument_list>(<argument><expr><name><name>ASTClassOrInterfaceType</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"net.sourceforge.pmd.typeresolution.testdata.EnumWithAnonymousInnerClass$2"</literal></expr></argument>, <argument><expr><call><name><name>inner</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * See bug #899 toString causes NPE
     */</comment>
    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testNPEInJavaTypeDefinitionToString</name><parameter_list>()</parameter_list> <block>{<block_content>
        <comment type="line">// Just parsing this file throws a NPE</comment>
        <expr_stmt><expr><call><name><name>java8</name><operator>.</operator><name>parseClass</name></name><argument_list>(<argument><expr><name><name>JavaTypeDefinitionToStringNPE</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testExtraTopLevelClass</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>ClassNotFoundException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>ASTCompilationUnit</name></type> <name>acu</name> <init>= <expr><call><name><name>java5</name><operator>.</operator><name>parseClass</name></name><argument_list>(<argument><expr><name><name>ExtraTopLevelClass</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>theExtraTopLevelClass</name> <init>= <expr><call><name><name>Class</name>
                <operator>.</operator><name>forName</name></name><argument_list>(<argument><expr><literal type="string">"net.sourceforge.pmd.typeresolution.testdata.TheExtraTopLevelClass"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// First class</comment>
        <decl_stmt><decl><type><name>ASTTypeDeclaration</name></type> <name>typeDeclaration</name> <init>= <expr><operator>(</operator><name>ASTTypeDeclaration</name><operator>)</operator> <call><name><name>acu</name><operator>.</operator><name>getChild</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>ExtraTopLevelClass</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>typeDeclaration</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>ExtraTopLevelClass</name><operator>.</operator><name>class</name></name></expr></argument>,
                     <argument><expr><call><name><name>typeDeclaration</name><operator>.</operator><name>getFirstDescendantOfType</name></name><argument_list>(<argument><expr><name><name>ASTClassOrInterfaceDeclaration</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// Second class</comment>
        <expr_stmt><expr><name>typeDeclaration</name> <operator>=</operator> <operator>(</operator><name>ASTTypeDeclaration</name><operator>)</operator> <call><name><name>acu</name><operator>.</operator><name>getChild</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>theExtraTopLevelClass</name></expr></argument>, <argument><expr><call><name><name>typeDeclaration</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>theExtraTopLevelClass</name></expr></argument>,
                     <argument><expr><call><name><name>typeDeclaration</name><operator>.</operator><name>getFirstDescendantOfType</name></name><argument_list>(<argument><expr><name><name>ASTClassOrInterfaceDeclaration</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testInnerClass</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>ClassNotFoundException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>ASTCompilationUnit</name></type> <name>acu</name> <init>= <expr><call><name><name>java5</name><operator>.</operator><name>parseClass</name></name><argument_list>(<argument><expr><name><name>InnerClass</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>theInnerClass</name> <init>= <expr><call><name><name>Class</name><operator>.</operator><name>forName</name></name><argument_list>(<argument><expr><literal type="string">"net.sourceforge.pmd.typeresolution.testdata.InnerClass$TheInnerClass"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// Outer class</comment>
        <decl_stmt><decl><type><name>ASTTypeDeclaration</name></type> <name>typeDeclaration</name> <init>= <expr><call><name><name>acu</name><operator>.</operator><name>getFirstDescendantOfType</name></name><argument_list>(<argument><expr><name><name>ASTTypeDeclaration</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>InnerClass</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>typeDeclaration</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>ASTClassOrInterfaceDeclaration</name></type> <name>outerClassDeclaration</name> <init>= <expr><call><name><name>typeDeclaration</name>
                <operator>.</operator><name>getFirstDescendantOfType</name></name><argument_list>(<argument><expr><name><name>ASTClassOrInterfaceDeclaration</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>InnerClass</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>outerClassDeclaration</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// Inner class</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>theInnerClass</name></expr></argument>,
                     <argument><expr><call><name><name>outerClassDeclaration</name><operator>.</operator><name>getFirstDescendantOfType</name></name><argument_list>(<argument><expr><name><name>ASTClassOrInterfaceDeclaration</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// Method parameter as inner class</comment>
        <decl_stmt><decl><type><name>ASTFormalParameter</name></type> <name>formalParameter</name> <init>= <expr><call><name><name>typeDeclaration</name><operator>.</operator><name>getFirstDescendantOfType</name></name><argument_list>(<argument><expr><name><name>ASTFormalParameter</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>theInnerClass</name></expr></argument>, <argument><expr><call><name><name>formalParameter</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * If we don't have the auxclasspath, we might not find the inner class. In
     * that case, we'll need to search by name for a match.
     *
     * @throws Exception
     */</comment>
    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testInnerClassNotCompiled</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>Node</name></type> <name>acu</name> <init>= <expr><call><name><name>java8</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><literal type="string">"public class TestInnerClass {\n"</literal> <operator>+</operator> <literal type="string">"    public void foo() {\n"</literal>
                                                        <operator>+</operator> <literal type="string">"        Statement statement = new Statement();\n"</literal> <operator>+</operator> <literal type="string">"    "</literal>
                                                        <operator>+</operator> <literal type="string">"}\n"</literal> <operator>+</operator> <literal type="string">"    static class Statement {\n"</literal>
                                                        <operator>+</operator> <literal type="string">"    }\n"</literal>
                                                        <operator>+</operator> <literal type="string">"}"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ASTClassOrInterfaceType</name></type> <name>statement</name> <init>= <expr><call><name><name>acu</name><operator>.</operator><name>getFirstDescendantOfType</name></name><argument_list>(<argument><expr><name><name>ASTClassOrInterfaceType</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertTrue</name></name><argument_list>(<argument><expr><call><name><name>statement</name><operator>.</operator><name>isReferenceToClassSameCompilationUnit</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testAnonymousClassFromInterface</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>Node</name></type> <name>acu</name> <init>= <expr><call><name><name>java8</name><operator>.</operator><name>parseClass</name></name><argument_list>(<argument><expr><name><name>AnonymousClassFromInterface</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ASTAllocationExpression</name></type> <name>allocationExpression</name> <init>= <expr><call><name><name>acu</name><operator>.</operator><name>getFirstDescendantOfType</name></name><argument_list>(<argument><expr><name><name>ASTAllocationExpression</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>TypeNode</name></type> <name>child</name> <init>= <expr><operator>(</operator><name>TypeNode</name><operator>)</operator> <call><name><name>allocationExpression</name><operator>.</operator><name>getChild</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertTrue</name></name><argument_list>(<argument><expr><call><name><name>Comparator</name><operator>.</operator><name><name>class</name><operator>.</operator><name>isAssignableFrom</name></name></name><argument_list>(<argument><expr><call><name><name>child</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertSame</name></name><argument_list>(<argument><expr><name><name>Integer</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>child</name><operator>.</operator><name>getTypeDefinition</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getGenericType</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testNestedAnonymousClass</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>Node</name></type> <name>acu</name> <init>= <expr><call><name><name>java8</name><operator>.</operator><name>parseClass</name></name><argument_list>(<argument><expr><name><name>NestedAnonymousClass</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ASTAllocationExpression</name></type> <name>allocationExpression</name> <init>= <expr><call><name><name>acu</name><operator>.</operator><name>getFirstDescendantOfType</name></name><argument_list>(<argument><expr><name><name>ASTAllocationExpression</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ASTAllocationExpression</name></type> <name>nestedAllocation</name>
                <init>= <expr><call><name><name>allocationExpression</name><operator>.</operator><name>getFirstDescendantOfType</name></name><argument_list>(<argument><expr><name><name>ASTClassOrInterfaceBodyDeclaration</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call> <comment type="line">// get the declaration (boundary)</comment>
                <operator>.</operator><call><name>getFirstDescendantOfType</name><argument_list>(<argument><expr><name><name>ASTAllocationExpression</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="line">// and dive for the nested allocation</comment>
        <decl_stmt><decl><type><name>TypeNode</name></type> <name>child</name> <init>= <expr><operator>(</operator><name>TypeNode</name><operator>)</operator> <call><name><name>nestedAllocation</name><operator>.</operator><name>getChild</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertTrue</name></name><argument_list>(<argument><expr><call><name><name>Converter</name><operator>.</operator><name><name>class</name><operator>.</operator><name>isAssignableFrom</name></name></name><argument_list>(<argument><expr><call><name><name>child</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertSame</name></name><argument_list>(<argument><expr><name><name>String</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>child</name><operator>.</operator><name>getTypeDefinition</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getGenericType</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testAnonymousExtendingObject</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>Node</name></type> <name>acu</name> <init>= <expr><call><name><name>java8</name><operator>.</operator><name>parseClass</name></name><argument_list>(<argument><expr><name><name>AnoymousExtendingObject</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ASTAllocationExpression</name></type> <name>allocationExpression</name> <init>= <expr><call><name><name>acu</name><operator>.</operator><name>getFirstDescendantOfType</name></name><argument_list>(<argument><expr><name><name>ASTAllocationExpression</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>TypeNode</name></type> <name>child</name> <init>= <expr><operator>(</operator><name>TypeNode</name><operator>)</operator> <call><name><name>allocationExpression</name><operator>.</operator><name>getChild</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertTrue</name></name><argument_list>(<argument><expr><call><name><name>Object</name><operator>.</operator><name><name>class</name><operator>.</operator><name>isAssignableFrom</name></name></name><argument_list>(<argument><expr><call><name><name>child</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testAnonymousInnerClass</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>ClassNotFoundException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>ASTCompilationUnit</name></type> <name>acu</name> <init>= <expr><call><name><name>java5</name><operator>.</operator><name>parseClass</name></name><argument_list>(<argument><expr><name><name>AnonymousInnerClass</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>theAnonymousInnerClass</name> <init>= <expr><call><name><name>Class</name>
                <operator>.</operator><name>forName</name></name><argument_list>(<argument><expr><literal type="string">"net.sourceforge.pmd.typeresolution.testdata.AnonymousInnerClass$1"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// Outer class</comment>
        <decl_stmt><decl><type><name>ASTTypeDeclaration</name></type> <name>typeDeclaration</name> <init>= <expr><call><name><name>acu</name><operator>.</operator><name>getFirstDescendantOfType</name></name><argument_list>(<argument><expr><name><name>ASTTypeDeclaration</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>AnonymousInnerClass</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>typeDeclaration</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>ASTClassOrInterfaceDeclaration</name></type> <name>outerClassDeclaration</name> <init>= <expr><call><name><name>typeDeclaration</name>
                <operator>.</operator><name>getFirstDescendantOfType</name></name><argument_list>(<argument><expr><name><name>ASTClassOrInterfaceDeclaration</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>AnonymousInnerClass</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>outerClassDeclaration</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// Anonymous Inner class</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>theAnonymousInnerClass</name></expr></argument>,
                     <argument><expr><call><name><name>outerClassDeclaration</name><operator>.</operator><name>getFirstDescendantOfType</name></name><argument_list>(<argument><expr><name><name>ASTAllocationExpression</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testLiterals</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>JaxenException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ASTLiteral</name></argument>&gt;</argument_list></name></type> <name>literals</name> <init>= <expr><call><name>selectNodes</name><argument_list>(<argument><expr><name><name>Literals</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name><name>ASTLiteral</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

        <comment type="line">// String s = "s";</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>literals</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getNumChildren</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>String</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>literals</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// boolean boolean1 = false;</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Boolean</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>literals</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getFirstDescendantOfType</name><argument_list>(<argument><expr><name><name>ASTBooleanLiteral</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Boolean</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>literals</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// boolean boolean2 = true;</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Boolean</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>literals</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getFirstDescendantOfType</name><argument_list>(<argument><expr><name><name>ASTBooleanLiteral</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Boolean</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>literals</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Object obj = null;</comment>
        <expr_stmt><expr><call><name>assertNull</name><argument_list>(<argument><expr><call><name><name>literals</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getFirstDescendantOfType</name><argument_list>(<argument><expr><name><name>ASTNullLiteral</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertNull</name><argument_list>(<argument><expr><call><name><name>literals</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// byte byte1 = 0;</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>literals</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getNumChildren</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Integer</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>literals</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// byte byte2 = 0x0F;</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>literals</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getNumChildren</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Integer</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>literals</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// byte byte3 = -007;</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>literals</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getNumChildren</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Integer</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>literals</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// short short1 = 0;</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>literals</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getNumChildren</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Integer</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>literals</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// short short2 = 0x0F;</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>literals</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getNumChildren</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Integer</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>literals</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// short short3 = -007;</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>literals</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getNumChildren</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Integer</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>literals</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// char char1 = 0;</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>literals</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getNumChildren</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Integer</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>literals</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// char char2 = 0x0F;</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>literals</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getNumChildren</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Integer</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>literals</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// char char3 = 007;</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>literals</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getNumChildren</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Integer</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>literals</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// char char4 = 'a';</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>literals</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getNumChildren</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Character</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>literals</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// int int1 = 0;</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>literals</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getNumChildren</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Integer</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>literals</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// int int2 = 0x0F;</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>literals</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getNumChildren</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Integer</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>literals</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// int int3 = -007;</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>literals</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getNumChildren</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Integer</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>literals</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// int int4 = 'a';</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>literals</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getNumChildren</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Character</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>literals</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// long long1 = 0;</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>literals</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getNumChildren</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Integer</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>literals</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// long long2 = 0x0F;</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>literals</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getNumChildren</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Integer</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>literals</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// long long3 = -007;</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>literals</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getNumChildren</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Integer</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>literals</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// long long4 = 0L;</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>literals</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getNumChildren</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Long</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>literals</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// long long5 = 0x0Fl;</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>literals</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getNumChildren</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Long</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>literals</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// long long6 = -007L;</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>literals</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getNumChildren</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Long</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>literals</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// long long7 = 'a';</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>literals</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getNumChildren</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Character</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>literals</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// float float1 = 0.0f;</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>literals</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getNumChildren</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Float</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>literals</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// float float2 = -10e+01f;</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>literals</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getNumChildren</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Float</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>literals</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// float float3 = 0x08.08p3f;</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>literals</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getNumChildren</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Float</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>literals</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// float float4 = 0xFF;</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>literals</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getNumChildren</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Integer</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>literals</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// float float5 = 'a';</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>literals</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getNumChildren</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Character</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>literals</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// double double1 = 0.0;</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>literals</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getNumChildren</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Double</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>literals</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// double double2 = -10e+01;</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>literals</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getNumChildren</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Double</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>literals</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// double double3 = 0x08.08p3;</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>literals</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getNumChildren</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Double</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>literals</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// double double4 = 0xFF;</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>literals</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getNumChildren</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Integer</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>literals</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// double double5 = 'a';</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>literals</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getNumChildren</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Character</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>literals</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Make sure we got them all.</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"All literals not tested"</literal></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><call><name><name>literals</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testUnaryNumericPromotion</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>JaxenException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>ASTCompilationUnit</name></type> <name>acu</name> <init>= <expr><call><name><name>java5</name><operator>.</operator><name>parseClass</name></name><argument_list>(<argument><expr><name><name>Promotion</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ASTExpression</name></argument>&gt;</argument_list></name></type> <name>expressions</name> <init>= <expr><call><name>convertList</name><argument_list>(
                <argument><expr><call><name><name>acu</name><operator>.</operator><name>findChildNodesWithXPath</name></name><argument_list>(
                        <argument><expr><literal type="string">"//Block[preceding-sibling::MethodDeclarator[@Image = "</literal>
                                <operator>+</operator> <literal type="string">"'unaryNumericPromotion']]//Expression[UnaryExpression]"</literal></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><name><name>ASTExpression</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Integer</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Integer</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Integer</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Integer</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Long</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Float</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Double</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Make sure we got them all.</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"All expressions not tested"</literal></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testBinaryNumericPromotion</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>JaxenException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>ASTCompilationUnit</name></type> <name>acu</name> <init>= <expr><call><name><name>java5</name><operator>.</operator><name>parseClass</name></name><argument_list>(<argument><expr><name><name>Promotion</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ASTExpression</name></argument>&gt;</argument_list></name></type> <name>expressions</name> <init>= <expr><call><name>convertList</name><argument_list>(
                <argument><expr><call><name><name>acu</name><operator>.</operator><name>findChildNodesWithXPath</name></name><argument_list>(
                        <argument><expr><literal type="string">"//Block[preceding-sibling::MethodDeclarator[@Image = "</literal>
                                <operator>+</operator> <literal type="string">"'binaryNumericPromotion']]//Expression[AdditiveExpression]"</literal></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><name><name>ASTExpression</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

        <comment type="line">// LHS = byte</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Integer</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Integer</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Integer</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Integer</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Long</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Float</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Double</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// LHS = short</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Integer</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Integer</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Integer</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Integer</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Long</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Float</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Double</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// LHS = char</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Integer</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Integer</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Integer</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Integer</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Long</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Float</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Double</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// LHS = int</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Integer</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Integer</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Integer</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Integer</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Long</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Float</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Double</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// LHS = long</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Long</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Long</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Long</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Long</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Long</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Float</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Double</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// LHS = float</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Float</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Float</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Float</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Float</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Float</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Float</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Double</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// LHS = double</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Double</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Double</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Double</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Double</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Double</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Double</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Double</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Make sure we got them all.</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"All expressions not tested"</literal></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testBinaryStringPromotion</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>JaxenException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>ASTCompilationUnit</name></type> <name>acu</name> <init>= <expr><call><name><name>java5</name><operator>.</operator><name>parseClass</name></name><argument_list>(<argument><expr><name><name>Promotion</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ASTExpression</name></argument>&gt;</argument_list></name></type> <name>expressions</name> <init>= <expr><call><name>convertList</name><argument_list>(
                <argument><expr><call><name><name>acu</name><operator>.</operator><name>findChildNodesWithXPath</name></name><argument_list>(
                        <argument><expr><literal type="string">"//Block[preceding-sibling::MethodDeclarator[@Image = 'binaryStringPromotion']]//Expression"</literal></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><name><name>ASTExpression</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>String</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>String</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>String</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>String</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>String</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Make sure we got them all.</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"All expressions not tested"</literal></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testUnaryLogicalOperators</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>JaxenException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>ASTCompilationUnit</name></type> <name>acu</name> <init>= <expr><call><name><name>java5</name><operator>.</operator><name>parseClass</name></name><argument_list>(<argument><expr><name><name>Operators</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ASTExpression</name></argument>&gt;</argument_list></name></type> <name>expressions</name> <init>= <expr><call><name>convertList</name><argument_list>(
                <argument><expr><call><name><name>acu</name><operator>.</operator><name>findChildNodesWithXPath</name></name><argument_list>(
                        <argument><expr><literal type="string">"//Block[preceding-sibling::MethodDeclarator[@Image = 'unaryLogicalOperators']]//Expression"</literal></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><name><name>ASTExpression</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Boolean</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Boolean</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Make sure we got them all.</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"All expressions not tested"</literal></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testBinaryLogicalOperators</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>JaxenException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>ASTCompilationUnit</name></type> <name>acu</name> <init>= <expr><call><name><name>java5</name><operator>.</operator><name>parseClass</name></name><argument_list>(<argument><expr><name><name>Operators</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ASTExpression</name></argument>&gt;</argument_list></name></type> <name>expressions</name> <init>= <expr><call><name>convertList</name><argument_list>(
                <argument><expr><call><name><name>acu</name><operator>.</operator><name>findChildNodesWithXPath</name></name><argument_list>(
                        <argument><expr><literal type="string">"//Block[preceding-sibling::MethodDeclarator[@Image = 'binaryLogicalOperators']]//Expression"</literal></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><name><name>ASTExpression</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Boolean</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Boolean</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Boolean</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Boolean</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Boolean</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Boolean</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Boolean</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Boolean</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Boolean</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Boolean</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Boolean</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Boolean</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Boolean</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Make sure we got them all.</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"All expressions not tested"</literal></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testUnaryNumericOperators</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>JaxenException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>ASTCompilationUnit</name></type> <name>acu</name> <init>= <expr><call><name><name>java5</name><operator>.</operator><name>parseClass</name></name><argument_list>(<argument><expr><name><name>Operators</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>TypeNode</name></argument>&gt;</argument_list></name></type> <name>expressions</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>expressions</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><call><name>convertList</name><argument_list>(
                <argument><expr><call><name><name>acu</name><operator>.</operator><name>findChildNodesWithXPath</name></name><argument_list>(
                        <argument><expr><literal type="string">"//Block[preceding-sibling::MethodDeclarator[@Image = 'unaryNumericOperators']]//Expression"</literal></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><name><name>TypeNode</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>expressions</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><call><name>convertList</name><argument_list>(
                <argument><expr><call><name><name>acu</name><operator>.</operator><name>findChildNodesWithXPath</name></name><argument_list>(
                        <argument><expr><literal type="string">"//Block[preceding-sibling::MethodDeclarator[@Image = "</literal>
                                <operator>+</operator> <literal type="string">"'unaryNumericOperators']]//PostfixExpression"</literal></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><name><name>TypeNode</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>expressions</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><call><name>convertList</name><argument_list>(
                <argument><expr><call><name><name>acu</name><operator>.</operator><name>findChildNodesWithXPath</name></name><argument_list>(
                        <argument><expr><literal type="string">"//Block[preceding-sibling::MethodDeclarator[@Image = "</literal>
                                <operator>+</operator> <literal type="string">"'unaryNumericOperators']]//PreIncrementExpression"</literal></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><name><name>TypeNode</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>expressions</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><call><name>convertList</name><argument_list>(
                <argument><expr><call><name><name>acu</name><operator>.</operator><name>findChildNodesWithXPath</name></name><argument_list>(
                        <argument><expr><literal type="string">"//Block[preceding-sibling::MethodDeclarator[@Image = "</literal>
                                <operator>+</operator> <literal type="string">"'unaryNumericOperators']]//PreDecrementExpression"</literal></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><name><name>TypeNode</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Integer</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Integer</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Double</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Double</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Double</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Double</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Make sure we got them all.</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"All expressions not tested"</literal></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testBinaryNumericOperators</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>JaxenException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>ASTCompilationUnit</name></type> <name>acu</name> <init>= <expr><call><name><name>java5</name><operator>.</operator><name>parseClass</name></name><argument_list>(<argument><expr><name><name>Operators</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ASTExpression</name></argument>&gt;</argument_list></name></type> <name>expressions</name> <init>= <expr><call><name>convertList</name><argument_list>(
                <argument><expr><call><name><name>acu</name><operator>.</operator><name>findChildNodesWithXPath</name></name><argument_list>(
                        <argument><expr><literal type="string">"//Block[preceding-sibling::MethodDeclarator[@Image = 'binaryNumericOperators']]//Expression"</literal></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><name><name>ASTExpression</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Integer</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Integer</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Integer</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Integer</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Integer</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Integer</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Integer</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Integer</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Make sure we got them all.</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"All expressions not tested"</literal></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testAssignmentOperators</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>JaxenException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>ASTCompilationUnit</name></type> <name>acu</name> <init>= <expr><call><name><name>java5</name><operator>.</operator><name>parseClass</name></name><argument_list>(<argument><expr><name><name>Operators</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ASTStatementExpression</name></argument>&gt;</argument_list></name></type> <name>expressions</name> <init>= <expr><call><name>convertList</name><argument_list>(
                <argument><expr><call><name><name>acu</name><operator>.</operator><name>findChildNodesWithXPath</name></name><argument_list>(
                        <argument><expr><literal type="string">"//Block[preceding-sibling::MethodDeclarator[@Image = "</literal>
                                <operator>+</operator> <literal type="string">"'assignmentOperators']]//StatementExpression"</literal></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><name><name>ASTStatementExpression</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Long</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Long</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Long</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Long</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Long</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Long</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Long</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Long</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Long</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Long</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Long</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Long</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Make sure we got them all.</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"All expressions not tested"</literal></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * The type should be filled also on the ASTVariableDeclaratorId node, not
     * only on the variable name declaration.
     */</comment>
    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testFullyQualifiedType</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>source</name> <init>= <expr><literal type="string">"public class Foo {\n"</literal> <operator>+</operator> <literal type="string">"    public void bar() {\n"</literal>
                <operator>+</operator> <literal type="string">"        java.util.StringTokenizer st = new StringTokenizer(\"a.b.c.d\", \".\");\n"</literal>
                <operator>+</operator> <literal type="string">"        while (st.hasMoreTokens()) {\n"</literal> <operator>+</operator> <literal type="string">"            System.out.println(st.nextToken());\n"</literal>
                <operator>+</operator> <literal type="string">"        }\n"</literal> <operator>+</operator> <literal type="string">"    }\n"</literal> <operator>+</operator> <literal type="string">"}"</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ASTCompilationUnit</name></type> <name>acu</name> <init>= <expr><call><name><name>java5</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ASTName</name></argument>&gt;</argument_list></name></type> <name>names</name> <init>= <expr><call><name><name>acu</name><operator>.</operator><name>findDescendantsOfType</name></name><argument_list>(<argument><expr><name><name>ASTName</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ASTName</name></type> <name>theStringTokenizer</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>ASTName</name></type> <name>name</name> <range>: <expr><name>names</name></expr></range></decl></init>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>name</name><operator>.</operator><name>hasImageEqualTo</name></name><argument_list>(<argument><expr><literal type="string">"st.hasMoreTokens"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>theStringTokenizer</name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertNotNull</name></name><argument_list>(<argument><expr><name>theStringTokenizer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>VariableNameDeclaration</name></type> <name>declaration</name> <init>= <expr><operator>(</operator><name>VariableNameDeclaration</name><operator>)</operator> <call><name><name>theStringTokenizer</name><operator>.</operator><name>getNameDeclaration</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertNotNull</name></name><argument_list>(<argument><expr><name>declaration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><literal type="string">"java.util.StringTokenizer"</literal></expr></argument>, <argument><expr><call><name><name>declaration</name><operator>.</operator><name>getTypeImage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertNotNull</name></name><argument_list>(<argument><expr><call><name><name>declaration</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertSame</name></name><argument_list>(<argument><expr><name><name>StringTokenizer</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>declaration</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>ASTVariableDeclaratorId</name></type> <name>id</name> <init>= <expr><operator>(</operator><name>ASTVariableDeclaratorId</name><operator>)</operator> <call><name><name>declaration</name><operator>.</operator><name>getNode</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertNotNull</name></name><argument_list>(<argument><expr><call><name><name>id</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertSame</name></name><argument_list>(<argument><expr><name><name>StringTokenizer</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>id</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testThisExpression</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>ASTCompilationUnit</name></type> <name>compilationUnit</name> <init>= <expr><call><name><name>java5</name><operator>.</operator><name>parseClass</name></name><argument_list>(<argument><expr><name><name>ThisExpression</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// need to cross borders, to find expressions of the nested classes</comment>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ASTPrimaryExpression</name></argument>&gt;</argument_list></name></type> <name>expressions</name> <init>= <expr><call><name><name>compilationUnit</name><operator>.</operator><name>findDescendantsOfType</name></name><argument_list>(<argument><expr><name><name>ASTPrimaryExpression</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ASTPrimaryPrefix</name></argument>&gt;</argument_list></name></type> <name>prefixes</name> <init>= <expr><call><name><name>compilationUnit</name><operator>.</operator><name>findDescendantsOfType</name></name><argument_list>(<argument><expr><name><name>ASTPrimaryPrefix</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>ThisExpression</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>ThisExpression</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>prefixes</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>ThisExpression</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>ThisExpression</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>prefixes</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>ThisExpression</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>ThisExpression</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>prefixes</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>ThisExpression</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>ThisExpression</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>prefixes</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>ThisExpression</name><operator>.</operator><name>ThisExprNested</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>ThisExpression</name><operator>.</operator><name>ThisExprNested</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>prefixes</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Qualified this</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>ThisExpression</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>ThisExpression</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>prefixes</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>ThisExpression</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>TypeNode</name><operator>)</operator> <call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getChild</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>ThisExpression</name><operator>.</operator><name>ThisExprStaticNested</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>ThisExpression</name><operator>.</operator><name>ThisExprStaticNested</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>prefixes</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Make sure we got them all</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"All expressions not tested"</literal></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"All expressions not tested"</literal></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><call><name><name>prefixes</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testSuperExpression</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>JaxenException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>AbstractJavaTypeNode</name></argument>&gt;</argument_list></name></type> <name>expressions</name> <init>= <expr><call><name>selectNodes</name><argument_list>(<argument><expr><name><name>SuperExpression</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name><name>AbstractJavaTypeNode</name><operator>.</operator><name>class</name></name></expr></argument>,
                                                             <argument><expr><literal type="string">"//VariableInitializer/Expression/PrimaryExpression/PrimaryPrefix"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>SuperClassA</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>SuperClassA</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>SuperClassA</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>SuperClassA</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>SuperExpression</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>TypeNode</name><operator>)</operator> <call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getParent</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getChild</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator>
                <operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>SuperClassA</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>TypeNode</name><operator>)</operator> <call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getParent</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getChild</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>SuperExpression</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>SuperExpression</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


        <comment type="line">// Make sure we got them all</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"All expressions not tested"</literal></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testArrayTypes</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>JaxenException</name></expr></argument></throws> <block>{<block_content>
        <comment type="line">// We must not select the expression in the dimensions</comment>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ASTExpression</name></argument>&gt;</argument_list></name></type> <name>expressions</name> <init>= <expr><call><name>selectNodes</name><argument_list>(<argument><expr><name><name>ArrayTypes</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name><name>ASTExpression</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><literal type="string">"//VariableInitializer/Expression"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

        <comment type="line">// int[] a = new int[1];</comment>
        <comment type="line">//           ----------</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>int</name><index>[]</index></name><operator>.</operator>class</expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Object[][] b = new Object[1][0];</comment>
        <comment type="line">//                ----------------</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Object</name><index>[]</index><index>[]</index></name><operator>.</operator>class</expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// ArrayTypes[][][] c = new ArrayTypes[][][] { new ArrayTypes[1][2] };</comment>
        <comment type="line">//                      ---------------------------------------------</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>ArrayTypes</name><index>[]</index><index>[]</index><index>[]</index></name><operator>.</operator>class</expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// ArrayTypes[][][] c = new ArrayTypes[][][] { new ArrayTypes[1][2] };</comment>
        <comment type="line">//                                             --------------------</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>ArrayTypes</name><index>[]</index><index>[]</index></name><operator>.</operator>class</expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Make sure we got them all</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"All expressions not tested"</literal></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testArrayAccess</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>JaxenException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ASTExpression</name></argument>&gt;</argument_list></name></type> <name>expressions</name> <init>= <expr><call><name>selectNodes</name><argument_list>(<argument><expr><name><name>ArrayAccess</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name><name>ASTExpression</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><literal type="string">"//VariableInitializer/Expression"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <comment type="line">// int aElement = a[0];</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>int</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>index</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
        <comment type="line">// Object bElement = b[0][0];</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Object</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>index</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
        <comment type="line">// ArrayAccess cElement = c[0][0][0];</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>ArrayAccess</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testReferenceType</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ASTReferenceType</name></argument>&gt;</argument_list></name></type> <name>referenceTypes</name> <init>= <expr><call><name>selectNodes</name><argument_list>(<argument><expr><name><name>ArrayTypes</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name><name>ASTReferenceType</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

        <comment type="line">// int[] a = new int[1];</comment>
        <comment type="line">// -----</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>int</name><index>[]</index></name><operator>.</operator>class</expr></argument>, <argument><expr><call><name><name>referenceTypes</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Object[][] b = new Object[1][0];</comment>
        <comment type="line">// ----------</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Object</name><index>[]</index><index>[]</index></name><operator>.</operator>class</expr></argument>, <argument><expr><call><name><name>referenceTypes</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// ArrayTypes[][][] c = new ArrayTypes[][][] { ... };</comment>
        <comment type="line">// ----------------</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>ArrayTypes</name><index>[]</index><index>[]</index><index>[]</index></name><operator>.</operator>class</expr></argument>, <argument><expr><call><name><name>referenceTypes</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


        <comment type="line">// Make sure we got them all</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"All expressions not tested"</literal></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><call><name><name>referenceTypes</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>


    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testHeterogeneousArrayFieldDeclaration</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>JaxenException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ASTFieldDeclaration</name></argument>&gt;</argument_list></name></type> <name>fields</name> <init>= <expr><call><name>selectNodes</name><argument_list>(<argument><expr><name><name>ArrayVariableDeclaration</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name><name>ASTFieldDeclaration</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ASTLocalVariableDeclaration</name></argument>&gt;</argument_list></name></type> <name>locals</name> <init>= <expr><call><name>selectNodes</name><argument_list>(<argument><expr><name><name>ArrayVariableDeclaration</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name><name>ASTLocalVariableDeclaration</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// public int[] a, b[];</comment>
        <expr_stmt><expr><call><name>testPrimitiveTypeFieldDecl</name><argument_list>(<argument><expr><call><name><name>fields</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>testPrimitiveTypeFieldDecl</name><argument_list>(<argument><expr><call><name><name>locals</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// public String[] c, d[];</comment>
        <expr_stmt><expr><call><name>testRefTypeFieldDecl</name><argument_list>(<argument><expr><call><name><name>fields</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>testRefTypeFieldDecl</name><argument_list>(<argument><expr><call><name><name>locals</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>


    <comment type="line">// subtest</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>testPrimitiveTypeFieldDecl</name><parameter_list>(<parameter><decl><type><name>Node</name></type> <name>declaration</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>JaxenException</name></expr></argument></throws> <block>{<block_content>
        <comment type="line">// public int[] a, b[];</comment>

        <decl_stmt><decl><type><name>ASTReferenceType</name></type> <name>typeNode</name> <init>= <expr><call><name><name>declaration</name><operator>.</operator><name>getFirstChildOfType</name></name><argument_list>(<argument><expr><name><name>ASTType</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getFirstChildOfType</name><argument_list>(<argument><expr><name><name>ASTReferenceType</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr><name>typeNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>typeNode</name><operator>.</operator><name>isArray</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>typeNode</name><operator>.</operator><name>getArrayDepth</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"int"</literal></expr></argument>, <argument><expr><call><name><name>typeNode</name><operator>.</operator><name>getFirstChildOfType</name></name><argument_list>(<argument><expr><name><name>ASTPrimitiveType</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getImage</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>ASTVariableDeclaratorId</name></type> <name>aID</name> <init>= <expr><call><name><name>declaration</name><operator>.</operator><name>getFirstChildOfType</name></name><argument_list>(<argument><expr><name><name>ASTVariableDeclarator</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getFirstChildOfType</name><argument_list>(<argument><expr><name><name>ASTVariableDeclaratorId</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr><name>aID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"a"</literal></expr></argument>, <argument><expr><call><name><name>aID</name><operator>.</operator><name>getImage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>aID</name><operator>.</operator><name>isArray</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>aID</name><operator>.</operator><name>getArrayDepth</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>int</name><index>[]</index></name><operator>.</operator>class</expr></argument>, <argument><expr><call><name><name>aID</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>ASTVariableDeclaratorId</name></type> <name>bID</name> <init>= <expr><call><name><name>declaration</name><operator>.</operator><name>findChildrenOfType</name></name><argument_list>(<argument><expr><name><name>ASTVariableDeclarator</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getFirstChildOfType</name><argument_list>(<argument><expr><name><name>ASTVariableDeclaratorId</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr><name>bID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"b"</literal></expr></argument>, <argument><expr><call><name><name>bID</name><operator>.</operator><name>getImage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>bID</name><operator>.</operator><name>isArray</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>bID</name><operator>.</operator><name>getArrayDepth</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>int</name><index>[]</index><index>[]</index></name><operator>.</operator>class</expr></argument>, <argument><expr><call><name><name>bID</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>


    <comment type="line">// subtest</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>testRefTypeFieldDecl</name><parameter_list>(<parameter><decl><type><name>Node</name></type> <name>declaration</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>JaxenException</name></expr></argument></throws> <block>{<block_content>

        <comment type="line">// public String[] c, d[];</comment>

        <decl_stmt><decl><type><name>ASTReferenceType</name></type> <name>typeNode</name> <init>= <expr><call><name><name>declaration</name><operator>.</operator><name>getFirstChildOfType</name></name><argument_list>(<argument><expr><name><name>ASTType</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getFirstChildOfType</name><argument_list>(<argument><expr><name><name>ASTReferenceType</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr><name>typeNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>typeNode</name><operator>.</operator><name>isArray</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>typeNode</name><operator>.</operator><name>getArrayDepth</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"String"</literal></expr></argument>, <argument><expr><call><name><name>typeNode</name><operator>.</operator><name>getFirstChildOfType</name></name><argument_list>(<argument><expr><name><name>ASTClassOrInterfaceType</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getImage</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>ASTVariableDeclaratorId</name></type> <name>cID</name> <init>= <expr><call><name><name>declaration</name><operator>.</operator><name>getFirstChildOfType</name></name><argument_list>(<argument><expr><name><name>ASTVariableDeclarator</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getFirstChildOfType</name><argument_list>(<argument><expr><name><name>ASTVariableDeclaratorId</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr><name>cID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"c"</literal></expr></argument>, <argument><expr><call><name><name>cID</name><operator>.</operator><name>getImage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>cID</name><operator>.</operator><name>isArray</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>cID</name><operator>.</operator><name>getArrayDepth</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>String</name><index>[]</index></name><operator>.</operator>class</expr></argument>, <argument><expr><call><name><name>cID</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>ASTVariableDeclaratorId</name></type> <name>dID</name> <init>= <expr><call><name><name>declaration</name><operator>.</operator><name>findChildrenOfType</name></name><argument_list>(<argument><expr><name><name>ASTVariableDeclarator</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getFirstChildOfType</name><argument_list>(<argument><expr><name><name>ASTVariableDeclaratorId</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr><name>dID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"d"</literal></expr></argument>, <argument><expr><call><name><name>dID</name><operator>.</operator><name>getImage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>dID</name><operator>.</operator><name>isArray</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>dID</name><operator>.</operator><name>getArrayDepth</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>String</name><index>[]</index><index>[]</index></name><operator>.</operator>class</expr></argument>, <argument><expr><call><name><name>dID</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>


    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testFieldAccess</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>JaxenException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>AbstractJavaTypeNode</name></argument>&gt;</argument_list></name></type> <name>expressions</name> <init>= <expr><call><name>selectNodes</name><argument_list>(<argument><expr><name><name>FieldAccess</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name><name>AbstractJavaTypeNode</name><operator>.</operator><name>class</name></name></expr></argument>,
                                                             <argument><expr><literal type="string">"//StatementExpression/PrimaryExpression"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

        <comment type="line">// param.field = 10;</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Integer</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Integer</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// local.field = 10;</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Integer</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Integer</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// f.f.f.field = 10;</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Integer</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Integer</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// (this).f.f.field = 10;</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Integer</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>FieldAccess</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>FieldAccess</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>FieldAccess</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Integer</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// field = 10;</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Integer</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Integer</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Make sure we got them all</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"All expressions not tested"</literal></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testFieldAccessNested</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>JaxenException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>AbstractJavaTypeNode</name></argument>&gt;</argument_list></name></type> <name>expressions</name> <init>= <expr><call><name>selectNodes</name><argument_list>(<argument><expr><name><name>FieldAccessNested</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name><name>AbstractJavaTypeNode</name><operator>.</operator><name>class</name></name></expr></argument>,
                                                             <argument><expr><literal type="string">"//StatementExpression/PrimaryExpression"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

        <comment type="line">// field = 10;</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Integer</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Integer</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// a = new SuperClassA();</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>SuperClassA</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>SuperClassA</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// net.sourceforge.pmd.typeresolution.testdata.FieldAccessNested.Nested.this.a = new SuperClassA();</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>SuperClassA</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>FieldAccessNested</name><operator>.</operator><name>Nested</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>FieldAccessNested</name><operator>.</operator><name>Nested</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>SuperClassA</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// FieldAccessNested.Nested.this.a = new SuperClassA();</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>SuperClassA</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>FieldAccessNested</name><operator>.</operator><name>Nested</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>FieldAccessNested</name><operator>.</operator><name>Nested</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>SuperClassA</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Make sure we got them all</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"All expressions not tested"</literal></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testFieldAccessShadow</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>JaxenException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>AbstractJavaTypeNode</name></argument>&gt;</argument_list></name></type> <name>expressions</name> <init>= <expr><call><name>selectNodes</name><argument_list>(<argument><expr><name><name>FieldAccessShadow</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name><name>AbstractJavaTypeNode</name><operator>.</operator><name>class</name></name></expr></argument>,
                                                             <argument><expr><literal type="string">"//StatementExpression/PrimaryExpression"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

        <comment type="line">// field = "shadow";</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>String</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>String</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// this.field = new Integer(10);</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Integer</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>FieldAccessShadow</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Integer</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// (this).field = new Integer(10);</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Integer</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>FieldAccessShadow</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Integer</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// s2 = new SuperClassB2();</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>SuperClassB2</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>SuperClassB2</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// privateShadow = 10;</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Number</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Number</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Make sure we got them all</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"All expressions not tested"</literal></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testFieldAccessSuper</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>JaxenException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>AbstractJavaTypeNode</name></argument>&gt;</argument_list></name></type> <name>expressions</name> <init>= <expr><call><name>selectNodes</name><argument_list>(<argument><expr><name><name>FieldAccessSuper</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name><name>AbstractJavaTypeNode</name><operator>.</operator><name>class</name></name></expr></argument>,
                                                             <argument><expr><literal type="string">"//StatementExpression/PrimaryExpression"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

        <comment type="line">// s = new SuperClassA();</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>SuperClassA</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>SuperClassA</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// (this).s.s2 = new SuperClassA2();</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>SuperClassA2</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>FieldAccessSuper</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>SuperClassA</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>SuperClassA2</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// s.s.s2 = new SuperClassA2();</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>SuperClassA2</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>SuperClassA2</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// super.s = new SuperClassA();</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>SuperClassA</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>SuperClassA</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>SuperClassA</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// net.sourceforge.pmd.typeresolution.testdata.FieldAccessSuper.this.s = new SuperClassA();</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>SuperClassA</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>FieldAccessSuper</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>FieldAccessSuper</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>SuperClassA</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// s = new SuperClassA();</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>SuperClassA</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>SuperClassA</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// bs = new SuperClassB();</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>SuperClassB</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>SuperClassB</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// FieldAccessSuper.Nested.super.bs = new SuperClassB();</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>SuperClassB</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>FieldAccessSuper</name><operator>.</operator><name>Nested</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>SuperClassB</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>SuperClassB</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// FieldAccessSuper.super.s = new SuperClassA();</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>SuperClassA</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>FieldAccessSuper</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>SuperClassA</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>SuperClassA</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Make sure we got them all</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"All expressions not tested"</literal></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testBoundsGenericFieldAccess</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>JaxenException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>AbstractJavaTypeNode</name></argument>&gt;</argument_list></name></type> <name>expressions</name> <init>= <expr><call><name>selectNodes</name><argument_list>(<argument><expr><name><name>FieldAccessGenericBounds</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name><name>AbstractJavaTypeNode</name><operator>.</operator><name>class</name></name></expr></argument>,
                                                             <argument><expr><literal type="string">"//StatementExpression/PrimaryExpression"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


        <decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

        <comment type="line">// superGeneric.first = ""; // ? super String</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name>forClass</name><argument_list>(<argument><expr><name>LOWER_WILDCARD</name></expr></argument>, <argument><expr><name><name>String</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getTypeDefinition</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name>forClass</name><argument_list>(<argument><expr><name>LOWER_WILDCARD</name></expr></argument>, <argument><expr><name><name>String</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>getChildTypeDef</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// superGeneric.second = null; // ?</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name>forClass</name><argument_list>(<argument><expr><name>UPPER_WILDCARD</name></expr></argument>, <argument><expr><name><name>Object</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getTypeDefinition</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name>forClass</name><argument_list>(<argument><expr><name>UPPER_WILDCARD</name></expr></argument>, <argument><expr><name><name>Object</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>getChildTypeDef</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// inheritedSuperGeneric.first = ""; // ? super String</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name>forClass</name><argument_list>(<argument><expr><name>LOWER_WILDCARD</name></expr></argument>, <argument><expr><name><name>String</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getTypeDefinition</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name>forClass</name><argument_list>(<argument><expr><name>LOWER_WILDCARD</name></expr></argument>, <argument><expr><name><name>String</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>getChildTypeDef</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// inheritedSuperGeneric.second = null; // ?</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name>forClass</name><argument_list>(<argument><expr><name>UPPER_WILDCARD</name></expr></argument>, <argument><expr><name><name>Object</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getTypeDefinition</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name>forClass</name><argument_list>(<argument><expr><name>UPPER_WILDCARD</name></expr></argument>, <argument><expr><name><name>Object</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>getChildTypeDef</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// upperBound.first = null; // ? extends Number</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name>forClass</name><argument_list>(<argument><expr><name>UPPER_WILDCARD</name></expr></argument>, <argument><expr><name><name>Number</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getTypeDefinition</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name>forClass</name><argument_list>(<argument><expr><name>UPPER_WILDCARD</name></expr></argument>, <argument><expr><name><name>Number</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>getChildTypeDef</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// inheritedUpperBound.first = null; // ? extends String</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name>forClass</name><argument_list>(<argument><expr><name>UPPER_WILDCARD</name></expr></argument>, <argument><expr><name><name>String</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getTypeDefinition</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name>forClass</name><argument_list>(<argument><expr><name>UPPER_WILDCARD</name></expr></argument>, <argument><expr><name><name>String</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>getChildTypeDef</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


        <comment type="line">// Make sure we got them all</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"All expressions not tested"</literal></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testParameterGenericFieldAccess</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>JaxenException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>AbstractJavaTypeNode</name></argument>&gt;</argument_list></name></type> <name>expressions</name> <init>= <expr><call><name>selectNodes</name><argument_list>(<argument><expr><name><name>FieldAccessGenericParameter</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name><name>AbstractJavaTypeNode</name><operator>.</operator><name>class</name></name></expr></argument>,
                                                             <argument><expr><literal type="string">"//StatementExpression/PrimaryExpression"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


        <decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

        <comment type="line">// classGeneric = null; // Double</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Double</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Double</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// localGeneric = null; // Character</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Character</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Character</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// parameterGeneric.second.second = new Integer(0);</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Integer</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Integer</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// localGeneric = null; // Number</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Number</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Number</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Make sure we got them all</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"All expressions not tested"</literal></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testSimpleGenericFieldAccess</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>JaxenException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>AbstractJavaTypeNode</name></argument>&gt;</argument_list></name></type> <name>expressions</name> <init>= <expr><call><name>selectNodes</name><argument_list>(<argument><expr><name><name>FieldAccessGenericSimple</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name><name>AbstractJavaTypeNode</name><operator>.</operator><name>class</name></name></expr></argument>,
                                                             <argument><expr><literal type="string">"//StatementExpression/PrimaryExpression"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

        <comment type="line">// genericField.first = "";</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>String</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>String</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// genericField.second = new Double(0);</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Double</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Double</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//genericTypeArg.second.second = new Double(0);</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Double</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Double</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// param.first = new Integer(0);</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Integer</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Integer</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// local.second = new Long(0);</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Long</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Long</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


        <comment type="line">// param.generic.first = new Character('c');</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Character</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Character</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// local.generic.second = new Float(0);</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Float</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Float</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// genericField.generic.generic.generic.first = new Double(0);</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Double</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Double</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// fieldA = new Long(0);</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Long</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Long</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// fieldB.generic.second = "";</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>String</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>String</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// fieldAcc.fieldA = new Long(0);</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Long</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Long</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// fieldA = new Long(0);</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Long</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Long</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Make sure we got them all</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"All expressions not tested"</literal></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testRawGenericFieldAccess</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>JaxenException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>AbstractJavaTypeNode</name></argument>&gt;</argument_list></name></type> <name>expressions</name> <init>= <expr><call><name>selectNodes</name><argument_list>(<argument><expr><name><name>FieldAccessGenericRaw</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name><name>AbstractJavaTypeNode</name><operator>.</operator><name>class</name></name></expr></argument>,
                                                             <argument><expr><literal type="string">"//StatementExpression/PrimaryExpression"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


        <decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

        <comment type="line">// rawGeneric.first = new Integer(0);</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Integer</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Integer</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// rawGeneric.second = new Integer(0);</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Integer</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Integer</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// rawGeneric.third = new Object();</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Object</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Object</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// rawGeneric.fourth.second = "";</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>String</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>String</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// rawGeneric.rawGeneric.second = new Integer(0);</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Integer</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Integer</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// inheritedRawGeneric.first = new Integer(0);</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Integer</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Integer</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// inheritedRawGeneric.second = new Integer(0);</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Integer</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Integer</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// inheritedRawGeneric.third = new Object();</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Object</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Object</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// inheritedRawGeneric.fourth.second = "";</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>String</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>String</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// inheritedRawGeneric.rawGeneric.second = new Integer(0);</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Integer</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Integer</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// parameterRawGeneric.first = new Integer(0);</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Integer</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Integer</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// parameterRawGeneric.second = new Integer(0);</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Integer</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Integer</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// parameterRawGeneric.third = new Object();</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Object</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Object</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// parameterRawGeneric.fourth.second = "";</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>String</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>String</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// parameterRawGeneric.rawGeneric.second = new Integer(0);</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Integer</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Integer</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// bug #471</comment>
        <comment type="line">// rawGeneric.fifth = new GenericClass();</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>GenericClass</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>GenericClass</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// inheritedRawGeneric.fifth = new GenericClass();</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>GenericClass</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>GenericClass</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// parameterRawGeneric.fifth = new GenericClass();</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>GenericClass</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>GenericClass</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Make sure we got them all</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"All expressions not tested"</literal></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testPrimarySimpleGenericFieldAccess</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>JaxenException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>AbstractJavaTypeNode</name></argument>&gt;</argument_list></name></type> <name>expressions</name> <init>= <expr><call><name>selectNodes</name><argument_list>(<argument><expr><name><name>FieldAccessPrimaryGenericSimple</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name><name>AbstractJavaTypeNode</name><operator>.</operator><name>class</name></name></expr></argument>,
                                                             <argument><expr><literal type="string">"//StatementExpression/PrimaryExpression"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


        <decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

        <comment type="line">// this.genericField.first = "";</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>String</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertChildTypeArgsEqualTo</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>String</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name><name>Double</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>String</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// (this).genericField.second = new Double(0);</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Double</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertChildTypeArgsEqualTo</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>String</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name><name>Double</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Double</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// this.genericTypeArg.second.second = new Double(0);</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Double</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertChildTypeArgsEqualTo</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>Number</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name><name>Double</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Double</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// (this).genericField.generic.generic.generic.first = new Double(0);</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Double</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Double</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// (this).fieldA = new Long(0);</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Long</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Long</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// this.fieldB.generic.second = "";</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>String</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>String</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// super.fieldA = new Long(0);</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Long</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertChildTypeArgsEqualTo</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>Long</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Long</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// super.fieldB.generic.second = "";</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>String</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>String</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// this.field.first = "";</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>String</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>String</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Make sure we got them all</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"All expressions not tested"</literal></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testFieldAccessGenericNested</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>JaxenException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>AbstractJavaTypeNode</name></argument>&gt;</argument_list></name></type> <name>expressions</name> <init>= <expr><call><name>selectNodes</name><argument_list>(<argument><expr><name><name>FieldAccessGenericNested</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name><name>AbstractJavaTypeNode</name><operator>.</operator><name>class</name></name></expr></argument>,
                                                             <argument><expr><literal type="string">"//StatementExpression/PrimaryExpression"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

        <comment type="line">// n.field = null;</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>String</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>String</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// n.generic.first = null;</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>String</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>String</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Make sure we got them all</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"All expressions not tested"</literal></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testFieldAccessStatic</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>JaxenException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>AbstractJavaTypeNode</name></argument>&gt;</argument_list></name></type> <name>expressions</name> <init>= <expr><call><name>selectNodes</name><argument_list>(<argument><expr><name><name>FieldAccessStatic</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name><name>AbstractJavaTypeNode</name><operator>.</operator><name>class</name></name></expr></argument>,
                                                             <argument><expr><literal type="string">"//StatementExpression/PrimaryExpression"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

        <comment type="line">// staticPrimitive = 10;</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Integer</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Integer</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// staticGeneric.first = new Long(0);</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Long</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Long</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// StaticMembers.staticPrimitive = 10;</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Integer</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Integer</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// net.sourceforge.pmd.typeresolution.testdata.dummytypes.StaticMembers.staticPrimitive = 10;</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Integer</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Integer</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// net.sourceforge.pmd.typeresolution.testdata.dummytypes.StaticMembers</comment>
        <comment type="line">//       .staticGeneric.generic.second = new Long(10);</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Long</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Long</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// staticPrimitive = "";</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>String</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>String</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// staticChar = 3.1; // it's a double</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Double</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Double</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// FieldAccessStatic.Nested.staticPrimitive = "";</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>String</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>String</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


        <comment type="line">// Make sure we got them all</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"All expressions not tested"</literal></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>


    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testMethodPotentialApplicability</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>JaxenException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>AbstractJavaTypeNode</name></argument>&gt;</argument_list></name></type> <name>expressions</name> <init>= <expr><call><name>selectNodes</name><argument_list>(<argument><expr><name><name>MethodPotentialApplicability</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name><name>AbstractJavaTypeNode</name><operator>.</operator><name>class</name></name></expr></argument>,
                                                             <argument><expr><literal type="string">"//VariableInitializer/Expression/PrimaryExpression"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

        <comment type="line">// int a = vararg("");</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>int</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>int</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>int</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// int b = vararg("", 10);</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>int</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>int</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>int</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// String c = notVararg(0, 0);</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>String</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>String</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>String</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Number d = noArguments();</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Number</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Number</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Number</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Number e = field.noArguments();</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Number</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Number</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Number</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// int f = this.vararg("");</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>int</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>int</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>int</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Make sure we got them all</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"All expressions not tested"</literal></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testMethodAccessibility</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>JaxenException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>AbstractJavaTypeNode</name></argument>&gt;</argument_list></name></type> <name>expressions</name> <init>= <expr><call><name>selectNodes</name><argument_list>(<argument><expr><name><name>MethodAccessibility</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name><name>AbstractJavaTypeNode</name><operator>.</operator><name>class</name></name></expr></argument>,
                                                             <argument><expr><literal type="string">"//VariableInitializer/Expression/PrimaryExpression"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

        <comment type="line">// SuperClassA a = inheritedA();</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>SuperClassA</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>SuperClassA</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>SuperClassA</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// SuperClassB b = inheritedB();</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>SuperClassB</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>SuperClassB</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>SuperClassB</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Make sure we got them all</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"All expressions not tested"</literal></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>


    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testMethodFirstPhase</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>JaxenException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>AbstractJavaTypeNode</name></argument>&gt;</argument_list></name></type> <name>expressions</name> <init>= <expr><call><name>selectNodes</name><argument_list>(<argument><expr><name><name>MethodFirstPhase</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><literal type="string">"1.8"</literal></expr></argument>, <argument><expr><name><name>AbstractJavaTypeNode</name><operator>.</operator><name>class</name></name></expr></argument>,
                                                             <argument><expr><literal type="string">"//VariableInitializer/Expression/PrimaryExpression"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

        <comment type="line">// int a = subtype(10, 'a', "");</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>int</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>int</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>int</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Exception b = vararg((Object) null);</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Exception</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Exception</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Exception</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Set&lt;String&gt; set = new HashSet&lt;&gt;();</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>HashSet</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// List&lt;String&gt; myList = new ArrayList&lt;&gt;();</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>ArrayList</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Make sure we got them all</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"All expressions not tested"</literal></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testMethodMostSpecific</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>JaxenException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>AbstractJavaTypeNode</name></argument>&gt;</argument_list></name></type> <name>expressions</name> <init>= <expr><call><name>selectNodes</name><argument_list>(<argument><expr><name><name>MethodMostSpecific</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name><name>AbstractJavaTypeNode</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><literal type="string">"//VariableInitializer/Expression/PrimaryExpression"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

        <comment type="line">// String a = moreSpecific((Number) null, (AbstractCollection) null);</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>String</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>String</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>String</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Exception b = moreSpecific((Integer) null, (AbstractList) null);</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Exception</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Exception</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Exception</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// int c = moreSpecific((Double) null, (RoleList) null);</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>int</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>int</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>int</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Make sure we got them all</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"All expressions not tested"</literal></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testMethodSecondPhase</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>JaxenException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>AbstractJavaTypeNode</name></argument>&gt;</argument_list></name></type> <name>expressions</name> <init>= <expr><call><name>selectNodes</name><argument_list>(<argument><expr><name><name>MethodSecondPhase</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name><name>AbstractJavaTypeNode</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><literal type="string">"//VariableInitializer/Expression/PrimaryExpression"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

        <comment type="line">// String a = boxing(10, "");</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>String</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>String</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>String</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// Exception b = boxing('a', "");</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Exception</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Exception</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Exception</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// int c = boxing(10L, "");</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>int</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>int</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>int</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// String d = unboxing("", (Integer) null);</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>String</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>String</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>String</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// Exception e = unboxing("", (Character) null);</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Exception</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Exception</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Exception</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// int f = unboxing("", (Byte) null);</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>int</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>int</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>int</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Make sure we got them all</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"All expressions not tested"</literal></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testMethodThirdPhase</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>JaxenException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>AbstractJavaTypeNode</name></argument>&gt;</argument_list></name></type> <name>expressions</name> <init>= <expr><call><name>selectNodes</name><argument_list>(<argument><expr><name><name>MethodThirdPhase</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name><name>AbstractJavaTypeNode</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><literal type="string">"//VariableInitializer/Expression/PrimaryExpression"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

        <comment type="line">// Exception a = vararg(10, (Number) null, (Number) null);</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Exception</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Exception</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Exception</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// Exception b = vararg(10);</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Exception</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Exception</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Exception</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// int c = vararg(10, "", "", "");</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>int</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>int</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>int</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// String d = mostSpecific(10, 10, 10);</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>String</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>String</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>String</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Make sure we got them all</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"All expressions not tested"</literal></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testMethodStaticAccess</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>JaxenException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>AbstractJavaTypeNode</name></argument>&gt;</argument_list></name></type> <name>expressions</name> <init>= <expr><call><name>selectNodes</name><argument_list>(<argument><expr><name><name>MethodStaticAccess</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name><name>AbstractJavaTypeNode</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><literal type="string">"//VariableInitializer/Expression/PrimaryExpression"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


        <comment type="line">// int a = primitiveStaticMethod();</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>int</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>int</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>int</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// StaticMembers b = staticInstanceMethod();</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>StaticMembers</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>StaticMembers</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>StaticMembers</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// int c = StaticMembers.primitiveStaticMethod();</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>int</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>StaticMembers</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// PrimaryPrefix</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>int</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// PrimarySuffix</comment>

        <comment type="line">// String c = MethodStaticAccess.Nested.primitiveStaticMethod();</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>String</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>MethodStaticAccess</name><operator>.</operator><name>Nested</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// PrimaryPrefix</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>String</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// PrimarySuffix</comment>

        <comment type="line">// Make sure we got them all</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"All expressions not tested"</literal></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testMethodGenericExplicit</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>JaxenException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>AbstractJavaTypeNode</name></argument>&gt;</argument_list></name></type> <name>expressions</name> <init>= <expr><call><name>selectNodes</name><argument_list>(<argument><expr><name><name>MethodGenericExplicit</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name><name>AbstractJavaTypeNode</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><literal type="string">"//VariableInitializer/Expression/PrimaryExpression"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

        <comment type="line">// String s = this.&lt;String&gt;foo();</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>String</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>String</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>String</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Make sure we got them all</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"All expressions not tested"</literal></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>


    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testGenericArrays</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>JaxenException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>AbstractJavaTypeNode</name></argument>&gt;</argument_list></name></type> <name>expressions</name> <init>= <expr><call><name>selectNodes</name><argument_list>(<argument><expr><name><name>GenericsArrays</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name><name>AbstractJavaTypeNode</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><literal type="string">"//VariableInitializer/Expression/PrimaryExpression"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

        <comment type="line">// List&lt;String&gt; var = Arrays.asList(params);</comment>
        <decl_stmt><decl><type><name>AbstractJavaTypeNode</name></type> <name>expression</name> <init>= <expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// TODO : Type inference is still incomplete, we fail to detect the return type of the method</comment>
        <comment type="line">//assertEquals(List.class, expression.getTypeDefinition().getType());</comment>
        <comment type="line">//assertEquals(String.class, expression.getTypeDefinition().getGenericType(0).getType());</comment>

        <comment type="line">// List&lt;String&gt; var2 = Arrays.&lt;String&gt;asList(params);</comment>
        <decl_stmt><decl><type><name>AbstractJavaTypeNode</name></type> <name>expression2</name> <init>= <expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>List</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>expression2</name><operator>.</operator><name>getTypeDefinition</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>String</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>expression2</name><operator>.</operator><name>getTypeDefinition</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getGenericType</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// List&lt;String[]&gt; var3 = Arrays.&lt;String[]&gt;asList(params);</comment>
        <decl_stmt><decl><type><name>AbstractJavaTypeNode</name></type> <name>expression3</name> <init>= <expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>List</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>expression3</name><operator>.</operator><name>getTypeDefinition</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>String</name><index>[]</index></name><operator>.</operator>class</expr></argument>, <argument><expr><call><name><name>expression3</name><operator>.</operator><name>getTypeDefinition</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getGenericType</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Make sure we got them all</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"All expressions not tested"</literal></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testMethodTypeInference</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>JaxenException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>AbstractJavaTypeNode</name></argument>&gt;</argument_list></name></type> <name>expressions</name> <init>= <expr><call><name>selectNodes</name><argument_list>(<argument><expr><name><name>GenericMethodsImplicit</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name><name>AbstractJavaTypeNode</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><literal type="string">"//VariableInitializer/Expression/PrimaryExpression"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

        <comment type="line">// SuperClassA2 a = bar((SuperClassA) null, (SuperClassAOther) null, null, (SuperClassAOther2) null);</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>SuperClassA2</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>SuperClassA2</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>SuperClassA2</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getChildType</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Make sure we got them all</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"All expressions not tested"</literal></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testMethodTypeInferenceVarargsZeroArity</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>JaxenException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>AbstractJavaTypeNode</name></argument>&gt;</argument_list></name></type> <name>expressions</name> <init>= <expr><call><name>selectNodes</name><argument_list>(<argument><expr><name><name>VarargsZeroArity</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name><name>AbstractJavaTypeNode</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><literal type="string">"//VariableInitializer/Expression/PrimaryExpression"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

        <comment type="line">// int var = aMethod();</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>int</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//String var2 = aMethod("");</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>String</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Make sure we got them all</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"All expressions not tested"</literal></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testMethodTypeInferenceVarargsAsFixedArity</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>JaxenException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>AbstractJavaTypeNode</name></argument>&gt;</argument_list></name></type> <name>expressions</name> <init>= <expr><call><name>selectNodes</name><argument_list>(<argument><expr><name><name>VarargsAsFixedArity</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name><name>AbstractJavaTypeNode</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><literal type="string">"//VariableInitializer/Expression/PrimaryExpression"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

        <comment type="line">// int var = aMethod("");</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>int</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// String var2 = aMethod();</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>String</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// String var3 = aMethod("", "");</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>String</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// String var4 = aMethod(new Object[] { null });</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>String</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// null literal has null type</comment>
        <expr_stmt><expr><call><name>assertNull</name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Make sure we got them all</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"All expressions not tested"</literal></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testJavaTypeDefinitionEquals</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>JavaTypeDefinition</name></type> <name>a</name> <init>= <expr><call><name>forClass</name><argument_list>(<argument><expr><name><name>Integer</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>JavaTypeDefinition</name></type> <name>b</name> <init>= <expr><call><name>forClass</name><argument_list>(<argument><expr><name><name>Integer</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// test non-generic types</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertNotEquals</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// test generic arg equality</comment>
        <expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>forClass</name><argument_list>(<argument><expr><name><name>List</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>forClass</name><argument_list>(<argument><expr><name><name>List</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>forClass</name><argument_list>(<argument><expr><name><name>List</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>forClass</name><argument_list>(<argument><expr><name><name>String</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertNotEquals</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertNotEquals</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


        <comment type="line">// test raw vs proper, proper vs raw</comment>
        <expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>forClass</name><argument_list>(<argument><expr><name><name>JavaTypeDefinitionEquals</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>forClass</name><argument_list>(<argument><expr><name><name>JavaTypeDefinitionEquals</name><operator>.</operator><name>class</name></name></expr></argument>,
                                        <argument><expr><call><name>forClass</name><argument_list>(<argument><expr><name><name>List</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testJavaTypeDefinitionGetSuperTypeSet</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>JavaTypeDefinition</name></type> <name>originalTypeDef</name> <init>= <expr><call><name>forClass</name><argument_list>(<argument><expr><name><name>List</name><operator>.</operator><name>class</name></name></expr></argument>,
                                                                         <argument><expr><call><name>forClass</name><argument_list>(<argument><expr><name><name>Integer</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>JavaTypeDefinition</name></argument>&gt;</argument_list></name></type> <name>set</name> <init>= <expr><call><name><name>originalTypeDef</name><operator>.</operator><name>getSuperTypeSet</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>set</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>set</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><call><name>forClass</name><argument_list>(<argument><expr><name><name>Object</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>set</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>originalTypeDef</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>set</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><call><name>forClass</name><argument_list>(<argument><expr><name><name>Collection</name><operator>.</operator><name>class</name></name></expr></argument>,
                                         <argument><expr><call><name>forClass</name><argument_list>(<argument><expr><name><name>Integer</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>set</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><call><name>forClass</name><argument_list>(<argument><expr><name><name>Iterable</name><operator>.</operator><name>class</name></name></expr></argument>,
                                         <argument><expr><call><name>forClass</name><argument_list>(<argument><expr><name><name>Integer</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testJavaTypeDefinitionGetErasedSuperTypeSet</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>JavaTypeDefinition</name></type> <name>originalTypeDef</name> <init>= <expr><call><name>forClass</name><argument_list>(<argument><expr><name><name>List</name><operator>.</operator><name>class</name></name></expr></argument>,
                                                                         <argument><expr><call><name>forClass</name><argument_list>(<argument><expr><name><name>Integer</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>set</name> <init>= <expr><call><name><name>originalTypeDef</name><operator>.</operator><name>getErasedSuperTypeSet</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>set</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>set</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name><name>Object</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>set</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name><name>Collection</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>set</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name><name>Iterable</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>set</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name><name>List</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testMethodInitialBounds</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>NoSuchMethodException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>JavaTypeDefinition</name></type> <name>context</name> <init>= <expr><call><name>forClass</name><argument_list>(<argument><expr><name><name>GenericMethodsImplicit</name><operator>.</operator><name>class</name></name></expr></argument>,
                                                                 <argument><expr><call><name>forClass</name><argument_list>(<argument><expr><name><name>Thread</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Variable</name></argument>&gt;</argument_list></name></type> <name>variables</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Bound</name></argument>&gt;</argument_list></name></type> <name>initialBounds</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Method</name></type> <name>method</name> <init>= <expr><call><name><name>GenericMethodsImplicit</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getMethod</name></name></name><argument_list>(<argument><expr><literal type="string">"foo"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>MethodTypeResolution</name><operator>.</operator><name>produceInitialBounds</name></name><argument_list>(<argument><expr><name>method</name></expr></argument>, <argument><expr><name>context</name></expr></argument>, <argument><expr><name>variables</name></expr></argument>, <argument><expr><name>initialBounds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>initialBounds</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// A</comment>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>initialBounds</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Bound</name><argument_list>(<argument><expr><call><name><name>variables</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
                                                    <argument><expr><call><name>forClass</name><argument_list>(<argument><expr><name><name>Object</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>SUBTYPE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// B</comment>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>initialBounds</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Bound</name><argument_list>(<argument><expr><call><name><name>variables</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,
                                                    <argument><expr><call><name>forClass</name><argument_list>(<argument><expr><name><name>Number</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>SUBTYPE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>initialBounds</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Bound</name><argument_list>(<argument><expr><call><name><name>variables</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,
                                                    <argument><expr><call><name>forClass</name><argument_list>(<argument><expr><name><name>Runnable</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>SUBTYPE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// C</comment>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>initialBounds</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Bound</name><argument_list>(<argument><expr><call><name><name>variables</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>variables</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>SUBTYPE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>initialBounds</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Bound</name><argument_list>(<argument><expr><call><name><name>variables</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>,
                                                    <argument><expr><call><name>forClass</name><argument_list>(<argument><expr><name><name>Object</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>SUBTYPE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// D</comment>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>initialBounds</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Bound</name><argument_list>(<argument><expr><call><name><name>variables</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>,
                                                    <argument><expr><call><name>forClass</name><argument_list>(<argument><expr><name><name>Thread</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>SUBTYPE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testMethodInitialConstraints</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>NoSuchMethodException</name></expr></argument>, <argument><expr><name>JaxenException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>AbstractJavaNode</name></argument>&gt;</argument_list></name></type> <name>expressions</name> <init>= <expr><call><name>selectNodes</name><argument_list>(<argument><expr><name><name>GenericMethodsImplicit</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name><name>AbstractJavaNode</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><literal type="string">"//ArgumentList"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Variable</name></argument>&gt;</argument_list></name></type> <name>variables</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name><name>variables</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Variable</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <decl_stmt><decl><type><name>Method</name></type> <name>method</name> <init>= <expr><call><name><name>GenericMethodsImplicit</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getMethod</name></name></name><argument_list>(<argument><expr><literal type="string">"bar"</literal></expr></argument>, <argument><expr><name><name>Object</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name><name>Object</name><operator>.</operator><name>class</name></name></expr></argument>,
                                                               <argument><expr><name><name>Integer</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name><name>Object</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ASTArgumentList</name></type> <name>argList</name> <init>= <expr><operator>(</operator><name>ASTArgumentList</name><operator>)</operator> <call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Constraint</name></argument>&gt;</argument_list></name></type> <name>constraints</name> <init>= <expr><call><name><name>MethodTypeResolution</name><operator>.</operator><name>produceInitialConstraints</name></name><argument_list>(<argument><expr><name>method</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>, <argument><expr><name>variables</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>constraints</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// A</comment>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>constraints</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Constraint</name><argument_list>(<argument><expr><call><name>forClass</name><argument_list>(<argument><expr><name><name>SuperClassA</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                                       <argument><expr><call><name><name>variables</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>LOOSE_INVOCATION</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>constraints</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Constraint</name><argument_list>(<argument><expr><call><name>forClass</name><argument_list>(<argument><expr><name><name>SuperClassAOther</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                                       <argument><expr><call><name><name>variables</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
                                                       <argument><expr><name>LOOSE_INVOCATION</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// B</comment>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>constraints</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Constraint</name><argument_list>(<argument><expr><call><name>forClass</name><argument_list>(<argument><expr><name><name>SuperClassAOther2</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                                       <argument><expr><call><name><name>variables</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,
                                                       <argument><expr><name>LOOSE_INVOCATION</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testMethodParameterization</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>NoSuchMethodException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>ASTArgumentList</name></type> <name>argList</name> <init>= <expr><call><name>selectNodes</name><argument_list>(<argument><expr><name><name>GenericMethodsImplicit</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name><name>ASTArgumentList</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>JavaTypeDefinition</name></type> <name>context</name> <init>= <expr><call><name>forClass</name><argument_list>(<argument><expr><name><name>GenericMethodsImplicit</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>forClass</name><argument_list>(<argument><expr><name><name>Thread</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Method</name></type> <name>method</name> <init>= <expr><call><name><name>GenericMethodsImplicit</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getMethod</name></name></name><argument_list>(<argument><expr><literal type="string">"bar"</literal></expr></argument>, <argument><expr><name><name>Object</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name><name>Object</name><operator>.</operator><name>class</name></name></expr></argument>,
                                                               <argument><expr><name><name>Integer</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name><name>Object</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>MethodType</name></type> <name>inferedMethod</name> <init>= <expr><call><name><name>MethodTypeResolution</name><operator>.</operator><name>parameterizeInvocation</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>method</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>inferedMethod</name><operator>.</operator><name>getParameterTypes</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
                     <argument><expr><call><name>forClass</name><argument_list>(<argument><expr><name><name>SuperClassA2</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>inferedMethod</name><operator>.</operator><name>getParameterTypes</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,
                     <argument><expr><call><name>forClass</name><argument_list>(<argument><expr><name><name>SuperClassA2</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>inferedMethod</name><operator>.</operator><name>getParameterTypes</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>,
                     <argument><expr><call><name>forClass</name><argument_list>(<argument><expr><name><name>Integer</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>inferedMethod</name><operator>.</operator><name>getParameterTypes</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>,
                     <argument><expr><call><name>forClass</name><argument_list>(<argument><expr><name><name>SuperClassAOther2</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>


    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testNestedAllocationExpressions</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>ASTCompilationUnit</name></type> <name>acu</name> <init>= <expr><call><name><name>java5</name><operator>.</operator><name>parseClass</name></name><argument_list>(<argument><expr><name><name>NestedAllocationExpressions</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ASTAllocationExpression</name></argument>&gt;</argument_list></name></type> <name>allocs</name> <init>= <expr><call><name><name>acu</name><operator>.</operator><name>findDescendantsOfType</name></name><argument_list>(<argument><expr><name><name>ASTAllocationExpression</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>allocs</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>isAnonymousClass</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Thread</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>allocs</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>allocs</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>isAnonymousClass</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// FUTURE 1.8 use Class.getTypeName() instead of toString</comment>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>allocs</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call><operator>.</operator><call><name>endsWith</name><argument_list>(<argument><expr><literal type="string">"NestedAllocationExpressions$1"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testAnnotatedTypeParams</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>java8</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><literal type="string">"public class Foo { public static &lt;T extends @NonNull Enum&lt;?&gt;&gt; T getEnum() { return null; } }"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testMethodOverrides</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><call><name><name>java8</name><operator>.</operator><name>parseClass</name></name><argument_list>(<argument><expr><name><name>SubTypeUsage</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testMethodWildcardParam</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><call><name><name>java8</name><operator>.</operator><name>parseClass</name></name><argument_list>(<argument><expr><name><name>MethodGenericParam</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testAbstractMethodReturnType</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><call><name><name>java8</name><operator>.</operator><name>parseClass</name></name><argument_list>(<argument><expr><name><name>AbstractReturnTypeUseCase</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testMethodOverloaded</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><call><name><name>java8</name><operator>.</operator><name>parseClass</name></name><argument_list>(<argument><expr><name><name>OverloadedMethodsUsage</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testVarArgsMethodUseCase</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><call><name><name>java8</name><operator>.</operator><name>parseClass</name></name><argument_list>(<argument><expr><name><name>VarArgsMethodUseCase</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testLocalGenericClass</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><call><name><name>java9</name><operator>.</operator><name>parseClass</name></name><argument_list>(<argument><expr><name><name>LocalGenericClass</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testMethodCallExpressionTypes</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>ASTCompilationUnit</name></type> <name>cu</name> <init>= <expr><call><name><name>java11</name><operator>.</operator><name>parseClass</name></name><argument_list>(<argument><expr><name><name>MethodCallExpressionTypes</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ASTPrimaryExpression</name></type> <name>expr</name> <init>= <expr><call><name><name>cu</name><operator>.</operator><name>getFirstDescendantOfType</name></name><argument_list>(<argument><expr><name><name>ASTPrimaryExpression</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name>forClass</name><argument_list>(<argument><expr><name><name>String</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>expr</name><operator>.</operator><name>getTypeDefinition</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name>forClass</name><argument_list>(<argument><expr><name><name>Objects</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>expr</name><operator>.</operator><name>getFirstChildOfType</name></name><argument_list>(<argument><expr><name><name>ASTPrimaryPrefix</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getTypeDefinition</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>JavaTypeDefinition</name></type> <name>getChildTypeDef</name><parameter_list>(<parameter><decl><type><name>Node</name></type> <name>node</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>childIndex</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><operator>(</operator><operator>(</operator><name>TypeNode</name><operator>)</operator> <call><name><name>node</name><operator>.</operator><name>getChild</name></name><argument_list>(<argument><expr><name>childIndex</name></expr></argument>)</argument_list></call><operator>)</operator><operator>.</operator><call><name>getTypeDefinition</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>getChildType</name><parameter_list>(<parameter><decl><type><name>Node</name></type> <name>node</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>childIndex</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><operator>(</operator><operator>(</operator><name>TypeNode</name><operator>)</operator> <call><name><name>node</name><operator>.</operator><name>getChild</name></name><argument_list>(<argument><expr><name>childIndex</name></expr></argument>)</argument_list></call><operator>)</operator><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>


    <function><type><specifier>private</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name></parameter>&gt;</parameter_list> <name><name>List</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>selectNodes</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>source</name></decl></parameter>, <parameter><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>resultType</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>xpath</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>JaxenException</name></expr></argument></throws> <block>{<block_content>
        <return>return <expr><call><name>selectNodes</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="string">"1.5"</literal></expr></argument>, <argument><expr><name>resultType</name></expr></argument>, <argument><expr><name>xpath</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="line">// This is the master overload, others just default the parameters</comment>
    <function><type><specifier>private</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name></parameter>&gt;</parameter_list> <name><name>List</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>selectNodes</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>source</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>resultType</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>xpath</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>JaxenException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>ASTCompilationUnit</name></type> <name>acu</name> <init>= <expr><call><name><name>java4</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name>convertList</name><argument_list>(<argument><expr><call><name><name>acu</name><operator>.</operator><name>findChildNodesWithXPath</name></name><argument_list>(<argument><expr><name>xpath</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>resultType</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>


    <function><type><specifier>private</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name></parameter>&gt;</parameter_list> <name><name>List</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>selectNodes</name><parameter_list>(<parameter><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>source</name></decl></parameter>, <parameter><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>resultType</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>java5</name><operator>.</operator><name>parseClass</name></name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>findDescendantsOfType</name><argument_list>(<argument><expr><name>resultType</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name></parameter>&gt;</parameter_list> <name><name>List</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>selectNodes</name><parameter_list>(<parameter><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>source</name></decl></parameter>, <parameter><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>resultType</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>xpath</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>JaxenException</name></expr></argument></throws> <block>{<block_content>
        <return>return <expr><call><name>selectNodes</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="string">"1.5"</literal></expr></argument>, <argument><expr><name>resultType</name></expr></argument>, <argument><expr><name>xpath</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>


    <function><type><specifier>private</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name></parameter>&gt;</parameter_list> <name><name>List</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>selectNodes</name><parameter_list>(<parameter><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>source</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>resultType</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>xpath</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>JaxenException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>ASTCompilationUnit</name></type> <name>acu</name> <init>= <expr><call><name><name>java4</name><operator>.</operator><name>parseClass</name></name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name>convertList</name><argument_list>(<argument><expr><call><name><name>acu</name><operator>.</operator><name>findChildNodesWithXPath</name></name><argument_list>(<argument><expr><name>xpath</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>resultType</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>


    <function><type><specifier>private</specifier> <name>void</name></type> <name>assertChildTypeArgsEqualTo</name><parameter_list>(<parameter><decl><type><name>Node</name></type> <name>node</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>childIndex</name></decl></parameter>, <parameter><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name><modifier>...</modifier></type> <name>classes</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>JavaTypeDefinition</name></type> <name>typeDef</name> <init>= <expr><operator>(</operator><operator>(</operator><name>TypeNode</name><operator>)</operator> <call><name><name>node</name><operator>.</operator><name>getChild</name></name><argument_list>(<argument><expr><name>childIndex</name></expr></argument>)</argument_list></call><operator>)</operator><operator>.</operator><call><name>getTypeDefinition</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <for>for <control>(<init><decl><type><name>int</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>index</name> <operator>&lt;</operator> <name><name>classes</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>index</name></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name>assertSame</name><argument_list>(<argument><expr><name><name>classes</name><index>[<expr><name>index</name></expr>]</index></name></expr></argument>, <argument><expr><call><name><name>typeDef</name><operator>.</operator><name>getGenericType</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></function>


    <function><type><specifier>private</specifier> <specifier>static</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name></parameter>&gt;</parameter_list> <name><name>List</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>convertList</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Node</name></argument>&gt;</argument_list></name></type> <name>nodes</name></decl></parameter>, <parameter><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>target</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>converted</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>Node</name></type> <name>n</name> <range>: <expr><name>nodes</name></expr></range></decl></init>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name><name>converted</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>target</name><operator>.</operator><name>cast</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <return>return <expr><name>converted</name></expr>;</return>
    </block_content>}</block></function>
}</block></class>
</unit>

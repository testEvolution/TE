<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="H:\Research\TestEvolution\DataAnalysis\pmd-pmd_releases-6.21.0\pmd-pmd_releases-6.21.0\pmd-java\src\test\java\net\sourceforge\pmd\typeresolution\testdata\GenericMethodsImplicit.java"><comment type="block" format="javadoc">/**
 * BSD-style license; for more info see http://pmd.sourceforge.net/license.html
 */</comment>

<package>package <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>typeresolution</name><operator>.</operator><name>testdata</name></name>;</package>

<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>typeresolution</name><operator>.</operator><name>testdata</name><operator>.</operator><name>dummytypes</name><operator>.</operator><name>SuperClassA</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>typeresolution</name><operator>.</operator><name>testdata</name><operator>.</operator><name>dummytypes</name><operator>.</operator><name>SuperClassA2</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>typeresolution</name><operator>.</operator><name>testdata</name><operator>.</operator><name>dummytypes</name><operator>.</operator><name>SuperClassAOther</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>typeresolution</name><operator>.</operator><name>testdata</name><operator>.</operator><name>dummytypes</name><operator>.</operator><name>SuperClassAOther2</name></name>;</import>

<class><specifier>public</specifier> class <name><name>GenericMethodsImplicit</name><parameter_list>&lt;<parameter><name>T</name></parameter>&gt;</parameter_list></name> <block>{
    <function><type><specifier>public</specifier> <parameter_list type="generic">&lt;<parameter><name>A</name></parameter>, <parameter><name>B</name> <extends>extends <name>Number</name></extends> <operator>&amp;</operator> <name>Runnable</name></parameter>, <parameter><name>C</name> <extends>extends <name>D</name></extends></parameter>, <parameter><name>D</name> <extends>extends <name>T</name></extends></parameter>&gt;</parameter_list> <name>void</name></type> <name>foo</name><parameter_list>()</parameter_list> <block>{<block_content>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <parameter_list type="generic">&lt;<parameter><name>A</name></parameter>, <parameter><name>B</name></parameter>&gt;</parameter_list> <name>A</name></type> <name>bar</name><parameter_list>(<parameter><decl><type><name>A</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>A</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>Integer</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>B</name></type> <name>d</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>void</name></type> <name>test</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>SuperClassA2</name></type> <name>a</name> <init>= <expr><call><name>bar</name><argument_list>(<argument><expr><operator>(</operator><name>SuperClassA</name><operator>)</operator> <literal type="null">null</literal></expr></argument>, <argument><expr><operator>(</operator><name>SuperClassAOther</name><operator>)</operator> <literal type="null">null</literal></expr></argument>, <argument><expr><operator>(</operator><name>Integer</name><operator>)</operator> <literal type="null">null</literal></expr></argument>, <argument><expr><operator>(</operator><name>SuperClassAOther2</name><operator>)</operator> <literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    </block_content>}</block></function>
}</block></class>
</unit>

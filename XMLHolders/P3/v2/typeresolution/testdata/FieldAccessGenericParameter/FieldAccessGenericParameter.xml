<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="H:\Research\TestEvolution\DataAnalysis\pmd-pmd_releases-6.21.0\pmd-pmd_releases-6.21.0\pmd-java\src\test\java\net\sourceforge\pmd\typeresolution\testdata\FieldAccessGenericParameter.java"><comment type="block" format="javadoc">/**
 * BSD-style license; for more info see http://pmd.sourceforge.net/license.html
 */</comment>

<package>package <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>typeresolution</name><operator>.</operator><name>testdata</name></name>;</package>

<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>typeresolution</name><operator>.</operator><name>testdata</name><operator>.</operator><name>dummytypes</name><operator>.</operator><name>GenericClass</name></name>;</import>

<class><specifier>public</specifier> class <name><name>FieldAccessGenericParameter</name><parameter_list>&lt;<parameter><name>T</name> <extends>extends <name><name>GenericClass</name><parameter_list>&lt;<parameter><name>String</name></parameter>, <parameter><name><name>GenericClass</name><parameter_list>&lt;<parameter><name>String</name></parameter>, <parameter><name>Integer</name></parameter>&gt;</parameter_list></name></parameter>&gt;</parameter_list></name></extends></parameter>,
        <parameter><name>S</name> <extends>extends <name>Double</name></extends></parameter>&gt;</parameter_list></name> <block>{
    <decl_stmt><decl><type><name>T</name></type> <name>parameterGeneric</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>S</name></type> <name>classGeneric</name></decl>;</decl_stmt>

    <function><type><parameter_list type="generic">&lt;<parameter><name>M</name> <extends>extends <name>Character</name></extends></parameter>&gt;</parameter_list> <name>void</name></type> <name>foo</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>M</name></type> <name>localGeneric</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

        <comment type="line">// access type dependant on class/method type arguments</comment>
        <comment type="line">// Primary[Prefix[Name[classGeneric]]]</comment>
        <expr_stmt><expr><name>classGeneric</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt> <comment type="line">// Double</comment>
        <expr_stmt><expr><name>localGeneric</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt> <comment type="line">// Character</comment>


        <comment type="line">// test type parameters extending generic types</comment>
        <comment type="line">// Primary[Prefix[Name[parameterGeneric.first]]]</comment>
        <expr_stmt><expr><name><name>parameterGeneric</name><operator>.</operator><name>second</name><operator>.</operator><name>second</name></name> <operator>=</operator> <operator>new</operator> <call><name>Integer</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <constructor><parameter_list type="generic">&lt;<parameter><name>C</name> <extends>extends <name>Number</name></extends></parameter>&gt;</parameter_list> <name>FieldAccessGenericParameter</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>C</name></type> <name>constructorGeneric</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

        <comment type="line">// access type dependant on constructor type arugments</comment>
        <comment type="line">// Primary[Prefix[Name[localGeneric]]]</comment>
        <expr_stmt><expr><name>constructorGeneric</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt> <comment type="line">// Number</comment>
    </block_content>}</block></constructor>
}</block></class>
</unit>

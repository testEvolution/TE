<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="H:\Research\TestEvolution\DataAnalysis\pmd-pmd_releases-6.21.0\pmd-pmd_releases-6.21.0\pmd-java\src\test\java\net\sourceforge\pmd\typeresolution\testdata\FieldAccessStatic.java"><comment type="block" format="javadoc">/**
 * BSD-style license; for more info see http://pmd.sourceforge.net/license.html
 */</comment>

<package>package <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>typeresolution</name><operator>.</operator><name>testdata</name></name>;</package>


<import>import static <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>typeresolution</name><operator>.</operator><name>testdata</name><operator>.</operator><name>dummytypes</name><operator>.</operator><name>StaticMembers</name><operator>.</operator><name>*</name></name>;</import>
<import>import static <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>typeresolution</name><operator>.</operator><name>testdata</name><operator>.</operator><name>dummytypes</name><operator>.</operator><name>StaticMembers</name><operator>.</operator><name>staticPrimitive</name></name>;</import>

<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>typeresolution</name><operator>.</operator><name>testdata</name><operator>.</operator><name>dummytypes</name><operator>.</operator><name>StaticMembers</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>typeresolution</name><operator>.</operator><name>testdata</name><operator>.</operator><name>dummytypes</name><operator>.</operator><name>StaticSuper</name></name>;</import>

<class><specifier>public</specifier> class <name>FieldAccessStatic</name> <block>{
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <name>double</name></type> <name>staticChar</name></decl>;</decl_stmt>

    <function><type><name>void</name></type> <name>foo</name><parameter_list>()</parameter_list> <block>{<block_content>
        <comment type="line">// static field import by explicit import</comment>
        <comment type="line">// Primary[Prefix[Name[...]]]</comment>
        <expr_stmt><expr><name>staticPrimitive</name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>

        <comment type="line">// static field import by on-demand import</comment>
        <comment type="line">// Primary[Prefix[Name[...]]]</comment>
        <expr_stmt><expr><name><name>staticGeneric</name><operator>.</operator><name>first</name></name> <operator>=</operator> <operator>new</operator> <call><name>Long</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>StaticMembers</name><operator>.</operator><name>staticPrimitive</name></name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>

        <comment type="line">// Fully qualified static field access</comment>
        <comment type="line">// Primary[Prefix[Name[...]]]</comment>
        <expr_stmt><expr><name><name>StaticMembers</name><operator>.</operator><name>staticPrimitive</name></name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>

        <comment type="line">// Fully qualified multiple static field access</comment>
        <comment type="line">// Primary[Prefix[Name[...]]]</comment>
        <expr_stmt><expr><name><name>StaticMembers</name>
                <operator>.</operator><name>staticGeneric</name><operator>.</operator><name>generic</name><operator>.</operator><name>second</name></name> <operator>=</operator> <operator>new</operator> <call><name>Long</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <class><specifier>public</specifier> class <name>Nested</name> <super_list><extends>extends <super><name>StaticSuper</name></super></extends></super_list> <block>{
        <function><type><name>void</name></type> <name>bar</name><parameter_list>()</parameter_list> <block>{<block_content>
            <comment type="line">// import shadowed by inherited static</comment>
            <comment type="line">// Primary[Prefix[Name[...]]]</comment>
            <expr_stmt><expr><name>staticPrimitive</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>

            <comment type="line">// enclosing scope staticChar shadows imported static field</comment>
            <comment type="line">// Primary[Prefix[Name[...]]]</comment>
            <expr_stmt><expr><name>staticChar</name> <operator>=</operator> <literal type="number">3.1</literal></expr>;</expr_stmt>

            <comment type="line">// qualified access</comment>
            <comment type="line">// Primary[Prefix[Name[...]]]</comment>
            <expr_stmt><expr><name><name>Nested</name><operator>.</operator><name>staticPrimitive</name></name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
        </block_content>}</block></function>
    }</block></class>
}</block></class>



</unit>

<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="H:\Research\TestEvolution\DataAnalysis\pmd-pmd_releases-6.21.0\pmd-pmd_releases-6.21.0\pmd-java\src\test\java\net\sourceforge\pmd\typeresolution\testdata\FieldAccess.java"><comment type="block" format="javadoc">/**
 * BSD-style license; for more info see http://pmd.sourceforge.net/license.html
 */</comment>


<package>package <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>typeresolution</name><operator>.</operator><name>testdata</name></name>;</package>


<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>typeresolution</name><operator>.</operator><name>testdata</name><operator>.</operator><name>dummytypes</name><operator>.</operator><name>SuperClassA</name></name>;</import>


<comment type="block">/*
 * Note: inherited fields of a nested class shadow outer scope variables
 *      Note: only if they are accessible!
 *
 * TODO: test static field access, array types, anonymous class (super type access)
 */</comment>
<class><specifier>public</specifier> class <name>FieldAccess</name> <super_list><extends>extends <super><name>SuperClassA</name></super></extends></super_list> <block>{
    <decl_stmt><decl><type><specifier>public</specifier> <name>int</name></type> <name>field</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>FieldAccess</name></type> <name>f</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <name>FieldAccess</name></type> <name>staticF</name></decl>;</decl_stmt>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>foo</name><parameter_list>(<parameter><decl><type><name>FieldAccess</name></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>FieldAccess</name></type> <name>local</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

        <comment type="line">// access through method parameter</comment>
        <comment type="line">// Primary[Prefix[Name[param.field]]]</comment>
        <expr_stmt><expr><name><name>param</name><operator>.</operator><name>field</name></name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>

        <comment type="line">// access through local</comment>
        <comment type="line">// Primary[Prefix[Name[local.field]]]</comment>
        <expr_stmt><expr><name><name>local</name><operator>.</operator><name>field</name></name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>

        <comment type="line">// "f.f.f.field" goes into a single Name node</comment>
        <comment type="line">// Primary[Prefix[Name["f.f.f.field"]]]</comment>
        <expr_stmt><expr><name><name>f</name><operator>.</operator><name>f</name><operator>.</operator><name>f</name><operator>.</operator><name>field</name></name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>

        <comment type="line">// f.f.f.field, each goes into a separate Suffix/Name node</comment>
        <comment type="line">// Primary[Prefix[Primary[(this)], Suffix[f], Suffix[f], Suffix[field]]]</comment>
        <expr_stmt><expr><operator>(</operator><name>this</name><operator>)</operator><operator>.</operator><name><name>f</name><operator>.</operator><name>f</name><operator>.</operator><name>field</name></name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>

        <comment type="line">// simple field access</comment>
        <comment type="line">// Primary[Prefix["field"]]</comment>
        <expr_stmt><expr><name>field</name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
    </block_content>}</block></function>
}</block></class>

</unit>

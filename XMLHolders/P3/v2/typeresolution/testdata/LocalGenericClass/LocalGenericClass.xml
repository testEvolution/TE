<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="H:\Research\TestEvolution\DataAnalysis\pmd-pmd_releases-6.21.0\pmd-pmd_releases-6.21.0\pmd-java\src\test\java\net\sourceforge\pmd\typeresolution\testdata\LocalGenericClass.java"><comment type="block" format="javadoc">/**
 * BSD-style license; for more info see http://pmd.sourceforge.net/license.html
 */</comment>

<package>package <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>typeresolution</name><operator>.</operator><name>testdata</name></name>;</package>

<class><specifier>public</specifier> class <name>LocalGenericClass</name> <block>{

    <function><type><specifier>public</specifier> <specifier>static</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name></parameter>&gt;</parameter_list> <name>void</name></type> <name>localClassInGeneric</name><parameter_list>()</parameter_list> <block>{<block_content>
        <class>class <name>MyLocalClass</name> <super_list><implements>implements <super><name><name>MyCombiner</name><argument_list type="generic">&lt;<argument><name>T</name></argument>, <argument><name><name>Optional</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></argument>, <argument><name>MyLocalClass</name></argument>&gt;</argument_list></name></super></implements></super_list> <block>{
            <decl_stmt><decl><type><specifier>private</specifier> <name>T</name></type> <name>state</name></decl>;</decl_stmt>

            <function><annotation>@<name>Override</name></annotation>
            <type><specifier>public</specifier> <name>void</name></type> <name>accept</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>t</name></decl></parameter>)</parameter_list> <block>{<block_content> </block_content>}</block></function>

            <function><annotation>@<name>Override</name></annotation>
            <type><specifier>public</specifier> <name><name>Optional</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>get</name><parameter_list>()</parameter_list> <block>{<block_content>
                <return>return <expr><call><name><name>Optional</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>;</return>
            </block_content>}</block></function>

            <function><annotation>@<name>Override</name></annotation>
            <type><specifier>public</specifier> <name>void</name></type> <name>combine</name><parameter_list>(<parameter><decl><type><name>MyLocalClass</name></type> <name>other</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <expr_stmt><expr><call><name>accept</name><argument_list>(<argument><expr><name><name>other</name><operator>.</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></function>
        }</block></class>

        <expr_stmt><expr><operator>new</operator> <call><name>MyLocalClass</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <interface><specifier>private</specifier> interface <name><name>MyCombiner</name><parameter_list>&lt;<parameter><name>R</name></parameter>, <parameter><name>S</name></parameter>, <parameter><name>T</name></parameter>&gt;</parameter_list></name> <super_list><extends>extends <super><name><name>MyConsumer</name><argument_list type="generic">&lt;<argument><name>R</name></argument>&gt;</argument_list></name></super>, <super><name><name>MySupplier</name><argument_list type="generic">&lt;<argument><name>S</name></argument>&gt;</argument_list></name></super></extends></super_list> <block>{
        <function_decl><type><name>void</name></type> <name>combine</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>t</name></decl></parameter>)</parameter_list>;</function_decl>
    }</block></interface>

    <interface><specifier>private</specifier> interface <name><name>MyConsumer</name><parameter_list>&lt;<parameter><name>R</name></parameter>&gt;</parameter_list></name> <block>{
        <function_decl><type><name>void</name></type> <name>accept</name><parameter_list>(<parameter><decl><type><name>R</name></type> <name>r</name></decl></parameter>)</parameter_list>;</function_decl>
    }</block></interface>

    <interface><specifier>private</specifier> interface <name><name>MySupplier</name><parameter_list>&lt;<parameter><name>S</name></parameter>&gt;</parameter_list></name> <block>{
        <function_decl><type><name>S</name></type> <name>get</name><parameter_list>()</parameter_list>;</function_decl>
    }</block></interface>

    <class><specifier>private</specifier> <specifier>static</specifier> class <name><name>Optional</name><parameter_list>&lt;<parameter><name>T</name></parameter>&gt;</parameter_list></name> <block>{
        <function><type><specifier>public</specifier> <specifier>static</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name></parameter>&gt;</parameter_list> <name><name>Optional</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>empty</name><parameter_list>()</parameter_list> <block>{<block_content>
            <return>return <expr><operator>new</operator> <call><name><name>Optional</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>
    }</block></class>
}</block></class>
</unit>

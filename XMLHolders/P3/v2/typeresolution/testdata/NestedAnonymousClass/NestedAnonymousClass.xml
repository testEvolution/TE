<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="H:\Research\TestEvolution\DataAnalysis\pmd-pmd_releases-6.21.0\pmd-pmd_releases-6.21.0\pmd-java\src\test\java\net\sourceforge\pmd\typeresolution\testdata\NestedAnonymousClass.java"><comment type="block" format="javadoc">/**
 * BSD-style license; for more info see http://pmd.sourceforge.net/license.html
 */</comment>

<package>package <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>typeresolution</name><operator>.</operator><name>testdata</name></name>;</package>

<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>typeresolution</name><operator>.</operator><name>testdata</name><operator>.</operator><name>dummytypes</name><operator>.</operator><name>Converter</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>typeresolution</name><operator>.</operator><name>testdata</name><operator>.</operator><name>dummytypes</name><operator>.</operator><name>ConverterFactory</name></name>;</import>

<class><specifier>public</specifier> class <name>NestedAnonymousClass</name> <block>{

    <class><specifier>public</specifier> class <name>Bar</name> <block>{
    }</block></class>
    
    <decl_stmt><decl><type><specifier>public</specifier> <name><name>ConverterFactory</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Bar</name></argument>&gt;</argument_list></name></type> <name>factory</name> <init>= <expr><operator>new</operator> <class><super><name><name>ConverterFactory</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Bar</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <parameter_list type="generic">&lt;<parameter><name>Z</name> <extends>extends <name>Bar</name></extends></parameter>&gt;</parameter_list> <name><name>Converter</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Z</name></argument>&gt;</argument_list></name></type> <name>getConverter</name><parameter_list>(<parameter><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>Z</name></argument>&gt;</argument_list></name></type> <name>targetType</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <return>return <expr><operator>new</operator> <class><super><name><name>Converter</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Z</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
                <function><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"unchecked"</literal></expr></argument>)</argument_list></annotation>
                <annotation>@<name>Override</name></annotation>
                <type><specifier>public</specifier> <name>Z</name></type> <name>convert</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>source</name></decl></parameter>)</parameter_list> <block>{<block_content>
                    <return>return <expr><operator>(</operator><name>Z</name><operator>)</operator> <operator>new</operator> <call><name>Bar</name><argument_list>()</argument_list></call></expr>;</return>
                </block_content>}</block></function>
            }</block></class></expr>;</return>
        </block_content>}</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>
}</block></class>
</unit>

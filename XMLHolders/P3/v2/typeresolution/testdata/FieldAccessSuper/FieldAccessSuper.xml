<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="H:\Research\TestEvolution\DataAnalysis\pmd-pmd_releases-6.21.0\pmd-pmd_releases-6.21.0\pmd-java\src\test\java\net\sourceforge\pmd\typeresolution\testdata\FieldAccessSuper.java"><comment type="block" format="javadoc">/**
 * BSD-style license; for more info see http://pmd.sourceforge.net/license.html
 */</comment>


<package>package <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>typeresolution</name><operator>.</operator><name>testdata</name></name>;</package>


<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>typeresolution</name><operator>.</operator><name>testdata</name><operator>.</operator><name>dummytypes</name><operator>.</operator><name>SuperClassA</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>typeresolution</name><operator>.</operator><name>testdata</name><operator>.</operator><name>dummytypes</name><operator>.</operator><name>SuperClassA2</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>typeresolution</name><operator>.</operator><name>testdata</name><operator>.</operator><name>dummytypes</name><operator>.</operator><name>SuperClassB</name></name>;</import>


<comment type="block">/*
 * Note: inherited fields of a nested class shadow outer scope variables
 *      Note: only if they are accessible!
 */</comment>
<class><specifier>public</specifier> class <name>FieldAccessSuper</name> <super_list><extends>extends <super><name>SuperClassA</name></super></extends></super_list> <block>{
    <function><type><specifier>public</specifier> <name>void</name></type> <name>foo</name><parameter_list>()</parameter_list> <block>{<block_content>
        <comment type="line">// simple super field access</comment>
        <comment type="line">// Primary[Prefix[Name[s]]]</comment>
        <expr_stmt><expr><name>s</name> <operator>=</operator> <operator>new</operator> <call><name>SuperClassA</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// access inherited field through primary</comment>
        <comment type="line">// Primary[ Prefix[Primary[(this)]], Suffix[s], Suffix[s2] ]</comment>
        <expr_stmt><expr><operator>(</operator><name>this</name><operator>)</operator><operator>.</operator><name><name>s</name><operator>.</operator><name>s2</name></name> <operator>=</operator> <operator>new</operator> <call><name>SuperClassA2</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// access inherited field, second 's' has inherited field 's2'</comment>
        <comment type="line">// Primary[Prefix[Name[s.s.s2]]]</comment>
        <expr_stmt><expr><name><name>s</name><operator>.</operator><name>s</name><operator>.</operator><name>s2</name></name> <operator>=</operator> <operator>new</operator> <call><name>SuperClassA2</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// field access through super</comment>
        <comment type="line">// Primary[Prefix["super"], Suffix["field"]]</comment>
        <expr_stmt><expr><name><name>super</name><operator>.</operator><name>s</name></name> <operator>=</operator> <operator>new</operator> <call><name>SuperClassA</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// fully qualified case</comment>
        <comment type="line">// Primary[Prefix[Name[net...FieldAccessSuper]], Suffix[this], Suffix[s]]</comment>
        <expr_stmt><expr><name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>typeresolution</name><operator>.</operator><name>testdata</name><operator>.</operator><name>FieldAccessSuper</name><operator>.</operator><name>this</name><operator>.</operator><name>s</name></name>
                <operator>=</operator> <operator>new</operator> <call><name>SuperClassA</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <class><specifier>public</specifier> class <name>Nested</name> <super_list><extends>extends <super><name>SuperClassB</name></super></extends></super_list> <block>{
        <decl_stmt><decl><type><name>SuperClassA</name></type> <name>a</name></decl>;</decl_stmt>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>foo</name><parameter_list>()</parameter_list> <block>{<block_content>
            <comment type="line">// access enclosing super field</comment>
            <comment type="line">// Primary[Prefix[Name[s]]]</comment>
            <expr_stmt><expr><name>s</name> <operator>=</operator> <operator>new</operator> <call><name>SuperClassA</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// access Nested inherited field</comment>
            <comment type="line">// Primary[Prefix[Name[bs]]]</comment>
            <expr_stmt><expr><name>bs</name> <operator>=</operator> <operator>new</operator> <call><name>SuperClassB</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// access super field with fully qualified stuff</comment>
            <comment type="line">// Primary[Prefix["FieldAccessSuper"], Suffix[Nested],</comment>
            <comment type="line">//                  Suffix["super"], Suffix["bs"]]</comment>
            <expr_stmt><expr><name><name>FieldAccessSuper</name><operator>.</operator><name>Nested</name><operator>.</operator><name>super</name><operator>.</operator><name>bs</name></name> <operator>=</operator> <operator>new</operator> <call><name>SuperClassB</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// refers to the enclosing class's immediate super class's field</comment>
            <comment type="line">// Primary[Prefix["FieldAccessSuper"], Suffix["super"], Suffix["s"]]</comment>
            <expr_stmt><expr><name><name>FieldAccessSuper</name><operator>.</operator><name>super</name><operator>.</operator><name>s</name></name> <operator>=</operator> <operator>new</operator> <call><name>SuperClassA</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></function>
    }</block></class>
}</block></class>
</unit>

<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="H:\Research\TestEvolution\DataAnalysis\pmd-pmd_releases-6.21.0\pmd-pmd_releases-6.21.0\pmd-java\src\test\java\net\sourceforge\pmd\typeresolution\testdata\FieldAccessGenericBounds.java"><comment type="block" format="javadoc">/**
 * BSD-style license; for more info see http://pmd.sourceforge.net/license.html
 */</comment>

<package>package <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>typeresolution</name><operator>.</operator><name>testdata</name></name>;</package>

<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>typeresolution</name><operator>.</operator><name>testdata</name><operator>.</operator><name>dummytypes</name><operator>.</operator><name>GenericClass</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>typeresolution</name><operator>.</operator><name>testdata</name><operator>.</operator><name>dummytypes</name><operator>.</operator><name>GenericSuperClassA</name></name>;</import>


<class><specifier>public</specifier> class <name>FieldAccessGenericBounds</name> <super_list><extends>extends <super><name><name>GenericSuperClassA</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>&gt;</argument_list></name></super></extends></super_list> <block>{
    <decl_stmt><decl><type><name><name>GenericClass</name><argument_list type="generic">&lt;<argument><name>?</name> <super>super <name>String</name></super></argument>, <argument><name>?</name></argument>&gt;</argument_list></name></type> <name>superGeneric</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>GenericClass</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>Number</name></extends></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>upperBound</name></decl>;</decl_stmt>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>astPrimaryNameCases</name><parameter_list>()</parameter_list> <block>{<block_content>
        <comment type="line">// Primary[Prefix[Name[superGeneric.first]]]</comment>
        <expr_stmt><expr><name><name>superGeneric</name><operator>.</operator><name>first</name></name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt> <comment type="line">// ? super String</comment>
        <expr_stmt><expr><name><name>superGeneric</name><operator>.</operator><name>second</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt> <comment type="line">// ?</comment>
        <expr_stmt><expr><name><name>inheritedSuperGeneric</name><operator>.</operator><name>first</name></name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt> <comment type="line">// ? super String</comment>
        <expr_stmt><expr><name><name>inheritedSuperGeneric</name><operator>.</operator><name>second</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt> <comment type="line">// ?</comment>

        <expr_stmt><expr><name><name>upperBound</name><operator>.</operator><name>first</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt> <comment type="line">// ? extends Number</comment>
        <expr_stmt><expr><name><name>inheritedUpperBound</name><operator>.</operator><name>first</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt> <comment type="line">// ? extends String</comment>
    </block_content>}</block></function>
}</block></class>

</unit>

<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="H:\Research\TestEvolution\DataAnalysis\pmd-pmd_releases-6.20.0\pmd-pmd_releases-6.20.0\pmd-java\src\test\java\net\sourceforge\pmd\typeresolution\testdata\VarargsAsFixedArity.java"><comment type="block" format="javadoc">/**
 * BSD-style license; for more info see http://pmd.sourceforge.net/license.html
 */</comment>

<package>package <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>typeresolution</name><operator>.</operator><name>testdata</name></name>;</package>

<class><specifier>public</specifier> class <name>VarargsAsFixedArity</name> <block>{

    <function><type><specifier>public</specifier> <name>void</name></type> <name>tester</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>var</name> <init>= <expr><call><name>aMethod</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>var2</name> <init>= <expr><call><name>aMethod</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>var3</name> <init>= <expr><call><name>aMethod</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>var4</name> <init>= <expr><call><name>aMethod</name><argument_list>(<argument><expr><operator>new</operator> <name><name>Object</name><index>[]</index></name> <block>{ <expr><literal type="null">null</literal></expr> }</block></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    </block_content>}</block></function>
    
    <function><type><specifier>public</specifier> <name>int</name></type> <name>aMethod</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></function>
    
    <function><type><specifier>public</specifier> <name>String</name></type> <name>aMethod</name><parameter_list>(<parameter><decl><type><name>Object</name><modifier>...</modifier></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>
}</block></class>
</unit>

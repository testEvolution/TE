<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="H:\Research\TestEvolution\DataAnalysis\pmd-pmd_releases-6.20.0\pmd-pmd_releases-6.20.0\pmd-java\src\test\java\net\sourceforge\pmd\typeresolution\testdata\Promotion.java"><comment type="block" format="javadoc">/**
 * BSD-style license; for more info see http://pmd.sourceforge.net/license.html
 */</comment>

<package>package <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>typeresolution</name><operator>.</operator><name>testdata</name></name>;</package>

<class><specifier>public</specifier> class <name>Promotion</name> <block>{

    <function><type><specifier>public</specifier> <name>void</name></type> <name>unaryNumericPromotion</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>double</name></type> <name>t</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>t</name> <operator>=</operator> <operator>+</operator><operator>(</operator><operator>(</operator><name>byte</name><operator>)</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>t</name> <operator>=</operator> <operator>+</operator><operator>(</operator><operator>(</operator><name>short</name><operator>)</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>t</name> <operator>=</operator> <operator>+</operator><operator>(</operator><operator>(</operator><name>char</name><operator>)</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>t</name> <operator>=</operator> <operator>+</operator><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>t</name> <operator>=</operator> <operator>+</operator><operator>(</operator><operator>(</operator><name>long</name><operator>)</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>t</name> <operator>=</operator> <operator>+</operator><operator>(</operator><operator>(</operator><name>float</name><operator>)</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>t</name> <operator>=</operator> <operator>+</operator><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>binaryNumericPromotion</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>double</name></type> <name>t</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>byte</name><operator>)</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>byte</name><operator>)</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>byte</name><operator>)</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>short</name><operator>)</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>byte</name><operator>)</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>char</name><operator>)</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>byte</name><operator>)</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>byte</name><operator>)</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>long</name><operator>)</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>byte</name><operator>)</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>float</name><operator>)</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>byte</name><operator>)</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>short</name><operator>)</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>byte</name><operator>)</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>short</name><operator>)</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>short</name><operator>)</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>short</name><operator>)</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>char</name><operator>)</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>short</name><operator>)</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>short</name><operator>)</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>long</name><operator>)</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>short</name><operator>)</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>float</name><operator>)</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>short</name><operator>)</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>char</name><operator>)</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>byte</name><operator>)</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>char</name><operator>)</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>short</name><operator>)</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>char</name><operator>)</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>char</name><operator>)</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>char</name><operator>)</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>char</name><operator>)</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>long</name><operator>)</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>char</name><operator>)</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>float</name><operator>)</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>char</name><operator>)</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>byte</name><operator>)</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>short</name><operator>)</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>char</name><operator>)</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>long</name><operator>)</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>float</name><operator>)</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>long</name><operator>)</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>byte</name><operator>)</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>long</name><operator>)</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>short</name><operator>)</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>long</name><operator>)</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>char</name><operator>)</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>long</name><operator>)</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>long</name><operator>)</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>long</name><operator>)</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>long</name><operator>)</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>float</name><operator>)</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>long</name><operator>)</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>float</name><operator>)</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>byte</name><operator>)</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>float</name><operator>)</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>short</name><operator>)</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>float</name><operator>)</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>char</name><operator>)</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>float</name><operator>)</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>float</name><operator>)</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>long</name><operator>)</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>float</name><operator>)</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>float</name><operator>)</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>float</name><operator>)</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>byte</name><operator>)</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>short</name><operator>)</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>char</name><operator>)</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>long</name><operator>)</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>float</name><operator>)</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>binaryStringPromotion</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>t</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>t</name> <operator>=</operator> <literal type="string">""</literal> <operator>+</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>t</name> <operator>=</operator> <literal type="number">0</literal> <operator>+</operator> <literal type="string">""</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>t</name> <operator>=</operator> <literal type="string">""</literal> <operator>+</operator> <literal type="string">""</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>t</name> <operator>=</operator> <literal type="string">""</literal> <operator>+</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>t</name> <operator>=</operator> <literal type="null">null</literal> <operator>+</operator> <literal type="string">""</literal></expr>;</expr_stmt>
    </block_content>}</block></function>
}</block></class>
</unit>

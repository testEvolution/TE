<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="H:\Research\TestEvolution\DataAnalysis\pmd-pmd_releases-6.20.0\pmd-pmd_releases-6.20.0\pmd-java\src\test\java\net\sourceforge\pmd\typeresolution\testdata\Operators.java"><comment type="block" format="javadoc">/**
 * BSD-style license; for more info see http://pmd.sourceforge.net/license.html
 */</comment>

<package>package <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>typeresolution</name><operator>.</operator><name>testdata</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<class><specifier>public</specifier> class <name>Operators</name> <block>{
    <function><type><specifier>public</specifier> <name>void</name></type> <name>unaryLogicalOperators</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>boolean</name></type> <name>t</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>t</name> <operator>=</operator> <operator>!</operator><literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>t</name> <operator>=</operator> <operator>!</operator><literal type="boolean">false</literal></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>binaryLogicalOperators</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>boolean</name></type> <name>t</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>t</name> <operator>=</operator> <literal type="boolean">true</literal> <operator>|</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>t</name> <operator>=</operator> <literal type="boolean">true</literal> <operator>&amp;</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>t</name> <operator>=</operator> <literal type="boolean">true</literal> <operator>^</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>t</name> <operator>=</operator> <literal type="boolean">true</literal> <operator>&amp;&amp;</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>t</name> <operator>=</operator> <literal type="boolean">true</literal> <operator>||</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>t</name> <operator>=</operator> <literal type="number">1</literal> <operator>&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>t</name> <operator>=</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>t</name> <operator>=</operator> <literal type="number">1</literal> <operator>==</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>t</name> <operator>=</operator> <literal type="number">1</literal> <operator>!=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>t</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>t</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>t</name> <operator>=</operator> <name>this</name> <operator>instanceof</operator> <name>List</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>t</name> <operator>=</operator> <name>this</name> <operator>instanceof</operator> <name>Operators</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>unaryNumericOperators</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>double</name></type> <name>t</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>t</name> <operator>=</operator> <operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>t</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>t</name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>t</name><operator>--</operator></expr>;</expr_stmt>
        <expr_stmt><expr><operator>++</operator><name>t</name></expr>;</expr_stmt>
        <expr_stmt><expr><operator>--</operator><name>t</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>binaryNumericOperators</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>long</name></type> <name>t</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>t</name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>t</name> <operator>=</operator> <literal type="number">1</literal> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>t</name> <operator>=</operator> <literal type="number">1</literal> <operator>/</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>t</name> <operator>=</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>t</name> <operator>=</operator> <literal type="number">1</literal> <operator>%</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>t</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>t</name> <operator>=</operator> <literal type="number">1</literal> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>t</name> <operator>=</operator> <literal type="number">1</literal> <operator>&gt;&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>assignmentOperators</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>long</name></type> <name>t</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>t</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>t</name> <operator>*=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>t</name> <operator>/=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>t</name> <operator>%=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>t</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>t</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>t</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>t</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>t</name> <operator>&gt;&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>t</name> <operator>&amp;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>t</name> <operator>^=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>t</name> <operator>|=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></function>
}</block></class>
</unit>

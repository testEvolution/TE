<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="H:\Research\TestEvolution\DataAnalysis\pmd-pmd_releases-6.20.0\pmd-pmd_releases-6.20.0\pmd-java\src\test\java\net\sourceforge\pmd\typeresolution\testdata\MethodPotentialApplicability.java"><comment type="block" format="javadoc">/**
 * BSD-style license; for more info see http://pmd.sourceforge.net/license.html
 */</comment>

<package>package <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>typeresolution</name><operator>.</operator><name>testdata</name></name>;</package>

<class><specifier>public</specifier> class <name>MethodPotentialApplicability</name> <block>{
    <function><type><name>void</name></type> <name>test</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>MethodPotentialApplicability</name></type> <name>field</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>field</name> <operator>=</operator> <name>this</name></expr>;</expr_stmt> <comment type="line">// initialize like this to simplify XPath expr. in tests</comment>

        <comment type="line">// Suffix/ASTName cases</comment>

        <decl_stmt><decl><type><name>int</name></type> <name>a</name> <init>= <expr><call><name>vararg</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><call><name>vararg</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>c</name> <init>= <expr><call><name>notVararg</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>Number</name></type> <name>d</name> <init>= <expr><call><name>noArguments</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>Number</name></type> <name>e</name> <init>= <expr><call><name><name>field</name><operator>.</operator><name>noArguments</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// PrimaryPrefix cases</comment>

        <decl_stmt><decl><type><name>int</name></type> <name>f</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>vararg</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// TODO: add test for: if there are type parameters then method is either non-generic or type arg arity matches</comment>
    </block_content>}</block></function>

    <comment type="line">// test if variable arity with arity n -&gt; then call arity &gt;= n-1</comment>
    <function><type><name>int</name></type> <name>vararg</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>...</modifier></type> <name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>Exception</name></type> <name>vararg</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>...</modifier></type> <name>d</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="line">// test no arguments</comment>
    <function><type><name>Number</name></type> <name>noArguments</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="line">// test not vararg mathching arity</comment>
    <function><type><name>String</name></type> <name>notVararg</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>Exception</name></type> <name>notVararg</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>
}</block></class>
</unit>

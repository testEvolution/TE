<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="H:\Research\TestEvolution\DataAnalysis\pmd-pmd_releases-6.20.0\pmd-pmd_releases-6.20.0\pmd-java\src\test\java\net\sourceforge\pmd\lang\java\ParserTstUtil.java"><comment type="block" format="javadoc">/**
 * BSD-style license; for more info see http://pmd.sourceforge.net/license.html
 */</comment>

<package>package <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>java</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>StringReader</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>reflect</name><operator>.</operator><name>InvocationHandler</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>reflect</name><operator>.</operator><name>InvocationTargetException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>reflect</name><operator>.</operator><name>Method</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>reflect</name><operator>.</operator><name>Proxy</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>charset</name><operator>.</operator><name>StandardCharsets</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collection</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>io</name><operator>.</operator><name>IOUtils</name></name>;</import>

<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>LanguageRegistry</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>LanguageVersion</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>LanguageVersionHandler</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>java</name><operator>.</operator><name>ast</name><operator>.</operator><name>ASTCompilationUnit</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>java</name><operator>.</operator><name>ast</name><operator>.</operator><name>JavaParserVisitor</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>java</name><operator>.</operator><name>dfa</name><operator>.</operator><name>DataFlowFacade</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>java</name><operator>.</operator><name>qname</name><operator>.</operator><name>QualifiedNameResolver</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>java</name><operator>.</operator><name>symboltable</name><operator>.</operator><name>SymbolFacade</name></name>;</import>

<class><specifier>public</specifier> class <name>ParserTstUtil</name> <block>{

    <constructor><specifier>private</specifier> <name>ParserTstUtil</name><parameter_list>()</parameter_list> <block>{<block_content>

    </block_content>}</block></constructor>

    <class><specifier>private</specifier> <specifier>static</specifier> class <name><name>Collector</name><parameter_list>&lt;<parameter><name>E</name></parameter>&gt;</parameter_list></name> <super_list><implements>implements <super><name>InvocationHandler</name></super></implements></super_list> <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <name><name>Class</name><argument_list type="generic">&lt;<argument><name>E</name></argument>&gt;</argument_list></name></type> <name>clazz</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name><name>Collection</name><argument_list type="generic">&lt;<argument><name>E</name></argument>&gt;</argument_list></name></type> <name>collection</name></decl>;</decl_stmt>

        <constructor><name>Collector</name><parameter_list>(<parameter><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>E</name></argument>&gt;</argument_list></name></type> <name>clazz</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>clazz</name></expr></argument>, <argument><expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>E</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <constructor><name>Collector</name><parameter_list>(<parameter><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>E</name></argument>&gt;</argument_list></name></type> <name>clazz</name></decl></parameter>, <parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>E</name></argument>&gt;</argument_list></name></type> <name>coll</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>clazz</name></name> <operator>=</operator> <name>clazz</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>collection</name></name> <operator>=</operator> <name>coll</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><type><specifier>public</specifier> <name><name>Collection</name><argument_list type="generic">&lt;<argument><name>E</name></argument>&gt;</argument_list></name></type> <name>getCollection</name><parameter_list>()</parameter_list> <block>{<block_content>
            <return>return <expr><name>collection</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>Object</name></type> <name>invoke</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>proxy</name></decl></parameter>, <parameter><decl><type><name>Method</name></type> <name>method</name></decl></parameter>, <parameter><decl><type><name><name>Object</name><index>[]</index></name></type> <name>params</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>NoSuchMethodException</name></expr></argument>,
                <argument><expr><name>SecurityException</name></expr></argument>, <argument><expr><name>IllegalAccessException</name></expr></argument>, <argument><expr><name>IllegalArgumentException</name></expr></argument>, <argument><expr><name>InvocationTargetException</name></expr></argument></throws> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>method</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><literal type="string">"visit"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>clazz</name><operator>.</operator><name>isInstance</name></name><argument_list>(<argument><expr><name><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>collection</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>clazz</name><operator>.</operator><name>cast</name></name><argument_list>(<argument><expr><name><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>

            <decl_stmt><decl><type><name>Method</name></type> <name>childrenAccept</name> <init>= <expr><name><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getMethod</name><argument_list>(<argument><expr><literal type="string">"childrenAccept"</literal></expr></argument>,
                                                                   <argument><expr><name><name>JavaParserVisitor</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name><name>Object</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>childrenAccept</name><operator>.</operator><name>invoke</name></name><argument_list>(<argument><expr><name><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>JavaParserVisitor</name><operator>)</operator> <name>proxy</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <comment type="line">// TODO provide a configurable api to choose which visitors to invoke</comment>
    <comment type="line">// it makes no sense</comment>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <parameter_list type="generic">&lt;<parameter><name>E</name></parameter>&gt;</parameter_list> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>E</name></argument>&gt;</argument_list></name></type> <name>getNodes</name><parameter_list>(<parameter><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>E</name></argument>&gt;</argument_list></name></type> <name>clazz</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>javaCode</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>getNodes</name><argument_list>(<argument><expr><call><name><name>LanguageRegistry</name><operator>.</operator><name>getLanguage</name></name><argument_list>(<argument><expr><name><name>JavaLanguageModule</name><operator>.</operator><name>NAME</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getDefaultVersion</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>clazz</name></expr></argument>, <argument><expr><name>javaCode</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <parameter_list type="generic">&lt;<parameter><name>E</name></parameter>&gt;</parameter_list> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>E</name></argument>&gt;</argument_list></name></type> <name>getNodes</name><parameter_list>(<parameter><decl><type><name>LanguageVersion</name></type> <name>languageVersion</name></decl></parameter>, <parameter><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>E</name></argument>&gt;</argument_list></name></type> <name>clazz</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>javaCode</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>Collector</name><argument_list type="generic">&lt;<argument><name>E</name></argument>&gt;</argument_list></name></type> <name>coll</name> <init>= <expr><operator>new</operator> <call><name><name>Collector</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>clazz</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>LanguageVersionHandler</name></type> <name>languageVersionHandler</name> <init>= <expr><call><name><name>languageVersion</name><operator>.</operator><name>getLanguageVersionHandler</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ASTCompilationUnit</name></type> <name>cu</name> <init>= <expr><operator>(</operator><name>ASTCompilationUnit</name><operator>)</operator> <call><name><name>languageVersionHandler</name>
                <operator>.</operator><name>getParser</name></name><argument_list>(<argument><expr><call><name><name>languageVersionHandler</name><operator>.</operator><name>getDefaultParserOptions</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>parse</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>StringReader</name><argument_list>(<argument><expr><name>javaCode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>JavaParserVisitor</name></type> <name>jpv</name> <init>= <expr><operator>(</operator><name>JavaParserVisitor</name><operator>)</operator> <call><name><name>Proxy</name><operator>.</operator><name>newProxyInstance</name></name><argument_list>(<argument><expr><call><name><name>JavaParserVisitor</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getClassLoader</name></name></name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr><operator>new</operator> <name><name>Class</name><index>[]</index></name> <block>{ <expr><name><name>JavaParserVisitor</name><operator>.</operator><name>class</name></name></expr> }</block></expr></argument>, <argument><expr><name>coll</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>jpv</name><operator>.</operator><name>visit</name></name><argument_list>(<argument><expr><name>cu</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>(</operator><name><name>Set</name><argument_list type="generic">&lt;<argument><name>E</name></argument>&gt;</argument_list></name><operator>)</operator> <call><name><name>coll</name><operator>.</operator><name>getCollection</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <parameter_list type="generic">&lt;<parameter><name>E</name></parameter>&gt;</parameter_list> <name><name>List</name><argument_list type="generic">&lt;<argument><name>E</name></argument>&gt;</argument_list></name></type> <name>getOrderedNodes</name><parameter_list>(<parameter><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>E</name></argument>&gt;</argument_list></name></type> <name>clazz</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>javaCode</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>Collector</name><argument_list type="generic">&lt;<argument><name>E</name></argument>&gt;</argument_list></name></type> <name>coll</name> <init>= <expr><operator>new</operator> <call><name><name>Collector</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>clazz</name></expr></argument>, <argument><expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>E</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>LanguageVersionHandler</name></type> <name>languageVersionHandler</name> <init>= <expr><call><name><name>LanguageRegistry</name><operator>.</operator><name>getLanguage</name></name><argument_list>(<argument><expr><name><name>JavaLanguageModule</name><operator>.</operator><name>NAME</name></name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>getDefaultVersion</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getLanguageVersionHandler</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ASTCompilationUnit</name></type> <name>cu</name> <init>= <expr><operator>(</operator><name>ASTCompilationUnit</name><operator>)</operator> <call><name><name>languageVersionHandler</name>
                <operator>.</operator><name>getParser</name></name><argument_list>(<argument><expr><call><name><name>languageVersionHandler</name><operator>.</operator><name>getDefaultParserOptions</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>parse</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>StringReader</name><argument_list>(<argument><expr><name>javaCode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>JavaParserVisitor</name></type> <name>jpv</name> <init>= <expr><operator>(</operator><name>JavaParserVisitor</name><operator>)</operator> <call><name><name>Proxy</name><operator>.</operator><name>newProxyInstance</name></name><argument_list>(<argument><expr><call><name><name>JavaParserVisitor</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getClassLoader</name></name></name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr><operator>new</operator> <name><name>Class</name><index>[]</index></name> <block>{ <expr><name><name>JavaParserVisitor</name><operator>.</operator><name>class</name></name></expr> }</block></expr></argument>, <argument><expr><name>coll</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>jpv</name><operator>.</operator><name>visit</name></name><argument_list>(<argument><expr><name>cu</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>new</operator> <call><name>QualifiedNameResolver</name><argument_list>()</argument_list></call><operator>.</operator><call><name>initializeWith</name><argument_list>(<argument><expr><call><name><name>ParserTstUtil</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getClassLoader</name></name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>cu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>new</operator> <call><name>SymbolFacade</name><argument_list>()</argument_list></call><operator>.</operator><call><name>initializeWith</name><argument_list>(<argument><expr><name>cu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>new</operator> <call><name>DataFlowFacade</name><argument_list>()</argument_list></call><operator>.</operator><call><name>initializeWith</name><argument_list>(<argument><expr><call><name><name>languageVersionHandler</name><operator>.</operator><name>getDataFlowHandler</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>cu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><operator>(</operator><name><name>List</name><argument_list type="generic">&lt;<argument><name>E</name></argument>&gt;</argument_list></name><operator>)</operator> <call><name><name>coll</name><operator>.</operator><name>getCollection</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <parameter_list type="generic">&lt;<parameter><name>E</name></parameter>&gt;</parameter_list> <name>String</name></type> <name>dumpNodes</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>E</name></argument>&gt;</argument_list></name></type> <name>list</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>StringBuilder</name></type> <name>sb</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>E</name></type> <name>item</name> <range>: <expr><name>list</name></expr></range></decl></init>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"\n node["</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>item</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>index</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></for>
        <return>return <expr><call><name><name>sb</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>ASTCompilationUnit</name></type> <name>buildDFA</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>javaCode</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>LanguageVersionHandler</name></type> <name>languageVersionHandler</name> <init>= <expr><call><name><name>LanguageRegistry</name><operator>.</operator><name>getLanguage</name></name><argument_list>(<argument><expr><name><name>JavaLanguageModule</name><operator>.</operator><name>NAME</name></name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>getDefaultVersion</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getLanguageVersionHandler</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ASTCompilationUnit</name></type> <name>cu</name> <init>= <expr><operator>(</operator><name>ASTCompilationUnit</name><operator>)</operator> <call><name><name>languageVersionHandler</name>
                <operator>.</operator><name>getParser</name></name><argument_list>(<argument><expr><call><name><name>languageVersionHandler</name><operator>.</operator><name>getDefaultParserOptions</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>parse</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>StringReader</name><argument_list>(<argument><expr><name>javaCode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>JavaParserVisitor</name></type> <name>jpv</name> <init>= <expr><operator>(</operator><name>JavaParserVisitor</name><operator>)</operator> <call><name><name>Proxy</name><operator>.</operator><name>newProxyInstance</name></name><argument_list>(<argument><expr><call><name><name>JavaParserVisitor</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getClassLoader</name></name></name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr><operator>new</operator> <name><name>Class</name><index>[]</index></name> <block>{ <expr><name><name>JavaParserVisitor</name><operator>.</operator><name>class</name></name></expr> }</block></expr></argument>, <argument><expr><operator>new</operator> <call><name><name>Collector</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name><name>ASTCompilationUnit</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>jpv</name><operator>.</operator><name>visit</name></name><argument_list>(<argument><expr><name>cu</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>new</operator> <call><name>SymbolFacade</name><argument_list>()</argument_list></call><operator>.</operator><call><name>initializeWith</name><argument_list>(<argument><expr><name>cu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>new</operator> <call><name>DataFlowFacade</name><argument_list>()</argument_list></call><operator>.</operator><call><name>initializeWith</name><argument_list>(<argument><expr><call><name><name>languageVersionHandler</name><operator>.</operator><name>getDataFlowHandler</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>cu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>cu</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/** @see #parseJava(LanguageVersionHandler, String)  */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>ASTCompilationUnit</name></type> <name>parseJava13</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>code</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>parseJava</name><argument_list>(<argument><expr><call><name>getLanguageVersionHandler</name><argument_list>(<argument><expr><literal type="string">"1.3"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/** @see #parseJava(LanguageVersionHandler, String)  */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>ASTCompilationUnit</name></type> <name>parseJava14</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>code</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>parseJava</name><argument_list>(<argument><expr><call><name>getLanguageVersionHandler</name><argument_list>(<argument><expr><literal type="string">"1.4"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/** @see #parseJava(LanguageVersionHandler, String)  */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>ASTCompilationUnit</name></type> <name>parseJava15</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>code</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>parseJava</name><argument_list>(<argument><expr><call><name>getLanguageVersionHandler</name><argument_list>(<argument><expr><literal type="string">"1.5"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/** @see #parseJava(LanguageVersionHandler, String)  */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>ASTCompilationUnit</name></type> <name>parseJava17</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>code</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>parseJava</name><argument_list>(<argument><expr><call><name>getLanguageVersionHandler</name><argument_list>(<argument><expr><literal type="string">"1.7"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/** @see #parseJava(LanguageVersionHandler, String)  */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>ASTCompilationUnit</name></type> <name>parseJava18</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>code</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>parseJava</name><argument_list>(<argument><expr><call><name>getLanguageVersionHandler</name><argument_list>(<argument><expr><literal type="string">"1.8"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/** @see #parseJava(LanguageVersionHandler, String)  */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>ASTCompilationUnit</name></type> <name>parseJava9</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>code</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>parseJava</name><argument_list>(<argument><expr><call><name>getLanguageVersionHandler</name><argument_list>(<argument><expr><literal type="string">"9"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/** @see #parseJava(LanguageVersionHandler, String)  */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>ASTCompilationUnit</name></type> <name>parseJava10</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>code</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>parseJava</name><argument_list>(<argument><expr><call><name>getLanguageVersionHandler</name><argument_list>(<argument><expr><literal type="string">"10"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/** @see #parseJava(LanguageVersionHandler, String)  */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>ASTCompilationUnit</name></type> <name>parseJava13</name><parameter_list>(<parameter><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>source</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>parseJava13</name><argument_list>(<argument><expr><call><name>getSourceFromClass</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/** @see #parseJava(LanguageVersionHandler, String)  */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>ASTCompilationUnit</name></type> <name>parseJava14</name><parameter_list>(<parameter><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>source</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>parseJava14</name><argument_list>(<argument><expr><call><name>getSourceFromClass</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/** @see #parseJava(LanguageVersionHandler, String)  */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>ASTCompilationUnit</name></type> <name>parseJava15</name><parameter_list>(<parameter><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>source</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>parseJava15</name><argument_list>(<argument><expr><call><name>getSourceFromClass</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/** @see #parseJava(LanguageVersionHandler, String)  */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>ASTCompilationUnit</name></type> <name>parseJava17</name><parameter_list>(<parameter><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>source</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>parseJava17</name><argument_list>(<argument><expr><call><name>getSourceFromClass</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/** @see #parseJava(LanguageVersionHandler, String)  */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>ASTCompilationUnit</name></type> <name>parseJava18</name><parameter_list>(<parameter><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>source</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>parseJava18</name><argument_list>(<argument><expr><call><name>getSourceFromClass</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/** @see #parseJava(LanguageVersionHandler, String)  */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>ASTCompilationUnit</name></type> <name>parseJava9</name><parameter_list>(<parameter><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>source</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>parseJava9</name><argument_list>(<argument><expr><call><name>getSourceFromClass</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/** @see #parseJava(LanguageVersionHandler, String)  */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>ASTCompilationUnit</name></type> <name>parseJava10</name><parameter_list>(<parameter><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>source</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>parseJava10</name><argument_list>(<argument><expr><call><name>getSourceFromClass</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/** @see #parseJava(LanguageVersionHandler, String) */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>ASTCompilationUnit</name></type> <name>parseJavaDefaultVersion</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>source</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>parseJava</name><argument_list>(<argument><expr><call><name>getDefaultLanguageVersionHandler</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/** @see #parseJava(LanguageVersionHandler, String) */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>ASTCompilationUnit</name></type> <name>parseJavaDefaultVersion</name><parameter_list>(<parameter><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>source</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>parseJavaDefaultVersion</name><argument_list>(<argument><expr><call><name>getSourceFromClass</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>


    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>AbstractJavaHandler</name></type> <name>getLanguageVersionHandler</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>version</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><operator>(</operator><name>AbstractJavaHandler</name><operator>)</operator> <call><name><name>LanguageRegistry</name><operator>.</operator><name>getLanguage</name></name><argument_list>(<argument><expr><name><name>JavaLanguageModule</name><operator>.</operator><name>NAME</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getVersion</name><argument_list>(<argument><expr><name>version</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getLanguageVersionHandler</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>AbstractJavaHandler</name></type> <name>getDefaultLanguageVersionHandler</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><operator>(</operator><name>AbstractJavaHandler</name><operator>)</operator> <call><name><name>LanguageRegistry</name><operator>.</operator><name>getLanguage</name></name><argument_list>(<argument><expr><name><name>JavaLanguageModule</name><operator>.</operator><name>NAME</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getDefaultVersion</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getLanguageVersionHandler</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>


    <comment type="block" format="javadoc">/**
     * Parses Java code and executes the symbol table visitor.
     *
     * @param languageVersionHandler The version handler for the wanted version
     * @param code                   The source code
     *
     * @return The compilation unit
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>ASTCompilationUnit</name></type> <name>parseJava</name><parameter_list>(<parameter><decl><type><name>LanguageVersionHandler</name></type> <name>languageVersionHandler</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>code</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>ASTCompilationUnit</name></type> <name>rootNode</name> <init>= <expr><operator>(</operator><name>ASTCompilationUnit</name><operator>)</operator> <call><name><name>languageVersionHandler</name>
                <operator>.</operator><name>getParser</name></name><argument_list>(<argument><expr><call><name><name>languageVersionHandler</name><operator>.</operator><name>getDefaultParserOptions</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>parse</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>StringReader</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>languageVersionHandler</name><operator>.</operator><name>getQualifiedNameResolutionFacade</name></name><argument_list>(<argument><expr><call><name><name>ParserTstUtil</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getClassLoader</name></name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>start</name><argument_list>(<argument><expr><name>rootNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>languageVersionHandler</name><operator>.</operator><name>getSymbolFacade</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>start</name><argument_list>(<argument><expr><name>rootNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>rootNode</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>getSourceFromClass</name><parameter_list>(<parameter><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>clazz</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>sourceFile</name> <init>= <expr><call><name><name>clazz</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>replace</name><argument_list>(<argument><expr><literal type="char">'.'</literal></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">".java"</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>InputStream</name></type> <name>is</name> <init>= <expr><call><name><name>ParserTstUtil</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getClassLoader</name></name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getResourceAsStream</name><argument_list>(<argument><expr><name>sourceFile</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>is</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(
                <argument><expr><literal type="string">"Unable to find source file "</literal> <operator>+</operator> <name>sourceFile</name> <operator>+</operator> <literal type="string">" for "</literal> <operator>+</operator> <name>clazz</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>source</name></decl>;</decl_stmt>
        <try>try <block>{<block_content>
            <expr_stmt><expr><name>source</name> <operator>=</operator> <call><name><name>IOUtils</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>is</name></expr></argument>, <argument><expr><name><name>StandardCharsets</name><operator>.</operator><name>UTF_8</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
        <return>return <expr><name>source</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>ASTCompilationUnit</name></type> <name>parseAndTypeResolveJava</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>javaVersion</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>sourceCode</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>LanguageVersionHandler</name></type> <name>languageVersionHandler</name> <init>= <expr><call><name>getLanguageVersionHandler</name><argument_list>(<argument><expr><name>javaVersion</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ASTCompilationUnit</name></type> <name>rootNode</name> <init>= <expr><operator>(</operator><name>ASTCompilationUnit</name><operator>)</operator> <call><name><name>languageVersionHandler</name>
                <operator>.</operator><name>getParser</name></name><argument_list>(<argument><expr><call><name><name>languageVersionHandler</name><operator>.</operator><name>getDefaultParserOptions</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                    <operator>.</operator><call><name>parse</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>StringReader</name><argument_list>(<argument><expr><name>sourceCode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>languageVersionHandler</name><operator>.</operator><name>getQualifiedNameResolutionFacade</name></name><argument_list>(<argument><expr><call><name><name>ParserTstUtil</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getClassLoader</name></name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>start</name><argument_list>(<argument><expr><name>rootNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>languageVersionHandler</name><operator>.</operator><name>getSymbolFacade</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>start</name><argument_list>(<argument><expr><name>rootNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>languageVersionHandler</name><operator>.</operator><name>getDataFlowFacade</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>start</name><argument_list>(<argument><expr><name>rootNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>languageVersionHandler</name><operator>.</operator><name>getTypeResolutionFacade</name></name><argument_list>(<argument><expr><call><name><name>ParserTstUtil</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getClassLoader</name></name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>start</name><argument_list>(<argument><expr><name>rootNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>languageVersionHandler</name><operator>.</operator><name>getMultifileFacade</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>start</name><argument_list>(<argument><expr><name>rootNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>rootNode</name></expr>;</return>
    </block_content>}</block></function>
}</block></class>
</unit>

<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="H:\Research\TestEvolution\DataAnalysis\pmd-pmd_releases-6.20.0\pmd-pmd_releases-6.20.0\pmd-java\src\test\java\net\sourceforge\pmd\lang\java\symboltable\ScopeAndDeclarationFinderTest.java"><comment type="block" format="javadoc">/**
 * BSD-style license; for more info see http://pmd.sourceforge.net/license.html
 */</comment>

<package>package <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>java</name><operator>.</operator><name>symboltable</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Test</name></name>;</import>

<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>PMD</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>LanguageRegistry</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>java</name><operator>.</operator><name>JavaLanguageModule</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>java</name><operator>.</operator><name>ast</name><operator>.</operator><name>ASTClassOrInterfaceBody</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>java</name><operator>.</operator><name>ast</name><operator>.</operator><name>ASTClassOrInterfaceDeclaration</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>java</name><operator>.</operator><name>ast</name><operator>.</operator><name>ASTLambdaExpression</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>java</name><operator>.</operator><name>ast</name><operator>.</operator><name>ASTMethodDeclarator</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>symboltable</name><operator>.</operator><name>NameDeclaration</name></name>;</import>

<class><specifier>public</specifier> class <name>ScopeAndDeclarationFinderTest</name> <super_list><extends>extends <super><name>STBBaseTst</name></super></extends></super_list> <block>{

    <comment type="block" format="javadoc">/**
     * Unit test for https://sourceforge.net/p/pmd/bugs/1317/
     */</comment>
    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testJava8LambdaScoping</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>source</name> <init>= <expr><literal type="string">"public class MultipleLambdas {\n"</literal>
                <operator>+</operator> <literal type="string">"  Observer a = (o, arg) -&gt; System.out.println(\"a:\" + arg);\n"</literal>
                <operator>+</operator> <literal type="string">"  Observer b = (o, arg) -&gt; System.out.println(\"b:\" + arg);\n"</literal> <operator>+</operator> <literal type="string">"}"</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>parseCode</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><call><name><name>LanguageRegistry</name><operator>.</operator><name>getLanguage</name></name><argument_list>(<argument><expr><name><name>JavaLanguageModule</name><operator>.</operator><name>NAME</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getVersion</name><argument_list>(<argument><expr><literal type="string">"1.8"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ASTLambdaExpression</name></argument>&gt;</argument_list></name></type> <name>lambdas</name> <init>= <expr><call><name><name>acu</name><operator>.</operator><name>findDescendantsOfType</name></name><argument_list>(<argument><expr><name><name>ASTLambdaExpression</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name><name>lambdas</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>LocalScope</name></type> <name>scope1</name> <init>= <expr><operator>(</operator><name>LocalScope</name><operator>)</operator> <call><name><name>lambdas</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getScope</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>LocalScope</name></type> <name>scope2</name> <init>= <expr><operator>(</operator><name>LocalScope</name><operator>)</operator> <call><name><name>lambdas</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getScope</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertNotSame</name></name><argument_list>(<argument><expr><name>scope1</name></expr></argument>, <argument><expr><name>scope2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for>for <control>(<init><decl><type><name>ASTLambdaExpression</name></type> <name>l</name> <range>: <expr><name>lambdas</name></expr></range></decl></init>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>LocalScope</name></type> <name>scope</name> <init>= <expr><operator>(</operator><name>LocalScope</name><operator>)</operator> <call><name><name>l</name><operator>.</operator><name>getScope</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name><name>scope</name><operator>.</operator><name>getVariableDeclarations</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertTrue</name></name><argument_list>(<argument><expr><call><name><name>scope</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>JavaNameOccurrence</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="string">"o"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertTrue</name></name><argument_list>(<argument><expr><call><name><name>scope</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>JavaNameOccurrence</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="string">"arg"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>NameDeclaration</name></argument>&gt;</argument_list></name></type> <name>declarations</name> <init>= <expr><call><name><name>scope</name><operator>.</operator><name>findVariableHere</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>JavaNameOccurrence</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="string">"arg"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>declarations</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>NameDeclaration</name></type> <name>decl</name> <init>= <expr><call><name><name>declarations</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>next</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>scope</name><operator>.</operator><name>getVariableDeclarations</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name>decl</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testAnnonInnerClassScoping</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>source</name> <init>= <expr><literal type="string">"public class Foo {"</literal> <operator>+</operator> <name><name>PMD</name><operator>.</operator><name>EOL</name></name>
                <operator>+</operator> <literal type="string">"  public static final Creator&lt;Foo&gt; CREATOR = new Creator&lt;Foo&gt;() {"</literal> <operator>+</operator> <name><name>PMD</name><operator>.</operator><name>EOL</name></name>
                <operator>+</operator> <literal type="string">"    @Override public Foo createFromParcel(Parcel source) {"</literal> <operator>+</operator> <name><name>PMD</name><operator>.</operator><name>EOL</name></name>
                <operator>+</operator> <literal type="string">"      return new Foo();"</literal> <operator>+</operator> <name><name>PMD</name><operator>.</operator><name>EOL</name></name>
                <operator>+</operator> <literal type="string">"    }"</literal> <operator>+</operator> <name><name>PMD</name><operator>.</operator><name>EOL</name></name>
                <operator>+</operator> <literal type="string">"    @Override public Foo[] newArray(int size) {"</literal> <operator>+</operator> <name><name>PMD</name><operator>.</operator><name>EOL</name></name>
                <operator>+</operator> <literal type="string">"      return new Foo[size];"</literal> <operator>+</operator> <name><name>PMD</name><operator>.</operator><name>EOL</name></name>
                <operator>+</operator> <literal type="string">"    }"</literal> <operator>+</operator> <name><name>PMD</name><operator>.</operator><name>EOL</name></name>
                <operator>+</operator> <literal type="string">"  };"</literal> <operator>+</operator> <name><name>PMD</name><operator>.</operator><name>EOL</name></name>
                <operator>+</operator> <literal type="string">"}"</literal> <operator>+</operator> <name><name>PMD</name><operator>.</operator><name>EOL</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>parseCode</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><call><name><name>LanguageRegistry</name><operator>.</operator><name>getLanguage</name></name><argument_list>(<argument><expr><name><name>JavaLanguageModule</name><operator>.</operator><name>NAME</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getVersion</name><argument_list>(<argument><expr><literal type="string">"1.6"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>ClassScope</name></type> <name>cs</name> <init>= <expr><operator>(</operator><name>ClassScope</name><operator>)</operator> <call><name><name>acu</name><operator>.</operator><name>getFirstDescendantOfType</name></name><argument_list>(<argument><expr><name><name>ASTClassOrInterfaceDeclaration</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getScope</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>cs</name><operator>.</operator><name>getClassDeclarations</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// There should be 1 anonymous class</comment>

        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ASTMethodDeclarator</name></argument>&gt;</argument_list></name></type> <name>methods</name> <init>= <expr><call><name><name>acu</name><operator>.</operator><name>getFirstDescendantOfType</name></name><argument_list>(<argument><expr><name><name>ASTClassOrInterfaceBody</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call> <comment type="line">// outer class</comment>
                <operator>.</operator><call><name>getFirstDescendantOfType</name><argument_list>(<argument><expr><name><name>ASTClassOrInterfaceBody</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call> <comment type="line">// inner class</comment>
                <operator>.</operator><call><name>findDescendantsOfType</name><argument_list>(<argument><expr><name><name>ASTMethodDeclarator</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="line">// inner class methods</comment>
        <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name><name>methods</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>ClassScope</name></type> <name>scope1</name> <init>= <expr><call><name><name>methods</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getScope</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getEnclosingScope</name><argument_list>(<argument><expr><name><name>ClassScope</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ClassScope</name></type> <name>scope2</name> <init>= <expr><call><name><name>methods</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getScope</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getEnclosingScope</name><argument_list>(<argument><expr><name><name>ClassScope</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertSame</name></name><argument_list>(<argument><expr><name>scope1</name></expr></argument>, <argument><expr><name>scope2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>
}</block></class>
</unit>

<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="H:\Research\TestEvolution\DataAnalysis\pmd-pmd_releases-6.20.0\pmd-pmd_releases-6.20.0\pmd-java\src\test\java\net\sourceforge\pmd\lang\java\dfa\DAAPathFinderTest.java"><comment type="block" format="javadoc">/**
 * BSD-style license; for more info see http://pmd.sourceforge.net/license.html
 */</comment>

<package>package <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>java</name><operator>.</operator><name>dfa</name></name>;</package>

<import>import static <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>java</name><operator>.</operator><name>ParserTstUtil</name><operator>.</operator><name>getOrderedNodes</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Test</name></name>;</import>

<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>PMD</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>dfa</name><operator>.</operator><name>pathfinder</name><operator>.</operator><name>CurrentPath</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>dfa</name><operator>.</operator><name>pathfinder</name><operator>.</operator><name>DAAPathFinder</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>dfa</name><operator>.</operator><name>pathfinder</name><operator>.</operator><name>Executable</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>java</name><operator>.</operator><name>ast</name><operator>.</operator><name>ASTMethodDeclarator</name></name>;</import>

<class><specifier>public</specifier> class <name>DAAPathFinderTest</name> <super_list><implements>implements <super><name>Executable</name></super></implements></super_list> <block>{

    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testTwoUpdateDefs</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>ASTMethodDeclarator</name></type> <name>meth</name> <init>= <expr><call><name>getOrderedNodes</name><argument_list>(<argument><expr><name><name>ASTMethodDeclarator</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name>TWO_UPDATE_DEFS</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>DAAPathFinder</name></type> <name>a</name> <init>= <expr><operator>new</operator> <call><name>DAAPathFinder</name><argument_list>(<argument><expr><call><name><name>meth</name><operator>.</operator><name>getDataFlowNode</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getFlow</name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// a.run();</comment>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>CurrentPath</name></type> <name>path</name></decl></parameter>)</parameter_list> <block>{<block_content>
    </block_content>}</block></function>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>TWO_UPDATE_DEFS</name> <init>= <expr><literal type="string">"class Foo {"</literal> <operator>+</operator> <name><name>PMD</name><operator>.</operator><name>EOL</name></name> <operator>+</operator> <literal type="string">" void bar(int x) {"</literal> <operator>+</operator> <name><name>PMD</name><operator>.</operator><name>EOL</name></name>
            <operator>+</operator> <literal type="string">"  for (int i=0; i&lt;10; i++, j--) {}"</literal> <operator>+</operator> <name><name>PMD</name><operator>.</operator><name>EOL</name></name> <operator>+</operator> <literal type="string">" }"</literal> <operator>+</operator> <name><name>PMD</name><operator>.</operator><name>EOL</name></name> <operator>+</operator> <literal type="string">"}"</literal></expr></init></decl>;</decl_stmt>
}</block></class>
</unit>

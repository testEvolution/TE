<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="H:\Research\TestEvolution\DataAnalysis\pmd-pmd_releases-6.20.0\pmd-pmd_releases-6.20.0\pmd-java\src\test\java\net\sourceforge\pmd\lang\java\rule\XPathRuleTest.java"><comment type="block" format="javadoc">/**
 * BSD-style license; for more info see http://pmd.sourceforge.net/license.html
 */</comment>

<package>package <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>java</name><operator>.</operator><name>rule</name></name>;</package>

<import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name><operator>.</operator><name>assertEquals</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>StringReader</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Iterator</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Before</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Test</name></name>;</import>

<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>PMD</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>PMDException</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>Report</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>Rule</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>RuleContext</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>RuleSet</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>RuleSetFactory</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>RuleSets</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>RuleViolation</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>LanguageRegistry</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>LanguageVersion</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>Parser</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>ParserOptions</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>ast</name><operator>.</operator><name>Node</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>java</name><operator>.</operator><name>JavaLanguageModule</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>java</name><operator>.</operator><name>ast</name><operator>.</operator><name>ASTCompilationUnit</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>rule</name><operator>.</operator><name>XPathRule</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>rule</name><operator>.</operator><name>xpath</name><operator>.</operator><name>JaxenXPathRuleQuery</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>rule</name><operator>.</operator><name>xpath</name><operator>.</operator><name>SaxonXPathRuleQuery</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>rule</name><operator>.</operator><name>xpath</name><operator>.</operator><name>XPathRuleQuery</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>properties</name><operator>.</operator><name>PropertyDescriptor</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>properties</name><operator>.</operator><name>StringMultiProperty</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>properties</name><operator>.</operator><name>StringProperty</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>testframework</name><operator>.</operator><name>RuleTst</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author daniels
 */</comment>
<class><specifier>public</specifier> class <name>XPathRuleTest</name> <super_list><extends>extends <super><name>RuleTst</name></super></extends></super_list> <block>{

    <decl_stmt><decl><type><name>XPathRule</name></type> <name>rule</name></decl>;</decl_stmt>

    <function><annotation>@<name>Before</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>setUp</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>rule</name> <operator>=</operator> <operator>new</operator> <call><name>XPathRule</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>rule</name><operator>.</operator><name>setLanguage</name></name><argument_list>(<argument><expr><call><name><name>LanguageRegistry</name><operator>.</operator><name>getLanguage</name></name><argument_list>(<argument><expr><name><name>JavaLanguageModule</name><operator>.</operator><name>NAME</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>rule</name><operator>.</operator><name>setMessage</name></name><argument_list>(<argument><expr><literal type="string">"XPath Rule Failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testPluginname</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><call><name><name>rule</name><operator>.</operator><name>setXPath</name></name><argument_list>(<argument><expr><literal type="string">"//VariableDeclaratorId[string-length(@Image) &lt; 3]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>rule</name><operator>.</operator><name>setMessage</name></name><argument_list>(<argument><expr><literal type="string">"{0}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Report</name></type> <name>report</name> <init>= <expr><call><name>getReportForTestString</name><argument_list>(<argument><expr><name>rule</name></expr></argument>, <argument><expr><name>TEST1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>RuleViolation</name></type> <name>rv</name> <init>= <expr><call><name><name>report</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>next</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"a"</literal></expr></argument>, <argument><expr><call><name><name>rv</name><operator>.</operator><name>getDescription</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>


    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testXPathMultiProperty</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><call><name><name>rule</name><operator>.</operator><name>setXPath</name></name><argument_list>(<argument><expr><literal type="string">"//VariableDeclaratorId[@Image=$forbiddenNames]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>rule</name><operator>.</operator><name>setMessage</name></name><argument_list>(<argument><expr><literal type="string">"Avoid vars"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>rule</name><operator>.</operator><name>setVersion</name></name><argument_list>(<argument><expr><name><name>XPathRuleQuery</name><operator>.</operator><name>XPATH_2_0</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>StringMultiProperty</name></type> <name>varDescriptor</name>
            <init>= <expr><call><name><name>StringMultiProperty</name><operator>.</operator><name>named</name></name><argument_list>(<argument><expr><literal type="string">"forbiddenNames"</literal></expr></argument>)</argument_list></call>
                                 <operator>.</operator><call><name>desc</name><argument_list>(<argument><expr><literal type="string">"Forbidden names"</literal></expr></argument>)</argument_list></call>
                                 <operator>.</operator><call><name>defaultValues</name><argument_list>(<argument><expr><literal type="string">"forbid1"</literal></expr></argument>, <argument><expr><literal type="string">"forbid2"</literal></expr></argument>)</argument_list></call>
                                 <operator>.</operator><call><name>delim</name><argument_list>(<argument><expr><literal type="char">'$'</literal></expr></argument>)</argument_list></call>
                                 <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>rule</name><operator>.</operator><name>definePropertyDescriptor</name></name><argument_list>(<argument><expr><name>varDescriptor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Report</name></type> <name>report</name> <init>= <expr><call><name>getReportForTestString</name><argument_list>(<argument><expr><name>rule</name></expr></argument>, <argument><expr><name>TEST3</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Iterator</name><argument_list type="generic">&lt;<argument><name>RuleViolation</name></argument>&gt;</argument_list></name></type> <name>rv</name> <init>= <expr><call><name><name>report</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init>;</init> <condition><expr><call><name><name>rv</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name><name>rv</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>


    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testVariables</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><call><name><name>rule</name><operator>.</operator><name>setXPath</name></name><argument_list>(<argument><expr><literal type="string">"//VariableDeclaratorId[@Image=$var]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>rule</name><operator>.</operator><name>setMessage</name></name><argument_list>(<argument><expr><literal type="string">"Avoid vars"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>StringProperty</name></type> <name>varDescriptor</name> <init>= <expr><operator>new</operator> <call><name>StringProperty</name><argument_list>(<argument><expr><literal type="string">"var"</literal></expr></argument>, <argument><expr><literal type="string">"Test var"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>rule</name><operator>.</operator><name>definePropertyDescriptor</name></name><argument_list>(<argument><expr><name>varDescriptor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>rule</name><operator>.</operator><name>setProperty</name></name><argument_list>(<argument><expr><name>varDescriptor</name></expr></argument>, <argument><expr><literal type="string">"fiddle"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Report</name></type> <name>report</name> <init>= <expr><call><name>getReportForTestString</name><argument_list>(<argument><expr><name>rule</name></expr></argument>, <argument><expr><name>TEST2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>RuleViolation</name></type> <name>rv</name> <init>= <expr><call><name><name>report</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>next</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><call><name><name>rv</name><operator>.</operator><name>getBeginLine</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testFnPrefixOnSaxon</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><call><name><name>rule</name><operator>.</operator><name>setXPath</name></name><argument_list>(<argument><expr><literal type="string">"//VariableDeclaratorId[fn:matches(@Image, 'fiddle')]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>rule</name><operator>.</operator><name>setVersion</name></name><argument_list>(<argument><expr><name><name>XPathRuleQuery</name><operator>.</operator><name>XPATH_2_0</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Report</name></type> <name>report</name> <init>= <expr><call><name>getReportForTestString</name><argument_list>(<argument><expr><name>rule</name></expr></argument>, <argument><expr><name>TEST2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>RuleViolation</name></type> <name>rv</name> <init>= <expr><call><name><name>report</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>next</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><call><name><name>rv</name><operator>.</operator><name>getBeginLine</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testNoFnPrefixOnSaxon</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><call><name><name>rule</name><operator>.</operator><name>setXPath</name></name><argument_list>(<argument><expr><literal type="string">"//VariableDeclaratorId[matches(@Image, 'fiddle')]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>rule</name><operator>.</operator><name>setVersion</name></name><argument_list>(<argument><expr><name><name>XPathRuleQuery</name><operator>.</operator><name>XPATH_2_0</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Report</name></type> <name>report</name> <init>= <expr><call><name>getReportForTestString</name><argument_list>(<argument><expr><name>rule</name></expr></argument>, <argument><expr><name>TEST2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>RuleViolation</name></type> <name>rv</name> <init>= <expr><call><name><name>report</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>next</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><call><name><name>rv</name><operator>.</operator><name>getBeginLine</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>


    <comment type="block" format="javadoc">/**
     * Test for problem reported in bug #1219 PrimarySuffix/@Image does not work
     * in some cases in xpath 2.0
     * 
     * @throws Exception
     *             any error
     */</comment>
    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testImageOfPrimarySuffix</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>SUFFIX</name> <init>= <expr><literal type="string">"import java.io.File;\n"</literal> <operator>+</operator> <literal type="string">"\n"</literal> <operator>+</operator> <literal type="string">"public class TestSuffix {\n"</literal>
                <operator>+</operator> <literal type="string">"    public static void main(String args[]) {\n"</literal> <operator>+</operator> <literal type="string">"        new File(\"subdirectory\").list();\n"</literal>
                <operator>+</operator> <literal type="string">"    }\n"</literal> <operator>+</operator> <literal type="string">"}"</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>LanguageVersion</name></type> <name>language</name> <init>= <expr><call><name><name>LanguageRegistry</name><operator>.</operator><name>getLanguage</name></name><argument_list>(<argument><expr><name><name>JavaLanguageModule</name><operator>.</operator><name>NAME</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getDefaultVersion</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ParserOptions</name></type> <name>parserOptions</name> <init>= <expr><call><name><name>language</name><operator>.</operator><name>getLanguageVersionHandler</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDefaultParserOptions</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Parser</name></type> <name>parser</name> <init>= <expr><call><name><name>language</name><operator>.</operator><name>getLanguageVersionHandler</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getParser</name><argument_list>(<argument><expr><name>parserOptions</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ASTCompilationUnit</name></type> <name>cu</name> <init>= <expr><operator>(</operator><name>ASTCompilationUnit</name><operator>)</operator> <call><name><name>parser</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><literal type="string">"test"</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>StringReader</name><argument_list>(<argument><expr><name>SUFFIX</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>RuleContext</name></type> <name>ruleContext</name> <init>= <expr><operator>new</operator> <call><name>RuleContext</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>ruleContext</name><operator>.</operator><name>setLanguageVersion</name></name><argument_list>(<argument><expr><name>language</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>xpath</name> <init>= <expr><literal type="string">"//PrimarySuffix[@Image='list']"</literal></expr></init></decl>;</decl_stmt>

        <comment type="line">// XPATH version 1.0</comment>
        <decl_stmt><decl><type><name>XPathRuleQuery</name></type> <name>xpathRuleQuery</name> <init>= <expr><operator>new</operator> <call><name>JaxenXPathRuleQuery</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>xpathRuleQuery</name><operator>.</operator><name>setXPath</name></name><argument_list>(<argument><expr><name>xpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>xpathRuleQuery</name><operator>.</operator><name>setProperties</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name><name>PropertyDescriptor</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>xpathRuleQuery</name><operator>.</operator><name>setVersion</name></name><argument_list>(<argument><expr><name><name>XPathRuleQuery</name><operator>.</operator><name>XPATH_1_0</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Node</name></argument>&gt;</argument_list></name></type> <name>nodes</name> <init>= <expr><call><name><name>xpathRuleQuery</name><operator>.</operator><name>evaluate</name></name><argument_list>(<argument><expr><name>cu</name></expr></argument>, <argument><expr><name>ruleContext</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>nodes</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// XPATH version 1.0 Compatibility</comment>
        <expr_stmt><expr><name>xpathRuleQuery</name> <operator>=</operator> <operator>new</operator> <call><name>SaxonXPathRuleQuery</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>xpathRuleQuery</name><operator>.</operator><name>setXPath</name></name><argument_list>(<argument><expr><name>xpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>xpathRuleQuery</name><operator>.</operator><name>setProperties</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name><name>PropertyDescriptor</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>xpathRuleQuery</name><operator>.</operator><name>setVersion</name></name><argument_list>(<argument><expr><name><name>XPathRuleQuery</name><operator>.</operator><name>XPATH_1_0_COMPATIBILITY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>nodes</name> <operator>=</operator> <call><name><name>xpathRuleQuery</name><operator>.</operator><name>evaluate</name></name><argument_list>(<argument><expr><name>cu</name></expr></argument>, <argument><expr><name>ruleContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>nodes</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// XPATH version 2.0</comment>
        <expr_stmt><expr><name>xpathRuleQuery</name> <operator>=</operator> <operator>new</operator> <call><name>SaxonXPathRuleQuery</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>xpathRuleQuery</name><operator>.</operator><name>setXPath</name></name><argument_list>(<argument><expr><name>xpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>xpathRuleQuery</name><operator>.</operator><name>setProperties</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name><name>PropertyDescriptor</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>xpathRuleQuery</name><operator>.</operator><name>setVersion</name></name><argument_list>(<argument><expr><name><name>XPathRuleQuery</name><operator>.</operator><name>XPATH_2_0</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>nodes</name> <operator>=</operator> <call><name><name>xpathRuleQuery</name><operator>.</operator><name>evaluate</name></name><argument_list>(<argument><expr><name>cu</name></expr></argument>, <argument><expr><name>ruleContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>nodes</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Following sibling check: See https://sourceforge.net/p/pmd/bugs/1209/
     * 
     * @throws Exception
     *             any error
     */</comment>
    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testFollowingSibling</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>SOURCE</name> <init>= <expr><literal type="string">"public class dummy {\n"</literal> <operator>+</operator> <literal type="string">"  public String toString() {\n"</literal>
                <operator>+</operator> <literal type="string">"    String test = \"bad example\";\n"</literal> <operator>+</operator> <literal type="string">"    test = \"a\";\n"</literal> <operator>+</operator> <literal type="string">"    return test;\n"</literal> <operator>+</operator> <literal type="string">"  }\n"</literal> <operator>+</operator> <literal type="string">"}"</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>LanguageVersion</name></type> <name>language</name> <init>= <expr><call><name><name>LanguageRegistry</name><operator>.</operator><name>getLanguage</name></name><argument_list>(<argument><expr><name><name>JavaLanguageModule</name><operator>.</operator><name>NAME</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getDefaultVersion</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ParserOptions</name></type> <name>parserOptions</name> <init>= <expr><call><name><name>language</name><operator>.</operator><name>getLanguageVersionHandler</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDefaultParserOptions</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Parser</name></type> <name>parser</name> <init>= <expr><call><name><name>language</name><operator>.</operator><name>getLanguageVersionHandler</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getParser</name><argument_list>(<argument><expr><name>parserOptions</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ASTCompilationUnit</name></type> <name>cu</name> <init>= <expr><operator>(</operator><name>ASTCompilationUnit</name><operator>)</operator> <call><name><name>parser</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><literal type="string">"test"</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>StringReader</name><argument_list>(<argument><expr><name>SOURCE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>RuleContext</name></type> <name>ruleContext</name> <init>= <expr><operator>new</operator> <call><name>RuleContext</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>ruleContext</name><operator>.</operator><name>setLanguageVersion</name></name><argument_list>(<argument><expr><name>language</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>xpath</name> <init>= <expr><literal type="string">"//Block/BlockStatement/following-sibling::BlockStatement"</literal></expr></init></decl>;</decl_stmt>

        <comment type="line">// XPATH version 1.0</comment>
        <decl_stmt><decl><type><name>XPathRuleQuery</name></type> <name>xpathRuleQuery</name> <init>= <expr><operator>new</operator> <call><name>JaxenXPathRuleQuery</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>xpathRuleQuery</name><operator>.</operator><name>setXPath</name></name><argument_list>(<argument><expr><name>xpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>xpathRuleQuery</name><operator>.</operator><name>setProperties</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name><name>PropertyDescriptor</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>xpathRuleQuery</name><operator>.</operator><name>setVersion</name></name><argument_list>(<argument><expr><name><name>XPathRuleQuery</name><operator>.</operator><name>XPATH_1_0</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Node</name></argument>&gt;</argument_list></name></type> <name>nodes</name> <init>= <expr><call><name><name>xpathRuleQuery</name><operator>.</operator><name>evaluate</name></name><argument_list>(<argument><expr><name>cu</name></expr></argument>, <argument><expr><name>ruleContext</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name><name>nodes</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><call><name><name>nodes</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getBeginLine</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><call><name><name>nodes</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getBeginLine</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// XPATH version 2.0</comment>
        <expr_stmt><expr><name>xpathRuleQuery</name> <operator>=</operator> <operator>new</operator> <call><name>SaxonXPathRuleQuery</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>xpathRuleQuery</name><operator>.</operator><name>setXPath</name></name><argument_list>(<argument><expr><name>xpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>xpathRuleQuery</name><operator>.</operator><name>setProperties</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name><name>PropertyDescriptor</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>xpathRuleQuery</name><operator>.</operator><name>setVersion</name></name><argument_list>(<argument><expr><name><name>XPathRuleQuery</name><operator>.</operator><name>XPATH_2_0</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>nodes</name> <operator>=</operator> <call><name><name>xpathRuleQuery</name><operator>.</operator><name>evaluate</name></name><argument_list>(<argument><expr><name>cu</name></expr></argument>, <argument><expr><name>ruleContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name><name>nodes</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><call><name><name>nodes</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getBeginLine</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><call><name><name>nodes</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getBeginLine</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>Report</name></type> <name>getReportForTestString</name><parameter_list>(<parameter><decl><type><name>Rule</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>test</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>PMDException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>PMD</name></type> <name>p</name> <init>= <expr><operator>new</operator> <call><name>PMD</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>RuleContext</name></type> <name>ctx</name> <init>= <expr><operator>new</operator> <call><name>RuleContext</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Report</name></type> <name>report</name> <init>= <expr><operator>new</operator> <call><name>Report</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>ctx</name><operator>.</operator><name>setReport</name></name><argument_list>(<argument><expr><name>report</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ctx</name><operator>.</operator><name>setSourceCodeFile</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><literal type="string">"n/a"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>RuleSet</name></type> <name>rules</name> <init>= <expr><operator>new</operator> <call><name>RuleSetFactory</name><argument_list>()</argument_list></call><operator>.</operator><call><name>createSingleRuleRuleSet</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>p</name><operator>.</operator><name>getSourceCodeProcessor</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>processSourceCode</name><argument_list>(<argument><expr><operator>new</operator> <call><name>StringReader</name><argument_list>(<argument><expr><name>test</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>RuleSets</name><argument_list>(<argument><expr><name>rules</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>report</name></expr>;</return>
    </block_content>}</block></function>


    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>TEST1</name> <init>= <expr><literal type="string">"public class Foo {"</literal> <operator>+</operator> <name><name>PMD</name><operator>.</operator><name>EOL</name></name> <operator>+</operator> <literal type="string">" int a;"</literal> <operator>+</operator> <name><name>PMD</name><operator>.</operator><name>EOL</name></name> <operator>+</operator> <literal type="string">"}"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>TEST2</name> <init>= <expr><literal type="string">"public class Foo {"</literal> <operator>+</operator> <name><name>PMD</name><operator>.</operator><name>EOL</name></name> <operator>+</operator> <literal type="string">" int faddle;"</literal> <operator>+</operator> <name><name>PMD</name><operator>.</operator><name>EOL</name></name> <operator>+</operator> <literal type="string">" int fiddle;"</literal>
            <operator>+</operator> <name><name>PMD</name><operator>.</operator><name>EOL</name></name> <operator>+</operator> <literal type="string">"}"</literal></expr></init></decl>;</decl_stmt>


    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>TEST3</name> <init>= <expr><literal type="string">"public class Foo {"</literal> <operator>+</operator> <name><name>PMD</name><operator>.</operator><name>EOL</name></name> <operator>+</operator> <literal type="string">" int forbid1; int forbid2; int forbid1$forbid2;"</literal> <operator>+</operator> <name><name>PMD</name><operator>.</operator><name>EOL</name></name> <operator>+</operator> <literal type="string">"}"</literal></expr></init></decl>;</decl_stmt>

}</block></class>
</unit>

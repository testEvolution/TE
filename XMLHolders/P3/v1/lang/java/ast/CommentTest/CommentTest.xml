<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="H:\Research\TestEvolution\DataAnalysis\pmd-pmd_releases-6.20.0\pmd-pmd_releases-6.20.0\pmd-java\src\test\java\net\sourceforge\pmd\lang\java\ast\CommentTest.java"><comment type="block" format="javadoc">/**
 * BSD-style license; for more info see http://pmd.sourceforge.net/license.html
 */</comment>

<package>package <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>java</name><operator>.</operator><name>ast</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>lang3</name><operator>.</operator><name>StringUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Test</name></name>;</import>

<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>PMD</name></name>;</import>

<class><specifier>public</specifier> class <name>CommentTest</name> <block>{
    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testMultiLinesInSingleLine</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>comment</name> <init>= <expr><literal type="string">"/* single line. */"</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>filtered</name> <init>= <expr><call><name>filter</name><argument_list>(<argument><expr><name>comment</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>lineCount</name><argument_list>(<argument><expr><name>filtered</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><literal type="string">"single line."</literal></expr></argument>, <argument><expr><name>filtered</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testMultiLinesInSingleLineSimple</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>comment</name> <init>= <expr><literal type="string">"// single line."</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>filtered</name> <init>= <expr><call><name>filter</name><argument_list>(<argument><expr><name>comment</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>lineCount</name><argument_list>(<argument><expr><name>filtered</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><literal type="string">"single line."</literal></expr></argument>, <argument><expr><name>filtered</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testMultiLinesInSingleLineFormal</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>comment</name> <init>= <expr><literal type="string">"/** single line. */"</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>filtered</name> <init>= <expr><call><name>filter</name><argument_list>(<argument><expr><name>comment</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>lineCount</name><argument_list>(<argument><expr><name>filtered</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><literal type="string">"single line."</literal></expr></argument>, <argument><expr><name>filtered</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testMultiLinesInMultiLine</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>comment</name> <init>=
                  <expr><literal type="string">"/*\n"</literal>
                <operator>+</operator> <literal type="string">" * line 1\n"</literal>
                <operator>+</operator> <literal type="string">" * line 2\n"</literal>
                <operator>+</operator> <literal type="string">" */\n"</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>filtered</name> <init>= <expr><call><name>filter</name><argument_list>(<argument><expr><name>comment</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name>lineCount</name><argument_list>(<argument><expr><name>filtered</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><literal type="string">"line 1"</literal> <operator>+</operator> <name><name>PMD</name><operator>.</operator><name>EOL</name></name> <operator>+</operator> <literal type="string">"line 2"</literal></expr></argument>, <argument><expr><name>filtered</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testMultiLinesInMultiLineCrLf</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>comment</name> <init>=
                  <expr><literal type="string">"/*\r\n"</literal>
                <operator>+</operator> <literal type="string">" * line 1\r\n"</literal>
                <operator>+</operator> <literal type="string">" * line 2\r\n"</literal>
                <operator>+</operator> <literal type="string">" */\r\n"</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>filtered</name> <init>= <expr><call><name>filter</name><argument_list>(<argument><expr><name>comment</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name>lineCount</name><argument_list>(<argument><expr><name>filtered</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><literal type="string">"line 1"</literal> <operator>+</operator> <name><name>PMD</name><operator>.</operator><name>EOL</name></name> <operator>+</operator> <literal type="string">"line 2"</literal></expr></argument>, <argument><expr><name>filtered</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testMultiLinesInMultiLineFormal</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>comment</name> <init>=
                  <expr><literal type="string">"/**\n"</literal>
                <operator>+</operator> <literal type="string">" * line 1\n"</literal>
                <operator>+</operator> <literal type="string">" * line 2\n"</literal>
                <operator>+</operator> <literal type="string">" */\n"</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>filtered</name> <init>= <expr><call><name>filter</name><argument_list>(<argument><expr><name>comment</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name>lineCount</name><argument_list>(<argument><expr><name>filtered</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><literal type="string">"line 1"</literal> <operator>+</operator> <name><name>PMD</name><operator>.</operator><name>EOL</name></name> <operator>+</operator> <literal type="string">"line 2"</literal></expr></argument>, <argument><expr><name>filtered</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testMultiLinesInMultiLineFormalCrLf</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>comment</name> <init>=
                  <expr><literal type="string">"/**\r\n"</literal>
                <operator>+</operator> <literal type="string">" * line 1\r\n"</literal>
                <operator>+</operator> <literal type="string">" * line 2\r\n"</literal>
                <operator>+</operator> <literal type="string">" */\r\n"</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>filtered</name> <init>= <expr><call><name>filter</name><argument_list>(<argument><expr><name>comment</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name>lineCount</name><argument_list>(<argument><expr><name>filtered</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><literal type="string">"line 1"</literal> <operator>+</operator> <name><name>PMD</name><operator>.</operator><name>EOL</name></name> <operator>+</operator> <literal type="string">"line 2"</literal></expr></argument>, <argument><expr><name>filtered</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testMultiLinesInMultiLineNoAsteriskEmpty</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>comment</name> <init>=
                  <expr><literal type="string">"/**\n"</literal>
                <operator>+</operator> <literal type="string">" * line 1\n"</literal>
                <operator>+</operator> <literal type="string">"line 2\n"</literal>
                <operator>+</operator> <literal type="string">"\n"</literal>
                <operator>+</operator> <literal type="string">" */\n"</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>filtered</name> <init>= <expr><call><name>filter</name><argument_list>(<argument><expr><name>comment</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name>lineCount</name><argument_list>(<argument><expr><name>filtered</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><literal type="string">"line 1"</literal> <operator>+</operator> <name><name>PMD</name><operator>.</operator><name>EOL</name></name> <operator>+</operator> <literal type="string">"line 2"</literal></expr></argument>, <argument><expr><name>filtered</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>String</name></type> <name>filter</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>comment</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Token</name></type> <name>t</name> <init>= <expr><operator>new</operator> <call><name>Token</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>t</name><operator>.</operator><name>image</name></name> <operator>=</operator> <name>comment</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Comment</name></type> <name>node</name> <init>= <expr><operator>new</operator> <class><super><name>Comment</name></super><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list> <block>{
        }</block></class></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>node</name><operator>.</operator><name>getFilteredComment</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>int</name></type> <name>lineCount</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>filtered</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>StringUtils</name><operator>.</operator><name>countMatches</name></name><argument_list>(<argument><expr><name>filtered</name></expr></argument>, <argument><expr><name><name>PMD</name><operator>.</operator><name>EOL</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</return>
    </block_content>}</block></function>
}</block></class>
</unit>

<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="H:\Research\TestEvolution\DataAnalysis\pmd-pmd_releases-6.20.0\pmd-pmd_releases-6.20.0\pmd-java\src\test\java\net\sourceforge\pmd\lang\java\metrics\impl\AllMetricsTest.java"><comment type="block" format="javadoc">/**
 * BSD-style license; for more info see http://pmd.sourceforge.net/license.html
 */</comment>

<package>package <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>java</name><operator>.</operator><name>metrics</name><operator>.</operator><name>impl</name></name>;</package>

<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>Rule</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>java</name><operator>.</operator><name>metrics</name><operator>.</operator><name>MetricsHook</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>testframework</name><operator>.</operator><name>SimpleAggregatorTst</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Executes the metrics testing rules.
 *
 * @author ClÃ©ment Fournier
 */</comment>
<class><specifier>public</specifier> class <name>AllMetricsTest</name> <super_list><extends>extends <super><name>SimpleAggregatorTst</name></super></extends></super_list> <block>{


    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>RULESET</name> <init>= <expr><literal type="string">"rulesets/java/metrics_test.xml"</literal></expr></init></decl>;</decl_stmt>


    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>protected</specifier> <name>Rule</name></type> <name>reinitializeRule</name><parameter_list>(<parameter><decl><type><name>Rule</name></type> <name>rule</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>MetricsHook</name><operator>.</operator><name>reset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>rule</name></expr>;</return>
    </block_content>}</block></function>


    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>setUp</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>addRule</name><argument_list>(<argument><expr><name>RULESET</name></expr></argument>, <argument><expr><literal type="string">"CycloTest"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>addRule</name><argument_list>(<argument><expr><name>RULESET</name></expr></argument>, <argument><expr><literal type="string">"NcssTest"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>addRule</name><argument_list>(<argument><expr><name>RULESET</name></expr></argument>, <argument><expr><literal type="string">"WmcTest"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>addRule</name><argument_list>(<argument><expr><name>RULESET</name></expr></argument>, <argument><expr><literal type="string">"LocTest"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>addRule</name><argument_list>(<argument><expr><name>RULESET</name></expr></argument>, <argument><expr><literal type="string">"NPathTest"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>addRule</name><argument_list>(<argument><expr><name>RULESET</name></expr></argument>, <argument><expr><literal type="string">"NopaTest"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>addRule</name><argument_list>(<argument><expr><name>RULESET</name></expr></argument>, <argument><expr><literal type="string">"NoamTest"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>addRule</name><argument_list>(<argument><expr><name>RULESET</name></expr></argument>, <argument><expr><literal type="string">"WocTest"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>addRule</name><argument_list>(<argument><expr><name>RULESET</name></expr></argument>, <argument><expr><literal type="string">"TccTest"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>addRule</name><argument_list>(<argument><expr><name>RULESET</name></expr></argument>, <argument><expr><literal type="string">"AtfdTest"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>addRule</name><argument_list>(<argument><expr><name>RULESET</name></expr></argument>, <argument><expr><literal type="string">"CfoTest"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

}</block></class>
</unit>

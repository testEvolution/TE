<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="H:\Research\TestEvolution\DataAnalysis\pmd-pmd_releases-6.20.0\pmd-pmd_releases-6.20.0\pmd-java\src\test\java\net\sourceforge\pmd\lang\java\multifile\ClassStatsTest.java"><comment type="block" format="javadoc">/**
 * BSD-style license; for more info see http://pmd.sourceforge.net/license.html
 */</comment>

<package>package <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>java</name><operator>.</operator><name>multifile</name></name>;</package>


<import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name><operator>.</operator><name>assertEquals</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Before</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Ignore</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Test</name></name>;</import>

<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>java</name><operator>.</operator><name>multifile</name><operator>.</operator><name>signature</name><operator>.</operator><name>JavaFieldSigMask</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>java</name><operator>.</operator><name>multifile</name><operator>.</operator><name>signature</name><operator>.</operator><name>JavaOperationSigMask</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>java</name><operator>.</operator><name>multifile</name><operator>.</operator><name>signature</name><operator>.</operator><name>JavaOperationSignature</name><operator>.</operator><name>Role</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>java</name><operator>.</operator><name>multifile</name><operator>.</operator><name>signature</name><operator>.</operator><name>JavaSignature</name><operator>.</operator><name>Visibility</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>java</name><operator>.</operator><name>multifile</name><operator>.</operator><name>testdata</name><operator>.</operator><name>SignatureCountTestData</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sourceforge</name><operator>.</operator><name>pmd</name><operator>.</operator><name>lang</name><operator>.</operator><name>java</name><operator>.</operator><name>qname</name><operator>.</operator><name>QualifiedNameFactory</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author ClÃ©ment Fournier
 */</comment>
<class><specifier>public</specifier> class <name>ClassStatsTest</name> <block>{

    <function><annotation>@<name>Before</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>resetMultifile</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>PackageStats</name><operator>.</operator><name>INSTANCE</name><operator>.</operator><name>reset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>


    <function><annotation>@<name>Test</name></annotation>
    <annotation>@<name>Ignore</name><argument_list>(<argument><expr><literal type="string">"Exception in typeresolution visit"</literal></expr></argument>)</argument_list></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testCountOpSigs</name><parameter_list>()</parameter_list> <block>{<block_content>

        <expr_stmt><expr><call><name><name>JavaMultifileVisitorTest</name><operator>.</operator><name>parseAndVisitForClass</name></name><argument_list>(<argument><expr><name><name>SignatureCountTestData</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>ProjectMirror</name></type> <name>toplevel</name> <init>= <expr><name><name>PackageStats</name><operator>.</operator><name>INSTANCE</name></name></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>ClassMirror</name></type> <name>classMirror</name> <init>= <expr><call><name><name>toplevel</name><operator>.</operator><name>getClassMirror</name></name><argument_list>(<argument><expr><call><name><name>QualifiedNameFactory</name><operator>.</operator><name>ofClass</name></name><argument_list>(<argument><expr><name><name>SignatureCountTestData</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>FluentOperationSigMask</name></type> <name>opSigMask</name> <init>= <expr><operator>new</operator> <call><name>FluentOperationSigMask</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>opSigMask</name><operator>.</operator><name>mask</name><operator>.</operator><name>coverAbstract</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>opSigMask</name><operator>.</operator><name>restrictRolesTo</name></name><argument_list>(<argument><expr><name><name>Role</name><operator>.</operator><name>STATIC</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><call><name><name>classMirror</name><operator>.</operator><name>countMatchingOpSigs</name></name><argument_list>(<argument><expr><name><name>opSigMask</name><operator>.</operator><name>mask</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name><name>classMirror</name><operator>.</operator><name>countMatchingOpSigs</name></name><argument_list>(<argument><expr><call><name><name>opSigMask</name><operator>.</operator><name>restrictVisibilitiesTo</name></name><argument_list>(<argument><expr><name><name>Visibility</name><operator>.</operator><name>PRIVATE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name><name>classMirror</name><operator>.</operator><name>countMatchingOpSigs</name></name><argument_list>(<argument><expr><call><name><name>opSigMask</name><operator>.</operator><name>restrictVisibilitiesTo</name></name><argument_list>(<argument><expr><name><name>Visibility</name><operator>.</operator><name>PUBLIC</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>opSigMask</name><operator>.</operator><name>restrictRolesTo</name></name><argument_list>(<argument><expr><name><name>Role</name><operator>.</operator><name>METHOD</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>coverAllVisibilities</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><call><name><name>classMirror</name><operator>.</operator><name>countMatchingOpSigs</name></name><argument_list>(<argument><expr><name><name>opSigMask</name><operator>.</operator><name>mask</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>classMirror</name><operator>.</operator><name>countMatchingOpSigs</name></name><argument_list>(<argument><expr><call><name><name>opSigMask</name><operator>.</operator><name>restrictVisibilitiesTo</name></name><argument_list>(<argument><expr><name><name>Visibility</name><operator>.</operator><name>PUBLIC</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>classMirror</name><operator>.</operator><name>countMatchingOpSigs</name></name><argument_list>(<argument><expr><call><name><name>opSigMask</name><operator>.</operator><name>restrictVisibilitiesTo</name></name><argument_list>(<argument><expr><name><name>Visibility</name><operator>.</operator><name>PRIVATE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><call><name><name>classMirror</name><operator>.</operator><name>countMatchingOpSigs</name></name><argument_list>(<argument><expr><call><name><name>opSigMask</name><operator>.</operator><name>restrictVisibilitiesTo</name></name><argument_list>(<argument><expr><name><name>Visibility</name><operator>.</operator><name>PROTECTED</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name><name>classMirror</name><operator>.</operator><name>countMatchingOpSigs</name></name><argument_list>(<argument><expr><call><name><name>opSigMask</name><operator>.</operator><name>forbidAbstract</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>opSigMask</name><operator>.</operator><name>restrictRolesTo</name></name><argument_list>(<argument><expr><name><name>Role</name><operator>.</operator><name>GETTER_OR_SETTER</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>coverAllVisibilities</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><call><name><name>classMirror</name><operator>.</operator><name>countMatchingOpSigs</name></name><argument_list>(<argument><expr><name><name>opSigMask</name><operator>.</operator><name>mask</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><call><name><name>classMirror</name><operator>.</operator><name>countMatchingOpSigs</name></name><argument_list>(<argument><expr><call><name><name>opSigMask</name><operator>.</operator><name>restrictVisibilitiesTo</name></name><argument_list>(<argument><expr><name><name>Visibility</name><operator>.</operator><name>PACKAGE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><call><name><name>classMirror</name><operator>.</operator><name>countMatchingOpSigs</name></name><argument_list>(<argument><expr><call><name><name>opSigMask</name><operator>.</operator><name>restrictVisibilitiesTo</name></name><argument_list>(<argument><expr><name><name>Visibility</name><operator>.</operator><name>PUBLIC</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>opSigMask</name><operator>.</operator><name>restrictRolesTo</name></name><argument_list>(<argument><expr><name><name>Role</name><operator>.</operator><name>CONSTRUCTOR</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>coverAllVisibilities</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><call><name><name>classMirror</name><operator>.</operator><name>countMatchingOpSigs</name></name><argument_list>(<argument><expr><name><name>opSigMask</name><operator>.</operator><name>mask</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><call><name><name>classMirror</name><operator>.</operator><name>countMatchingOpSigs</name></name><argument_list>(<argument><expr><call><name><name>opSigMask</name><operator>.</operator><name>restrictVisibilitiesTo</name></name><argument_list>(<argument><expr><name><name>Visibility</name><operator>.</operator><name>PUBLIC</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


        <decl_stmt><decl><type><name>FluentFieldSigMask</name></type> <name>fieldSigMask</name> <init>= <expr><operator>new</operator> <call><name>FluentFieldSigMask</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><call><name><name>classMirror</name><operator>.</operator><name>countMatchingFieldSigs</name></name><argument_list>(<argument><expr><name><name>fieldSigMask</name><operator>.</operator><name>mask</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><call><name><name>classMirror</name><operator>.</operator><name>countMatchingFieldSigs</name></name><argument_list>(<argument><expr><call><name><name>fieldSigMask</name><operator>.</operator><name>restrictVisibilitiesTo</name></name><argument_list>(<argument><expr><name><name>Visibility</name><operator>.</operator><name>PUBLIC</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>classMirror</name><operator>.</operator><name>countMatchingFieldSigs</name></name><argument_list>(<argument><expr><call><name><name>fieldSigMask</name><operator>.</operator><name>restrictVisibilitiesTo</name></name><argument_list>(<argument><expr><name><name>Visibility</name><operator>.</operator><name>PROTECTED</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name><name>classMirror</name><operator>.</operator><name>countMatchingFieldSigs</name></name><argument_list>(<argument><expr><call><name><name>fieldSigMask</name><operator>.</operator><name>restrictVisibilitiesTo</name></name><argument_list>(<argument><expr><name><name>Visibility</name><operator>.</operator><name>PRIVATE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>fieldSigMask</name><operator>.</operator><name>mask</name><operator>.</operator><name>forbidFinal</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>classMirror</name><operator>.</operator><name>countMatchingFieldSigs</name></name><argument_list>(<argument><expr><call><name><name>fieldSigMask</name><operator>.</operator><name>restrictVisibilitiesTo</name></name><argument_list>(<argument><expr><name><name>Visibility</name><operator>.</operator><name>PRIVATE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


    </block_content>}</block></function>

    <comment type="line">// Containers to clear up tests</comment>
    <class><specifier>private</specifier> class <name>FluentOperationSigMask</name> <block>{

        <decl_stmt><decl><type><name>JavaOperationSigMask</name></type> <name>mask</name> <init>= <expr><operator>new</operator> <call><name>JavaOperationSigMask</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>


        <function><type><name>JavaOperationSigMask</name></type> <name>forbidAbstract</name><parameter_list>()</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name><name>mask</name><operator>.</operator><name>coverAbstract</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>mask</name></expr>;</return>
        </block_content>}</block></function>


        <function><type><name>JavaOperationSigMask</name></type> <name>restrictVisibilitiesTo</name><parameter_list>(<parameter><decl><type><name>Visibility</name><modifier>...</modifier></type> <name>visibilities</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name><name>mask</name><operator>.</operator><name>restrictVisibilitiesTo</name></name><argument_list>(<argument><expr><name>visibilities</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>mask</name></expr>;</return>
        </block_content>}</block></function>


        <function><type><name>JavaOperationSigMask</name></type> <name>restrictRolesTo</name><parameter_list>(<parameter><decl><type><name>Role</name><modifier>...</modifier></type> <name>roles</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name><name>mask</name><operator>.</operator><name>restrictRolesTo</name></name><argument_list>(<argument><expr><name>roles</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>mask</name></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <class><specifier>private</specifier> class <name>FluentFieldSigMask</name> <block>{

        <decl_stmt><decl><type><name>JavaFieldSigMask</name></type> <name>mask</name> <init>= <expr><operator>new</operator> <call><name>JavaFieldSigMask</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>


        <function><type><name>JavaFieldSigMask</name></type> <name>restrictVisibilitiesTo</name><parameter_list>(<parameter><decl><type><name>Visibility</name><modifier>...</modifier></type> <name>visibilities</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name><name>mask</name><operator>.</operator><name>restrictVisibilitiesTo</name></name><argument_list>(<argument><expr><name>visibilities</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>mask</name></expr>;</return>
        </block_content>}</block></function>
    }</block></class>


}</block></class>
</unit>

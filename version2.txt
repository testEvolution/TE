#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\classloader\ContextClassLoaderFactoryTest.java
  public void differentContexts() throws Exception {

    ConfigurationCopy cc = new ConfigurationCopy();
    cc.set(Property.GENERAL_CONTEXT_CLASSLOADER_FACTORY.getKey(),
        URLClassLoaderFactory.class.getName());
    ClassLoaderUtil.resetContextFactoryForTests();
    ClassLoaderUtil.initContextFactory(cc);

    URLClassLoader cl1 = (URLClassLoader) ClassLoaderUtil.getContextFactory().getClassLoader(uri1);
    var urls1 = cl1.getURLs();
    assertEquals(1, urls1.length);
    assertEquals(uri1, urls1[0].toString());

    URLClassLoader cl2 = (URLClassLoader) ClassLoaderUtil.getContextFactory().getClassLoader(uri2);
    var urls2 = cl2.getURLs();
    assertEquals(1, urls2.length);
    assertEquals(uri2, urls2[0].toString());

  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\cli\PasswordConverterTest.java
  public void testPass() {
    String expected = String.valueOf(new SecureRandom().nextDouble());
    argv[1] = "pass:" + expected;
    new JCommander(password).parse(argv);
    assertEquals(expected, password.password);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\cli\PasswordConverterTest.java
  public void testEnv() {
    String name = System.getenv().keySet().iterator().next();
    argv[1] = "env:" + name;
    new JCommander(password).parse(argv);
    assertEquals(System.getenv(name), password.password);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\cli\PasswordConverterTest.java
  public void testFile() throws IOException {
    argv[1] = "file:pom.xml";
    Scanner scan = new Scanner(new File("pom.xml"), UTF_8);
    String expected = scan.nextLine();
    scan.close();
    new JCommander(password).parse(argv);
    assertEquals(expected, password.password);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\cli\PasswordConverterTest.java
  public void testNoFile() throws FileNotFoundException {
    argv[1] = "file:doesnotexist";
    new JCommander(password).parse(argv);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\cli\PasswordConverterTest.java
  public void testStdin() {
    argv[1] = "stdin";
    new JCommander(password).parse(argv);
    assertEquals("stdin", password.password);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\cli\PasswordConverterTest.java
  public void testPlainText() {
    argv[1] = "passwordString";
    new JCommander(password).parse(argv);
    assertEquals("passwordString", password.password);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\cli\TestClientOpts.java
  public void testBasic() {
    ClientOpts opts = new ClientOpts();
    String[] args = new String[] {"-u", "userabc", "-o", "instance.name=myinst", "-o",
        "instance.zookeepers=zoo1,zoo2", "-o", "auth.type=password", "-o", "auth.principal=user123",
        "-o", "auth.token=mypass"};
    opts.parseArgs("test", args);
    Properties props = opts.getClientProps();
    assertEquals("user123", ClientProperty.AUTH_PRINCIPAL.getValue(props));
    assertTrue(opts.getToken() instanceof PasswordToken);
    assertEquals("myinst", props.getProperty("instance.name"));

    opts = new ClientOpts();
    args = new String[] {"-o", "instance.name=myinst", "-o", "instance.zookeepers=zoo1,zoo2", "-o",
        "auth.type=password", "-o", "auth.token=mypass", "-u", "userabc"};
    opts.parseArgs("test", args);
    props = opts.getClientProps();
    assertEquals("userabc", ClientProperty.AUTH_PRINCIPAL.getValue(props));
    assertTrue(opts.getToken() instanceof PasswordToken);
    assertEquals("myinst", props.getProperty("instance.name"));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\cli\TestClientOpts.java
  public void testPassword() {
    ClientOpts opts = new ClientOpts();
    String[] args =
        new String[] {"--password", "mypass", "-u", "userabc", "-o", "instance.name=myinst", "-o",
            "instance.zookeepers=zoo1,zoo2", "-o", "auth.principal=user123"};
    opts.parseArgs("test", args);
    Properties props = opts.getClientProps();
    assertEquals("user123", ClientProperty.AUTH_PRINCIPAL.getValue(props));
    assertTrue(opts.getToken() instanceof PasswordToken);
    assertTrue(opts.getToken().equals(new PasswordToken("mypass")));
    assertEquals("myinst", props.getProperty("instance.name"));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\cli\TestHelp.java
  public void testInvalidArgs() {
    String[] args = {"foo"};
    HelpStub help = new HelpStub();
    try {
      help.parseArgs("program", args);
    } catch (RuntimeException e) {
      assertEquals("1", e.getMessage());
    }
  }

}
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\BatchWriterConfigTest.java
  public void testReasonableDefaults() {
    long expectedMaxMemory = 50 * 1024 * 1024L;
    long expectedMaxLatency = 120000L;
    long expectedTimeout = Long.MAX_VALUE;
    int expectedMaxWriteThreads = 3;
    Durability expectedDurability = Durability.DEFAULT;

    BatchWriterConfig defaults = new BatchWriterConfig();
    assertEquals(expectedMaxMemory, defaults.getMaxMemory());
    assertEquals(expectedMaxLatency, defaults.getMaxLatency(TimeUnit.MILLISECONDS));
    assertEquals(expectedTimeout, defaults.getTimeout(TimeUnit.MILLISECONDS));
    assertEquals(expectedMaxWriteThreads, defaults.getMaxWriteThreads());
    assertEquals(expectedDurability, defaults.getDurability());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\BatchWriterConfigTest.java
  public void testOverridingDefaults() {
    BatchWriterConfig bwConfig = new BatchWriterConfig();
    bwConfig.setMaxMemory(1123581321L);
    bwConfig.setMaxLatency(22, TimeUnit.HOURS);
    bwConfig.setTimeout(33, TimeUnit.DAYS);
    bwConfig.setMaxWriteThreads(42);
    bwConfig.setDurability(Durability.NONE);

    assertEquals(1123581321L, bwConfig.getMaxMemory());
    assertEquals(22 * 60 * 60 * 1000L, bwConfig.getMaxLatency(TimeUnit.MILLISECONDS));
    assertEquals(33 * 24 * 60 * 60 * 1000L, bwConfig.getTimeout(TimeUnit.MILLISECONDS));
    assertEquals(42, bwConfig.getMaxWriteThreads());
    assertEquals(Durability.NONE, bwConfig.getDurability());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\BatchWriterConfigTest.java
  public void testZeroValues() {
    BatchWriterConfig bwConfig = new BatchWriterConfig();
    bwConfig.setMaxLatency(0, TimeUnit.MILLISECONDS);
    bwConfig.setTimeout(0, TimeUnit.MILLISECONDS);
    bwConfig.setMaxMemory(0);

    assertEquals(Long.MAX_VALUE, bwConfig.getMaxLatency(TimeUnit.MILLISECONDS));
    assertEquals(Long.MAX_VALUE, bwConfig.getTimeout(TimeUnit.MILLISECONDS));
    assertEquals(0, bwConfig.getMaxMemory());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\BatchWriterConfigTest.java
  public void testNegativeMaxMemory() {
    BatchWriterConfig bwConfig = new BatchWriterConfig();
    bwConfig.setMaxMemory(-1);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\BatchWriterConfigTest.java
  public void testNegativeMaxLatency() {
    BatchWriterConfig bwConfig = new BatchWriterConfig();
    bwConfig.setMaxLatency(-1, TimeUnit.DAYS);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\BatchWriterConfigTest.java
  public void testTinyTimeConversions() {
    BatchWriterConfig bwConfig = new BatchWriterConfig();
    bwConfig.setMaxLatency(999, TimeUnit.MICROSECONDS);
    bwConfig.setTimeout(999, TimeUnit.MICROSECONDS);

    assertEquals(1000, bwConfig.getMaxLatency(TimeUnit.MICROSECONDS));
    assertEquals(1000, bwConfig.getTimeout(TimeUnit.MICROSECONDS));
    assertEquals(1, bwConfig.getMaxLatency(TimeUnit.MILLISECONDS));
    assertEquals(1, bwConfig.getTimeout(TimeUnit.MILLISECONDS));

    bwConfig.setMaxLatency(10, TimeUnit.NANOSECONDS);
    bwConfig.setTimeout(10, TimeUnit.NANOSECONDS);

    assertEquals(1000000, bwConfig.getMaxLatency(TimeUnit.NANOSECONDS));
    assertEquals(1000000, bwConfig.getTimeout(TimeUnit.NANOSECONDS));
    assertEquals(1, bwConfig.getMaxLatency(TimeUnit.MILLISECONDS));
    assertEquals(1, bwConfig.getTimeout(TimeUnit.MILLISECONDS));

  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\BatchWriterConfigTest.java
  public void testNegativeTimeout() {
    BatchWriterConfig bwConfig = new BatchWriterConfig();
    bwConfig.setTimeout(-1, TimeUnit.DAYS);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\BatchWriterConfigTest.java
  public void testZeroMaxWriteThreads() {
    BatchWriterConfig bwConfig = new BatchWriterConfig();
    bwConfig.setMaxWriteThreads(0);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\BatchWriterConfigTest.java
  public void testNegativeMaxWriteThreads() {
    BatchWriterConfig bwConfig = new BatchWriterConfig();
    bwConfig.setMaxWriteThreads(-1);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\BatchWriterConfigTest.java
  public void testSerialize() throws IOException {
    // make sure we aren't testing defaults
    final BatchWriterConfig bwDefaults = new BatchWriterConfig();
    assertNotEquals(7654321L, bwDefaults.getMaxLatency(TimeUnit.MILLISECONDS));
    assertNotEquals(9898989L, bwDefaults.getTimeout(TimeUnit.MILLISECONDS));
    assertNotEquals(42, bwDefaults.getMaxWriteThreads());
    assertNotEquals(1123581321L, bwDefaults.getMaxMemory());
    assertNotEquals(Durability.FLUSH, bwDefaults.getDurability());

    // test setting all fields
    BatchWriterConfig bwConfig = new BatchWriterConfig();
    bwConfig.setMaxLatency(7654321L, TimeUnit.MILLISECONDS);
    bwConfig.setTimeout(9898989L, TimeUnit.MILLISECONDS);
    bwConfig.setMaxWriteThreads(42);
    bwConfig.setMaxMemory(1123581321L);
    bwConfig.setDurability(Durability.FLUSH);
    byte[] bytes = createBytes(bwConfig);
    checkBytes(bwConfig, bytes);

    // test human-readable serialization
    bwConfig = new BatchWriterConfig();
    bwConfig.setMaxWriteThreads(42);
    bytes = createBytes(bwConfig);
    assertEquals("     i#maxWriteThreads=42", new String(bytes, UTF_8));
    checkBytes(bwConfig, bytes);

    // test human-readable with 2 fields
    bwConfig = new BatchWriterConfig();
    bwConfig.setMaxWriteThreads(24);
    bwConfig.setTimeout(3, TimeUnit.SECONDS);
    bytes = createBytes(bwConfig);
    assertEquals("     v#maxWriteThreads=24,timeout=3000", new String(bytes, UTF_8));
    checkBytes(bwConfig, bytes);

    // test human-readable durability
    bwConfig = new BatchWriterConfig();
    bwConfig.setDurability(Durability.LOG);
    bytes = createBytes(bwConfig);
    assertEquals("     e#durability=LOG", new String(bytes, UTF_8));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\BatchWriterConfigTest.java
  public void testDefaultEquality() {
    BatchWriterConfig cfg1 = new BatchWriterConfig(), cfg2 = new BatchWriterConfig();
    assertEquals(cfg1, cfg2);
    assertEquals(cfg1.hashCode(), cfg2.hashCode());
    cfg2.setMaxMemory(1);
    assertNotEquals(cfg1, cfg2);
    cfg2 = new BatchWriterConfig();
    cfg2.setDurability(Durability.FLUSH);
    assertNotEquals(cfg1, cfg2);
    assertNotEquals(cfg1.hashCode(), cfg2.hashCode());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\BatchWriterConfigTest.java
  public void testManualEquality() {
    BatchWriterConfig cfg1 = new BatchWriterConfig(), cfg2 = new BatchWriterConfig();
    cfg1.setMaxLatency(10, TimeUnit.SECONDS);
    cfg2.setMaxLatency(10000, TimeUnit.MILLISECONDS);

    cfg1.setMaxMemory(100);
    cfg2.setMaxMemory(100);

    cfg1.setTimeout(10, TimeUnit.SECONDS);
    cfg2.setTimeout(10000, TimeUnit.MILLISECONDS);

    assertEquals(cfg1, cfg2);

    assertEquals(cfg1.hashCode(), cfg2.hashCode());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\BatchWriterConfigTest.java
  public void testMerge() {
    BatchWriterConfig cfg1 = new BatchWriterConfig(), cfg2 = new BatchWriterConfig();
    cfg1.setMaxMemory(1234);
    cfg2.setMaxMemory(5858);
    cfg2.setDurability(Durability.LOG);
    cfg2.setMaxLatency(456, TimeUnit.MILLISECONDS);

    assertEquals(Durability.DEFAULT, cfg1.getDurability());

    BatchWriterConfig merged = cfg1.merge(cfg2);

    assertEquals(1234, merged.getMaxMemory());
    assertEquals(Durability.LOG, merged.getDurability());
    assertEquals(456, merged.getMaxLatency(TimeUnit.MILLISECONDS));
    assertEquals(3, merged.getMaxWriteThreads());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\BatchWriterConfigTest.java
  public void countClientProps() {
    // count the number in case one gets added to in one place but not the other
    ClientProperty[] bwProps = Arrays.stream(ClientProperty.values())
        .filter(c -> c.name().startsWith("BATCH_WRITER")).toArray(ClientProperty[]::new);
    assertEquals(5, bwProps.length);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\ClientConfigurationTest.java
  public void testOverrides() {
    ClientConfiguration clientConfig = createConfig();
    assertExpectedConfig(clientConfig);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\ClientConfigurationTest.java
  public void testSerialization() {
    ClientConfiguration clientConfig = createConfig();
    // sanity check that we're starting with what we're expecting
    assertExpectedConfig(clientConfig);

    String serialized = clientConfig.serialize();
    ClientConfiguration deserializedClientConfig = ClientConfiguration.deserialize(serialized);
    assertExpectedConfig(deserializedClientConfig);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\ClientConfigurationTest.java
  public void testConfPath() throws IOException {
    File target = new File(System.getProperty("user.dir"), "target");
    assertTrue("'target' build directory does not exist", target.exists());
    File testDir = new File(target, getClass().getName());
    if (!testDir.exists()) {
      assertTrue("Failed to create test dir " + testDir, testDir.mkdirs());
    }

    File clientConf = new File(testDir, "client.conf");
    if (!clientConf.exists()) {
      assertTrue("Failed to create file " + clientConf, clientConf.createNewFile());
    }

    // A directory should return the path with client.conf appended.
    assertEquals(clientConf.toString(), ClientConfiguration.getClientConfPath(testDir.toString()));
    // A normal file should return itself
    assertEquals(clientConf.toString(),
        ClientConfiguration.getClientConfPath(clientConf.toString()));

    // Something that doesn't exist should return itself (specifically, it shouldn't error)
    final File missing = new File("foobarbaz12332112");
    assertEquals(missing.toString(), ClientConfiguration.getClientConfPath(missing.toString()));

    assertNull(ClientConfiguration.getClientConfPath(null));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\ClientPropertiesTest.java
  public void testBasic() {
    Properties props1 =
        Accumulo.newClientProperties().to("inst1", "zoo1").as("user1", "pass1").build();
    assertEquals("inst1", ClientProperty.INSTANCE_NAME.getValue(props1));
    assertEquals("zoo1", ClientProperty.INSTANCE_ZOOKEEPERS.getValue(props1));
    assertEquals("user1", ClientProperty.AUTH_PRINCIPAL.getValue(props1));
    assertEquals("password", ClientProperty.AUTH_TYPE.getValue(props1));
    assertEquals("pass1", ClientProperty.AUTH_TOKEN.getValue(props1));

    ClientProperty.validate(props1);

    Properties props2 =
        Accumulo.newClientProperties().from(props1).as("user2", Paths.get("/path2")).build();

    // verify props1 is unchanged
    assertEquals("inst1", ClientProperty.INSTANCE_NAME.getValue(props1));
    assertEquals("zoo1", ClientProperty.INSTANCE_ZOOKEEPERS.getValue(props1));
    assertEquals("user1", ClientProperty.AUTH_PRINCIPAL.getValue(props1));
    assertEquals("password", ClientProperty.AUTH_TYPE.getValue(props1));
    assertEquals("pass1", ClientProperty.AUTH_TOKEN.getValue(props1));

    // verify props2 has new values for overridden fields
    assertEquals("inst1", ClientProperty.INSTANCE_NAME.getValue(props2));
    assertEquals("zoo1", ClientProperty.INSTANCE_ZOOKEEPERS.getValue(props2));
    assertEquals("user2", ClientProperty.AUTH_PRINCIPAL.getValue(props2));
    assertEquals("kerberos", ClientProperty.AUTH_TYPE.getValue(props2));
    assertEquals("/path2", ClientProperty.AUTH_TOKEN.getValue(props2));

    props2.remove(ClientProperty.AUTH_PRINCIPAL.getKey());
    var e = assertThrows(IllegalArgumentException.class, () -> ClientProperty.validate(props2));
    assertEquals("auth.principal is not set", e.getMessage());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\IteratorSettingTest.java
  public final void testHashCodeSameObject() {
    assertEquals(setting1.hashCode(), setting1.hashCode());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\IteratorSettingTest.java
  public final void testHashCodeEqualObjects() {
    assertEquals(setting1.hashCode(), setting2.hashCode());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\IteratorSettingTest.java
  public final void testEqualsObjectReflexive() {
    assertEquals(setting1, setting1);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\IteratorSettingTest.java
  public final void testEqualsObjectSymmetric() {
    assertEquals(setting1, setting2);
    assertEquals(setting2, setting1);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\IteratorSettingTest.java
  public final void testEqualsObjectTransitive() {
    assertEquals(setting1, setting2);
    assertEquals(setting2, setting3);
    assertEquals(setting1, setting3);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\IteratorSettingTest.java
  public final void testEqualsNullSetting() {
    assertNotEquals(setting1, nullsetting);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\IteratorSettingTest.java
  public final void testEqualsObjectNotEqual() {
    assertNotEquals(setting1, devnull);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\IteratorSettingTest.java
  public final void testEqualsObjectProperties() {
    IteratorSetting mysettings = new IteratorSetting(500, "combiner", Combiner.class.getName());
    assertEquals(setting1, mysettings);
    mysettings.addOption("myoption1", "myvalue1");
    assertNotEquals(setting1, mysettings);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\IteratorSettingTest.java
  public final void testEqualsDifferentMembers() {
    assertNotEquals(setting1, setting4);
    assertNotEquals(setting1, setting5);
    assertNotEquals(setting1, setting6);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\IteratorSettingTest.java
  public void testEquivalentConstructor() {
    IteratorSetting setting1 = new IteratorSetting(100, Combiner.class);
    IteratorSetting setting2 =
        new IteratorSetting(100, "Combiner", Combiner.class, new HashMap<>());

    assertEquals(setting1, setting2);

    IteratorSetting notEqual1 =
        new IteratorSetting(100, "FooCombiner", Combiner.class, new HashMap<>());

    assertNotEquals(setting1, notEqual1);

    Map<String,String> props = new HashMap<>();
    props.put("foo", "bar");
    IteratorSetting notEquals2 = new IteratorSetting(100, "Combiner", Combiner.class, props);

    assertNotEquals(setting1, notEquals2);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\IteratorSettingTest.java
  public void testIteratorNameCannotContainDot() {
    new IteratorSetting(500, "iterator.name.with.dots", Combiner.class.getName());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\RowIteratorTest.java
  public void testRowIterator() {
    List<List<Entry<Key,Value>>> rows = getRows(makeIterator());
    assertEquals(0, rows.size());
    rows = getRows(makeIterator("a b c d"));
    assertEquals(1, rows.size());
    assertEquals(1, rows.get(0).size());
    rows = getRows(makeIterator("a cf cq1 v", "a cf cq2 v", "a cf cq3 v", "b cf cq1 x"));
    assertEquals(2, rows.size());
    assertEquals(3, rows.get(0).size());
    assertEquals(1, rows.get(1).size());

    RowIterator i = new RowIterator(makeIterator());
    try {
      i.next();
      fail();
    } catch (NoSuchElementException ex) {}

    i = new RowIterator(makeIterator("a b c d", "a 1 2 3"));
    assertTrue(i.hasNext());
    Iterator<Entry<Key,Value>> row = i.next();
    assertTrue(row.hasNext());
    row.next();
    assertTrue(row.hasNext());
    row.next();
    assertFalse(row.hasNext());
    try {
      row.next();
      fail();
    } catch (NoSuchElementException ex) {}
    assertEquals(0, i.getKVCount());
    assertFalse(i.hasNext());
    assertEquals(2, i.getKVCount());
    try {
      i.next();
      fail();
    } catch (NoSuchElementException ex) {}
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\RowIteratorTest.java
  public void testUnreadRow() {
    final RowIterator i = new RowIterator(makeIterator("a b c d", "a 1 2 3", "b 1 2 3"));
    assertTrue(i.hasNext());
    Iterator<Entry<Key,Value>> firstRow = i.next();
    assertEquals(0, i.getKVCount());
    assertTrue(i.hasNext());
    assertEquals(2, i.getKVCount());
    Iterator<Entry<Key,Value>> nextRow = i.next();
    assertEquals(2, i.getKVCount());
    assertFalse(i.hasNext());
    assertEquals(3, i.getKVCount());
    try {
      firstRow.hasNext();
      fail();
    } catch (IllegalStateException e) {}
    try {
      nextRow.next();
      fail();
    } catch (IllegalStateException e) {}
  }
}
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\TestThrift1474.java
  public void test() throws IOException, TException, InterruptedException {
    TServerSocket serverTransport = new TServerSocket(0);
    serverTransport.listen();
    int port = serverTransport.getServerSocket().getLocalPort();
    TestServer handler = new TestServer();
    ThriftTest.Processor<ThriftTest.Iface> processor = new ThriftTest.Processor<>(handler);

    TThreadPoolServer.Args args = new TThreadPoolServer.Args(serverTransport);
    args.stopTimeoutVal = 10;
    args.stopTimeoutUnit = TimeUnit.MILLISECONDS;
    final TServer server = new TThreadPoolServer(args.processor(processor));
    Thread thread = new Thread(server::serve);
    thread.start();
    while (!server.isServing()) {
      sleepUninterruptibly(10, TimeUnit.MILLISECONDS);
    }

    TTransport transport = new TSocket("localhost", port);
    transport.open();
    TProtocol protocol = new TBinaryProtocol(transport);
    ThriftTest.Client client = new ThriftTest.Client(protocol);
    assertTrue(client.success());
    assertFalse(client.fails());
    try {
      client.throwsError();
      fail("no exception thrown");
    } catch (ThriftSecurityException ex) {
      // expected
    }
    server.stop();
    thread.join();
  }

}
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\ZooKeeperInstanceTest.java
  public void testInvalidConstruction() {
    ClientConfiguration config = createMock(ClientConfiguration.class);
    expect(config.get(INSTANCE_ID)).andReturn(IID_STRING);
    mockNameConstruction(config);
    replay(config);
    new ZooKeeperInstance(config);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\ZooKeeperInstanceTest.java
  public void testInvalidConstruction2() {
    ClientConfiguration config = createMock(ClientConfiguration.class);
    expect(config.get(INSTANCE_ID)).andReturn(null);
    expect(config.get(INSTANCE_NAME)).andReturn(null);
    expect(config.get(INSTANCE_ZK_HOST)).andReturn("zk1");
    expect(config.get(INSTANCE_ZK_TIMEOUT)).andReturn("30");
    replay(config);
    new ZooKeeperInstance(config);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\ZooKeeperInstanceTest.java
  public void testSimpleGetters() {
    assertEquals("instance", zki.getInstanceName());
    assertEquals("zk1", zki.getZooKeepers());
    assertEquals(30000, zki.getZooKeepersSessionTimeOut());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\ZooKeeperInstanceTest.java
  public void testGetInstanceID_FromCache() {
    expect(zc.get(Constants.ZROOT + Constants.ZINSTANCES + "/instance"))
        .andReturn(IID_STRING.getBytes(UTF_8));
    expect(zc.get(Constants.ZROOT + "/" + IID_STRING)).andReturn("yup".getBytes());
    replay(zc);
    assertEquals(IID_STRING, zki.getInstanceID());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\ZooKeeperInstanceTest.java
  public void testGetInstanceID_Direct() {
    ClientConfiguration config = createMock(ClientConfiguration.class);
    mockIdConstruction(config);
    replay(config);
    zki = new ZooKeeperInstance(config, zcf);
    expect(zc.get(Constants.ZROOT + "/" + IID_STRING)).andReturn("yup".getBytes());
    replay(zc);
    assertEquals(IID_STRING, zki.getInstanceID());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\ZooKeeperInstanceTest.java
  public void testGetInstanceID_NoMapping() {
    ClientConfiguration config = createMock(ClientConfiguration.class);
    expect(zc.get(Constants.ZROOT + Constants.ZINSTANCES + "/instance")).andReturn(null);
    replay(zc);
    EasyMock.reset(config, zcf);
    new ZooKeeperInstance(config, zcf);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\ZooKeeperInstanceTest.java
  public void testGetInstanceID_IDMissingForName() {
    expect(zc.get(Constants.ZROOT + Constants.ZINSTANCES + "/instance"))
        .andReturn(IID_STRING.getBytes(UTF_8));
    expect(zc.get(Constants.ZROOT + "/" + IID_STRING)).andReturn(null);
    replay(zc);
    zki.getInstanceID();
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\ZooKeeperInstanceTest.java
  public void testGetInstanceID_IDMissingForID() {
    ClientConfiguration config = createMock(ClientConfiguration.class);
    mockIdConstruction(config);
    replay(config);
    zki = new ZooKeeperInstance(config, zcf);
    expect(zc.get(Constants.ZROOT + "/" + IID_STRING)).andReturn(null);
    replay(zc);
    zki.getInstanceID();
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\ZooKeeperInstanceTest.java
  public void testGetInstanceName() {
    ClientConfiguration config = createMock(ClientConfiguration.class);
    mockIdConstruction(config);
    replay(config);
    zki = new ZooKeeperInstance(config, zcf);
    expect(zc.get(Constants.ZROOT + "/" + IID_STRING)).andReturn("yup".getBytes());
    List<String> children = new java.util.ArrayList<>();
    children.add("child1");
    children.add("child2");
    expect(zc.getChildren(Constants.ZROOT + Constants.ZINSTANCES)).andReturn(children);
    expect(zc.get(Constants.ZROOT + Constants.ZINSTANCES + "/child1"))
        .andReturn(UUID.randomUUID().toString().getBytes(UTF_8));
    expect(zc.get(Constants.ZROOT + Constants.ZINSTANCES + "/child2"))
        .andReturn(IID_STRING.getBytes(UTF_8));
    replay(zc);
    assertEquals("child2", zki.getInstanceName());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\ZooKeeperInstanceTest.java
  public void testAllZooKeepersAreUsed() {
    final String zookeepers = "zk1,zk2,zk3", instanceName = "accumulo";
    ZooCacheFactory factory = createMock(ZooCacheFactory.class);
    EasyMock.reset(zc);
    expect(factory.getZooCache(zookeepers, 30000)).andReturn(zc).anyTimes();
    expect(zc.get(Constants.ZROOT + Constants.ZINSTANCES + "/" + instanceName))
        .andReturn(IID_STRING.getBytes(UTF_8));
    expect(zc.get(Constants.ZROOT + "/" + IID_STRING)).andReturn("yup".getBytes());
    replay(zc, factory);
    ClientConfiguration cfg =
        ClientConfiguration.loadDefault().withInstance(instanceName).withZkHosts(zookeepers);
    ZooKeeperInstance zki = new ZooKeeperInstance(cfg, factory);
    assertEquals(zookeepers, zki.getZooKeepers());
    assertEquals(instanceName, zki.getInstanceName());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\admin\DelegationTokenConfigTest.java
  public void testTimeUnit() {
    DelegationTokenConfig config1 = new DelegationTokenConfig(),
        config2 = new DelegationTokenConfig();

    config1.setTokenLifetime(1000, TimeUnit.MILLISECONDS);
    config2.setTokenLifetime(1, TimeUnit.SECONDS);

    assertEquals(config1.getTokenLifetime(TimeUnit.MILLISECONDS),
        config2.getTokenLifetime(TimeUnit.MILLISECONDS));
    assertEquals(config1, config2);
    assertEquals(config1.hashCode(), config2.hashCode());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\admin\DelegationTokenConfigTest.java
  public void testNoTimeout() {
    DelegationTokenConfig config = new DelegationTokenConfig();

    config.setTokenLifetime(0, TimeUnit.MILLISECONDS);

    assertEquals(0, config.getTokenLifetime(TimeUnit.MILLISECONDS));

  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\admin\DelegationTokenConfigTest.java
  public void testInvalidLifetime() {
    new DelegationTokenConfig().setTokenLifetime(-1, TimeUnit.DAYS);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\admin\DelegationTokenConfigTest.java
  public void testSetInvalidTimeUnit() {
    new DelegationTokenConfig().setTokenLifetime(5, null);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\admin\DelegationTokenConfigTest.java
  public void testGetInvalidTimeUnit() {
    new DelegationTokenConfig().getTokenLifetime(null);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\admin\NewTableConfigurationTest.java
  public void testWithAndGetSplits() {
    NewTableConfiguration ntc = new NewTableConfiguration().withSplits(splits);
    Collection<Text> ntcSplits = ntc.getSplits();
    Iterator<Text> splitIt = splits.iterator();
    Iterator<Text> ntcIt = ntcSplits.iterator();
    while (splitIt.hasNext() && ntcIt.hasNext()) {
      assertEquals(splitIt.next(), ntcIt.next());
    }
    // verify splits is in sorted order
    Iterator<Text> it = splits.iterator();
    Text current = new Text("");
    while (it.hasNext()) {
      Text nxt = it.next();
      assertTrue(current.toString().compareTo(nxt.toString()) < 0);
      current = nxt;
    }
    // verify ntcSplits is in sorted order
    Iterator<Text> it2 = ntcSplits.iterator();
    current = new Text("");
    while (it2.hasNext()) {
      Text nxt = it2.next();
      assertTrue(current.toString().compareTo(nxt.toString()) < 0);
      current = nxt;
    }

    NewTableConfiguration ntc2 = new NewTableConfiguration();
    Collection<Text> splits = ntc2.getSplits();
    assertTrue(splits.isEmpty());

  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\admin\NewTableConfigurationTest.java
  public void testCreateOffline() {
    NewTableConfiguration ntcOffline = new NewTableConfiguration().createOffline();
    assertTrue(ntcOffline.getInitialTableState() == InitialTableState.OFFLINE);
    NewTableConfiguration ntcOnline = new NewTableConfiguration();
    assertTrue(ntcOnline.getInitialTableState() == InitialTableState.ONLINE);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\admin\NewTableConfigurationTest.java
  public void testEnableSampling() {
    SamplerConfiguration sha1SamplerConfig = new SamplerConfiguration("com.mysampler");
    sha1SamplerConfig.setOptions(options);
    NewTableConfiguration ntcSample2 =
        new NewTableConfiguration().enableSampling(sha1SamplerConfig);
    assertEquals("com.mysampler", ntcSample2.getProperties().get("table.sampler"));
    assertEquals("5", ntcSample2.getProperties().get("table.sampler.opt.modulus"));
    assertEquals("murmur3_32", ntcSample2.getProperties().get("table.sampler.opt.hasher"));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\admin\NewTableConfigurationTest.java
  public void testEnableSummarization() {
    SummarizerConfiguration summarizerConfig1 = SummarizerConfiguration
        .builder("com.test.summarizer").setPropertyId("s1").addOption("opt1", "v1").build();
    NewTableConfiguration ntcSummarization1 =
        new NewTableConfiguration().enableSummarization(summarizerConfig1);
    assertEquals("v1", ntcSummarization1.getProperties().get("table.summarizer.s1.opt.opt1"));
    assertEquals("com.test.summarizer",
        ntcSummarization1.getProperties().get("table.summarizer.s1"));

    Class<? extends Summarizer> builderClass = FamilySummarizer.class;
    assertTrue(Summarizer.class.isAssignableFrom(builderClass));

    SummarizerConfiguration summarizerConfig2 = SummarizerConfiguration.builder(builderClass)
        .setPropertyId("s2").addOption("opt2", "v2").build();
    NewTableConfiguration ntcSummarization2 =
        new NewTableConfiguration().enableSummarization(summarizerConfig2);
    assertEquals("v2", ntcSummarization2.getProperties().get("table.summarizer.s2.opt.opt2"));
    assertEquals(builderClass.getName(),
        ntcSummarization2.getProperties().get("table.summarizer.s2"));

    NewTableConfiguration ntcSummarization3 =
        new NewTableConfiguration().enableSummarization(summarizerConfig1, summarizerConfig2);
    assertEquals("v1", ntcSummarization1.getProperties().get("table.summarizer.s1.opt.opt1"));
    assertEquals("v2", ntcSummarization2.getProperties().get("table.summarizer.s2.opt.opt2"));
    assertEquals("com.test.summarizer",
        ntcSummarization3.getProperties().get("table.summarizer.s1"));
    assertEquals(builderClass.getName(),
        ntcSummarization3.getProperties().get("table.summarizer.s2"));

  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\lexicoder\BigIntegerLexicoderTest.java
  public void testSortOrder() {
    assertSortOrder(new BigIntegerLexicoder(), Arrays.asList(new BigInteger("-1"),
        new BigInteger("0"), new BigInteger("1"), new BigInteger("-257"), new BigInteger("-256"),
        new BigInteger("-255"), new BigInteger("255"), new BigInteger("256"), new BigInteger("257"),
        new BigInteger("65534"), new BigInteger("65535"), new BigInteger("65536"),
        new BigInteger("65537"), new BigInteger("-65534"), new BigInteger("-65535"),
        new BigInteger("-65536"), new BigInteger("-65537"), new BigInteger("2147483648"),
        new BigInteger("2147483647"), new BigInteger("2147483649"), new BigInteger("-2147483648"),
        new BigInteger("-2147483647"), new BigInteger("-2147483649"), new BigInteger("32768"),
        new BigInteger("32769"), new BigInteger("32767"), new BigInteger("-32768"),
        new BigInteger("-32769"), new BigInteger("-32767"), new BigInteger("126"),
        new BigInteger("127"), new BigInteger("128"), new BigInteger("129"), new BigInteger("-126"),
        new BigInteger("-127"), new BigInteger("-128"), new BigInteger("-129")));

  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\lexicoder\BigIntegerLexicoderTest.java
  public void testDecode() {
    assertDecodes(new BigIntegerLexicoder(), new BigInteger("-2147483649"));
    assertDecodes(new BigIntegerLexicoder(), new BigInteger("-1"));
    assertDecodes(new BigIntegerLexicoder(), BigInteger.ZERO);
    assertDecodes(new BigIntegerLexicoder(), BigInteger.ONE);
    assertDecodes(new BigIntegerLexicoder(), new BigInteger("2147483647"));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\lexicoder\BytesLexicoderTest.java
  public void testDecodes() {
    BytesLexicoder lexicoder = new BytesLexicoder();
    assertDecodesB(lexicoder, new byte[0]);
    assertDecodesB(lexicoder, "accumulo".getBytes());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\lexicoder\DateLexicoderTest.java
  public void testDecode() {
    assertDecodes(new DateLexicoder(), new Date());
    assertDecodes(new DateLexicoder(), new Date(0));
    assertDecodes(new DateLexicoder(), new Date(Long.MAX_VALUE));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\lexicoder\DoubleLexicoderTest.java
  public void testSortOrder() {
    assertSortOrder(new DoubleLexicoder(),
        Arrays.asList(Double.MIN_VALUE, Double.MAX_VALUE, Double.NEGATIVE_INFINITY,
            Double.POSITIVE_INFINITY, 0.0, 0.01, 0.001, 1.0, -1.0, -1.1, -1.01,
            Math.nextUp(Double.NEGATIVE_INFINITY), Math.nextAfter(0.0, Double.NEGATIVE_INFINITY),
            Math.nextAfter(Double.MAX_VALUE, Double.NEGATIVE_INFINITY), Math.pow(10.0, 30.0) * -1.0,
            Math.pow(10.0, 30.0), Math.pow(10.0, -30.0) * -1.0, Math.pow(10.0, -30.0)));

  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\lexicoder\DoubleLexicoderTest.java
  public void testDecode() {
    assertDecodes(new DoubleLexicoder(), Double.MIN_VALUE);
    assertDecodes(new DoubleLexicoder(), -1.0);
    assertDecodes(new DoubleLexicoder(), -Math.pow(10.0, -30.0));
    assertDecodes(new DoubleLexicoder(), 0.0);
    assertDecodes(new DoubleLexicoder(), Math.pow(10.0, -30.0));
    assertDecodes(new DoubleLexicoder(), 1.0);
    assertDecodes(new DoubleLexicoder(), Double.MAX_VALUE);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\lexicoder\FloatLexicoderTest.java
  public void testSortOrder() {
    assertSortOrder(new FloatLexicoder(),
        Arrays.asList(Float.MIN_VALUE, Float.MAX_VALUE, Float.NEGATIVE_INFINITY,
            Float.POSITIVE_INFINITY, 0.0F, 0.01F, 0.001F, 1.0F, -1.0F, -1.1F, -1.01F,
            Math.nextUp(Float.NEGATIVE_INFINITY), Math.nextAfter(0.0F, Float.NEGATIVE_INFINITY),
            Math.nextAfter(Float.MAX_VALUE, Float.NEGATIVE_INFINITY)));

  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\lexicoder\FloatLexicoderTest.java
  public void testDecode() {
    assertDecodes(new FloatLexicoder(), Float.MIN_VALUE);
    assertDecodes(new FloatLexicoder(), Math.nextUp(Float.NEGATIVE_INFINITY));
    assertDecodes(new FloatLexicoder(), -1.0F);
    assertDecodes(new FloatLexicoder(), 0.0F);
    assertDecodes(new FloatLexicoder(), 1.0F);
    assertDecodes(new FloatLexicoder(), Math.nextAfter(Float.POSITIVE_INFINITY, 0.0F));
    assertDecodes(new FloatLexicoder(), Float.MAX_VALUE);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\lexicoder\IntegerLexicoderTest.java
  public void testSortOrder() {
    assertSortOrder(new IntegerLexicoder(), Arrays.asList(Integer.MIN_VALUE, 0xff123456, 0xffff3456,
        0xffffff56, -1, 0, 1, 0x12, 0x1234, 0x123456, 0x1234678, Integer.MAX_VALUE));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\lexicoder\IntegerLexicoderTest.java
  public void testDecode() {
    assertDecodes(new IntegerLexicoder(), Integer.MIN_VALUE);
    assertDecodes(new IntegerLexicoder(), -1);
    assertDecodes(new IntegerLexicoder(), 0);
    assertDecodes(new IntegerLexicoder(), 1);
    assertDecodes(new IntegerLexicoder(), Integer.MAX_VALUE);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\lexicoder\ListLexicoderTest.java
  public void testSortOrder() {
    List<List<Long>> data = new ArrayList<>();

    // add list in expected sort order
    data.add(data2);
    data.add(data1);
    data.add(data4);
    data.add(data3);
    data.add(data5);

    TreeSet<Text> sortedEnc = new TreeSet<>();

    ListLexicoder<Long> listLexicoder = new ListLexicoder<>(new LongLexicoder());

    for (List<Long> list : data) {
      sortedEnc.add(new Text(listLexicoder.encode(list)));
    }

    List<List<Long>> unenc = new ArrayList<>();

    for (Text enc : sortedEnc) {
      unenc.add(listLexicoder.decode(TextUtil.getBytes(enc)));
    }

    assertEquals(data, unenc);

  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\lexicoder\ListLexicoderTest.java
  public void testDecodes() {
    assertDecodes(new ListLexicoder<>(new LongLexicoder()), data1);
    assertDecodes(new ListLexicoder<>(new LongLexicoder()), data2);
    assertDecodes(new ListLexicoder<>(new LongLexicoder()), data3);
    assertDecodes(new ListLexicoder<>(new LongLexicoder()), data4);
    assertDecodes(new ListLexicoder<>(new LongLexicoder()), data5);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\lexicoder\ListLexicoderTest.java
  public void testRejectsEmptyLists() {
    new ListLexicoder<>(new LongLexicoder()).encode(emptyList());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\lexicoder\LongLexicoderTest.java
  public void testSortOrder() {

    assertSortOrder(new LongLexicoder(),
        Arrays.asList(Long.MIN_VALUE, 0xff1234567890abcdL, 0xffff1234567890abL, 0xffffff567890abcdL,
            0xffffffff7890abcdL, 0xffffffffff90abcdL, 0xffffffffffffabcdL, 0xffffffffffffffcdL, -1L,
            0L, 0x01L, 0x1234L, 0x123456L, 0x12345678L, 0x1234567890L, 0x1234567890abL,
            0x1234567890abcdL, 0x1234567890abcdefL, Long.MAX_VALUE));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\lexicoder\LongLexicoderTest.java
  public void testDecodes() {
    assertDecodes(new LongLexicoder(), Long.MIN_VALUE);
    assertDecodes(new LongLexicoder(), -1L);
    assertDecodes(new LongLexicoder(), 0L);
    assertDecodes(new LongLexicoder(), 1L);
    assertDecodes(new LongLexicoder(), 2L);
    assertDecodes(new LongLexicoder(), Long.MAX_VALUE);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\lexicoder\PairLexicoderTest.java
  public void testSortOrder() {
    PairLexicoder<String,String> plexc =
        new PairLexicoder<>(new StringLexicoder(), new StringLexicoder());

    assertSortOrder(plexc,
        Arrays.asList(new ComparablePair<>("a", "b"), new ComparablePair<>("a", "bc"),
            new ComparablePair<>("a", "c"), new ComparablePair<>("ab", "c"),
            new ComparablePair<>("ab", ""), new ComparablePair<>("ab", "d"),
            new ComparablePair<>("b", "f"), new ComparablePair<>("b", "a")));

    PairLexicoder<Long,String> plexc2 =
        new PairLexicoder<>(new LongLexicoder(), new StringLexicoder());

    assertSortOrder(plexc2,
        Arrays.asList(new ComparablePair<>(0x100L, "a"), new ComparablePair<>(0x100L, "ab"),
            new ComparablePair<>(0xf0L, "a"), new ComparablePair<>(0xf0L, "ab")));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\lexicoder\PairLexicoderTest.java
  public void testDecodes() {
    PairLexicoder<String,String> plexc =
        new PairLexicoder<>(new StringLexicoder(), new StringLexicoder());
    assertDecodes(plexc, new ComparablePair<>("a", "b"));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\lexicoder\ReverseLexicoderTest.java
  public void testSortOrder() {
    Comparator<Long> comp = Collections.reverseOrder();
    assertSortOrder(new ReverseLexicoder<>(new LongLexicoder()), comp,
        Arrays.asList(Long.MIN_VALUE, 0xff1234567890abcdL, 0xffff1234567890abL, 0xffffff567890abcdL,
            0xffffffff7890abcdL, 0xffffffffff90abcdL, 0xffffffffffffabcdL, 0xffffffffffffffcdL, -1L,
            0L, 0x01L, 0x1234L, 0x123456L, 0x12345678L, 0x1234567890L, 0x1234567890abL,
            0x1234567890abcdL, 0x1234567890abcdefL, Long.MAX_VALUE));

    Comparator<String> comp2 = Collections.reverseOrder();
    assertSortOrder(new ReverseLexicoder<>(new StringLexicoder()), comp2,
        Arrays.asList("a", "aa", "ab", "b", "aab"));

  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\lexicoder\ReverseLexicoderTest.java
  public void testReverseSortDates() {

    ReverseLexicoder<Date> revLex = new ReverseLexicoder<>(new DateLexicoder());

    Calendar cal = Calendar.getInstance();
    cal.set(1920, 1, 2, 3, 4, 5); // create an instance prior to 1970 for ACCUMULO-3385
    Date date0 = new Date(cal.getTimeInMillis());
    Date date1 = new Date();
    Date date2 = new Date(System.currentTimeMillis() + 10000);
    Date date3 = new Date(System.currentTimeMillis() + 500);

    Comparator<Date> comparator = Collections.reverseOrder();
    assertSortOrder(revLex, comparator, Arrays.asList(date0, date1, date2, date3));

    // truncate date to hours
    long time = System.currentTimeMillis() - (System.currentTimeMillis() % 3600000);
    Date date = new Date(time);

    System.out.println(date);

  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\lexicoder\ReverseLexicoderTest.java
  public void testDecodes() {
    assertDecodes(new ReverseLexicoder<>(new LongLexicoder()), Long.MIN_VALUE);
    assertDecodes(new ReverseLexicoder<>(new LongLexicoder()), -1L);
    assertDecodes(new ReverseLexicoder<>(new LongLexicoder()), 0L);
    assertDecodes(new ReverseLexicoder<>(new LongLexicoder()), 1L);
    assertDecodes(new ReverseLexicoder<>(new LongLexicoder()), Long.MAX_VALUE);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\lexicoder\SequenceLexicoderTest.java
  public void testSortOrder() {
    // expected sort order
    final List<List<String>> data = asList(nodata, data0, data2, data1, data4, data3, data5);
    final TreeSet<Text> sortedEnc = new TreeSet<>();
    final SequenceLexicoder<String> sequenceLexicoder =
        new SequenceLexicoder<>(new StringLexicoder());
    for (final List<String> list : data) {
      sortedEnc.add(new Text(sequenceLexicoder.encode(list)));
    }
    final List<List<String>> unenc = new ArrayList<>();
    for (final Text enc : sortedEnc) {
      unenc.add(sequenceLexicoder.decode(TextUtil.getBytes(enc)));
    }
    assertEquals(data, unenc);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\lexicoder\SequenceLexicoderTest.java
  public void testDecodes() {
    assertDecodes(new SequenceLexicoder<>(new StringLexicoder()), nodata);
    assertDecodes(new SequenceLexicoder<>(new StringLexicoder()), data0);
    assertDecodes(new SequenceLexicoder<>(new StringLexicoder()), data1);
    assertDecodes(new SequenceLexicoder<>(new StringLexicoder()), data2);
    assertDecodes(new SequenceLexicoder<>(new StringLexicoder()), data3);
    assertDecodes(new SequenceLexicoder<>(new StringLexicoder()), data4);
    assertDecodes(new SequenceLexicoder<>(new StringLexicoder()), data5);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\lexicoder\SequenceLexicoderTest.java
  public void tesRejectsTrailingBytes() {
    new SequenceLexicoder<>(new StringLexicoder()).decode(new byte[] {10});
  }
}
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\lexicoder\StringLexicoderTest.java
  public void testDecode() {
    assertDecodes(new StringLexicoder(), "");
    assertDecodes(new StringLexicoder(), "0");
    assertDecodes(new StringLexicoder(), "accumulo");
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\lexicoder\TextLexicoderTest.java
  public void testDecode() {
    assertDecodes(new TextLexicoder(), new Text(""));
    assertDecodes(new TextLexicoder(), new Text("accumulo"));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\lexicoder\UIntegerLexicoderTest.java
  public void testEncoding() {
    UIntegerLexicoder uil = new UIntegerLexicoder();

    assertEqualsB(uil.encode(0), new byte[] {0x00});
    assertEqualsB(uil.encode(0x01), new byte[] {0x01, 0x01});
    assertEqualsB(uil.encode(0x0102), new byte[] {0x02, 0x01, 0x02});
    assertEqualsB(uil.encode(0x010203), new byte[] {0x03, 0x01, 0x02, 0x03});
    assertEqualsB(uil.encode(0x01020304), new byte[] {0x04, 0x01, 0x02, 0x03, 0x04});
    assertEqualsB(uil.encode(0xff020304), new byte[] {0x05, 0x02, 0x03, 0x04});
    assertEqualsB(uil.encode(0xffff0304), new byte[] {0x06, 0x03, 0x04});
    assertEqualsB(uil.encode(0xffffff04), new byte[] {0x07, 0x04});
    assertEqualsB(uil.encode(-1), new byte[] {0x08});
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\lexicoder\UIntegerLexicoderTest.java
  public void testDecode() {
    assertDecodes(new UIntegerLexicoder(), Integer.MIN_VALUE);
    assertDecodes(new UIntegerLexicoder(), -1);
    assertDecodes(new UIntegerLexicoder(), 0);
    assertDecodes(new UIntegerLexicoder(), 1);
    assertDecodes(new UIntegerLexicoder(), Integer.MAX_VALUE);
  }
}
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\lexicoder\ULongLexicoderTest.java
  public void testEncoding() {
    ULongLexicoder ull = new ULongLexicoder();

    assertEqualsB(ull.encode(0L), new byte[] {0x00});
    assertEqualsB(ull.encode(0x01L), new byte[] {0x01, 0x01});
    assertEqualsB(ull.encode(0x1234L), new byte[] {0x02, 0x12, 0x34});
    assertEqualsB(ull.encode(0x123456L), new byte[] {0x03, 0x12, 0x34, 0x56});
    assertEqualsB(ull.encode(0x12345678L), new byte[] {0x04, 0x12, 0x34, 0x56, 0x78});
    assertEqualsB(ull.encode(0x1234567890L),
        new byte[] {0x05, 0x12, 0x34, 0x56, 0x78, (byte) 0x90});
    assertEqualsB(ull.encode(0x1234567890abL),
        new byte[] {0x06, 0x12, 0x34, 0x56, 0x78, (byte) 0x90, (byte) 0xab});
    assertEqualsB(ull.encode(0x1234567890abcdL),
        new byte[] {0x07, 0x12, 0x34, 0x56, 0x78, (byte) 0x90, (byte) 0xab, (byte) 0xcd});
    assertEqualsB(ull.encode(0x1234567890abcdefL), new byte[] {0x08, 0x12, 0x34, 0x56, 0x78,
        (byte) 0x90, (byte) 0xab, (byte) 0xcd, (byte) 0xef});

    assertEqualsB(ull.encode(0xff34567890abcdefL),
        new byte[] {0x09, 0x34, 0x56, 0x78, (byte) 0x90, (byte) 0xab, (byte) 0xcd, (byte) 0xef});
    assertEqualsB(ull.encode(0xffff567890abcdefL),
        new byte[] {0x0a, 0x56, 0x78, (byte) 0x90, (byte) 0xab, (byte) 0xcd, (byte) 0xef});
    assertEqualsB(ull.encode(0xffffff7890abcdefL),
        new byte[] {0x0b, 0x78, (byte) 0x90, (byte) 0xab, (byte) 0xcd, (byte) 0xef});
    assertEqualsB(ull.encode(0xffffffff90abcdefL),
        new byte[] {0x0c, (byte) 0x90, (byte) 0xab, (byte) 0xcd, (byte) 0xef});
    assertEqualsB(ull.encode(0xffffffffffabcdefL),
        new byte[] {0x0d, (byte) 0xab, (byte) 0xcd, (byte) 0xef});
    assertEqualsB(ull.encode(0xffffffffffffcdefL), new byte[] {0x0e, (byte) 0xcd, (byte) 0xef});
    assertEqualsB(ull.encode(0xffffffffffffffefL), new byte[] {0x0f, (byte) 0xef});

    assertEqualsB(ull.encode(-1L), new byte[] {16});
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\lexicoder\ULongLexicoderTest.java
  public void testSortOrder() {
    // only testing non negative
    assertSortOrder(new ULongLexicoder(), Arrays.asList(0L, 0x01L, 0x1234L, 0x123456L, 0x12345678L,
        0x1234567890L, 0x1234567890abL, 0x1234567890abcdL, 0x1234567890abcdefL, Long.MAX_VALUE));
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\lexicoder\ULongLexicoderTest.java
  public void testDecodes() {
    assertDecodes(new ULongLexicoder(), Long.MIN_VALUE);
    assertDecodes(new ULongLexicoder(), -1L);
    assertDecodes(new ULongLexicoder(), 0L);
    assertDecodes(new ULongLexicoder(), 1L);
    assertDecodes(new ULongLexicoder(), 2L);
    assertDecodes(new ULongLexicoder(), Long.MAX_VALUE);
  }

}
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\lexicoder\UUIDLexicoderTest.java
  public void testSortOrder() {

    assertSortOrder(new UUIDLexicoder(), Arrays.asList(UUID.randomUUID(), UUID.randomUUID(),
        UUID.randomUUID(), UUID.randomUUID(), UUID.randomUUID(), UUID.randomUUID()));

    ArrayList<UUID> uuids = new ArrayList<>();

    for (long ms = -260L; ms < 260L; ms++) {
      for (long ls = -2L; ls < 2; ls++) {
        uuids.add(new UUID(ms, ls));
      }
    }

    assertSortOrder(new UUIDLexicoder(), uuids);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\lexicoder\UUIDLexicoderTest.java
  public void testDecodes() {
    assertDecodes(new UUIDLexicoder(), UUID.randomUUID());

  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\mapred\AccumuloFileOutputFormatTest.java
  public void validateConfiguration() {

    int a = 7;
    long b = 300L;
    long c = 50L;
    long d = 10L;
    String e = "snappy";
    SamplerConfiguration samplerConfig = new SamplerConfiguration(RowSampler.class.getName());
    samplerConfig.addOption("hasher", "murmur3_32");
    samplerConfig.addOption("modulus", "109");

    JobConf job = new JobConf();
    AccumuloFileOutputFormat.setReplication(job, a);
    AccumuloFileOutputFormat.setFileBlockSize(job, b);
    AccumuloFileOutputFormat.setDataBlockSize(job, c);
    AccumuloFileOutputFormat.setIndexBlockSize(job, d);
    AccumuloFileOutputFormat.setCompressionType(job, e);
    AccumuloFileOutputFormat.setSampler(job, samplerConfig);

    AccumuloConfiguration acuconf =
        org.apache.accumulo.core.clientImpl.mapreduce.lib.FileOutputConfigurator
            .getAccumuloConfiguration(AccumuloFileOutputFormat.class, job);

    assertEquals(7, acuconf.getCount(Property.TABLE_FILE_REPLICATION));
    assertEquals(300L, acuconf.getAsBytes(Property.TABLE_FILE_BLOCK_SIZE));
    assertEquals(50L, acuconf.getAsBytes(Property.TABLE_FILE_COMPRESSED_BLOCK_SIZE));
    assertEquals(10L, acuconf.getAsBytes(Property.TABLE_FILE_COMPRESSED_BLOCK_SIZE_INDEX));
    assertEquals("snappy", acuconf.get(Property.TABLE_FILE_COMPRESSION_TYPE));
    assertEquals(new SamplerConfigurationImpl(samplerConfig),
        SamplerConfigurationImpl.newSamplerConfig(acuconf));

    a = 17;
    b = 1300L;
    c = 150L;
    d = 110L;
    e = "lzo";
    samplerConfig = new SamplerConfiguration(RowSampler.class.getName());
    samplerConfig.addOption("hasher", "md5");
    samplerConfig.addOption("modulus", "100003");

    job = new JobConf();
    AccumuloFileOutputFormat.setReplication(job, a);
    AccumuloFileOutputFormat.setFileBlockSize(job, b);
    AccumuloFileOutputFormat.setDataBlockSize(job, c);
    AccumuloFileOutputFormat.setIndexBlockSize(job, d);
    AccumuloFileOutputFormat.setCompressionType(job, e);
    AccumuloFileOutputFormat.setSampler(job, samplerConfig);

    acuconf = org.apache.accumulo.core.clientImpl.mapreduce.lib.FileOutputConfigurator
        .getAccumuloConfiguration(AccumuloFileOutputFormat.class, job);

    assertEquals(17, acuconf.getCount(Property.TABLE_FILE_REPLICATION));
    assertEquals(1300L, acuconf.getAsBytes(Property.TABLE_FILE_BLOCK_SIZE));
    assertEquals(150L, acuconf.getAsBytes(Property.TABLE_FILE_COMPRESSED_BLOCK_SIZE));
    assertEquals(110L, acuconf.getAsBytes(Property.TABLE_FILE_COMPRESSED_BLOCK_SIZE_INDEX));
    assertEquals("lzo", acuconf.get(Property.TABLE_FILE_COMPRESSION_TYPE));
    assertEquals(new SamplerConfigurationImpl(samplerConfig),
        SamplerConfigurationImpl.newSamplerConfig(acuconf));

  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\mapred\AccumuloInputFormatTest.java
  public void testSetIterator() throws IOException {
    IteratorSetting is =
        new IteratorSetting(1, "WholeRow", "org.apache.accumulo.core.iterators.WholeRowIterator");
    AccumuloInputFormat.addIterator(job, is);
    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    is.write(new DataOutputStream(baos));
    String iterators = job.get("AccumuloInputFormat.ScanOpts.Iterators");
    assertEquals(Base64.getEncoder().encodeToString(baos.toByteArray()), iterators);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\mapred\AccumuloInputFormatTest.java
  public void testAddIterator() {
    AccumuloInputFormat.addIterator(job,
        new IteratorSetting(1, "WholeRow", WholeRowIterator.class));
    AccumuloInputFormat.addIterator(job, new IteratorSetting(2, "Versions",
        "org.apache.accumulo.core.iterators.VersioningIterator"));
    IteratorSetting iter =
        new IteratorSetting(3, "Count", "org.apache.accumulo.core.iterators.CountingIterator");
    iter.addOption("v1", "1");
    iter.addOption("junk", "\0omg:!\\xyzzy");
    AccumuloInputFormat.addIterator(job, iter);

    List<IteratorSetting> list = AccumuloInputFormat.getIterators(job);

    // Check the list size
    assertEquals(3, list.size());

    // Walk the list and make sure our settings are correct
    IteratorSetting setting = list.get(0);
    assertEquals(1, setting.getPriority());
    assertEquals("org.apache.accumulo.core.iterators.user.WholeRowIterator",
        setting.getIteratorClass());
    assertEquals("WholeRow", setting.getName());
    assertEquals(0, setting.getOptions().size());

    setting = list.get(1);
    assertEquals(2, setting.getPriority());
    assertEquals("org.apache.accumulo.core.iterators.VersioningIterator",
        setting.getIteratorClass());
    assertEquals("Versions", setting.getName());
    assertEquals(0, setting.getOptions().size());

    setting = list.get(2);
    assertEquals(3, setting.getPriority());
    assertEquals("org.apache.accumulo.core.iterators.CountingIterator", setting.getIteratorClass());
    assertEquals("Count", setting.getName());
    assertEquals(2, setting.getOptions().size());
    assertEquals("1", setting.getOptions().get("v1"));
    assertEquals("\0omg:!\\xyzzy", setting.getOptions().get("junk"));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\mapred\AccumuloInputFormatTest.java
  public void testIteratorOptionEncoding() {
    String key = "colon:delimited:key";
    String value = "comma,delimited,value";
    IteratorSetting someSetting = new IteratorSetting(1, "iterator", "Iterator.class");
    someSetting.addOption(key, value);
    AccumuloInputFormat.addIterator(job, someSetting);

    List<IteratorSetting> list = AccumuloInputFormat.getIterators(job);
    assertEquals(1, list.size());
    assertEquals(1, list.get(0).getOptions().size());
    assertEquals(list.get(0).getOptions().get(key), value);

    someSetting.addOption(key + "2", value);
    someSetting.setPriority(2);
    someSetting.setName("it2");
    AccumuloInputFormat.addIterator(job, someSetting);
    list = AccumuloInputFormat.getIterators(job);
    assertEquals(2, list.size());
    assertEquals(1, list.get(0).getOptions().size());
    assertEquals(list.get(0).getOptions().get(key), value);
    assertEquals(2, list.get(1).getOptions().size());
    assertEquals(list.get(1).getOptions().get(key), value);
    assertEquals(list.get(1).getOptions().get(key + "2"), value);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\mapred\AccumuloInputFormatTest.java
  public void testGetIteratorSettings() {
    AccumuloInputFormat.addIterator(job,
        new IteratorSetting(1, "WholeRow", "org.apache.accumulo.core.iterators.WholeRowIterator"));
    AccumuloInputFormat.addIterator(job, new IteratorSetting(2, "Versions",
        "org.apache.accumulo.core.iterators.VersioningIterator"));
    AccumuloInputFormat.addIterator(job,
        new IteratorSetting(3, "Count", "org.apache.accumulo.core.iterators.CountingIterator"));

    List<IteratorSetting> list = AccumuloInputFormat.getIterators(job);

    // Check the list size
    assertEquals(3, list.size());

    // Walk the list and make sure our settings are correct
    IteratorSetting setting = list.get(0);
    assertEquals(1, setting.getPriority());
    assertEquals("org.apache.accumulo.core.iterators.WholeRowIterator", setting.getIteratorClass());
    assertEquals("WholeRow", setting.getName());

    setting = list.get(1);
    assertEquals(2, setting.getPriority());
    assertEquals("org.apache.accumulo.core.iterators.VersioningIterator",
        setting.getIteratorClass());
    assertEquals("Versions", setting.getName());

    setting = list.get(2);
    assertEquals(3, setting.getPriority());
    assertEquals("org.apache.accumulo.core.iterators.CountingIterator", setting.getIteratorClass());
    assertEquals("Count", setting.getName());

  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\mapred\AccumuloInputFormatTest.java
  public void testSetRegex() {
    String regex = ">\"*%<>\'\\";

    IteratorSetting is = new IteratorSetting(50, regex, RegExFilter.class);
    RegExFilter.setRegexs(is, regex, null, null, null, false);
    AccumuloInputFormat.addIterator(job, is);

    assertEquals(regex, AccumuloInputFormat.getIterators(job).get(0).getName());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\mapred\AccumuloMultiTableInputFormatTest.java
  public void testTableQueryConfigSerialization() {
    String table1Name = testName.getMethodName() + "1";
    String table2Name = testName.getMethodName() + "2";
    JobConf job = new JobConf();

    org.apache.accumulo.core.client.mapreduce.InputTableConfig table1 =
        new org.apache.accumulo.core.client.mapreduce.InputTableConfig()
            .setRanges(Collections.singletonList(new Range("a", "b")))
            .fetchColumns(Collections.singleton(new Pair<>(new Text("CF1"), new Text("CQ1"))))
            .setIterators(
                Collections.singletonList(new IteratorSetting(50, "iter1", "iterclass1")));

    org.apache.accumulo.core.client.mapreduce.InputTableConfig table2 =
        new org.apache.accumulo.core.client.mapreduce.InputTableConfig()
            .setRanges(Collections.singletonList(new Range("a", "b")))
            .fetchColumns(Collections.singleton(new Pair<>(new Text("CF1"), new Text("CQ1"))))
            .setIterators(
                Collections.singletonList(new IteratorSetting(50, "iter1", "iterclass1")));

    Map<String,org.apache.accumulo.core.client.mapreduce.InputTableConfig> configMap =
        new HashMap<>();
    configMap.put(table1Name, table1);
    configMap.put(table2Name, table2);
    AccumuloMultiTableInputFormat.setInputTableConfigs(job, configMap);

    assertEquals(table1, AccumuloMultiTableInputFormat.getInputTableConfig(job, table1Name));
    assertEquals(table2, AccumuloMultiTableInputFormat.getInputTableConfig(job, table2Name));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\mapred\AccumuloOutputFormatTest.java
  public void testBWSettings() throws IOException {
    JobConf job = new JobConf();

    // make sure we aren't testing defaults
    final BatchWriterConfig bwDefaults = new BatchWriterConfig();
    assertNotEquals(7654321L, bwDefaults.getMaxLatency(TimeUnit.MILLISECONDS));
    assertNotEquals(9898989L, bwDefaults.getTimeout(TimeUnit.MILLISECONDS));
    assertNotEquals(42, bwDefaults.getMaxWriteThreads());
    assertNotEquals(1123581321L, bwDefaults.getMaxMemory());

    final BatchWriterConfig bwConfig = new BatchWriterConfig();
    bwConfig.setMaxLatency(7654321L, TimeUnit.MILLISECONDS);
    bwConfig.setTimeout(9898989L, TimeUnit.MILLISECONDS);
    bwConfig.setMaxWriteThreads(42);
    bwConfig.setMaxMemory(1123581321L);
    AccumuloOutputFormat.setBatchWriterOptions(job, bwConfig);

    AccumuloOutputFormat myAOF = new AccumuloOutputFormat() {
      @Override
      public void checkOutputSpecs(FileSystem ignored, JobConf job) {
        BatchWriterConfig bwOpts = getBatchWriterOptions(job);

        // passive check
        assertEquals(bwConfig.getMaxLatency(TimeUnit.MILLISECONDS),
            bwOpts.getMaxLatency(TimeUnit.MILLISECONDS));
        assertEquals(bwConfig.getTimeout(TimeUnit.MILLISECONDS),
            bwOpts.getTimeout(TimeUnit.MILLISECONDS));
        assertEquals(bwConfig.getMaxWriteThreads(), bwOpts.getMaxWriteThreads());
        assertEquals(bwConfig.getMaxMemory(), bwOpts.getMaxMemory());

        // explicit check
        assertEquals(7654321L, bwOpts.getMaxLatency(TimeUnit.MILLISECONDS));
        assertEquals(9898989L, bwOpts.getTimeout(TimeUnit.MILLISECONDS));
        assertEquals(42, bwOpts.getMaxWriteThreads());
        assertEquals(1123581321L, bwOpts.getMaxMemory());

      }
    };
    myAOF.checkOutputSpecs(null, job);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\mapred\RangeInputSplitTest.java
  public void testSimpleWritable() throws IOException {
    RangeInputSplit split = new RangeInputSplit("table", "1", new Range(new Key("a"), new Key("b")),
        new String[] {"localhost"});

    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    DataOutputStream dos = new DataOutputStream(baos);
    split.write(dos);

    RangeInputSplit newSplit = new RangeInputSplit();

    ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());
    DataInputStream dis = new DataInputStream(bais);
    newSplit.readFields(dis);

    assertEquals(split.getRange(), newSplit.getRange());
    assertTrue(Arrays.equals(split.getLocations(), newSplit.getLocations()));
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\mapred\RangeInputSplitTest.java
  public void testAllFieldsWritable() throws IOException {
    RangeInputSplit split = new RangeInputSplit("table", "1", new Range(new Key("a"), new Key("b")),
        new String[] {"localhost"});

    Set<Pair<Text,Text>> fetchedColumns = new HashSet<>();

    fetchedColumns.add(new Pair<>(new Text("colf1"), new Text("colq1")));
    fetchedColumns.add(new Pair<>(new Text("colf2"), new Text("colq2")));

    // Fake some iterators
    ArrayList<IteratorSetting> iterators = new ArrayList<>();
    IteratorSetting setting = new IteratorSetting(50, SummingCombiner.class);
    setting.addOption("foo", "bar");
    iterators.add(setting);

    setting = new IteratorSetting(100, WholeRowIterator.class);
    setting.addOption("bar", "foo");
    iterators.add(setting);

    split.setOffline(true);
    split.setIsolatedScan(true);
    split.setUsesLocalIterators(true);
    split.setFetchedColumns(fetchedColumns);
    split.setIterators(iterators);
    split.setLogLevel(Level.WARN);

    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    DataOutputStream dos = new DataOutputStream(baos);
    split.write(dos);

    RangeInputSplit newSplit = new RangeInputSplit();

    ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());
    DataInputStream dis = new DataInputStream(bais);
    newSplit.readFields(dis);

    assertEquals(split.getRange(), newSplit.getRange());
    assertArrayEquals(split.getLocations(), newSplit.getLocations());

    assertEquals(split.isOffline(), newSplit.isOffline());
    assertEquals(split.isIsolatedScan(), newSplit.isOffline());
    assertEquals(split.usesLocalIterators(), newSplit.usesLocalIterators());
    assertEquals(split.getFetchedColumns(), newSplit.getFetchedColumns());
    assertEquals(split.getIterators(), newSplit.getIterators());
    assertEquals(split.getLogLevel(), newSplit.getLogLevel());
  }

}
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\mapreduce\AccumuloFileOutputFormatTest.java
  public void validateConfiguration() throws IOException {

    int a = 7;
    long b = 300L;
    long c = 50L;
    long d = 10L;
    String e = "snappy";
    SamplerConfiguration samplerConfig = new SamplerConfiguration(RowSampler.class.getName());
    samplerConfig.addOption("hasher", "murmur3_32");
    samplerConfig.addOption("modulus", "109");

    Job job1 = Job.getInstance();
    AccumuloFileOutputFormat.setReplication(job1, a);
    AccumuloFileOutputFormat.setFileBlockSize(job1, b);
    AccumuloFileOutputFormat.setDataBlockSize(job1, c);
    AccumuloFileOutputFormat.setIndexBlockSize(job1, d);
    AccumuloFileOutputFormat.setCompressionType(job1, e);
    AccumuloFileOutputFormat.setSampler(job1, samplerConfig);

    AccumuloConfiguration acuconf =
        org.apache.accumulo.core.clientImpl.mapreduce.lib.FileOutputConfigurator
            .getAccumuloConfiguration(AccumuloFileOutputFormat.class, job1.getConfiguration());

    assertEquals(7, acuconf.getCount(Property.TABLE_FILE_REPLICATION));
    assertEquals(300L, acuconf.getAsBytes(Property.TABLE_FILE_BLOCK_SIZE));
    assertEquals(50L, acuconf.getAsBytes(Property.TABLE_FILE_COMPRESSED_BLOCK_SIZE));
    assertEquals(10L, acuconf.getAsBytes(Property.TABLE_FILE_COMPRESSED_BLOCK_SIZE_INDEX));
    assertEquals("snappy", acuconf.get(Property.TABLE_FILE_COMPRESSION_TYPE));
    assertEquals(new SamplerConfigurationImpl(samplerConfig),
        SamplerConfigurationImpl.newSamplerConfig(acuconf));

    a = 17;
    b = 1300L;
    c = 150L;
    d = 110L;
    e = "lzo";
    samplerConfig = new SamplerConfiguration(RowSampler.class.getName());
    samplerConfig.addOption("hasher", "md5");
    samplerConfig.addOption("modulus", "100003");

    Job job2 = Job.getInstance();
    AccumuloFileOutputFormat.setReplication(job2, a);
    AccumuloFileOutputFormat.setFileBlockSize(job2, b);
    AccumuloFileOutputFormat.setDataBlockSize(job2, c);
    AccumuloFileOutputFormat.setIndexBlockSize(job2, d);
    AccumuloFileOutputFormat.setCompressionType(job2, e);
    AccumuloFileOutputFormat.setSampler(job2, samplerConfig);

    acuconf = org.apache.accumulo.core.clientImpl.mapreduce.lib.FileOutputConfigurator
        .getAccumuloConfiguration(AccumuloFileOutputFormat.class, job2.getConfiguration());

    assertEquals(17, acuconf.getCount(Property.TABLE_FILE_REPLICATION));
    assertEquals(1300L, acuconf.getAsBytes(Property.TABLE_FILE_BLOCK_SIZE));
    assertEquals(150L, acuconf.getAsBytes(Property.TABLE_FILE_COMPRESSED_BLOCK_SIZE));
    assertEquals(110L, acuconf.getAsBytes(Property.TABLE_FILE_COMPRESSED_BLOCK_SIZE_INDEX));
    assertEquals("lzo", acuconf.get(Property.TABLE_FILE_COMPRESSION_TYPE));
    assertEquals(new SamplerConfigurationImpl(samplerConfig),
        SamplerConfigurationImpl.newSamplerConfig(acuconf));

  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\mapreduce\AccumuloInputFormatTest.java
  public void testSetIterator() throws IOException {
    Job job = Job.getInstance();

    IteratorSetting is =
        new IteratorSetting(1, "WholeRow", "org.apache.accumulo.core.iterators.WholeRowIterator");
    AccumuloInputFormat.addIterator(job, is);
    Configuration conf = job.getConfiguration();
    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    is.write(new DataOutputStream(baos));
    String iterators = conf.get("AccumuloInputFormat.ScanOpts.Iterators");
    assertEquals(Base64.getEncoder().encodeToString(baos.toByteArray()), iterators);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\mapreduce\AccumuloInputFormatTest.java
  public void testAddIterator() throws IOException {
    Job job = Job.getInstance();

    AccumuloInputFormat.addIterator(job,
        new IteratorSetting(1, "WholeRow", WholeRowIterator.class));
    AccumuloInputFormat.addIterator(job, new IteratorSetting(2, "Versions",
        "org.apache.accumulo.core.iterators.VersioningIterator"));
    IteratorSetting iter =
        new IteratorSetting(3, "Count", "org.apache.accumulo.core.iterators.CountingIterator");
    iter.addOption("v1", "1");
    iter.addOption("junk", "\0omg:!\\xyzzy");
    AccumuloInputFormat.addIterator(job, iter);

    List<IteratorSetting> list = AccumuloInputFormat.getIterators(job);

    // Check the list size
    assertEquals(3, list.size());

    // Walk the list and make sure our settings are correct
    IteratorSetting setting = list.get(0);
    assertEquals(1, setting.getPriority());
    assertEquals("org.apache.accumulo.core.iterators.user.WholeRowIterator",
        setting.getIteratorClass());
    assertEquals("WholeRow", setting.getName());
    assertEquals(0, setting.getOptions().size());

    setting = list.get(1);
    assertEquals(2, setting.getPriority());
    assertEquals("org.apache.accumulo.core.iterators.VersioningIterator",
        setting.getIteratorClass());
    assertEquals("Versions", setting.getName());
    assertEquals(0, setting.getOptions().size());

    setting = list.get(2);
    assertEquals(3, setting.getPriority());
    assertEquals("org.apache.accumulo.core.iterators.CountingIterator", setting.getIteratorClass());
    assertEquals("Count", setting.getName());
    assertEquals(2, setting.getOptions().size());
    assertEquals("1", setting.getOptions().get("v1"));
    assertEquals("\0omg:!\\xyzzy", setting.getOptions().get("junk"));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\mapreduce\AccumuloInputFormatTest.java
  public void testIteratorOptionEncoding() throws Throwable {
    String key = "colon:delimited:key";
    String value = "comma,delimited,value";
    IteratorSetting someSetting = new IteratorSetting(1, "iterator", "Iterator.class");
    someSetting.addOption(key, value);
    Job job = Job.getInstance();
    AccumuloInputFormat.addIterator(job, someSetting);

    List<IteratorSetting> list = AccumuloInputFormat.getIterators(job);
    assertEquals(1, list.size());
    assertEquals(1, list.get(0).getOptions().size());
    assertEquals(list.get(0).getOptions().get(key), value);

    someSetting.addOption(key + "2", value);
    someSetting.setPriority(2);
    someSetting.setName("it2");
    AccumuloInputFormat.addIterator(job, someSetting);
    list = AccumuloInputFormat.getIterators(job);
    assertEquals(2, list.size());
    assertEquals(1, list.get(0).getOptions().size());
    assertEquals(list.get(0).getOptions().get(key), value);
    assertEquals(2, list.get(1).getOptions().size());
    assertEquals(list.get(1).getOptions().get(key), value);
    assertEquals(list.get(1).getOptions().get(key + "2"), value);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\mapreduce\AccumuloInputFormatTest.java
  public void testGetIteratorSettings() throws IOException {
    Job job = Job.getInstance();

    AccumuloInputFormat.addIterator(job,
        new IteratorSetting(1, "WholeRow", "org.apache.accumulo.core.iterators.WholeRowIterator"));
    AccumuloInputFormat.addIterator(job, new IteratorSetting(2, "Versions",
        "org.apache.accumulo.core.iterators.VersioningIterator"));
    AccumuloInputFormat.addIterator(job,
        new IteratorSetting(3, "Count", "org.apache.accumulo.core.iterators.CountingIterator"));

    List<IteratorSetting> list = AccumuloInputFormat.getIterators(job);

    // Check the list size
    assertEquals(3, list.size());

    // Walk the list and make sure our settings are correct
    IteratorSetting setting = list.get(0);
    assertEquals(1, setting.getPriority());
    assertEquals("org.apache.accumulo.core.iterators.WholeRowIterator", setting.getIteratorClass());
    assertEquals("WholeRow", setting.getName());

    setting = list.get(1);
    assertEquals(2, setting.getPriority());
    assertEquals("org.apache.accumulo.core.iterators.VersioningIterator",
        setting.getIteratorClass());
    assertEquals("Versions", setting.getName());

    setting = list.get(2);
    assertEquals(3, setting.getPriority());
    assertEquals("org.apache.accumulo.core.iterators.CountingIterator", setting.getIteratorClass());
    assertEquals("Count", setting.getName());

  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\mapreduce\AccumuloInputFormatTest.java
  public void testSetRegex() throws IOException {
    Job job = Job.getInstance();

    String regex = ">\"*%<>\'\\";

    IteratorSetting is = new IteratorSetting(50, regex, RegExFilter.class);
    RegExFilter.setRegexs(is, regex, null, null, null, false);
    AccumuloInputFormat.addIterator(job, is);

    assertEquals(regex, AccumuloInputFormat.getIterators(job).get(0).getName());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\mapreduce\AccumuloInputFormatTest.java
  public void testEmptyColumnFamily() throws IOException {
    Job job = Job.getInstance();
    Set<Pair<Text,Text>> cols = new HashSet<>();
    cols.add(new Pair<>(new Text(""), null));
    cols.add(new Pair<>(new Text("foo"), new Text("bar")));
    cols.add(new Pair<>(new Text(""), new Text("bar")));
    cols.add(new Pair<>(new Text(""), new Text("")));
    cols.add(new Pair<>(new Text("foo"), new Text("")));
    AccumuloInputFormat.fetchColumns(job, cols);
    Set<Pair<Text,Text>> setCols = AccumuloInputFormat.getFetchedColumns(job);
    assertEquals(cols, setCols);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\mapreduce\AccumuloMultiTableInputFormatTest.java
  public void testInputTableConfigSerialization() throws IOException {
    String table1 = testName.getMethodName() + "1";
    String table2 = testName.getMethodName() + "2";
    Job job = Job.getInstance();

    InputTableConfig tableConfig = new InputTableConfig()
        .setRanges(Collections.singletonList(new Range("a", "b")))
        .fetchColumns(Collections.singleton(new Pair<>(new Text("CF1"), new Text("CQ1"))))
        .setIterators(Collections.singletonList(new IteratorSetting(50, "iter1", "iterclass1")));

    Map<String,InputTableConfig> configMap = new HashMap<>();
    configMap.put(table1, tableConfig);
    configMap.put(table2, tableConfig);

    AccumuloMultiTableInputFormat.setInputTableConfigs(job, configMap);

    assertEquals(tableConfig, AccumuloMultiTableInputFormat.getInputTableConfig(job, table1));
    assertEquals(tableConfig, AccumuloMultiTableInputFormat.getInputTableConfig(job, table2));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\mapreduce\AccumuloOutputFormatTest.java
  public void testBWSettings() throws IOException {
    Job job = Job.getInstance();

    // make sure we aren't testing defaults
    final BatchWriterConfig bwDefaults = new BatchWriterConfig();
    assertNotEquals(7654321L, bwDefaults.getMaxLatency(TimeUnit.MILLISECONDS));
    assertNotEquals(9898989L, bwDefaults.getTimeout(TimeUnit.MILLISECONDS));
    assertNotEquals(42, bwDefaults.getMaxWriteThreads());
    assertNotEquals(1123581321L, bwDefaults.getMaxMemory());

    final BatchWriterConfig bwConfig = new BatchWriterConfig();
    bwConfig.setMaxLatency(7654321L, TimeUnit.MILLISECONDS);
    bwConfig.setTimeout(9898989L, TimeUnit.MILLISECONDS);
    bwConfig.setMaxWriteThreads(42);
    bwConfig.setMaxMemory(1123581321L);
    AccumuloOutputFormat.setBatchWriterOptions(job, bwConfig);

    AccumuloOutputFormat myAOF = new AccumuloOutputFormat() {
      @Override
      public void checkOutputSpecs(JobContext job) {
        BatchWriterConfig bwOpts = getBatchWriterOptions(job);

        // passive check
        assertEquals(bwConfig.getMaxLatency(TimeUnit.MILLISECONDS),
            bwOpts.getMaxLatency(TimeUnit.MILLISECONDS));
        assertEquals(bwConfig.getTimeout(TimeUnit.MILLISECONDS),
            bwOpts.getTimeout(TimeUnit.MILLISECONDS));
        assertEquals(bwConfig.getMaxWriteThreads(), bwOpts.getMaxWriteThreads());
        assertEquals(bwConfig.getMaxMemory(), bwOpts.getMaxMemory());

        // explicit check
        assertEquals(7654321L, bwOpts.getMaxLatency(TimeUnit.MILLISECONDS));
        assertEquals(9898989L, bwOpts.getTimeout(TimeUnit.MILLISECONDS));
        assertEquals(42, bwOpts.getMaxWriteThreads());
        assertEquals(1123581321L, bwOpts.getMaxMemory());

      }
    };
    myAOF.checkOutputSpecs(job);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\mapreduce\InputTableConfigTest.java
  public void testSerialization_OnlyTable() throws IOException {
    byte[] serialized = serialize(tableQueryConfig);
    InputTableConfig actualConfig = deserialize(serialized);

    assertEquals(tableQueryConfig, actualConfig);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\mapreduce\InputTableConfigTest.java
  public void testSerialization_allBooleans() throws IOException {
    tableQueryConfig.setAutoAdjustRanges(false);
    tableQueryConfig.setOfflineScan(true);
    tableQueryConfig.setUseIsolatedScanners(true);
    tableQueryConfig.setUseLocalIterators(true);
    byte[] serialized = serialize(tableQueryConfig);
    InputTableConfig actualConfig = deserialize(serialized);

    assertEquals(tableQueryConfig, actualConfig);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\mapreduce\InputTableConfigTest.java
  public void testSerialization_ranges() throws IOException {
    List<Range> ranges = new ArrayList<>();
    ranges.add(new Range("a", "b"));
    ranges.add(new Range("c", "d"));
    tableQueryConfig.setRanges(ranges);

    byte[] serialized = serialize(tableQueryConfig);
    InputTableConfig actualConfig = deserialize(serialized);

    assertEquals(ranges, actualConfig.getRanges());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\mapreduce\InputTableConfigTest.java
  public void testSerialization_columns() throws IOException {
    Set<Pair<Text,Text>> columns = new HashSet<>();
    columns.add(new Pair<>(new Text("cf1"), new Text("cq1")));
    columns.add(new Pair<>(new Text("cf2"), null));
    tableQueryConfig.fetchColumns(columns);

    byte[] serialized = serialize(tableQueryConfig);
    InputTableConfig actualConfig = deserialize(serialized);

    assertEquals(actualConfig.getFetchedColumns(), columns);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\mapreduce\InputTableConfigTest.java
  public void testSerialization_iterators() throws IOException {
    List<IteratorSetting> settings = new ArrayList<>();
    settings.add(new IteratorSetting(50, "iter", "iterclass"));
    settings.add(new IteratorSetting(55, "iter2", "iterclass2"));
    tableQueryConfig.setIterators(settings);
    byte[] serialized = serialize(tableQueryConfig);
    InputTableConfig actualConfig = deserialize(serialized);
    assertEquals(actualConfig.getIterators(), settings);

  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\mapreduce\InputTableConfigTest.java
  public void testSamplerConfig() throws IOException {
    SamplerConfiguration sc = new SamplerConfiguration("com.foo.S1").addOption("k1", "v1");
    tableQueryConfig.setSamplerConfiguration(sc);
    InputTableConfig actualConfig = deserialize(serialize(tableQueryConfig));
    assertEquals(sc, actualConfig.getSamplerConfiguration());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\mapreduce\RangeInputSplitTest.java
  public void testSimpleWritable() throws IOException {
    RangeInputSplit split = new RangeInputSplit("table", "1", new Range(new Key("a"), new Key("b")),
        new String[] {"localhost"});

    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    DataOutputStream dos = new DataOutputStream(baos);
    split.write(dos);

    RangeInputSplit newSplit = new RangeInputSplit();

    ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());
    DataInputStream dis = new DataInputStream(bais);
    newSplit.readFields(dis);

    assertEquals(split.getTableName(), newSplit.getTableName());
    assertEquals(split.getTableId(), newSplit.getTableId());
    assertEquals(split.getRange(), newSplit.getRange());
    assertTrue(Arrays.equals(split.getLocations(), newSplit.getLocations()));
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\mapreduce\RangeInputSplitTest.java
  public void testAllFieldsWritable() throws IOException {
    RangeInputSplit split = new RangeInputSplit("table", "1", new Range(new Key("a"), new Key("b")),
        new String[] {"localhost"});

    Set<Pair<Text,Text>> fetchedColumns = new HashSet<>();

    fetchedColumns.add(new Pair<>(new Text("colf1"), new Text("colq1")));
    fetchedColumns.add(new Pair<>(new Text("colf2"), new Text("colq2")));

    // Fake some iterators
    ArrayList<IteratorSetting> iterators = new ArrayList<>();
    IteratorSetting setting = new IteratorSetting(50, SummingCombiner.class);
    setting.addOption("foo", "bar");
    iterators.add(setting);

    setting = new IteratorSetting(100, WholeRowIterator.class);
    setting.addOption("bar", "foo");
    iterators.add(setting);

    split.setTableName("table");
    split.setOffline(true);
    split.setIsolatedScan(true);
    split.setUsesLocalIterators(true);
    split.setFetchedColumns(fetchedColumns);
    split.setIterators(iterators);
    split.setLogLevel(Level.WARN);

    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    DataOutputStream dos = new DataOutputStream(baos);
    split.write(dos);

    RangeInputSplit newSplit = new RangeInputSplit();

    ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());
    DataInputStream dis = new DataInputStream(bais);
    newSplit.readFields(dis);

    assertEquals(split.getRange(), newSplit.getRange());
    assertArrayEquals(split.getLocations(), newSplit.getLocations());

    assertEquals(split.getTableName(), newSplit.getTableName());
    assertEquals(split.isOffline(), newSplit.isOffline());
    assertEquals(split.isIsolatedScan(), newSplit.isOffline());
    assertEquals(split.usesLocalIterators(), newSplit.usesLocalIterators());
    assertEquals(split.getFetchedColumns(), newSplit.getFetchedColumns());
    assertEquals(split.getIterators(), newSplit.getIterators());
    assertEquals(split.getLogLevel(), newSplit.getLogLevel());
  }

}
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\mapreduce\lib\partition\RangePartitionerTest.java
  public void testNoSubBins() throws IOException {
    for (int i = -2; i < 2; ++i) {
      checkExpectedBins(i, new String[] {"A", "B", "C"}, new int[] {0, 1, 2});
      checkExpectedBins(i, new String[] {"C", "A", "B"}, new int[] {2, 0, 1});
      checkExpectedBins(i, new String[] {"", "AA", "BB", "CC"}, new int[] {0, 1, 2, 3});
    }
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\mapreduce\lib\partition\RangePartitionerTest.java
  public void testSubBins() throws IOException {
    checkExpectedRangeBins(2, new String[] {"A", "B", "C"}, new int[] {1, 3, 5});
    checkExpectedRangeBins(2, new String[] {"C", "A", "B"}, new int[] {5, 1, 3});
    checkExpectedRangeBins(2, new String[] {"", "AA", "BB", "CC"}, new int[] {1, 3, 5, 7});

    checkExpectedRangeBins(3, new String[] {"A", "B", "C"}, new int[] {2, 5, 8});
    checkExpectedRangeBins(3, new String[] {"C", "A", "B"}, new int[] {8, 2, 5});
    checkExpectedRangeBins(3, new String[] {"", "AA", "BB", "CC"}, new int[] {2, 5, 8, 11});

    checkExpectedRangeBins(10, new String[] {"A", "B", "C"}, new int[] {9, 19, 29});
    checkExpectedRangeBins(10, new String[] {"C", "A", "B"}, new int[] {29, 9, 19});
    checkExpectedRangeBins(10, new String[] {"", "AA", "BB", "CC"}, new int[] {9, 19, 29, 39});
  }

  private RangePartitioner prepPartitioner(int numSubBins) throws IOException {
    Job job = Job.getInstance();
    RangePartitioner.setNumSubBins(job, numSubBins);
    RangePartitioner rp = new RangePartitioner();
    rp.setConf(job.getConfiguration());
    return rp;
  }

  private void checkExpectedRangeBins(int numSubBins, String[] strings, int[] rangeEnds)
      throws IOException {
    assertEquals(strings.length, rangeEnds.length);
    for (int i = 0; i < strings.length; ++i) {
      int endRange = rangeEnds[i];
      int startRange = endRange + 1 - numSubBins;
      int part =
          prepPartitioner(numSubBins).findPartition(new Text(strings[i]), cutArray, numSubBins);
      assertTrue(part >= startRange);
      assertTrue(part <= endRange);
    }
  }

  private void checkExpectedBins(int numSubBins, String[] strings, int[] bins) throws IOException {
    assertEquals(strings.length, bins.length);
    for (int i = 0; i < strings.length; ++i) {
      int bin = bins[i], part =
          prepPartitioner(numSubBins).findPartition(new Text(strings[i]), cutArray, numSubBins);
      assertEquals(bin, part);
    }
  }
}
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\rfile\RFileClientTest.java
  public void testIndependance() throws Exception {
    // test to ensure two iterators allocated from same RFile scanner are independent.

    LocalFileSystem localFs = FileSystem.getLocal(new Configuration());

    SortedMap<Key,Value> testData = createTestData(10, 10, 10);

    String testFile = createRFile(testData);

    Scanner scanner = RFile.newScanner().from(testFile).withFileSystem(localFs).build();
    Range range1 = Range.exact(rowStr(5));
    scanner.setRange(range1);
    Iterator<Entry<Key,Value>> scnIter1 = scanner.iterator();
    Iterator<Entry<Key,Value>> mapIter1 =
        testData.subMap(range1.getStartKey(), range1.getEndKey()).entrySet().iterator();

    Range range2 = new Range(rowStr(3), true, rowStr(4), true);
    scanner.setRange(range2);
    Iterator<Entry<Key,Value>> scnIter2 = scanner.iterator();
    Iterator<Entry<Key,Value>> mapIter2 =
        testData.subMap(range2.getStartKey(), range2.getEndKey()).entrySet().iterator();

    while (scnIter1.hasNext() || scnIter2.hasNext()) {
      if (scnIter1.hasNext()) {
        assertTrue(mapIter1.hasNext());
        assertEquals(scnIter1.next(), mapIter1.next());
      } else {
        assertFalse(mapIter1.hasNext());
      }

      if (scnIter2.hasNext()) {
        assertTrue(mapIter2.hasNext());
        assertEquals(scnIter2.next(), mapIter2.next());
      } else {
        assertFalse(mapIter2.hasNext());
      }
    }

    assertFalse(mapIter1.hasNext());
    assertFalse(mapIter2.hasNext());

    scanner.close();
  }

  SortedMap<Key,Value> toMap(Scanner scanner) {
    TreeMap<Key,Value> map = new TreeMap<>();
    for (Entry<Key,Value> entry : scanner) {
      map.put(entry.getKey(), entry.getValue());
    }
    return map;
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\rfile\RFileClientTest.java
  public void testMultipleSources() throws Exception {
    SortedMap<Key,Value> testData1 = createTestData(10, 10, 10);
    SortedMap<Key,Value> testData2 = createTestData(0, 10, 0, 10, 10);

    String testFile1 = createRFile(testData1);
    String testFile2 = createRFile(testData2);

    LocalFileSystem localFs = FileSystem.getLocal(new Configuration());
    Scanner scanner = RFile.newScanner().from(testFile1, testFile2).withFileSystem(localFs).build();

    TreeMap<Key,Value> expected = new TreeMap<>(testData1);
    expected.putAll(testData2);

    assertEquals(expected, toMap(scanner));

    Range range = new Range(rowStr(3), true, rowStr(14), true);
    scanner.setRange(range);
    assertEquals(expected.subMap(range.getStartKey(), range.getEndKey()), toMap(scanner));

    scanner.close();
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\rfile\RFileClientTest.java
  public void testWriterTableProperties() throws Exception {
    LocalFileSystem localFs = FileSystem.getLocal(new Configuration());

    String testFile = createTmpTestFile();

    Map<String,String> props = new HashMap<>();
    props.put(Property.TABLE_FILE_COMPRESSED_BLOCK_SIZE.getKey(), "1K");
    props.put(Property.TABLE_FILE_COMPRESSED_BLOCK_SIZE_INDEX.getKey(), "1K");
    RFileWriter writer =
        RFile.newWriter().to(testFile).withFileSystem(localFs).withTableProperties(props).build();

    SortedMap<Key,Value> testData1 = createTestData(10, 10, 10);
    writer.append(testData1.entrySet());
    writer.close();

    Reader reader = getReader(localFs, testFile);
    FileSKVIterator iiter = reader.getIndex();

    int count = 0;
    while (iiter.hasTop()) {
      count++;
      iiter.next();
    }

    // if settings are used then should create multiple index entries
    assertTrue(count > 10);

    reader.close();

    Scanner scanner = RFile.newScanner().from(testFile).withFileSystem(localFs).build();
    assertEquals(testData1, toMap(scanner));
    scanner.close();
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\rfile\RFileClientTest.java
  public void testLocalityGroups() throws Exception {

    SortedMap<Key,Value> testData1 = createTestData(0, 10, 0, 2, 10);
    SortedMap<Key,Value> testData2 = createTestData(0, 10, 2, 1, 10);
    SortedMap<Key,Value> defaultData = createTestData(0, 10, 3, 7, 10);

    LocalFileSystem localFs = FileSystem.getLocal(new Configuration());
    String testFile = createTmpTestFile();
    RFileWriter writer = RFile.newWriter().to(testFile).withFileSystem(localFs).build();

    writer.startNewLocalityGroup("z", colStr(0), colStr(1));
    writer.append(testData1.entrySet());

    writer.startNewLocalityGroup("h", colStr(2));
    writer.append(testData2.entrySet());

    writer.startDefaultLocalityGroup();
    writer.append(defaultData.entrySet());

    writer.close();

    Scanner scanner = RFile.newScanner().from(testFile).withFileSystem(localFs).build();

    scanner.fetchColumnFamily(new Text(colStr(0)));
    scanner.fetchColumnFamily(new Text(colStr(1)));
    assertEquals(testData1, toMap(scanner));

    scanner.clearColumns();
    scanner.fetchColumnFamily(new Text(colStr(2)));
    assertEquals(testData2, toMap(scanner));

    scanner.clearColumns();
    for (int i = 3; i < 10; i++) {
      scanner.fetchColumnFamily(new Text(colStr(i)));
    }
    assertEquals(defaultData, toMap(scanner));

    scanner.clearColumns();
    assertEquals(createTestData(10, 10, 10), toMap(scanner));

    scanner.close();

    Reader reader = getReader(localFs, testFile);
    Map<String,ArrayList<ByteSequence>> lGroups = reader.getLocalityGroupCF();
    assertTrue(lGroups.containsKey("z"));
    assertEquals(2, lGroups.get("z").size());
    assertTrue(lGroups.get("z").contains(new ArrayByteSequence(colStr(0))));
    assertTrue(lGroups.get("z").contains(new ArrayByteSequence(colStr(1))));
    assertTrue(lGroups.containsKey("h"));
    assertEquals(Arrays.asList(new ArrayByteSequence(colStr(2))), lGroups.get("h"));
    reader.close();
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\rfile\RFileClientTest.java
  public void testIterators() throws Exception {

    LocalFileSystem localFs = FileSystem.getLocal(new Configuration());
    SortedMap<Key,Value> testData = createTestData(10, 10, 10);
    String testFile = createRFile(testData);

    IteratorSetting is = new IteratorSetting(50, "regex", RegExFilter.class);
    RegExFilter.setRegexs(is, ".*00000[78].*", null, null, null, false);

    Scanner scanner = RFile.newScanner().from(testFile).withFileSystem(localFs).build();
    scanner.addScanIterator(is);

    assertEquals(createTestData(7, 2, 0, 10, 10), toMap(scanner));

    scanner.close();
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\rfile\RFileClientTest.java
  public void testAuths() throws Exception {
    LocalFileSystem localFs = FileSystem.getLocal(new Configuration());
    String testFile = createTmpTestFile();
    RFileWriter writer = RFile.newWriter().to(testFile).withFileSystem(localFs).build();

    Key k1 = new Key("r1", "f1", "q1", "A&B");
    Key k2 = new Key("r1", "f1", "q2", "A");
    Key k3 = new Key("r1", "f1", "q3");

    Value v1 = new Value("p");
    Value v2 = new Value("c");
    Value v3 = new Value("t");

    writer.append(k1, v1);
    writer.append(k2, v2);
    writer.append(k3, v3);
    writer.close();

    Scanner scanner = RFile.newScanner().from(testFile).withFileSystem(localFs)
        .withAuthorizations(new Authorizations("A")).build();
    assertEquals(Map.of(k2, v2, k3, v3), toMap(scanner));
    assertEquals(new Authorizations("A"), scanner.getAuthorizations());
    scanner.close();

    scanner = RFile.newScanner().from(testFile).withFileSystem(localFs)
        .withAuthorizations(new Authorizations("A", "B")).build();
    assertEquals(Map.of(k1, v1, k2, v2, k3, v3), toMap(scanner));
    assertEquals(new Authorizations("A", "B"), scanner.getAuthorizations());
    scanner.close();

    scanner = RFile.newScanner().from(testFile).withFileSystem(localFs)
        .withAuthorizations(new Authorizations("B")).build();
    assertEquals(Map.of(k3, v3), toMap(scanner));
    assertEquals(new Authorizations("B"), scanner.getAuthorizations());
    scanner.close();
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\rfile\RFileClientTest.java
  public void testNoSystemIters() throws Exception {
    LocalFileSystem localFs = FileSystem.getLocal(new Configuration());
    String testFile = createTmpTestFile();
    RFileWriter writer = RFile.newWriter().to(testFile).withFileSystem(localFs).build();

    Key k1 = new Key("r1", "f1", "q1");
    k1.setTimestamp(3);

    Key k2 = new Key("r1", "f1", "q1");
    k2.setTimestamp(6);
    k2.setDeleted(true);

    Value v1 = new Value("p");
    Value v2 = new Value("");

    writer.append(k2, v2);
    writer.append(k1, v1);
    writer.close();

    Scanner scanner = RFile.newScanner().from(testFile).withFileSystem(localFs).build();
    assertFalse(scanner.iterator().hasNext());
    scanner.close();

    scanner =
        RFile.newScanner().from(testFile).withFileSystem(localFs).withoutSystemIterators().build();
    assertEquals(Map.of(k2, v2, k1, v1), toMap(scanner));
    scanner.setRange(new Range("r2"));
    assertFalse(scanner.iterator().hasNext());
    scanner.close();
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\rfile\RFileClientTest.java
  public void testBounds() throws Exception {
    LocalFileSystem localFs = FileSystem.getLocal(new Configuration());
    SortedMap<Key,Value> testData = createTestData(10, 10, 10);
    String testFile = createRFile(testData);

    // set a lower bound row
    Range bounds = new Range(rowStr(3), false, null, true);
    Scanner scanner =
        RFile.newScanner().from(testFile).withFileSystem(localFs).withBounds(bounds).build();
    assertEquals(createTestData(4, 6, 0, 10, 10), toMap(scanner));
    scanner.close();

    // set an upper bound row
    bounds = new Range(null, false, rowStr(7), true);
    scanner = RFile.newScanner().from(testFile).withFileSystem(localFs).withBounds(bounds).build();
    assertEquals(createTestData(8, 10, 10), toMap(scanner));
    scanner.close();

    // set row bounds
    bounds = new Range(rowStr(3), false, rowStr(7), true);
    scanner = RFile.newScanner().from(testFile).withFileSystem(localFs).withBounds(bounds).build();
    assertEquals(createTestData(4, 4, 0, 10, 10), toMap(scanner));
    scanner.close();

    // set a row family bound
    bounds = Range.exact(rowStr(3), colStr(5));
    scanner = RFile.newScanner().from(testFile).withFileSystem(localFs).withBounds(bounds).build();
    assertEquals(createTestData(3, 1, 5, 1, 10), toMap(scanner));
    scanner.close();
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\rfile\RFileClientTest.java
  public void testScannerTableProperties() throws Exception {
    NewTableConfiguration ntc = new NewTableConfiguration();

    LocalFileSystem localFs = FileSystem.getLocal(new Configuration());
    String testFile = createTmpTestFile();
    RFileWriter writer = RFile.newWriter().to(testFile).withFileSystem(localFs).build();

    Key k1 = new Key("r1", "f1", "q1");
    k1.setTimestamp(3);

    Key k2 = new Key("r1", "f1", "q1");
    k2.setTimestamp(6);

    Value v1 = new Value("p");
    Value v2 = new Value("q");

    writer.append(k2, v2);
    writer.append(k1, v1);
    writer.close();

    // pass in table config that has versioning iterator configured
    Scanner scanner = RFile.newScanner().from(testFile).withFileSystem(localFs)
        .withTableProperties(ntc.getProperties()).build();
    assertEquals(Map.of(k2, v2), toMap(scanner));
    scanner.close();

    scanner = RFile.newScanner().from(testFile).withFileSystem(localFs).build();
    assertEquals(Map.of(k2, v2, k1, v1), toMap(scanner));
    scanner.close();
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\rfile\RFileClientTest.java
  public void testSampling() throws Exception {

    SortedMap<Key,Value> testData1 = createTestData(1000, 2, 1);

    LocalFileSystem localFs = FileSystem.getLocal(new Configuration());
    String testFile = createTmpTestFile();

    SamplerConfiguration sc = new SamplerConfiguration(RowSampler.class)
        .setOptions(Map.of("hasher", "murmur3_32", "modulus", "19"));

    RFileWriter writer =
        RFile.newWriter().to(testFile).withFileSystem(localFs).withSampler(sc).build();
    writer.append(testData1.entrySet());
    writer.close();

    Scanner scanner = RFile.newScanner().from(testFile).withFileSystem(localFs).build();
    scanner.setSamplerConfiguration(sc);

    RowSampler rowSampler = new RowSampler();
    rowSampler.init(sc);

    SortedMap<Key,Value> sampleData = new TreeMap<>();
    for (Entry<Key,Value> e : testData1.entrySet()) {
      if (rowSampler.accept(e.getKey())) {
        sampleData.put(e.getKey(), e.getValue());
      }
    }

    assertTrue(sampleData.size() < testData1.size());

    assertEquals(sampleData, toMap(scanner));

    scanner.clearSamplerConfiguration();

    assertEquals(testData1, toMap(scanner));

  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\rfile\RFileClientTest.java
  public void testAppendScanner() throws Exception {
    SortedMap<Key,Value> testData = createTestData(10000, 1, 1);
    String testFile = createRFile(testData);

    LocalFileSystem localFs = FileSystem.getLocal(new Configuration());

    Scanner scanner = RFile.newScanner().from(testFile).withFileSystem(localFs).build();

    String testFile2 = createTmpTestFile();
    RFileWriter writer = RFile.newWriter().to(testFile2).build();
    writer.append(scanner);
    writer.close();
    scanner.close();

    scanner = RFile.newScanner().from(testFile2).withFileSystem(localFs).build();
    assertEquals(testData, toMap(scanner));
    scanner.close();
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\rfile\RFileClientTest.java
  public void testCache() throws Exception {
    SortedMap<Key,Value> testData = createTestData(10000, 1, 1);
    String testFile = createRFile(testData);

    LocalFileSystem localFs = FileSystem.getLocal(new Configuration());
    Scanner scanner = RFile.newScanner().from(testFile).withFileSystem(localFs)
        .withIndexCache(1000000).withDataCache(10000000).build();

    Random rand = new SecureRandom();

    for (int i = 0; i < 100; i++) {
      int r = rand.nextInt(10000);
      scanner.setRange(new Range(rowStr(r)));
      Iterator<Entry<Key,Value>> iter = scanner.iterator();
      assertTrue(iter.hasNext());
      assertEquals(rowStr(r), iter.next().getKey().getRow().toString());
      assertFalse(iter.hasNext());
    }

    scanner.close();
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\rfile\RFileClientTest.java
  public void testSummaries() throws Exception {
    SummarizerConfiguration sc1 =
        SummarizerConfiguration.builder(VisibilitySummarizer.class).build();
    SummarizerConfiguration sc2 = SummarizerConfiguration.builder(FamilySummarizer.class).build();

    LocalFileSystem localFs = FileSystem.getLocal(new Configuration());
    String testFile = createTmpTestFile();

    SortedMap<Key,Value> testData1 = createTestData(0, 100, 0, 4, 1, "A&B", "A&B&C");

    RFileWriter writer =
        RFile.newWriter().to(testFile).withFileSystem(localFs).withSummarizers(sc1, sc2).build();
    writer.append(testData1.entrySet());
    writer.close();

    // verify summary data
    Collection<Summary> summaries = RFile.summaries().from(testFile).withFileSystem(localFs).read();
    assertEquals(2, summaries.size());
    for (Summary summary : summaries) {
      assertEquals(0, summary.getFileStatistics().getInaccurate());
      assertEquals(1, summary.getFileStatistics().getTotal());
      String className = summary.getSummarizerConfiguration().getClassName();
      CounterSummary counterSummary = new CounterSummary(summary);
      if (className.equals(FamilySummarizer.class.getName())) {
        Map<String,Long> counters = counterSummary.getCounters();
        Map<String,Long> expected = Map.of("0000", 200L, "0001", 200L, "0002", 200L, "0003", 200L);
        assertEquals(expected, counters);
      } else if (className.equals(VisibilitySummarizer.class.getName())) {
        Map<String,Long> counters = counterSummary.getCounters();
        Map<String,Long> expected = Map.of("A&B", 400L, "A&B&C", 400L);
        assertEquals(expected, counters);
      } else {
        fail("Unexpected classname " + className);
      }
    }

    // check if writing summary data impacted normal rfile functionality
    Scanner scanner = RFile.newScanner().from(testFile).withFileSystem(localFs)
        .withAuthorizations(new Authorizations("A", "B", "C")).build();
    assertEquals(testData1, toMap(scanner));
    scanner.close();

    String testFile2 = createTmpTestFile();
    SortedMap<Key,Value> testData2 = createTestData(100, 100, 0, 4, 1, "A&B", "A&B&C");
    writer =
        RFile.newWriter().to(testFile2).withFileSystem(localFs).withSummarizers(sc1, sc2).build();
    writer.append(testData2.entrySet());
    writer.close();

    // verify reading summaries from multiple files works
    summaries = RFile.summaries().from(testFile, testFile2).withFileSystem(localFs).read();
    assertEquals(2, summaries.size());
    for (Summary summary : summaries) {
      assertEquals(0, summary.getFileStatistics().getInaccurate());
      assertEquals(2, summary.getFileStatistics().getTotal());
      String className = summary.getSummarizerConfiguration().getClassName();
      CounterSummary counterSummary = new CounterSummary(summary);
      if (className.equals(FamilySummarizer.class.getName())) {
        Map<String,Long> counters = counterSummary.getCounters();
        Map<String,Long> expected = Map.of("0000", 400L, "0001", 400L, "0002", 400L, "0003", 400L);
        assertEquals(expected, counters);
      } else if (className.equals(VisibilitySummarizer.class.getName())) {
        Map<String,Long> counters = counterSummary.getCounters();
        Map<String,Long> expected = Map.of("A&B", 800L, "A&B&C", 800L);
        assertEquals(expected, counters);
      } else {
        fail("Unexpected classname " + className);
      }
    }

    // verify reading a subset of summaries works
    summaries = RFile.summaries().from(testFile, testFile2).withFileSystem(localFs)
        .selectSummaries(sc -> sc.equals(sc1)).read();
    checkSummaries(summaries, Map.of("A&B", 800L, "A&B&C", 800L), 0);

    // the following test check boundary conditions for start row and end row
    summaries = RFile.summaries().from(testFile, testFile2).withFileSystem(localFs)
        .selectSummaries(sc -> sc.equals(sc1)).startRow(rowStr(99)).read();
    checkSummaries(summaries, Map.of("A&B", 400L, "A&B&C", 400L), 0);

    summaries = RFile.summaries().from(testFile, testFile2).withFileSystem(localFs)
        .selectSummaries(sc -> sc.equals(sc1)).startRow(rowStr(98)).read();
    checkSummaries(summaries, Map.of("A&B", 800L, "A&B&C", 800L), 1);

    summaries = RFile.summaries().from(testFile, testFile2).withFileSystem(localFs)
        .selectSummaries(sc -> sc.equals(sc1)).startRow(rowStr(0)).read();
    checkSummaries(summaries, Map.of("A&B", 800L, "A&B&C", 800L), 1);

    summaries = RFile.summaries().from(testFile, testFile2).withFileSystem(localFs)
        .selectSummaries(sc -> sc.equals(sc1)).startRow("#").read();
    checkSummaries(summaries, Map.of("A&B", 800L, "A&B&C", 800L), 0);

    summaries = RFile.summaries().from(testFile, testFile2).withFileSystem(localFs)
        .selectSummaries(sc -> sc.equals(sc1)).startRow(rowStr(100)).read();
    checkSummaries(summaries, Map.of("A&B", 400L, "A&B&C", 400L), 1);

    summaries = RFile.summaries().from(testFile, testFile2).withFileSystem(localFs)
        .selectSummaries(sc -> sc.equals(sc1)).endRow(rowStr(99)).read();
    checkSummaries(summaries, Map.of("A&B", 400L, "A&B&C", 400L), 0);

    summaries = RFile.summaries().from(testFile, testFile2).withFileSystem(localFs)
        .selectSummaries(sc -> sc.equals(sc1)).endRow(rowStr(100)).read();
    checkSummaries(summaries, Map.of("A&B", 800L, "A&B&C", 800L), 1);

    summaries = RFile.summaries().from(testFile, testFile2).withFileSystem(localFs)
        .selectSummaries(sc -> sc.equals(sc1)).endRow(rowStr(199)).read();
    checkSummaries(summaries, Map.of("A&B", 800L, "A&B&C", 800L), 0);

    summaries = RFile.summaries().from(testFile, testFile2).withFileSystem(localFs)
        .selectSummaries(sc -> sc.equals(sc1)).startRow(rowStr(50)).endRow(rowStr(150)).read();
    checkSummaries(summaries, Map.of("A&B", 800L, "A&B&C", 800L), 2);

    summaries = RFile.summaries().from(testFile, testFile2).withFileSystem(localFs)
        .selectSummaries(sc -> sc.equals(sc1)).startRow(rowStr(120)).endRow(rowStr(150)).read();
    checkSummaries(summaries, Map.of("A&B", 400L, "A&B&C", 400L), 1);

    summaries = RFile.summaries().from(testFile, testFile2).withFileSystem(localFs)
        .selectSummaries(sc -> sc.equals(sc1)).startRow(rowStr(50)).endRow(rowStr(199)).read();
    checkSummaries(summaries, Map.of("A&B", 800L, "A&B&C", 800L), 1);

    summaries = RFile.summaries().from(testFile, testFile2).withFileSystem(localFs)
        .selectSummaries(sc -> sc.equals(sc1)).startRow("#").endRow(rowStr(150)).read();
    checkSummaries(summaries, Map.of("A&B", 800L, "A&B&C", 800L), 1);

    summaries = RFile.summaries().from(testFile, testFile2).withFileSystem(localFs)
        .selectSummaries(sc -> sc.equals(sc1)).startRow(rowStr(199)).read();
    checkSummaries(summaries, Map.of(), 0);
    summaries = RFile.summaries().from(testFile, testFile2).withFileSystem(localFs)
        .selectSummaries(sc -> sc.equals(sc1)).startRow(rowStr(200)).read();
    checkSummaries(summaries, Map.of(), 0);

    summaries = RFile.summaries().from(testFile, testFile2).withFileSystem(localFs)
        .selectSummaries(sc -> sc.equals(sc1)).endRow("#").read();
    checkSummaries(summaries, Map.of(), 0);

    summaries = RFile.summaries().from(testFile, testFile2).withFileSystem(localFs)
        .selectSummaries(sc -> sc.equals(sc1)).endRow(rowStr(0)).read();
    checkSummaries(summaries, Map.of("A&B", 400L, "A&B&C", 400L), 1);
  }

  private void checkSummaries(Collection<Summary> summaries, Map<String,Long> expected, int extra) {
    assertEquals(1, summaries.size());
    for (Summary summary : summaries) {
      assertEquals(extra, summary.getFileStatistics().getInaccurate());
      assertEquals(extra, summary.getFileStatistics().getExtra());
      assertEquals(2, summary.getFileStatistics().getTotal());
      String className = summary.getSummarizerConfiguration().getClassName();
      CounterSummary counterSummary = new CounterSummary(summary);
      if (className.equals(VisibilitySummarizer.class.getName())) {
        Map<String,Long> counters = counterSummary.getCounters();

        assertEquals(expected, counters);
      } else {
        fail("Unexpected classname " + className);
      }
    }
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\rfile\RFileClientTest.java
  public void testOutOfOrder() throws Exception {
    // test that exception declared in API is thrown
    Key k1 = new Key("r1", "f1", "q1");
    Value v1 = new Value("1");

    Key k2 = new Key("r2", "f1", "q1");
    Value v2 = new Value("2");

    LocalFileSystem localFs = FileSystem.getLocal(new Configuration());
    String testFile = createTmpTestFile();
    try (RFileWriter writer = RFile.newWriter().to(testFile).withFileSystem(localFs).build()) {
      writer.append(k2, v2);
      writer.append(k1, v1);
    }
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\rfile\RFileClientTest.java
  public void testOutOfOrderIterable() throws Exception {
    // test that exception declared in API is thrown
    Key k1 = new Key("r1", "f1", "q1");
    Value v1 = new Value("1");

    Key k2 = new Key("r2", "f1", "q1");
    Value v2 = new Value("2");

    ArrayList<Entry<Key,Value>> data = new ArrayList<>();
    data.add(new AbstractMap.SimpleEntry<>(k2, v2));
    data.add(new AbstractMap.SimpleEntry<>(k1, v1));

    LocalFileSystem localFs = FileSystem.getLocal(new Configuration());
    String testFile = createTmpTestFile();
    try (RFileWriter writer = RFile.newWriter().to(testFile).withFileSystem(localFs).build()) {
      writer.append(data);
    }
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\rfile\RFileClientTest.java
  public void testBadVis() throws Exception {
    // this test has two purposes ensure an exception is thrown and ensure the exception document in
    // the javadoc is thrown
    LocalFileSystem localFs = FileSystem.getLocal(new Configuration());
    String testFile = createTmpTestFile();
    try (RFileWriter writer = RFile.newWriter().to(testFile).withFileSystem(localFs).build()) {
      writer.startDefaultLocalityGroup();
      Key k1 = new Key("r1", "f1", "q1", "(A&(B");
      writer.append(k1, new Value(""));
    }
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\rfile\RFileClientTest.java
  public void testBadVisIterable() throws Exception {
    // test append(iterable) method
    LocalFileSystem localFs = FileSystem.getLocal(new Configuration());
    String testFile = createTmpTestFile();
    try (RFileWriter writer = RFile.newWriter().to(testFile).withFileSystem(localFs).build()) {
      writer.startDefaultLocalityGroup();
      Key k1 = new Key("r1", "f1", "q1", "(A&(B");
      Entry<Key,Value> entry = new AbstractMap.SimpleEntry<>(k1, new Value(""));
      writer.append(Collections.singletonList(entry));
    }
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\rfile\RFileClientTest.java
  public void testDoubleStart() throws Exception {
    LocalFileSystem localFs = FileSystem.getLocal(new Configuration());
    String testFile = createTmpTestFile();
    try (RFileWriter writer = RFile.newWriter().to(testFile).withFileSystem(localFs).build()) {
      writer.startDefaultLocalityGroup();
      writer.startDefaultLocalityGroup();
    }
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\rfile\RFileClientTest.java
  public void testAppendStartDefault() throws Exception {
    LocalFileSystem localFs = FileSystem.getLocal(new Configuration());
    String testFile = createTmpTestFile();
    try (RFileWriter writer = RFile.newWriter().to(testFile).withFileSystem(localFs).build()) {
      writer.append(new Key("r1", "f1", "q1"), new Value("1"));
      writer.startDefaultLocalityGroup();
    }
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\rfile\RFileClientTest.java
  public void testStartAfter() throws Exception {
    LocalFileSystem localFs = FileSystem.getLocal(new Configuration());
    String testFile = createTmpTestFile();
    try (RFileWriter writer = RFile.newWriter().to(testFile).withFileSystem(localFs).build()) {
      Key k1 = new Key("r1", "f1", "q1");
      writer.append(k1, new Value(""));
      writer.startNewLocalityGroup("lg1", "fam1");
    }
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\rfile\RFileClientTest.java
  public void testIllegalColumn() throws Exception {
    LocalFileSystem localFs = FileSystem.getLocal(new Configuration());
    String testFile = createTmpTestFile();
    try (RFileWriter writer = RFile.newWriter().to(testFile).withFileSystem(localFs).build()) {
      writer.startNewLocalityGroup("lg1", "fam1");
      Key k1 = new Key("r1", "f1", "q1");
      // should not be able to append the column family f1
      writer.append(k1, new Value(""));
    }
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\rfile\RFileClientTest.java
  public void testWrongGroup() throws Exception {
    LocalFileSystem localFs = FileSystem.getLocal(new Configuration());
    String testFile = createTmpTestFile();
    try (RFileWriter writer = RFile.newWriter().to(testFile).withFileSystem(localFs).build()) {
      writer.startNewLocalityGroup("lg1", "fam1");
      Key k1 = new Key("r1", "fam1", "q1");
      writer.append(k1, new Value(""));
      writer.startDefaultLocalityGroup();
      // should not be able to append the column family fam1 to default locality group
      Key k2 = new Key("r1", "fam1", "q2");
      writer.append(k2, new Value(""));
    }
  }

  private Reader getReader(LocalFileSystem localFs, String testFile) throws IOException {
    return (Reader) FileOperations.getInstance().newReaderBuilder()
        .forFile(testFile, localFs, localFs.getConf(), CryptoServiceFactory.newDefaultInstance())
        .withTableConfiguration(DefaultConfiguration.getInstance()).build();
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\rfile\RFileClientTest.java
  public void testMultipleFilesAndCache() throws Exception {
    SortedMap<Key,Value> testData = createTestData(100, 10, 10);
    List<String> files =
        Arrays.asList(createTmpTestFile(), createTmpTestFile(), createTmpTestFile());

    LocalFileSystem localFs = FileSystem.getLocal(new Configuration());

    for (int i = 0; i < files.size(); i++) {
      try (
          RFileWriter writer = RFile.newWriter().to(files.get(i)).withFileSystem(localFs).build()) {
        for (Entry<Key,Value> entry : testData.entrySet()) {
          if (entry.getKey().hashCode() % files.size() == i) {
            writer.append(entry.getKey(), entry.getValue());
          }
        }
      }
    }

    Scanner scanner = RFile.newScanner().from(files.toArray(new String[files.size()]))
        .withFileSystem(localFs).withIndexCache(1000000).withDataCache(10000000).build();
    assertEquals(testData, toMap(scanner));
    scanner.close();
  }
}
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\security\SecurityErrorCodeTest.java
  public void testEnumsSame() {
    HashSet<String> secNames1 = new HashSet<>();
    HashSet<String> secNames2 = new HashSet<>();

    for (SecurityErrorCode sec : SecurityErrorCode.values())
      secNames1.add(sec.name());

    for (org.apache.accumulo.core.clientImpl.thrift.SecurityErrorCode sec : org.apache.accumulo.core.clientImpl.thrift.SecurityErrorCode
        .values())
      secNames2.add(sec.name());

    assertEquals(secNames1, secNames2);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\security\tokens\CredentialProviderTokenTest.java
  public void testPasswordsFromCredentialProvider() throws Exception {
    CredentialProviderToken token = new CredentialProviderToken("root.password", keystorePath);
    assertEquals("root.password", token.getName());
    assertEquals(keystorePath, token.getCredentialProviders());
    assertArrayEquals("password".getBytes(UTF_8), token.getPassword());

    token = new CredentialProviderToken("bob.password", keystorePath);
    assertArrayEquals("bob".getBytes(UTF_8), token.getPassword());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\security\tokens\CredentialProviderTokenTest.java
  public void testEqualityAfterInit() throws Exception {
    CredentialProviderToken token = new CredentialProviderToken("root.password", keystorePath);

    CredentialProviderToken uninitializedToken = new CredentialProviderToken();
    Properties props = new Properties();
    props.put(CredentialProviderToken.NAME_PROPERTY, "root.password");
    props.put(CredentialProviderToken.CREDENTIAL_PROVIDERS_PROPERTY, keystorePath);
    uninitializedToken.init(props);

    assertArrayEquals(token.getPassword(), uninitializedToken.getPassword());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\security\tokens\CredentialProviderTokenTest.java
  public void cloneReturnsCorrectObject() throws Exception {
    CredentialProviderToken token = new CredentialProviderToken("root.password", keystorePath);
    CredentialProviderToken clone = token.clone();

    assertEquals(token, clone);
    assertArrayEquals(token.getPassword(), clone.getPassword());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\security\tokens\CredentialProviderTokenTest.java
  public void missingProperties() {
    CredentialProviderToken token = new CredentialProviderToken();
    token.init(new Properties());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\security\tokens\CredentialProviderTokenTest.java
  public void missingNameProperty() {
    CredentialProviderToken token = new CredentialProviderToken();
    Properties props = new Properties();
    props.put(CredentialProviderToken.NAME_PROPERTY, "root.password");
    token.init(props);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\security\tokens\CredentialProviderTokenTest.java
  public void missingProviderProperty() {
    CredentialProviderToken token = new CredentialProviderToken();
    Properties props = new Properties();
    props.put(CredentialProviderToken.CREDENTIAL_PROVIDERS_PROPERTY, keystorePath);
    token.init(props);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\security\tokens\DelegationTokenImplTest.java
  public void testSerialization() throws IOException {
    AuthenticationTokenIdentifier identifier =
        new AuthenticationTokenIdentifier("user", 1, 1000L, 2000L, "instanceid");
    // We don't need a real serialized Token for the password
    DelegationTokenImpl token =
        new DelegationTokenImpl(new byte[] {'f', 'a', 'k', 'e'}, identifier);
    assertEquals(token, token);
    assertEquals(token.hashCode(), token.hashCode());

    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    token.write(new DataOutputStream(baos));

    DelegationTokenImpl copy = new DelegationTokenImpl();
    copy.readFields(new DataInputStream(new ByteArrayInputStream(baos.toByteArray())));

    assertEquals(token, copy);
    assertEquals(token.hashCode(), copy.hashCode());
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\security\tokens\DelegationTokenImplTest.java
  public void testEquality() {
    AuthenticationTokenIdentifier identifier =
        new AuthenticationTokenIdentifier("user", 1, 1000L, 2000L, "instanceid");
    // We don't need a real serialized Token for the password
    DelegationTokenImpl token =
        new DelegationTokenImpl(new byte[] {'f', 'a', 'k', 'e'}, identifier);

    AuthenticationTokenIdentifier identifier2 =
        new AuthenticationTokenIdentifier("user1", 1, 1000L, 2000L, "instanceid");
    // We don't need a real serialized Token for the password
    DelegationTokenImpl token2 =
        new DelegationTokenImpl(new byte[] {'f', 'a', 'k', 'e'}, identifier2);

    assertNotEquals(token, token2);
    assertNotEquals(token.hashCode(), token2.hashCode());

    // We don't need a real serialized Token for the password
    DelegationTokenImpl token3 =
        new DelegationTokenImpl(new byte[] {'f', 'a', 'k', 'e', '0'}, identifier);

    assertNotEquals(token, token3);
    assertNotEquals(token.hashCode(), token3.hashCode());
    assertNotEquals(token2, token3);
    assertNotEquals(token2.hashCode(), token3.hashCode());
  }
}
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\security\tokens\KerberosTokenTest.java
  public void testAuthMethodAcceptance() {
    // There is also KERBEROS_SSL but that appears to be deprecated/OBE
    Set<AuthenticationMethod> allowedMethods =
        new HashSet<>(Arrays.asList(AuthenticationMethod.KERBEROS, AuthenticationMethod.PROXY));
    for (AuthenticationMethod authMethod : AuthenticationMethod.values()) {
      final boolean allowable = allowedMethods.contains(authMethod);
      try {
        KerberosToken.validateAuthMethod(authMethod);
        if (!allowable) {
          fail(authMethod + " should have triggered a thrown exception but it did not");
        }
      } catch (IllegalArgumentException e) {
        if (allowable) {
          fail(authMethod + " should not have triggered a thrown exception");
        }
      }
    }
  }
}
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\security\tokens\PasswordTokenTest.java
  public void testMultiByte() throws DestroyFailedException {
    PasswordToken pt = new PasswordToken();
    AuthenticationToken.Properties props = new AuthenticationToken.Properties();
    props.put("password", "五六");
    pt.init(props);
    props.destroy();
    String s = new String(pt.getPassword(), UTF_8);
    assertEquals("五六", s);

    pt = new PasswordToken("五六");
    s = new String(pt.getPassword(), UTF_8);
    assertEquals("五六", s);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\summary\CountingSummarizerTest.java
  public void testMultipleEmit() {
    SummarizerConfiguration sc = SummarizerConfiguration.builder(MultiSummarizer.class).build();
    MultiSummarizer countSum = new MultiSummarizer();

    Summarizer.Collector collector = countSum.collector(sc);

    Value val = new Value("abc");

    HashMap<String,Long> expected = new HashMap<>();

    for (String row : new String[] {"ask", "asleep", "some", "soul"}) {
      for (String fam : new String[] {"hop", "hope", "nope", "noop"}) {
        for (String qual : new String[] {"mad", "lad", "lab", "map"}) {
          collector.accept(new Key(row, fam, qual), val);

          expected.merge("rp:" + row.substring(0, 2), 1L, Long::sum);
          expected.merge("fp:" + fam.substring(0, 2), 1L, Long::sum);
          expected.merge("qp:" + qual.substring(0, 2), 1L, Long::sum);
        }
      }
    }

    HashMap<String,Long> stats = new HashMap<>();
    collector.summarize(stats::put);

    CounterSummary csum = new CounterSummary(stats);
    assertEquals(expected, csum.getCounters());
    assertEquals(64, csum.getSeen());
    assertEquals(3 * 64, csum.getEmitted());
    assertEquals(0, csum.getIgnored());
    assertEquals(0, csum.getDeletesIgnored());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\summary\CountingSummarizerTest.java
  public void testSummarizing() {
    SummarizerConfiguration sc = SummarizerConfiguration.builder(FamilySummarizer.class)
        .addOptions(MAX_COUNTERS_OPT, "5", MAX_COUNTER_LEN_OPT, "10").build();
    FamilySummarizer countSum = new FamilySummarizer();

    Value val = new Value("abc");

    Summarizer.Collector collector = countSum.collector(sc);
    for (String fam : Arrays.asList("f1", "f1", "f1", "f2", "f1", "f70000000000000000000",
        "f70000000000000000001", "f2", "f3", "f4", "f5", "f6", "f7", "f3", "f7")) {
      collector.accept(new Key("r", fam), val);
    }

    Key dk = new Key("r", "f2");
    dk.setDeleted(true);
    collector.accept(dk, new Value(""));

    HashMap<String,Long> stats = new HashMap<>();
    collector.summarize(stats::put);

    String p = COUNTER_STAT_PREFIX;

    HashMap<String,Long> expected = new HashMap<>();
    expected.put(p + "f1", 4L);
    expected.put(p + "f2", 2L);
    expected.put(p + "f3", 2L);
    expected.put(p + "f4", 1L);
    expected.put(p + "f5", 1L);
    expected.put(TOO_LONG_STAT, 2L);
    expected.put(TOO_MANY_STAT, 3L);
    expected.put(SEEN_STAT, 16L);
    expected.put(EMITTED_STAT, 15L);
    expected.put(DELETES_IGNORED_STAT, 1L);

    assertEquals(expected, stats);

    CounterSummary csum = new CounterSummary(stats);
    assertEquals(5, csum.getIgnored());
    assertEquals(3, csum.getTooMany());
    assertEquals(2, csum.getTooLong());
    assertEquals(16, csum.getSeen());
    assertEquals(15, csum.getEmitted());
    assertEquals(1, csum.getDeletesIgnored());

    expected.clear();
    expected.put("f1", 4L);
    expected.put("f2", 2L);
    expected.put("f3", 2L);
    expected.put("f4", 1L);
    expected.put("f5", 1L);
    assertEquals(expected, csum.getCounters());

  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\summary\CountingSummarizerTest.java
  public void testMerge() {
    SummarizerConfiguration sc = SummarizerConfiguration.builder(VisibilitySummarizer.class)
        .addOption(MAX_COUNTERS_OPT, "5").build();
    VisibilitySummarizer countSum = new VisibilitySummarizer();

    String p = COUNTER_STAT_PREFIX;

    HashMap<String,Long> sm1 = new HashMap<>();
    sm1.put(p + "f001", 9L);
    sm1.put(p + "f002", 4L);
    sm1.put(p + "f003", 2L);
    sm1.put(p + "f004", 1L);
    sm1.put(p + "f005", 19L);
    sm1.put(EMITTED_STAT, 15L);
    sm1.put(SEEN_STAT, 5L);
    sm1.put(DELETES_IGNORED_STAT, 1L);

    HashMap<String,Long> sm2 = new HashMap<>();
    sm2.put(p + "f001", 1L);
    sm2.put(p + "f002", 2L);
    sm2.put(p + "f00a", 7L);
    sm2.put(p + "f00b", 1L);
    sm2.put(p + "f00c", 17L);
    sm2.put(EMITTED_STAT, 18L);
    sm2.put(SEEN_STAT, 6L);
    sm2.put(DELETES_IGNORED_STAT, 2L);

    countSum.combiner(sc).merge(sm1, sm2);

    HashMap<String,Long> expected = new HashMap<>();
    expected.put(p + "f001", 10L);
    expected.put(p + "f002", 6L);
    expected.put(p + "f005", 19L);
    expected.put(p + "f00a", 7L);
    expected.put(p + "f00c", 17L);
    expected.put(TOO_LONG_STAT, 0L);
    expected.put(TOO_MANY_STAT, 4L);
    expected.put(EMITTED_STAT, 18L + 15L);
    expected.put(SEEN_STAT, 6L + 5L);
    expected.put(DELETES_IGNORED_STAT, 3L);

    assertEquals(expected, sm1);

    sm2.clear();
    sm2.put(p + "f001", 19L);
    sm2.put(p + "f002", 2L);
    sm2.put(p + "f003", 3L);
    sm2.put(p + "f00b", 13L);
    sm2.put(p + "f00c", 2L);
    sm2.put(TOO_LONG_STAT, 1L);
    sm2.put(TOO_MANY_STAT, 3L);
    sm2.put(EMITTED_STAT, 21L);
    sm2.put(SEEN_STAT, 7L);
    sm2.put(DELETES_IGNORED_STAT, 5L);

    countSum.combiner(sc).merge(sm1, sm2);

    expected.clear();
    expected.put(p + "f001", 29L);
    expected.put(p + "f002", 8L);
    expected.put(p + "f005", 19L);
    expected.put(p + "f00b", 13L);
    expected.put(p + "f00c", 19L);
    expected.put(TOO_LONG_STAT, 1L);
    expected.put(TOO_MANY_STAT, 17L);
    expected.put(EMITTED_STAT, 21L + 18 + 15);
    expected.put(SEEN_STAT, 7L + 6 + 5);
    expected.put(DELETES_IGNORED_STAT, 8L);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\summary\CountingSummarizerTest.java
  public void testCountDeletes() {
    SummarizerConfiguration sc = SummarizerConfiguration.builder(FamilySummarizer.class)
        .addOptions(INGNORE_DELETES_OPT, "false").build();
    FamilySummarizer countSum = new FamilySummarizer();

    Key k1 = new Key("r1", "f1");
    Key k2 = new Key("r1", "f1");
    k2.setDeleted(true);
    Key k3 = new Key("r1", "f2");

    Collector collector = countSum.collector(sc);
    collector.accept(k1, new Value(""));
    collector.accept(k2, new Value(""));
    collector.accept(k3, new Value(""));

    String p = COUNTER_STAT_PREFIX;

    HashMap<String,Long> expected = new HashMap<>();
    expected.put(p + "f1", 2L);
    expected.put(p + "f2", 1L);
    expected.put(TOO_LONG_STAT, 0L);
    expected.put(TOO_MANY_STAT, 0L);
    expected.put(SEEN_STAT, 3L);
    expected.put(EMITTED_STAT, 3L);
    expected.put(DELETES_IGNORED_STAT, 0L);

    HashMap<String,Long> stats = new HashMap<>();
    collector.summarize(stats::put);
    assertEquals(expected, stats);

    CounterSummary csum = new CounterSummary(stats);
    assertEquals(0, csum.getIgnored());
    assertEquals(0, csum.getTooMany());
    assertEquals(0, csum.getTooLong());
    assertEquals(3, csum.getSeen());
    assertEquals(3, csum.getEmitted());
    assertEquals(0, csum.getDeletesIgnored());

    expected.clear();
    expected.put("f1", 2L);
    expected.put("f2", 1L);
    assertEquals(expected, csum.getCounters());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\summary\CountingSummarizerTest.java
  public void testConvertValue() {

    SummarizerConfiguration sc = SummarizerConfiguration.builder(ValueSummarizer.class).build();
    ValueSummarizer countSum = new ValueSummarizer();

    Summarizer.Collector collector = countSum.collector(sc);

    HashMap<String,Long> expected = new HashMap<>();

    for (String row : new String[] {"ask", "asleep", "some", "soul"}) {
      for (String fam : new String[] {"hop", "hope", "nope", "noop"}) {
        for (String qual : new String[] {"mad", "lad", "lab", "map"})
          for (Value value : new Value[] {new Value("ask"), new Value("asleep"), new Value("some"),
              new Value("soul")}) {
            collector.accept(new Key(row, fam, qual), value);
            expected.merge("vp:" + value.toString().substring(0, 2), 1L, Long::sum);

          }
      }
    }

    HashMap<String,Long> stats = new HashMap<>();
    collector.summarize(stats::put);

    CounterSummary csum = new CounterSummary(stats);
    assertEquals(expected, csum.getCounters());
    assertEquals(256, csum.getSeen());
    assertEquals(256, csum.getEmitted());
    assertEquals(0, csum.getIgnored());
    assertEquals(0, csum.getDeletesIgnored());

  }

}
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\summary\summarizers\AuthorizationSummarizerTest.java
  public void testBasic() {
    SummarizerConfiguration sc =
        SummarizerConfiguration.builder(AuthorizationSummarizer.class).build();
    AuthorizationSummarizer authSummarizer = new AuthorizationSummarizer();

    Collector collector = authSummarizer.collector(sc);

    collector.accept(new Key("r", "f", "q", ""), EV);
    collector.accept(new Key("r", "f", "q", "A"), EV);
    collector.accept(new Key("r", "f", "q", "B"), EV);
    collector.accept(new Key("r", "f", "q", "A&B"), EV);
    collector.accept(new Key("r", "f", "q", "(C|D)&(A|B)"), EV);
    collector.accept(new Key("r", "f", "q", "(C|D)&(A|B)"), EV);
    collector.accept(new Key("r", "f", "q", "(D&E)|(D&C&F)"), EV);

    HashMap<String,Long> actual = new HashMap<>();
    collector.summarize(actual::put);

    String p = COUNTER_STAT_PREFIX;

    HashMap<String,Long> expected = new HashMap<>();
    expected.put(p + "A", 4L);
    expected.put(p + "B", 4L);
    expected.put(p + "C", 3L);
    expected.put(p + "D", 3L);
    expected.put(p + "E", 1L);
    expected.put(p + "F", 1L);
    expected.put(TOO_LONG_STAT, 0L);
    expected.put(TOO_MANY_STAT, 0L);
    expected.put(SEEN_STAT, 7L);
    expected.put(EMITTED_STAT, 16L);
    expected.put(DELETES_IGNORED_STAT, 0L);

    assertEquals(expected, actual);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\summary\summarizers\EntryLengthSummarizersTest.java
  public void testEmpty() {
    SummarizerConfiguration sc =
        SummarizerConfiguration.builder(EntryLengthSummarizer.class).build();
    EntryLengthSummarizer entrySum = new EntryLengthSummarizer();

    Collector collector = entrySum.collector(sc);

    HashMap<String,Long> stats = new HashMap<>();
    collector.summarize(stats::put);

    HashMap<String,Long> expected = new HashMap<>();
    expected.put("key.min", 0L);
    expected.put("key.max", 0L);
    expected.put("key.sum", 0L);

    expected.put("row.min", 0L);
    expected.put("row.max", 0L);
    expected.put("row.sum", 0L);

    expected.put("family.min", 0L);
    expected.put("family.max", 0L);
    expected.put("family.sum", 0L);

    expected.put("qualifier.min", 0L);
    expected.put("qualifier.max", 0L);
    expected.put("qualifier.sum", 0L);

    expected.put("visibility.min", 0L);
    expected.put("visibility.max", 0L);
    expected.put("visibility.sum", 0L);

    expected.put("value.min", 0L);
    expected.put("value.max", 0L);
    expected.put("value.sum", 0L);

    expected.put("total", 0L);

    assertEquals(expected, stats);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\summary\summarizers\EntryLengthSummarizersTest.java
  public void testBasicRow() {
    SummarizerConfiguration sc =
        SummarizerConfiguration.builder(EntryLengthSummarizer.class).build();
    EntryLengthSummarizer entrySum = new EntryLengthSummarizer();

    Key k1 = new Key("r1");
    Key k2 = new Key("r2");
    Key k3 = new Key("r3");

    Collector collector = entrySum.collector(sc);
    collector.accept(k1, new Value(""));
    collector.accept(k2, new Value(""));
    collector.accept(k3, new Value(""));

    HashMap<String,Long> stats = new HashMap<>();
    collector.summarize(stats::put);

    HashMap<String,Long> expected = new HashMap<>();
    expected.put("key.min", 2L);
    expected.put("key.max", 2L);
    expected.put("key.sum", 6L);

    // Log2 Histogram
    expected.put("key.logHist.1", 3L);

    expected.put("row.min", 2L);
    expected.put("row.max", 2L);
    expected.put("row.sum", 6L);

    // Log2 Histogram
    expected.put("row.logHist.1", 3L);

    expected.put("family.min", 0L);
    expected.put("family.max", 0L);
    expected.put("family.sum", 0L);

    // Log2 Histogram
    expected.put("family.logHist.0", 3L);

    expected.put("qualifier.min", 0L);
    expected.put("qualifier.max", 0L);
    expected.put("qualifier.sum", 0L);

    // Log2 Histogram
    expected.put("qualifier.logHist.0", 3L);

    expected.put("visibility.min", 0L);
    expected.put("visibility.max", 0L);
    expected.put("visibility.sum", 0L);

    // Log2 Histogram
    expected.put("visibility.logHist.0", 3L);

    expected.put("value.min", 0L);
    expected.put("value.max", 0L);
    expected.put("value.sum", 0L);

    // Log2 Histogram
    expected.put("value.logHist.0", 3L);

    expected.put("total", 3L);

    assertEquals(expected, stats);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\summary\summarizers\EntryLengthSummarizersTest.java
  public void testBasicFamily() {
    SummarizerConfiguration sc =
        SummarizerConfiguration.builder(EntryLengthSummarizer.class).build();
    EntryLengthSummarizer entrySum = new EntryLengthSummarizer();

    Key k1 = new Key("r1", "f1");
    Key k2 = new Key("r2", "f2");
    Key k3 = new Key("r3", "f3");

    Collector collector = entrySum.collector(sc);
    collector.accept(k1, new Value(""));
    collector.accept(k2, new Value(""));
    collector.accept(k3, new Value(""));

    HashMap<String,Long> stats = new HashMap<>();
    collector.summarize(stats::put);

    HashMap<String,Long> expected = new HashMap<>();
    expected.put("key.min", 4L);
    expected.put("key.max", 4L);
    expected.put("key.sum", 12L);

    // Log2 Histogram
    expected.put("key.logHist.2", 3L);

    expected.put("row.min", 2L);
    expected.put("row.max", 2L);
    expected.put("row.sum", 6L);

    // Log2 Histogram
    expected.put("row.logHist.1", 3L);

    expected.put("family.min", 2L);
    expected.put("family.max", 2L);
    expected.put("family.sum", 6L);

    // Log2 Histogram
    expected.put("family.logHist.1", 3L);

    expected.put("qualifier.min", 0L);
    expected.put("qualifier.max", 0L);
    expected.put("qualifier.sum", 0L);

    // Log2 Histogram
    expected.put("qualifier.logHist.0", 3L);

    expected.put("visibility.min", 0L);
    expected.put("visibility.max", 0L);
    expected.put("visibility.sum", 0L);

    // Log2 Histogram
    expected.put("visibility.logHist.0", 3L);

    expected.put("value.min", 0L);
    expected.put("value.max", 0L);
    expected.put("value.sum", 0L);

    // Log2 Histogram
    expected.put("value.logHist.0", 3L);

    expected.put("total", 3L);

    assertEquals(expected, stats);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\summary\summarizers\EntryLengthSummarizersTest.java
  public void testBasicQualifier() {
    SummarizerConfiguration sc =
        SummarizerConfiguration.builder(EntryLengthSummarizer.class).build();
    EntryLengthSummarizer entrySum = new EntryLengthSummarizer();

    Key k1 = new Key("r1", "f1", "q1");
    Key k2 = new Key("r2", "f2", "q2");
    Key k3 = new Key("r3", "f3", "q3");

    Collector collector = entrySum.collector(sc);
    collector.accept(k1, new Value(""));
    collector.accept(k2, new Value(""));
    collector.accept(k3, new Value(""));

    HashMap<String,Long> stats = new HashMap<>();
    collector.summarize(stats::put);

    HashMap<String,Long> expected = new HashMap<>();
    expected.put("key.min", 6L);
    expected.put("key.max", 6L);
    expected.put("key.sum", 18L);

    // Log2 Histogram
    expected.put("key.logHist.3", 3L);

    expected.put("row.min", 2L);
    expected.put("row.max", 2L);
    expected.put("row.sum", 6L);

    // Log2 Histogram
    expected.put("row.logHist.1", 3L);

    expected.put("family.min", 2L);
    expected.put("family.max", 2L);
    expected.put("family.sum", 6L);

    // Log2 Histogram
    expected.put("family.logHist.1", 3L);

    expected.put("qualifier.min", 2L);
    expected.put("qualifier.max", 2L);
    expected.put("qualifier.sum", 6L);

    // Log2 Histogram
    expected.put("qualifier.logHist.1", 3L);

    expected.put("visibility.min", 0L);
    expected.put("visibility.max", 0L);
    expected.put("visibility.sum", 0L);

    // Log2 Histogram
    expected.put("visibility.logHist.0", 3L);

    expected.put("value.min", 0L);
    expected.put("value.max", 0L);
    expected.put("value.sum", 0L);

    // Log2 Histogram
    expected.put("value.logHist.0", 3L);

    expected.put("total", 3L);

    assertEquals(expected, stats);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\summary\summarizers\EntryLengthSummarizersTest.java
  public void testBasicVisibility() {
    SummarizerConfiguration sc =
        SummarizerConfiguration.builder(EntryLengthSummarizer.class).build();
    EntryLengthSummarizer entrySum = new EntryLengthSummarizer();

    Key k1 = new Key("r1", "f1", "q1", "v1");
    Key k2 = new Key("r2", "f2", "q2", "v2");
    Key k3 = new Key("r3", "f3", "q3", "v3");

    Collector collector = entrySum.collector(sc);
    collector.accept(k1, new Value(""));
    collector.accept(k2, new Value(""));
    collector.accept(k3, new Value(""));

    HashMap<String,Long> stats = new HashMap<>();
    collector.summarize(stats::put);

    HashMap<String,Long> expected = new HashMap<>();
    expected.put("key.min", 8L);
    expected.put("key.max", 8L);
    expected.put("key.sum", 24L);

    // Log2 Histogram
    expected.put("key.logHist.3", 3L);

    expected.put("row.min", 2L);
    expected.put("row.max", 2L);
    expected.put("row.sum", 6L);

    // Log2 Histogram
    expected.put("row.logHist.1", 3L);

    expected.put("family.min", 2L);
    expected.put("family.max", 2L);
    expected.put("family.sum", 6L);

    // Log2 Histogram
    expected.put("family.logHist.1", 3L);

    expected.put("qualifier.min", 2L);
    expected.put("qualifier.max", 2L);
    expected.put("qualifier.sum", 6L);

    // Log2 Histogram
    expected.put("qualifier.logHist.1", 3L);

    expected.put("visibility.min", 2L);
    expected.put("visibility.max", 2L);
    expected.put("visibility.sum", 6L);

    // Log2 Histogram
    expected.put("visibility.logHist.1", 3L);

    expected.put("value.min", 0L);
    expected.put("value.max", 0L);
    expected.put("value.sum", 0L);

    // Log2 Histogram
    expected.put("value.logHist.0", 3L);

    expected.put("total", 3L);

    assertEquals(expected, stats);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\summary\summarizers\EntryLengthSummarizersTest.java
  public void testBasicValue() {
    SummarizerConfiguration sc =
        SummarizerConfiguration.builder(EntryLengthSummarizer.class).build();
    EntryLengthSummarizer entrySum = new EntryLengthSummarizer();

    Key k1 = new Key("r1", "f1", "q1", "v1");
    Key k2 = new Key("r2", "f2", "q2", "v2");
    Key k3 = new Key("r3", "f3", "q3", "v3");

    Collector collector = entrySum.collector(sc);
    collector.accept(k1, new Value("v1"));
    collector.accept(k2, new Value("v2"));
    collector.accept(k3, new Value("v3"));

    HashMap<String,Long> stats = new HashMap<>();
    collector.summarize(stats::put);

    HashMap<String,Long> expected = new HashMap<>();
    expected.put("key.min", 8L);
    expected.put("key.max", 8L);
    expected.put("key.sum", 24L);

    // Log2 Histogram
    expected.put("key.logHist.3", 3L);

    expected.put("row.min", 2L);
    expected.put("row.max", 2L);
    expected.put("row.sum", 6L);

    // Log2 Histogram
    expected.put("row.logHist.1", 3L);

    expected.put("family.min", 2L);
    expected.put("family.max", 2L);
    expected.put("family.sum", 6L);

    // Log2 Histogram
    expected.put("family.logHist.1", 3L);

    expected.put("qualifier.min", 2L);
    expected.put("qualifier.max", 2L);
    expected.put("qualifier.sum", 6L);

    // Log2 Histogram
    expected.put("qualifier.logHist.1", 3L);

    expected.put("visibility.min", 2L);
    expected.put("visibility.max", 2L);
    expected.put("visibility.sum", 6L);

    // Log2 Histogram
    expected.put("visibility.logHist.1", 3L);

    expected.put("value.min", 2L);
    expected.put("value.max", 2L);
    expected.put("value.sum", 6L);

    // Log2 Histogram
    expected.put("value.logHist.1", 3L);

    expected.put("total", 3L);

    assertEquals(expected, stats);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\summary\summarizers\EntryLengthSummarizersTest.java
  public void testComplexRow() {
    SummarizerConfiguration sc =
        SummarizerConfiguration.builder(EntryLengthSummarizer.class).build();
    EntryLengthSummarizer entrySum = new EntryLengthSummarizer();

    Key k1 = new Key("r1");
    Key k2 = new Key("row2");
    Key k3 = new Key("columnRow3");

    Collector collector = entrySum.collector(sc);
    collector.accept(k1, new Value(""));
    collector.accept(k2, new Value(""));
    collector.accept(k3, new Value(""));

    HashMap<String,Long> stats = new HashMap<>();
    collector.summarize(stats::put);

    HashMap<String,Long> expected = new HashMap<>();
    expected.put("key.min", 2L);
    expected.put("key.max", 10L);
    expected.put("key.sum", 16L);

    // Log2 Histogram
    expected.put("key.logHist.1", 1L);
    expected.put("key.logHist.2", 1L);
    expected.put("key.logHist.3", 1L);

    expected.put("row.min", 2L);
    expected.put("row.max", 10L);
    expected.put("row.sum", 16L);

    // Log2 Histogram
    expected.put("row.logHist.1", 1L);
    expected.put("row.logHist.2", 1L);
    expected.put("row.logHist.3", 1L);

    expected.put("family.min", 0L);
    expected.put("family.max", 0L);
    expected.put("family.sum", 0L);

    // Log2 Histogram
    expected.put("family.logHist.0", 3L);

    expected.put("qualifier.min", 0L);
    expected.put("qualifier.max", 0L);
    expected.put("qualifier.sum", 0L);

    // Log2 Histogram
    expected.put("qualifier.logHist.0", 3L);

    expected.put("visibility.min", 0L);
    expected.put("visibility.max", 0L);
    expected.put("visibility.sum", 0L);

    // Log2 Histogram
    expected.put("visibility.logHist.0", 3L);

    expected.put("value.min", 0L);
    expected.put("value.max", 0L);
    expected.put("value.sum", 0L);

    // Log2 Histogram
    expected.put("value.logHist.0", 3L);

    expected.put("total", 3L);

    assertEquals(expected, stats);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\summary\summarizers\EntryLengthSummarizersTest.java
  public void testComplexFamily() {
    SummarizerConfiguration sc =
        SummarizerConfiguration.builder(EntryLengthSummarizer.class).build();
    EntryLengthSummarizer entrySum = new EntryLengthSummarizer();

    Key k1 = new Key("r1", "family1");
    Key k2 = new Key("row2", "columnFamily2");
    Key k3 = new Key("columnRow3", "f3");

    Collector collector = entrySum.collector(sc);
    collector.accept(k1, new Value(""));
    collector.accept(k2, new Value(""));
    collector.accept(k3, new Value(""));

    HashMap<String,Long> stats = new HashMap<>();
    collector.summarize(stats::put);

    HashMap<String,Long> expected = new HashMap<>();
    expected.put("key.min", 9L);
    expected.put("key.max", 17L);
    expected.put("key.sum", 38L);

    // Log2 Histogram
    expected.put("key.logHist.3", 1L);
    expected.put("key.logHist.4", 2L);

    expected.put("row.min", 2L);
    expected.put("row.max", 10L);
    expected.put("row.sum", 16L);

    // Log2 Histogram
    expected.put("row.logHist.1", 1L);
    expected.put("row.logHist.2", 1L);
    expected.put("row.logHist.3", 1L);

    expected.put("family.min", 2L);
    expected.put("family.max", 13L);
    expected.put("family.sum", 22L);

    // Log2 Histogram
    expected.put("family.logHist.1", 1L);
    expected.put("family.logHist.3", 1L);
    expected.put("family.logHist.4", 1L);

    expected.put("qualifier.min", 0L);
    expected.put("qualifier.max", 0L);
    expected.put("qualifier.sum", 0L);

    // Log2 Histogram
    expected.put("qualifier.logHist.0", 3L);

    expected.put("visibility.min", 0L);
    expected.put("visibility.max", 0L);
    expected.put("visibility.sum", 0L);

    // Log2 Histogram
    expected.put("visibility.logHist.0", 3L);

    expected.put("value.min", 0L);
    expected.put("value.max", 0L);
    expected.put("value.sum", 0L);

    // Log2 Histogram
    expected.put("value.logHist.0", 3L);

    expected.put("total", 3L);

    assertEquals(expected, stats);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\summary\summarizers\EntryLengthSummarizersTest.java
  public void testComplexQualifier() {
    SummarizerConfiguration sc =
        SummarizerConfiguration.builder(EntryLengthSummarizer.class).build();
    EntryLengthSummarizer entrySum = new EntryLengthSummarizer();

    Key k1 = new Key("r1", "family1", "columnQualifier1");
    Key k2 = new Key("row2", "columnFamily2", "q2");
    Key k3 = new Key("columnRow3", "f3", "qualifier3");

    Collector collector = entrySum.collector(sc);
    collector.accept(k1, new Value(""));
    collector.accept(k2, new Value(""));
    collector.accept(k3, new Value(""));

    HashMap<String,Long> stats = new HashMap<>();
    collector.summarize(stats::put);

    HashMap<String,Long> expected = new HashMap<>();
    expected.put("key.min", 19L);
    expected.put("key.max", 25L);
    expected.put("key.sum", 66L);

    // Log2 Histogram
    expected.put("key.logHist.4", 2L);
    expected.put("key.logHist.5", 1L);

    expected.put("row.min", 2L);
    expected.put("row.max", 10L);
    expected.put("row.sum", 16L);

    // Log2 Histogram
    expected.put("row.logHist.1", 1L);
    expected.put("row.logHist.2", 1L);
    expected.put("row.logHist.3", 1L);

    expected.put("family.min", 2L);
    expected.put("family.max", 13L);
    expected.put("family.sum", 22L);

    // Log2 Histogram
    expected.put("family.logHist.1", 1L);
    expected.put("family.logHist.3", 1L);
    expected.put("family.logHist.4", 1L);

    expected.put("qualifier.min", 2L);
    expected.put("qualifier.max", 16L);
    expected.put("qualifier.sum", 28L);

    // Log2 Histogram
    expected.put("qualifier.logHist.1", 1L);
    expected.put("qualifier.logHist.3", 1L);
    expected.put("qualifier.logHist.4", 1L);

    expected.put("visibility.min", 0L);
    expected.put("visibility.max", 0L);
    expected.put("visibility.sum", 0L);

    // Log2 Histogram
    expected.put("visibility.logHist.0", 3L);

    expected.put("value.min", 0L);
    expected.put("value.max", 0L);
    expected.put("value.sum", 0L);

    // Log2 Histogram
    expected.put("value.logHist.0", 3L);

    expected.put("total", 3L);

    assertEquals(expected, stats);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\summary\summarizers\EntryLengthSummarizersTest.java
  public void testComplexVisibility() {
    SummarizerConfiguration sc =
        SummarizerConfiguration.builder(EntryLengthSummarizer.class).build();
    EntryLengthSummarizer entrySum = new EntryLengthSummarizer();

    Key k1 = new Key("r1", "family1", "columnQualifier1", "v1");
    Key k2 = new Key("row2", "columnFamily2", "q2", "visibility2");
    Key k3 = new Key("columnRow3", "f3", "qualifier3", "columnVisibility3");

    Collector collector = entrySum.collector(sc);
    collector.accept(k1, new Value(""));
    collector.accept(k2, new Value(""));
    collector.accept(k3, new Value(""));

    HashMap<String,Long> stats = new HashMap<>();
    collector.summarize(stats::put);

    HashMap<String,Long> expected = new HashMap<>();
    expected.put("key.min", 27L);
    expected.put("key.max", 39L);
    expected.put("key.sum", 96L);

    // Log2 Histogram
    expected.put("key.logHist.5", 3L);

    expected.put("row.min", 2L);
    expected.put("row.max", 10L);
    expected.put("row.sum", 16L);

    // Log2 Histogram
    expected.put("row.logHist.1", 1L);
    expected.put("row.logHist.2", 1L);
    expected.put("row.logHist.3", 1L);

    expected.put("family.min", 2L);
    expected.put("family.max", 13L);
    expected.put("family.sum", 22L);

    // Log2 Histogram
    expected.put("family.logHist.1", 1L);
    expected.put("family.logHist.3", 1L);
    expected.put("family.logHist.4", 1L);

    expected.put("qualifier.min", 2L);
    expected.put("qualifier.max", 16L);
    expected.put("qualifier.sum", 28L);

    // Log2 Histogram
    expected.put("qualifier.logHist.1", 1L);
    expected.put("qualifier.logHist.3", 1L);
    expected.put("qualifier.logHist.4", 1L);

    expected.put("visibility.min", 2L);
    expected.put("visibility.max", 17L);
    expected.put("visibility.sum", 30L);

    // Log2 Histogram
    expected.put("visibility.logHist.1", 1L);
    expected.put("visibility.logHist.3", 1L);
    expected.put("visibility.logHist.4", 1L);

    expected.put("value.min", 0L);
    expected.put("value.max", 0L);
    expected.put("value.sum", 0L);

    // Log2 Histogram
    expected.put("value.logHist.0", 3L);

    expected.put("total", 3L);

    assertEquals(expected, stats);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\summary\summarizers\EntryLengthSummarizersTest.java
  public void testComplexValue() {
    SummarizerConfiguration sc =
        SummarizerConfiguration.builder(EntryLengthSummarizer.class).build();
    EntryLengthSummarizer entrySum = new EntryLengthSummarizer();

    Key k1 = new Key("r1", "family1", "columnQualifier1", "v1");
    Key k2 = new Key("row2", "columnFamily2", "q2", "visibility2");
    Key k3 = new Key("columnRow3", "f3", "qualifier3", "columnVisibility3");

    Collector collector = entrySum.collector(sc);
    collector.accept(k1, new Value("v1"));
    collector.accept(k2, new Value("value2"));
    collector.accept(k3, new Value("keyValue3"));

    HashMap<String,Long> stats = new HashMap<>();
    collector.summarize(stats::put);

    HashMap<String,Long> expected = new HashMap<>();
    expected.put("key.min", 27L);
    expected.put("key.max", 39L);
    expected.put("key.sum", 96L);

    // Log2 Histogram
    expected.put("key.logHist.5", 3L);

    expected.put("row.min", 2L);
    expected.put("row.max", 10L);
    expected.put("row.sum", 16L);

    // Log2 Histogram
    expected.put("row.logHist.1", 1L);
    expected.put("row.logHist.2", 1L);
    expected.put("row.logHist.3", 1L);

    expected.put("family.min", 2L);
    expected.put("family.max", 13L);
    expected.put("family.sum", 22L);

    // Log2 Histogram
    expected.put("family.logHist.1", 1L);
    expected.put("family.logHist.3", 1L);
    expected.put("family.logHist.4", 1L);

    expected.put("qualifier.min", 2L);
    expected.put("qualifier.max", 16L);
    expected.put("qualifier.sum", 28L);

    // Log2 Histogram
    expected.put("qualifier.logHist.1", 1L);
    expected.put("qualifier.logHist.3", 1L);
    expected.put("qualifier.logHist.4", 1L);

    expected.put("visibility.min", 2L);
    expected.put("visibility.max", 17L);
    expected.put("visibility.sum", 30L);

    // Log2 Histogram
    expected.put("visibility.logHist.1", 1L);
    expected.put("visibility.logHist.3", 1L);
    expected.put("visibility.logHist.4", 1L);

    expected.put("value.min", 2L);
    expected.put("value.max", 9L);
    expected.put("value.sum", 17L);

    // Log2 Histogram
    expected.put("value.logHist.1", 1L);
    expected.put("value.logHist.3", 2L);

    expected.put("total", 3L);

    assertEquals(expected, stats);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\summary\summarizers\EntryLengthSummarizersTest.java
  public void testAll() {
    SummarizerConfiguration sc =
        SummarizerConfiguration.builder(EntryLengthSummarizer.class).build();
    EntryLengthSummarizer entrySum = new EntryLengthSummarizer();

    Key k1 = new Key("maximumnoqualifier", "f1", "q", "vis1");
    Key k2 = new Key("minKey", "fam2", "q2", "visibility2");
    Key k3 = new Key("row3", "f3", "qualifier3", "v3");
    Key k4 = new Key("r4", "family4", "qual4", "vis4");
    Key k5 = new Key("fifthrow", "thirdfamily", "q5", "v5");
    Key k6 = new Key("r6", "sixthfamily", "qual6", "visibi6");

    Collector collector = entrySum.collector(sc);
    collector.accept(k1, new Value("v1"));
    collector.accept(k2, new Value("value2"));
    collector.accept(k3, new Value("val3"));
    collector.accept(k4, new Value("fourthvalue"));
    collector.accept(k5, new Value(""));
    collector.accept(k6, new Value("value6"));

    HashMap<String,Long> stats = new HashMap<>();
    collector.summarize(stats::put);

    HashMap<String,Long> expected = new HashMap<>();
    expected.put("key.min", 18L);
    expected.put("key.max", 25L);
    expected.put("key.sum", 132L);

    // Log2 Histogram
    expected.put("key.logHist.4", 2L);
    expected.put("key.logHist.5", 4L);

    expected.put("row.min", 2L);
    expected.put("row.max", 18L);
    expected.put("row.sum", 40L);

    // Log2 Histogram
    expected.put("row.logHist.1", 2L);
    expected.put("row.logHist.2", 1L);
    expected.put("row.logHist.3", 2L);
    expected.put("row.logHist.4", 1L);

    expected.put("family.min", 2L);
    expected.put("family.max", 11L);
    expected.put("family.sum", 37L);

    // Log2 Histogram
    expected.put("family.logHist.1", 2L);
    expected.put("family.logHist.2", 1L);
    expected.put("family.logHist.3", 3L);

    expected.put("qualifier.min", 1L);
    expected.put("qualifier.max", 10L);
    expected.put("qualifier.sum", 25L);

    // Log2 Histogram
    expected.put("qualifier.logHist.0", 1L);
    expected.put("qualifier.logHist.1", 2L);
    expected.put("qualifier.logHist.2", 2L);
    expected.put("qualifier.logHist.3", 1L);

    expected.put("visibility.min", 2L);
    expected.put("visibility.max", 11L);
    expected.put("visibility.sum", 30L);

    // Log2 Histogram
    expected.put("visibility.logHist.1", 2L);
    expected.put("visibility.logHist.2", 2L);
    expected.put("visibility.logHist.3", 2L);

    expected.put("value.min", 0L);
    expected.put("value.max", 11L);
    expected.put("value.sum", 29L);

    // Log2 Histogram
    expected.put("value.logHist.0", 1L);
    expected.put("value.logHist.1", 1L);
    expected.put("value.logHist.2", 1L);
    expected.put("value.logHist.3", 3L);

    expected.put("total", 6L);

    assertEquals(expected, stats);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\summary\summarizers\EntryLengthSummarizersTest.java
  public void testLog2Histogram() {
    SummarizerConfiguration sc =
        SummarizerConfiguration.builder(EntryLengthSummarizer.class).build();
    EntryLengthSummarizer entrySum = new EntryLengthSummarizer();

    Key k1 = new Key("row1");
    Key k2 = new Key("row2");
    Key k3 = new Key("row3");

    Collector collector = entrySum.collector(sc);
    collector.accept(k1, new Value("01"));
    collector.accept(k2, new Value("012345678"));
    collector.accept(k3, new Value("012345679"));

    HashMap<String,Long> stats = new HashMap<>();
    collector.summarize(stats::put);

    HashMap<String,Long> expected = new HashMap<>();
    expected.put("key.min", 4L);
    expected.put("key.max", 4L);
    expected.put("key.sum", 12L);

    // Log2 Histogram for Key
    expected.put("key.logHist.2", 3L);

    expected.put("row.min", 4L);
    expected.put("row.max", 4L);
    expected.put("row.sum", 12L);

    // Log2 Histogram for Row
    expected.put("row.logHist.2", 3L);

    expected.put("family.min", 0L);
    expected.put("family.max", 0L);
    expected.put("family.sum", 0L);

    // Log2 Histogram for Family
    expected.put("family.logHist.0", 3L);

    expected.put("qualifier.min", 0L);
    expected.put("qualifier.max", 0L);
    expected.put("qualifier.sum", 0L);

    // Log2 Histogram for Qualifier
    expected.put("qualifier.logHist.0", 3L);

    expected.put("visibility.min", 0L);
    expected.put("visibility.max", 0L);
    expected.put("visibility.sum", 0L);

    // Log2 Histogram for Visibility
    expected.put("visibility.logHist.0", 3L);

    expected.put("value.min", 2L);
    expected.put("value.max", 9L);
    expected.put("value.sum", 20L);

    // Log2 Histogram for Value
    expected.put("value.logHist.1", 1L);
    expected.put("value.logHist.3", 2L);

    expected.put("total", 3L);

    assertEquals(expected, stats);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\summary\summarizers\EntryLengthSummarizersTest.java
  public void testCombine() {
    SummarizerConfiguration sc =
        SummarizerConfiguration.builder(EntryLengthSummarizer.class).build();
    EntryLengthSummarizer entrySum = new EntryLengthSummarizer();

    Collector collector1 = entrySum.collector(sc);
    collector1.accept(new Key("1", "f1", "q1"), new Value("v1"));
    collector1.accept(new Key("1234", "f1", "q1"), new Value("v111"));
    collector1.accept(new Key("12345678", "f1", "q1"), new Value("v111111"));

    HashMap<String,Long> stats1 = new HashMap<>();
    collector1.summarize(stats1::put);

    Collector collector2 = entrySum.collector(sc);
    collector2.accept(new Key("5432", "f11", "q12"), new Value("2"));
    collector2.accept(new Key("12", "f11", "q1234"), new Value("12"));
    collector2.accept(new Key("12", "f11", "q11234567"), new Value("4444"));

    HashMap<String,Long> stats2 = new HashMap<>();
    collector2.summarize(stats2::put);

    Combiner combiner = entrySum.combiner(sc);
    combiner.merge(stats1, stats2);

    HashMap<String,Long> expected = new HashMap<>();
    expected.put("key.min", 5L);
    expected.put("key.max", 14L);
    expected.put("key.sum", 59L);

    // Log2 Histogram for Key
    expected.put("key.logHist.2", 1L);
    expected.put("key.logHist.3", 3L);
    expected.put("key.logHist.4", 2L);

    expected.put("row.min", 1L);
    expected.put("row.max", 8L);
    expected.put("row.sum", 21L);

    // Log2 Histogram for Row
    expected.put("row.logHist.0", 1L);
    expected.put("row.logHist.1", 2L);
    expected.put("row.logHist.2", 2L);
    expected.put("row.logHist.3", 1L);

    expected.put("family.min", 2L);
    expected.put("family.max", 3L);
    expected.put("family.sum", 15L);

    // Log2 Histogram for Family
    expected.put("family.logHist.1", 3L);
    expected.put("family.logHist.2", 3L);

    expected.put("qualifier.min", 2L);
    expected.put("qualifier.max", 9L);
    expected.put("qualifier.sum", 23L);

    // Log2 Histogram for Qualifier
    expected.put("qualifier.logHist.1", 3L);
    expected.put("qualifier.logHist.2", 2L);
    expected.put("qualifier.logHist.3", 1L);

    expected.put("visibility.min", 0L);
    expected.put("visibility.max", 0L);
    expected.put("visibility.sum", 0L);

    // Log2 Histogram for Visibility
    expected.put("visibility.logHist.0", 6L);

    expected.put("value.min", 1L);
    expected.put("value.max", 7L);
    expected.put("value.sum", 20L);

    // Log2 Histogram for Value
    expected.put("value.logHist.0", 1L);
    expected.put("value.logHist.1", 2L);
    expected.put("value.logHist.2", 2L);
    expected.put("value.logHist.3", 1L);

    expected.put("total", 6L);

    assertEquals(expected, stats1);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\summary\summarizers\EntryLengthSummarizersTest.java
  public void testCombine2() {
    SummarizerConfiguration sc =
        SummarizerConfiguration.builder(EntryLengthSummarizer.class).build();
    EntryLengthSummarizer entrySum = new EntryLengthSummarizer();

    Collector collector1 = entrySum.collector(sc);
    collector1.accept(new Key("12345678901234567890", "f12345", "q123456"),
        new Value("value1234567890"));

    HashMap<String,Long> stats1 = new HashMap<>();
    collector1.summarize(stats1::put);

    Collector collector2 = entrySum.collector(sc);
    collector2.accept(new Key("5432", "f11", "q12"), new Value("2"));
    collector2.accept(new Key("12", "f11", "q1234"), new Value("12"));
    collector2.accept(new Key("12", "f11", "q11234567"), new Value("4444"));

    HashMap<String,Long> stats2 = new HashMap<>();
    collector2.summarize(stats2::put);

    Combiner combiner = entrySum.combiner(sc);
    combiner.merge(stats1, stats2);

    HashMap<String,Long> expected = new HashMap<>();
    expected.put("key.min", 10L);
    expected.put("key.max", 33L);
    expected.put("key.sum", 67L);

    // Log2 Histogram for Key
    expected.put("key.logHist.3", 2L);
    expected.put("key.logHist.4", 1L);
    expected.put("key.logHist.5", 1L);

    expected.put("row.min", 2L);
    expected.put("row.max", 20L);
    expected.put("row.sum", 28L);

    // Log2 Histogram for Row
    expected.put("row.logHist.1", 2L);
    expected.put("row.logHist.2", 1L);
    expected.put("row.logHist.4", 1L);

    expected.put("family.min", 3L);
    expected.put("family.max", 6L);
    expected.put("family.sum", 15L);

    // Log2 Histogram for Family
    expected.put("family.logHist.2", 3L);
    expected.put("family.logHist.3", 1L);

    expected.put("qualifier.min", 3L);
    expected.put("qualifier.max", 9L);
    expected.put("qualifier.sum", 24L);

    // Log2 Histogram for Qualifier
    expected.put("qualifier.logHist.2", 2L);
    expected.put("qualifier.logHist.3", 2L);

    expected.put("visibility.min", 0L);
    expected.put("visibility.max", 0L);
    expected.put("visibility.sum", 0L);

    // Log2 Histogram for Visibility
    expected.put("visibility.logHist.0", 4L);

    expected.put("value.min", 1L);
    expected.put("value.max", 15L);
    expected.put("value.sum", 22L);

    // Log2 Histogram for Value
    expected.put("value.logHist.0", 1L);
    expected.put("value.logHist.1", 1L);
    expected.put("value.logHist.2", 1L);
    expected.put("value.logHist.4", 1L);

    expected.put("total", 4L);

    assertEquals(expected, stats1);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\client\summary\summarizers\EntryLengthSummarizersTest.java
  public void testCombine3() {
    SummarizerConfiguration sc =
        SummarizerConfiguration.builder(EntryLengthSummarizer.class).build();
    EntryLengthSummarizer entrySum = new EntryLengthSummarizer();

    Collector collector1 = entrySum.collector(sc);
    collector1.accept(new Key("r1", "f1"), new Value("v1"));

    HashMap<String,Long> stats1 = new HashMap<>();
    collector1.summarize(stats1::put);

    Collector collector2 = entrySum.collector(sc);
    collector2.accept(new Key("row1", "family1", "q1"), new Value(""));

    HashMap<String,Long> stats2 = new HashMap<>();
    collector2.summarize(stats2::put);

    Combiner combiner = entrySum.combiner(sc);
    combiner.merge(stats1, stats2);

    HashMap<String,Long> expected = new HashMap<>();
    expected.put("key.min", 4L);
    expected.put("key.max", 13L);
    expected.put("key.sum", 17L);

    // Log2 Histogram for Key
    expected.put("key.logHist.2", 1L);
    expected.put("key.logHist.4", 1L);

    expected.put("row.min", 2L);
    expected.put("row.max", 4L);
    expected.put("row.sum", 6L);

    // Log2 Histogram for Row
    expected.put("row.logHist.1", 1L);
    expected.put("row.logHist.2", 1L);

    expected.put("family.min", 2L);
    expected.put("family.max", 7L);
    expected.put("family.sum", 9L);

    // Log2 Histogram for Family
    expected.put("family.logHist.1", 1L);
    expected.put("family.logHist.3", 1L);

    expected.put("qualifier.min", 0L);
    expected.put("qualifier.max", 2L);
    expected.put("qualifier.sum", 2L);

    // Log2 Histogram for Qualifier
    expected.put("qualifier.logHist.0", 1L);
    expected.put("qualifier.logHist.1", 1L);

    expected.put("visibility.min", 0L);
    expected.put("visibility.max", 0L);
    expected.put("visibility.sum", 0L);

    // Log2 Histogram for Visibility
    expected.put("visibility.logHist.0", 2L);

    expected.put("value.min", 0L);
    expected.put("value.max", 2L);
    expected.put("value.sum", 2L);

    // Log2 Histogram for Value
    expected.put("value.logHist.0", 1L);
    expected.put("value.logHist.1", 1L);

    expected.put("total", 2L);

    assertEquals(expected, stats1);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\clientImpl\ClientConfConverterTest.java
  public void testBasic() {
    Properties before = new Properties();
    before.setProperty(ClientProperty.INSTANCE_NAME.getKey(), "instance");
    before.setProperty(ClientProperty.INSTANCE_ZOOKEEPERS.getKey(), "zookeepers");
    ClientProperty.setPassword(before, "mypass");
    before.setProperty(ClientProperty.SSL_ENABLED.getKey(), "true");
    before.setProperty(ClientProperty.SSL_KEYSTORE_PATH.getKey(), "key_path");
    before.setProperty(ClientProperty.SSL_KEYSTORE_PASSWORD.getKey(), "key_pass");
    before.setProperty(ClientProperty.SSL_TRUSTSTORE_PATH.getKey(), "trust_path");
    before.setProperty(ClientProperty.SASL_ENABLED.getKey(), "true");
    before.setProperty(ClientProperty.SASL_KERBEROS_SERVER_PRIMARY.getKey(), "primary");
    before.setProperty(ClientProperty.BATCH_WRITER_THREADS_MAX.getKey(), "5");

    Properties after = ClientConfConverter.toProperties(ClientConfConverter.toClientConf(before));
    assertEquals(before, after);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\clientImpl\ClientContextTest.java
  public void loadSensitivePropertyFromCredentialProvider() {
    String absPath = getKeyStoreUrl(keystore);
    Properties props = new Properties();
    props.setProperty(Property.GENERAL_SECURITY_CREDENTIAL_PROVIDER_PATHS.getKey(), absPath);
    AccumuloConfiguration accClientConf = ClientConfConverter.toAccumuloConf(props);
    assertEquals("mysecret", accClientConf.get(Property.INSTANCE_SECRET));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\clientImpl\ClientContextTest.java
  public void defaultValueForSensitiveProperty() {
    Properties props = new Properties();
    AccumuloConfiguration accClientConf = ClientConfConverter.toAccumuloConf(props);
    assertEquals(Property.INSTANCE_SECRET.getDefaultValue(),
        accClientConf.get(Property.INSTANCE_SECRET));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\clientImpl\ClientContextTest.java
  public void sensitivePropertiesIncludedInProperties() {
    String absPath = getKeyStoreUrl(keystore);
    Properties clientProps = new Properties();
    clientProps.setProperty(Property.GENERAL_SECURITY_CREDENTIAL_PROVIDER_PATHS.getKey(), absPath);

    AccumuloConfiguration accClientConf = ClientConfConverter.toAccumuloConf(clientProps);
    Map<String,String> props = new HashMap<>();
    accClientConf.getProperties(props, x -> true);

    // Only sensitive properties are added
    assertEquals(Property.GENERAL_RPC_TIMEOUT.getDefaultValue(),
        props.get(Property.GENERAL_RPC_TIMEOUT.getKey()));
    // Only known properties are added
    assertFalse(props.containsKey("ignored.property"));
    assertEquals("mysecret", props.get(Property.INSTANCE_SECRET.getKey()));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\clientImpl\ConditionalComparatorTest.java
  public void testComparator() {
    Condition c1 = new Condition("a", "b");
    Condition c2 = new Condition("a", "c");
    Condition c3 = new Condition("b", "c");
    Condition c4 = new Condition("a", "b").setTimestamp(5);
    Condition c5 = new Condition("a", "b").setTimestamp(6);
    Condition c6 = new Condition("a", "b").setVisibility(new ColumnVisibility("A&B"));
    Condition c7 = new Condition("a", "b").setVisibility(new ColumnVisibility("A&C"));

    Comparator<Condition> comparator = ConditionalWriterImpl.CONDITION_COMPARATOR;

    assertEquals(0, comparator.compare(c1, c1));
    assertTrue(comparator.compare(c1, c2) < 0);
    assertTrue(comparator.compare(c2, c1) > 0);
    assertTrue(comparator.compare(c1, c3) < 0);
    assertTrue(comparator.compare(c3, c1) > 0);
    assertTrue(comparator.compare(c1, c4) < 0);
    assertTrue(comparator.compare(c4, c1) > 0);
    assertTrue(comparator.compare(c5, c4) < 0);
    assertTrue(comparator.compare(c4, c5) > 0);
    assertTrue(comparator.compare(c1, c7) < 0);
    assertTrue(comparator.compare(c7, c1) > 0);
    assertTrue(comparator.compare(c6, c7) < 0);
    assertTrue(comparator.compare(c7, c6) > 0);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\clientImpl\DelegationTokenConfigSerializerTest.java
  public void test() {
    DelegationTokenConfig cfg = new DelegationTokenConfig();
    cfg.setTokenLifetime(8323, TimeUnit.HOURS);

    TDelegationTokenConfig tCfg = DelegationTokenConfigSerializer.serialize(cfg);
    assertEquals(tCfg.getLifetime(), cfg.getTokenLifetime(TimeUnit.MILLISECONDS));

    assertEquals(cfg, DelegationTokenConfigSerializer.deserialize(tCfg));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\clientImpl\RootTabletLocatorTest.java
  public void testInvalidateCache_Server() {
    zc.clear(context.getZooKeeperRoot() + Constants.ZTSERVERS + "/server");
    replay(zc);
    rtl.invalidateCache(context, "server");
    verify(zc);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\clientImpl\ScannerBaseTest.java
  public void testScannerBaseForEach() throws Exception {
    Map<Key,Value> expected =
        Map.of(new Key("row1", "cf1", "cq1"), new Value("v1"), new Key("row2", "cf1", "cq1"),
            new Value("v2"), new Key("row3", "cf1", "cq1"), new Value("v3"));

    // mock ScannerOptions subclass, because EasyMock can't mock ScannerBase, an interface;
    // only the iterator method is mocked, because the forEach method should only call iterator()
    ScannerBase scanner =
        partialMockBuilder(ScannerOptions.class).addMockedMethod("iterator").createMock();
    expect(scanner.iterator()).andReturn(expected.entrySet().iterator()).once();
    replay(scanner);

    // check the results from forEach; they should match what iterator() returns
    Map<Key,Value> actual = new HashMap<>();
    scanner.forEach((k, v) -> actual.put(k, v));
    assertEquals(expected, actual);

    verify(scanner);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\clientImpl\ScannerImplTest.java
  public void testValidReadaheadValues() {
    try (var s = new ScannerImpl(context, TableId.of("foo"), Authorizations.EMPTY)) {
      s.setReadaheadThreshold(0);
      s.setReadaheadThreshold(10);
      s.setReadaheadThreshold(Long.MAX_VALUE);

      assertEquals(Long.MAX_VALUE, s.getReadaheadThreshold());
    }
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\clientImpl\ScannerImplTest.java
  public void testInValidReadaheadValues() {
    try (var s = new ScannerImpl(context, TableId.of("foo"), Authorizations.EMPTY)) {
      assertThrows(IllegalArgumentException.class, () -> s.setReadaheadThreshold(-1));
    }
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\clientImpl\ScannerImplTest.java
  public void testGetAuthorizations() {
    Authorizations expected = new Authorizations("a,b");
    try (var s = new ScannerImpl(context, TableId.of("foo"), expected)) {
      assertEquals(expected, s.getAuthorizations());
    }
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\clientImpl\ScannerImplTest.java
  public void testNullAuthorizationsFails() {
    assertThrows(IllegalArgumentException.class,
        () -> new ScannerImpl(context, TableId.of("foo"), null));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\clientImpl\ScannerOptionsTest.java
  public void testAddRemoveIterator() {
    try (ScannerOptions options = new ScannerOptions()) {
      options.addScanIterator(new IteratorSetting(1, "NAME", WholeRowIterator.class));
      assertEquals(1, options.serverSideIteratorList.size());
      options.removeScanIterator("NAME");
      assertEquals(0, options.serverSideIteratorList.size());
    }
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\clientImpl\ScannerOptionsTest.java
  public void testIteratorConflict() {
    try (ScannerOptions options = new ScannerOptions()) {
      options.addScanIterator(new IteratorSetting(1, "NAME", DebugIterator.class));
      try {
        options.addScanIterator(new IteratorSetting(2, "NAME", DebugIterator.class));
        fail();
      } catch (IllegalArgumentException e) {}
      try {
        options.addScanIterator(new IteratorSetting(1, "NAME2", DebugIterator.class));
        fail();
      } catch (IllegalArgumentException e) {}
    }
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\clientImpl\ScannerOptionsTest.java
  public void testFetchColumn() {
    try (ScannerOptions options = new ScannerOptions()) {
      assertEquals(0, options.getFetchedColumns().size());
      IteratorSetting.Column col =
          new IteratorSetting.Column(new Text("family"), new Text("qualifier"));
      options.fetchColumn(col);
      SortedSet<Column> fetchedColumns = options.getFetchedColumns();
      assertEquals(1, fetchedColumns.size());
      Column fetchCol = fetchedColumns.iterator().next();
      assertEquals(col.getColumnFamily(), new Text(fetchCol.getColumnFamily()));
      assertEquals(col.getColumnQualifier(), new Text(fetchCol.getColumnQualifier()));
    }
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\clientImpl\ScannerOptionsTest.java
  public void testFetchNullColumn() {
    try (ScannerOptions options = new ScannerOptions()) {
      // Require a non-null instance of Column
      options.fetchColumn(null);
    }
  }
}
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\clientImpl\TableOperationsHelperTest.java
  public void testAttachIterator() throws Exception {
    TableOperationsHelper t = getHelper();
    Map<String,String> empty = Collections.emptyMap();
    t.attachIterator("table", new IteratorSetting(10, "someName", "foo.bar", empty),
        EnumSet.of(IteratorScope.scan));
    check(t, "table", new String[] {"table.iterator.scan.someName=10,foo.bar",});
    t.removeIterator("table", "someName", EnumSet.of(IteratorScope.scan));
    check(t, "table", new String[] {});

    IteratorSetting setting = new IteratorSetting(10, "someName", "foo.bar");
    setting.addOptions(Collections.singletonMap("key", "value"));
    t.attachIterator("table", setting, EnumSet.of(IteratorScope.majc));
    setting = new IteratorSetting(10, "someName", "foo.bar");
    t.attachIterator("table", setting, EnumSet.of(IteratorScope.scan));
    check(t, "table", new String[] {"table.iterator.majc.someName=10,foo.bar",
        "table.iterator.majc.someName.opt.key=value", "table.iterator.scan.someName=10,foo.bar",});

    t.removeIterator("table", "someName", EnumSet.of(IteratorScope.scan));
    setting = new IteratorSetting(20, "otherName", "some.classname");
    setting.addOptions(Collections.singletonMap("key", "value"));
    t.attachIterator("table", setting, EnumSet.of(IteratorScope.majc));
    setting = new IteratorSetting(20, "otherName", "some.classname");
    t.attachIterator("table", setting, EnumSet.of(IteratorScope.scan));
    Map<String,EnumSet<IteratorScope>> two = t.listIterators("table");
    assertEquals(2, two.size());
    assertTrue(two.containsKey("otherName"));
    assertEquals(2, two.get("otherName").size());
    assertTrue(two.get("otherName").contains(IteratorScope.majc));
    assertTrue(two.get("otherName").contains(IteratorScope.scan));
    assertTrue(two.containsKey("someName"));
    assertEquals(1, two.get("someName").size());
    assertTrue(two.get("someName").contains(IteratorScope.majc));
    t.removeIterator("table", "someName", EnumSet.allOf(IteratorScope.class));
    check(t, "table",
        new String[] {"table.iterator.majc.otherName=20,some.classname",
            "table.iterator.majc.otherName.opt.key=value",
            "table.iterator.scan.otherName=20,some.classname",});

    setting = t.getIteratorSetting("table", "otherName", IteratorScope.scan);
    assertEquals(20, setting.getPriority());
    assertEquals("some.classname", setting.getIteratorClass());
    assertTrue(setting.getOptions().isEmpty());
    setting = t.getIteratorSetting("table", "otherName", IteratorScope.majc);
    assertEquals(20, setting.getPriority());
    assertEquals("some.classname", setting.getIteratorClass());
    assertFalse(setting.getOptions().isEmpty());
    assertEquals(Collections.singletonMap("key", "value"), setting.getOptions());
    t.attachIterator("table", setting, EnumSet.of(IteratorScope.minc));
    check(t, "table",
        new String[] {"table.iterator.majc.otherName=20,some.classname",
            "table.iterator.majc.otherName.opt.key=value",
            "table.iterator.minc.otherName=20,some.classname",
            "table.iterator.minc.otherName.opt.key=value",
            "table.iterator.scan.otherName=20,some.classname",});

    try {
      t.attachIterator("table", setting);
      fail();
    } catch (AccumuloException e) {
      // expected, ignore
    }
    setting.setName("thirdName");
    try {
      t.attachIterator("table", setting);
      fail();
    } catch (AccumuloException e) {}
    setting.setPriority(10);
    t.setProperty("table", "table.iterator.minc.thirdName.opt.key", "value");
    try {
      t.attachIterator("table", setting);
      fail();
    } catch (AccumuloException e) {}
    t.removeProperty("table", "table.iterator.minc.thirdName.opt.key");
    t.attachIterator("table", setting);
  }
}
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\clientImpl\TabletLocatorImplTest.java
  public void testRemoveOverlapping1() {
    TreeMap<Text,TabletLocation> mc = createMetaCache(nke("0", null, null), "l1");

    runTest(mc, nke("0", "a", null), nkes());
    runTest(mc, nke("0", null, null), nkes());
    runTest(mc, nke("0", null, "a"), nkes());

    mc = createMetaCache(nke("0", "g", null), "l1", nke("0", "r", "g"), "l1", nke("0", null, "r"),
        "l1");
    runTest(mc, nke("0", null, null), nkes());

    runTest(mc, nke("0", "a", null), nkes(nke("0", "r", "g"), nke("0", null, "r")));
    runTest(mc, nke("0", "g", null), nkes(nke("0", "r", "g"), nke("0", null, "r")));
    runTest(mc, nke("0", "h", null), nkes(nke("0", null, "r")));
    runTest(mc, nke("0", "r", null), nkes(nke("0", null, "r")));
    runTest(mc, nke("0", "s", null), nkes());

    runTest(mc, nke("0", "b", "a"), nkes(nke("0", "r", "g"), nke("0", null, "r")));
    runTest(mc, nke("0", "g", "a"), nkes(nke("0", "r", "g"), nke("0", null, "r")));
    runTest(mc, nke("0", "h", "a"), nkes(nke("0", null, "r")));
    runTest(mc, nke("0", "r", "a"), nkes(nke("0", null, "r")));
    runTest(mc, nke("0", "s", "a"), nkes());

    runTest(mc, nke("0", "h", "g"), nkes(nke("0", "g", null), nke("0", null, "r")));
    runTest(mc, nke("0", "r", "g"), nkes(nke("0", "g", null), nke("0", null, "r")));
    runTest(mc, nke("0", "s", "g"), nkes(nke("0", "g", null)));

    runTest(mc, nke("0", "i", "h"), nkes(nke("0", "g", null), nke("0", null, "r")));
    runTest(mc, nke("0", "r", "h"), nkes(nke("0", "g", null), nke("0", null, "r")));
    runTest(mc, nke("0", "s", "h"), nkes(nke("0", "g", null)));

    runTest(mc, nke("0", "z", "f"), nkes());
    runTest(mc, nke("0", "z", "g"), nkes(nke("0", "g", null)));
    runTest(mc, nke("0", "z", "q"), nkes(nke("0", "g", null)));
    runTest(mc, nke("0", "z", "r"), nkes(nke("0", "g", null), nke("0", "r", "g")));
    runTest(mc, nke("0", "z", "s"), nkes(nke("0", "g", null), nke("0", "r", "g")));

    runTest(mc, nke("0", null, "f"), nkes());
    runTest(mc, nke("0", null, "g"), nkes(nke("0", "g", null)));
    runTest(mc, nke("0", null, "q"), nkes(nke("0", "g", null)));
    runTest(mc, nke("0", null, "r"), nkes(nke("0", "g", null), nke("0", "r", "g")));
    runTest(mc, nke("0", null, "s"), nkes(nke("0", "g", null), nke("0", "r", "g")));

  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\clientImpl\TabletLocatorImplTest.java
  public void testRemoveOverlapping2() {

    // test removes when cache does not contain all tablets in a table
    TreeMap<Text,TabletLocation> mc =
        createMetaCache(nke("0", "r", "g"), "l1", nke("0", null, "r"), "l1");

    runTest(mc, nke("0", "a", null), nkes(nke("0", "r", "g"), nke("0", null, "r")));
    runTest(mc, nke("0", "g", null), nkes(nke("0", "r", "g"), nke("0", null, "r")));
    runTest(mc, nke("0", "h", null), nkes(nke("0", null, "r")));
    runTest(mc, nke("0", "r", null), nkes(nke("0", null, "r")));
    runTest(mc, nke("0", "s", null), nkes());

    runTest(mc, nke("0", "b", "a"), nkes(nke("0", "r", "g"), nke("0", null, "r")));
    runTest(mc, nke("0", "g", "a"), nkes(nke("0", "r", "g"), nke("0", null, "r")));
    runTest(mc, nke("0", "h", "a"), nkes(nke("0", null, "r")));
    runTest(mc, nke("0", "r", "a"), nkes(nke("0", null, "r")));
    runTest(mc, nke("0", "s", "a"), nkes());

    runTest(mc, nke("0", "h", "g"), nkes(nke("0", null, "r")));

    mc = createMetaCache(nke("0", "g", null), "l1", nke("0", null, "r"), "l1");

    runTest(mc, nke("0", "h", "g"), nkes(nke("0", "g", null), nke("0", null, "r")));
    runTest(mc, nke("0", "h", "a"), nkes(nke("0", null, "r")));
    runTest(mc, nke("0", "s", "g"), nkes(nke("0", "g", null)));
    runTest(mc, nke("0", "s", "a"), nkes());

    mc = createMetaCache(nke("0", "g", null), "l1", nke("0", "r", "g"), "l1");

    runTest(mc, nke("0", "z", "f"), nkes());
    runTest(mc, nke("0", "z", "g"), nkes(nke("0", "g", null)));
    runTest(mc, nke("0", "z", "q"), nkes(nke("0", "g", null)));
    runTest(mc, nke("0", "z", "r"), nkes(nke("0", "g", null), nke("0", "r", "g")));
    runTest(mc, nke("0", "z", "s"), nkes(nke("0", "g", null), nke("0", "r", "g")));

    runTest(mc, nke("0", null, "f"), nkes());
    runTest(mc, nke("0", null, "g"), nkes(nke("0", "g", null)));
    runTest(mc, nke("0", null, "q"), nkes(nke("0", "g", null)));
    runTest(mc, nke("0", null, "r"), nkes(nke("0", "g", null), nke("0", "r", "g")));
    runTest(mc, nke("0", null, "s"), nkes(nke("0", "g", null), nke("0", "r", "g")));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\clientImpl\TabletLocatorImplTest.java
  public void test1() throws Exception {
    TServers tservers = new TServers();
    TestTabletLocationObtainer ttlo = new TestTabletLocationObtainer(tservers);

    RootTabletLocator rtl = new TestRootTabletLocator();
    TabletLocatorImpl rootTabletCache =
        new TabletLocatorImpl(MetadataTable.ID, rtl, ttlo, new YesLockChecker());
    TabletLocatorImpl tab1TabletCache =
        new TabletLocatorImpl(TableId.of("tab1"), rootTabletCache, ttlo, new YesLockChecker());

    locateTabletTest(tab1TabletCache, "r1", null, null);

    KeyExtent tab1e = nke("tab1", null, null);

    setLocation(tservers, "tserver1", RTE, MTE, "tserver2");
    setLocation(tservers, "tserver2", MTE, tab1e, "tserver3");

    locateTabletTest(tab1TabletCache, "r1", tab1e, "tserver3");
    locateTabletTest(tab1TabletCache, "r2", tab1e, "tserver3");

    // simulate a split
    KeyExtent tab1e1 = nke("tab1", "g", null);
    KeyExtent tab1e2 = nke("tab1", null, "g");

    setLocation(tservers, "tserver2", MTE, tab1e1, "tserver4");
    setLocation(tservers, "tserver2", MTE, tab1e2, "tserver5");

    locateTabletTest(tab1TabletCache, "r1", tab1e, "tserver3");
    tab1TabletCache.invalidateCache(tab1e);
    locateTabletTest(tab1TabletCache, "r1", tab1e2, "tserver5");
    locateTabletTest(tab1TabletCache, "a", tab1e1, "tserver4");
    locateTabletTest(tab1TabletCache, "a", true, tab1e1, "tserver4");
    locateTabletTest(tab1TabletCache, "g", tab1e1, "tserver4");
    locateTabletTest(tab1TabletCache, "g", true, tab1e2, "tserver5");

    // simulate a partial split
    KeyExtent tab1e22 = nke("tab1", null, "m");
    setLocation(tservers, "tserver2", MTE, tab1e22, "tserver6");
    locateTabletTest(tab1TabletCache, "r1", tab1e2, "tserver5");
    tab1TabletCache.invalidateCache(tab1e2);
    locateTabletTest(tab1TabletCache, "r1", tab1e22, "tserver6");
    locateTabletTest(tab1TabletCache, "h", null, null);
    locateTabletTest(tab1TabletCache, "a", tab1e1, "tserver4");
    KeyExtent tab1e21 = nke("tab1", "m", "g");
    setLocation(tservers, "tserver2", MTE, tab1e21, "tserver7");
    locateTabletTest(tab1TabletCache, "r1", tab1e22, "tserver6");
    locateTabletTest(tab1TabletCache, "h", tab1e21, "tserver7");
    locateTabletTest(tab1TabletCache, "a", tab1e1, "tserver4");

    // simulate a migration
    setLocation(tservers, "tserver2", MTE, tab1e21, "tserver8");
    tab1TabletCache.invalidateCache(tab1e21);
    locateTabletTest(tab1TabletCache, "r1", tab1e22, "tserver6");
    locateTabletTest(tab1TabletCache, "h", tab1e21, "tserver8");
    locateTabletTest(tab1TabletCache, "a", tab1e1, "tserver4");

    // simulate a server failure
    setLocation(tservers, "tserver2", MTE, tab1e21, "tserver9");
    tab1TabletCache.invalidateCache(context, "tserver8");
    locateTabletTest(tab1TabletCache, "r1", tab1e22, "tserver6");
    locateTabletTest(tab1TabletCache, "h", tab1e21, "tserver9");
    locateTabletTest(tab1TabletCache, "a", tab1e1, "tserver4");

    // simulate all servers failing
    deleteServer(tservers, "tserver1");
    deleteServer(tservers, "tserver2");
    tab1TabletCache.invalidateCache(context, "tserver4");
    tab1TabletCache.invalidateCache(context, "tserver6");
    tab1TabletCache.invalidateCache(context, "tserver9");

    locateTabletTest(tab1TabletCache, "r1", null, null);
    locateTabletTest(tab1TabletCache, "h", null, null);
    locateTabletTest(tab1TabletCache, "a", null, null);

    EasyMock.verify(context);

    context = EasyMock.createMock(ClientContext.class);
    EasyMock.expect(context.getInstanceID()).andReturn("instance1").anyTimes();
    EasyMock.expect(context.getRootTabletLocation()).andReturn("tserver4").anyTimes();
    replay(context);

    setLocation(tservers, "tserver4", RTE, MTE, "tserver5");
    setLocation(tservers, "tserver5", MTE, tab1e1, "tserver1");
    setLocation(tservers, "tserver5", MTE, tab1e21, "tserver2");
    setLocation(tservers, "tserver5", MTE, tab1e22, "tserver3");

    locateTabletTest(tab1TabletCache, "a", tab1e1, "tserver1");
    locateTabletTest(tab1TabletCache, "h", tab1e21, "tserver2");
    locateTabletTest(tab1TabletCache, "r", tab1e22, "tserver3");

    // simulate the metadata table splitting
    KeyExtent mte1 = new KeyExtent(MetadataTable.ID, tab1e21.toMetaRow(), RTE.endRow());
    KeyExtent mte2 = new KeyExtent(MetadataTable.ID, null, tab1e21.toMetaRow());

    setLocation(tservers, "tserver4", RTE, mte1, "tserver5");
    setLocation(tservers, "tserver4", RTE, mte2, "tserver6");
    deleteServer(tservers, "tserver5");
    setLocation(tservers, "tserver5", mte1, tab1e1, "tserver7");
    setLocation(tservers, "tserver5", mte1, tab1e21, "tserver8");
    setLocation(tservers, "tserver6", mte2, tab1e22, "tserver9");

    tab1TabletCache.invalidateCache(tab1e1);
    tab1TabletCache.invalidateCache(tab1e21);
    tab1TabletCache.invalidateCache(tab1e22);

    locateTabletTest(tab1TabletCache, "a", tab1e1, "tserver7");
    locateTabletTest(tab1TabletCache, "h", tab1e21, "tserver8");
    locateTabletTest(tab1TabletCache, "r", tab1e22, "tserver9");

    // simulate metadata and regular server down and the reassigned
    deleteServer(tservers, "tserver5");
    tab1TabletCache.invalidateCache(context, "tserver7");
    locateTabletTest(tab1TabletCache, "a", null, null);
    locateTabletTest(tab1TabletCache, "h", tab1e21, "tserver8");
    locateTabletTest(tab1TabletCache, "r", tab1e22, "tserver9");

    setLocation(tservers, "tserver4", RTE, mte1, "tserver10");
    setLocation(tservers, "tserver10", mte1, tab1e1, "tserver7");
    setLocation(tservers, "tserver10", mte1, tab1e21, "tserver8");

    locateTabletTest(tab1TabletCache, "a", tab1e1, "tserver7");
    locateTabletTest(tab1TabletCache, "h", tab1e21, "tserver8");
    locateTabletTest(tab1TabletCache, "r", tab1e22, "tserver9");
    tab1TabletCache.invalidateCache(context, "tserver7");
    setLocation(tservers, "tserver10", mte1, tab1e1, "tserver2");
    locateTabletTest(tab1TabletCache, "a", tab1e1, "tserver2");
    locateTabletTest(tab1TabletCache, "h", tab1e21, "tserver8");
    locateTabletTest(tab1TabletCache, "r", tab1e22, "tserver9");

    // simulate a hole in the metadata, caused by a partial split
    KeyExtent mte11 = new KeyExtent(MetadataTable.ID, tab1e1.toMetaRow(), RTE.endRow());
    KeyExtent mte12 = new KeyExtent(MetadataTable.ID, tab1e21.toMetaRow(), tab1e1.toMetaRow());
    deleteServer(tservers, "tserver10");
    setLocation(tservers, "tserver4", RTE, mte12, "tserver10");
    setLocation(tservers, "tserver10", mte12, tab1e21, "tserver12");

    // at this point should be no table1 metadata
    tab1TabletCache.invalidateCache(tab1e1);
    tab1TabletCache.invalidateCache(tab1e21);
    locateTabletTest(tab1TabletCache, "a", null, null);
    locateTabletTest(tab1TabletCache, "h", tab1e21, "tserver12");
    locateTabletTest(tab1TabletCache, "r", tab1e22, "tserver9");

    setLocation(tservers, "tserver4", RTE, mte11, "tserver5");
    setLocation(tservers, "tserver5", mte11, tab1e1, "tserver13");

    locateTabletTest(tab1TabletCache, "a", tab1e1, "tserver13");
    locateTabletTest(tab1TabletCache, "h", tab1e21, "tserver12");
    locateTabletTest(tab1TabletCache, "r", tab1e22, "tserver9");
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\clientImpl\TabletLocatorImplTest.java
  public void test2() throws Exception {
    TServers tservers = new TServers();
    TabletLocatorImpl metaCache = createLocators(tservers, "tserver1", "tserver2", "foo");

    KeyExtent ke1 = nke("foo", "m", null);
    KeyExtent ke2 = nke("foo", null, "m");

    setLocation(tservers, "tserver2", MTE, ke1, null);
    setLocation(tservers, "tserver2", MTE, ke2, "L1");

    locateTabletTest(metaCache, "a", null, null);
    locateTabletTest(metaCache, "r", ke2, "L1");

    setLocation(tservers, "tserver2", MTE, ke1, "L2");

    locateTabletTest(metaCache, "a", ke1, "L2");
    locateTabletTest(metaCache, "r", ke2, "L1");
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\clientImpl\TabletLocatorImplTest.java
  public void testBinRanges1() throws Exception {

    TabletLocatorImpl metaCache = createLocators("foo", nke("foo", null, null), "l1");

    List<Range> ranges = nrl(nr(null, null));
    Map<String,Map<KeyExtent,List<Range>>> expected =
        createExpectedBinnings("l1", nol(nke("foo", null, null), nrl(nr(null, null)))

        );

    runTest(ranges, metaCache, expected);

    ranges = nrl(nr("a", null));
    expected = createExpectedBinnings("l1", nol(nke("foo", null, null), nrl(nr("a", null)))

    );

    runTest(ranges, metaCache, expected);

    ranges = nrl(nr(null, "b"));
    expected = createExpectedBinnings("l1", nol(nke("foo", null, null), nrl(nr(null, "b")))

    );

    runTest(ranges, metaCache, expected);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\clientImpl\TabletLocatorImplTest.java
  public void testBinRanges2() throws Exception {

    List<Range> ranges = nrl(nr(null, null));
    TabletLocatorImpl metaCache =
        createLocators("foo", nke("foo", "g", null), "l1", nke("foo", null, "g"), "l2");

    Map<String,Map<KeyExtent,List<Range>>> expected =
        createExpectedBinnings("l1", nol(nke("foo", "g", null), nrl(nr(null, null))), "l2",
            nol(nke("foo", null, "g"), nrl(nr(null, null)))

        );

    runTest(ranges, metaCache, expected);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\clientImpl\TabletLocatorImplTest.java
  public void testBinRanges3() throws Exception {

    // test with three tablets and a range that covers the whole table
    List<Range> ranges = nrl(nr(null, null));
    TabletLocatorImpl metaCache = createLocators("foo", nke("foo", "g", null), "l1",
        nke("foo", "m", "g"), "l2", nke("foo", null, "m"), "l2");

    Map<String,Map<KeyExtent,List<Range>>> expected = createExpectedBinnings("l1",
        nol(nke("foo", "g", null), nrl(nr(null, null))), "l2",
        nol(nke("foo", "m", "g"), nrl(nr(null, null)), nke("foo", null, "m"), nrl(nr(null, null)))

    );

    runTest(ranges, metaCache, expected);

    // test with three tablets where one range falls within the first tablet and last two ranges
    // fall within the last tablet
    ranges = nrl(nr(null, "c"), nr("s", "y"), nr("z", null));
    expected = createExpectedBinnings("l1", nol(nke("foo", "g", null), nrl(nr(null, "c"))), "l2",
        nol(nke("foo", null, "m"), nrl(nr("s", "y"), nr("z", null)))

    );

    runTest(ranges, metaCache, expected);

    // test is same as above, but has an additional range that spans the first two tablets
    ranges = nrl(nr(null, "c"), nr("f", "i"), nr("s", "y"), nr("z", null));
    expected =
        createExpectedBinnings("l1", nol(nke("foo", "g", null), nrl(nr(null, "c"), nr("f", "i"))),
            "l2", nol(nke("foo", "m", "g"), nrl(nr("f", "i")), nke("foo", null, "m"),
                nrl(nr("s", "y"), nr("z", null)))

        );

    runTest(ranges, metaCache, expected);

    // test where start of range is not inclusive and same as tablet endRow
    ranges = nrl(nr("g", false, "m", true));
    expected =
        createExpectedBinnings("l2", nol(nke("foo", "m", "g"), nrl(nr("g", false, "m", true)))

        );

    runTest(ranges, metaCache, expected);

    // test where start of range is inclusive and same as tablet endRow
    ranges = nrl(nr("g", true, "m", true));
    expected =
        createExpectedBinnings("l1", nol(nke("foo", "g", null), nrl(nr("g", true, "m", true))),
            "l2", nol(nke("foo", "m", "g"), nrl(nr("g", true, "m", true)))

        );

    runTest(ranges, metaCache, expected);

    ranges = nrl(nr("g", true, "m", false));
    expected =
        createExpectedBinnings("l1", nol(nke("foo", "g", null), nrl(nr("g", true, "m", false))),
            "l2", nol(nke("foo", "m", "g"), nrl(nr("g", true, "m", false)))

        );

    runTest(ranges, metaCache, expected);

    ranges = nrl(nr("g", false, "m", false));
    expected =
        createExpectedBinnings("l2", nol(nke("foo", "m", "g"), nrl(nr("g", false, "m", false)))

        );

    runTest(ranges, metaCache, expected);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\clientImpl\TabletLocatorImplTest.java
  public void testBinRanges4() throws Exception {

    List<Range> ranges = nrl(new Range(new Text("1")));
    TabletLocatorImpl metaCache =
        createLocators("foo", nke("foo", "0", null), "l1", nke("foo", "1", "0"), "l2",
            nke("foo", "2", "1"), "l3", nke("foo", "3", "2"), "l4", nke("foo", null, "3"), "l5");

    Map<String,Map<KeyExtent,List<Range>>> expected =
        createExpectedBinnings("l2", nol(nke("foo", "1", "0"), nrl(new Range(new Text("1"))))

        );

    runTest(ranges, metaCache, expected);

    Key rowColKey = new Key(new Text("3"), new Text("cf1"), new Text("cq1"));
    Range range =
        new Range(rowColKey, true, new Key(new Text("3")).followingKey(PartialKey.ROW), false);

    ranges = nrl(range);
    Map<String,Map<KeyExtent,List<Range>>> expected4 =
        createExpectedBinnings("l4", nol(nke("foo", "3", "2"), nrl(range))

        );

    runTest(ranges, metaCache, expected4, nrl());

    range = new Range(rowColKey, true, new Key(new Text("3")).followingKey(PartialKey.ROW), true);

    ranges = nrl(range);
    Map<String,Map<KeyExtent,List<Range>>> expected5 = createExpectedBinnings("l4",
        nol(nke("foo", "3", "2"), nrl(range)), "l5", nol(nke("foo", null, "3"), nrl(range))

    );

    runTest(ranges, metaCache, expected5, nrl());

    range = new Range(new Text("2"), false, new Text("3"), false);
    ranges = nrl(range);
    Map<String,Map<KeyExtent,List<Range>>> expected6 =
        createExpectedBinnings("l4", nol(nke("foo", "3", "2"), nrl(range))

        );
    runTest(ranges, metaCache, expected6, nrl());

    range = new Range(new Text("2"), true, new Text("3"), false);
    ranges = nrl(range);
    Map<String,Map<KeyExtent,List<Range>>> expected7 = createExpectedBinnings("l3",
        nol(nke("foo", "2", "1"), nrl(range)), "l4", nol(nke("foo", "3", "2"), nrl(range))

    );
    runTest(ranges, metaCache, expected7, nrl());

    range = new Range(new Text("2"), false, new Text("3"), true);
    ranges = nrl(range);
    Map<String,Map<KeyExtent,List<Range>>> expected8 =
        createExpectedBinnings("l4", nol(nke("foo", "3", "2"), nrl(range))

        );
    runTest(ranges, metaCache, expected8, nrl());

    range = new Range(new Text("2"), true, new Text("3"), true);
    ranges = nrl(range);
    Map<String,Map<KeyExtent,List<Range>>> expected9 = createExpectedBinnings("l3",
        nol(nke("foo", "2", "1"), nrl(range)), "l4", nol(nke("foo", "3", "2"), nrl(range))

    );
    runTest(ranges, metaCache, expected9, nrl());

  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\clientImpl\TabletLocatorImplTest.java
  public void testBinRanges5() throws Exception {
    // Test binning when there is a hole in the metadata

    List<Range> ranges = nrl(new Range(new Text("1")));
    TabletLocatorImpl metaCache = createLocators("foo", nke("foo", "0", null), "l1",
        nke("foo", "1", "0"), "l2", nke("foo", "3", "2"), "l4", nke("foo", null, "3"), "l5");

    Map<String,Map<KeyExtent,List<Range>>> expected1 =
        createExpectedBinnings("l2", nol(nke("foo", "1", "0"), nrl(new Range(new Text("1"))))

        );

    runTest(ranges, metaCache, expected1);

    ranges = nrl(new Range(new Text("2")), new Range(new Text("11")));
    Map<String,Map<KeyExtent,List<Range>>> expected2 = createExpectedBinnings();

    runTest(ranges, metaCache, expected2, ranges);

    ranges = nrl(new Range(new Text("1")), new Range(new Text("2")));

    runTest(ranges, metaCache, expected1, nrl(new Range(new Text("2"))));

    ranges = nrl(nr("0", "2"), nr("3", "4"));
    Map<String,Map<KeyExtent,List<Range>>> expected3 =
        createExpectedBinnings("l4", nol(nke("foo", "3", "2"), nrl(nr("3", "4"))), "l5",
            nol(nke("foo", null, "3"), nrl(nr("3", "4")))

        );

    runTest(ranges, metaCache, expected3, nrl(nr("0", "2")));

    ranges =
        nrl(nr("0", "1"), nr("0", "11"), nr("1", "2"), nr("0", "4"), nr("2", "4"), nr("21", "4"));
    Map<String,Map<KeyExtent,List<Range>>> expected4 =
        createExpectedBinnings("l1", nol(nke("foo", "0", null), nrl(nr("0", "1"))), "l2",
            nol(nke("foo", "1", "0"), nrl(nr("0", "1"))), "l4",
            nol(nke("foo", "3", "2"), nrl(nr("21", "4"))), "l5",
            nol(nke("foo", null, "3"), nrl(nr("21", "4")))

        );

    runTest(ranges, metaCache, expected4,
        nrl(nr("0", "11"), nr("1", "2"), nr("0", "4"), nr("2", "4")));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\clientImpl\TabletLocatorImplTest.java
  public void testBinMutations1() throws Exception {
    // one tablet table
    KeyExtent ke1 = nke("foo", null, null);
    TabletLocatorImpl metaCache = createLocators("foo", ke1, "l1");

    List<Mutation> ml =
        nml(nm("a", "cf1:cq1=v1", "cf1:cq2=v2"), nm("c", "cf1:cq1=v3", "cf1:cq2=v4"));
    Map<String,Map<KeyExtent,List<String>>> emb = cemb(nol("a", "l1", ke1), nol("c", "l1", ke1));
    runTest(metaCache, ml, emb);

    ml = nml(nm("a", "cf1:cq1=v1", "cf1:cq2=v2"));
    emb = cemb(nol("a", "l1", ke1));
    runTest(metaCache, ml, emb);

    ml = nml(nm("a", "cf1:cq1=v1", "cf1:cq2=v2"), nm("a", "cf1:cq3=v3"));
    emb = cemb(nol("a", "l1", ke1), nol("a", "l1", ke1));
    runTest(metaCache, ml, emb);

  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\clientImpl\TabletLocatorImplTest.java
  public void testBinMutations2() throws Exception {
    // no tablets for table
    TabletLocatorImpl metaCache = createLocators("foo");

    List<Mutation> ml =
        nml(nm("a", "cf1:cq1=v1", "cf1:cq2=v2"), nm("c", "cf1:cq1=v3", "cf1:cq2=v4"));
    Map<String,Map<KeyExtent,List<String>>> emb = cemb();
    runTest(metaCache, ml, emb, "a", "c");
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\clientImpl\TabletLocatorImplTest.java
  public void testBinMutations3() throws Exception {
    // three tablet table
    KeyExtent ke1 = nke("foo", "h", null);
    KeyExtent ke2 = nke("foo", "t", "h");
    KeyExtent ke3 = nke("foo", null, "t");

    TabletLocatorImpl metaCache = createLocators("foo", ke1, "l1", ke2, "l2", ke3, "l3");

    List<Mutation> ml =
        nml(nm("a", "cf1:cq1=v1", "cf1:cq2=v2"), nm("i", "cf1:cq1=v3", "cf1:cq2=v4"));
    Map<String,Map<KeyExtent,List<String>>> emb = cemb(nol("a", "l1", ke1), nol("i", "l2", ke2));
    runTest(metaCache, ml, emb);

    ml = nml(nm("a", "cf1:cq1=v1", "cf1:cq2=v2"));
    emb = cemb(nol("a", "l1", ke1));
    runTest(metaCache, ml, emb);

    ml = nml(nm("a", "cf1:cq1=v1", "cf1:cq2=v2"), nm("a", "cf1:cq3=v3"));
    emb = cemb(nol("a", "l1", ke1), nol("a", "l1", ke1));
    runTest(metaCache, ml, emb);

    ml = nml(nm("a", "cf1:cq1=v1", "cf1:cq2=v2"), nm("w", "cf1:cq3=v3"));
    emb = cemb(nol("a", "l1", ke1), nol("w", "l3", ke3));
    runTest(metaCache, ml, emb);

    ml = nml(nm("a", "cf1:cq1=v1", "cf1:cq2=v2"), nm("w", "cf1:cq3=v3"), nm("z", "cf1:cq4=v4"));
    emb = cemb(nol("a", "l1", ke1), nol("w", "l3", ke3), nol("z", "l3", ke3));
    runTest(metaCache, ml, emb);

    ml = nml(nm("h", "cf1:cq1=v1", "cf1:cq2=v2"), nm("t", "cf1:cq1=v1", "cf1:cq2=v2"));
    emb = cemb(nol("h", "l1", ke1), nol("t", "l2", ke2));
    runTest(metaCache, ml, emb);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\clientImpl\TabletLocatorImplTest.java
  public void testBinMutations4() throws Exception {
    // three table with hole
    KeyExtent ke1 = nke("foo", "h", null);

    KeyExtent ke3 = nke("foo", null, "t");

    TabletLocatorImpl metaCache = createLocators("foo", ke1, "l1", ke3, "l3");

    List<Mutation> ml =
        nml(nm("a", "cf1:cq1=v1", "cf1:cq2=v2"), nm("i", "cf1:cq1=v3", "cf1:cq2=v4"));
    Map<String,Map<KeyExtent,List<String>>> emb = cemb(nol("a", "l1", ke1));
    runTest(metaCache, ml, emb, "i");

    ml = nml(nm("a", "cf1:cq1=v1", "cf1:cq2=v2"));
    emb = cemb(nol("a", "l1", ke1));
    runTest(metaCache, ml, emb);

    ml = nml(nm("a", "cf1:cq1=v1", "cf1:cq2=v2"), nm("a", "cf1:cq3=v3"));
    emb = cemb(nol("a", "l1", ke1), nol("a", "l1", ke1));
    runTest(metaCache, ml, emb);

    ml = nml(nm("a", "cf1:cq1=v1", "cf1:cq2=v2"), nm("w", "cf1:cq3=v3"));
    emb = cemb(nol("a", "l1", ke1), nol("w", "l3", ke3));
    runTest(metaCache, ml, emb);

    ml = nml(nm("a", "cf1:cq1=v1", "cf1:cq2=v2"), nm("w", "cf1:cq3=v3"), nm("z", "cf1:cq4=v4"));
    emb = cemb(nol("a", "l1", ke1), nol("w", "l3", ke3), nol("z", "l3", ke3));
    runTest(metaCache, ml, emb);

    ml = nml(nm("a", "cf1:cq1=v1", "cf1:cq2=v2"), nm("w", "cf1:cq3=v3"), nm("z", "cf1:cq4=v4"),
        nm("t", "cf1:cq5=v5"));
    emb = cemb(nol("a", "l1", ke1), nol("w", "l3", ke3), nol("z", "l3", ke3));
    runTest(metaCache, ml, emb, "t");
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\clientImpl\TabletLocatorImplTest.java
  public void testBinSplit() throws Exception {
    // try binning mutations and ranges when a tablet splits

    for (int i = 0; i < 3; i++) {
      // when i == 0 only test binning mutations
      // when i == 1 only test binning ranges
      // when i == 2 test both

      KeyExtent ke1 = nke("foo", null, null);
      TServers tservers = new TServers();
      TabletLocatorImpl metaCache =
          createLocators(tservers, "tserver1", "tserver2", "foo", ke1, "l1");

      List<Mutation> ml = nml(nm("a", "cf1:cq1=v1", "cf1:cq2=v2"),
          nm("m", "cf1:cq1=v3", "cf1:cq2=v4"), nm("z", "cf1:cq1=v5"));
      Map<String,Map<KeyExtent,List<String>>> emb =
          cemb(nol("a", "l1", ke1), nol("m", "l1", ke1), nol("z", "l1", ke1));
      if (i == 0 || i == 2)
        runTest(metaCache, ml, emb);

      List<Range> ranges =
          nrl(new Range(new Text("a")), new Range(new Text("m")), new Range(new Text("z")));

      Map<String,Map<KeyExtent,List<Range>>> expected1 =
          createExpectedBinnings("l1", nol(nke("foo", null, null), ranges)

          );

      if (i == 1 || i == 2)
        runTest(ranges, metaCache, expected1);

      KeyExtent ke11 = nke("foo", "n", null);
      KeyExtent ke12 = nke("foo", null, "n");

      setLocation(tservers, "tserver2", MTE, ke12, "l2");

      metaCache.invalidateCache(ke1);

      emb = cemb(nol("z", "l2", ke12));
      if (i == 0 || i == 2)
        runTest(metaCache, ml, emb, "a", "m");

      Map<String,Map<KeyExtent,List<Range>>> expected2 =
          createExpectedBinnings("l2", nol(nke("foo", null, "n"), nrl(new Range(new Text("z"))))

          );

      if (i == 1 || i == 2)
        runTest(ranges, metaCache, expected2,
            nrl(new Range(new Text("a")), new Range(new Text("m"))));

      setLocation(tservers, "tserver2", MTE, ke11, "l3");
      emb = cemb(nol("a", "l3", ke11), nol("m", "l3", ke11), nol("z", "l2", ke12));
      if (i == 0 || i == 2)
        runTest(metaCache, ml, emb);

      Map<String,
          Map<KeyExtent,List<Range>>> expected3 = createExpectedBinnings("l2",
              nol(nke("foo", null, "n"), nrl(new Range(new Text("z")))), "l3",
              nol(nke("foo", "n", null), nrl(new Range(new Text("a")), new Range(new Text("m"))))

      );

      if (i == 1 || i == 2)
        runTest(ranges, metaCache, expected3);
    }
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\clientImpl\TabletLocatorImplTest.java
  public void testBug1() throws Exception {
    // a bug that occurred while running continuous ingest
    KeyExtent mte1 = new KeyExtent(MetadataTable.ID, new Text("0;0bc"), RTE.endRow());
    KeyExtent mte2 = new KeyExtent(MetadataTable.ID, null, new Text("0;0bc"));

    TServers tservers = new TServers();
    TestTabletLocationObtainer ttlo = new TestTabletLocationObtainer(tservers);

    RootTabletLocator rtl = new TestRootTabletLocator();
    TabletLocatorImpl rootTabletCache =
        new TabletLocatorImpl(MetadataTable.ID, rtl, ttlo, new YesLockChecker());
    TabletLocatorImpl tab0TabletCache =
        new TabletLocatorImpl(TableId.of("0"), rootTabletCache, ttlo, new YesLockChecker());

    setLocation(tservers, "tserver1", RTE, mte1, "tserver2");
    setLocation(tservers, "tserver1", RTE, mte2, "tserver3");

    // create two tablets that straddle a metadata split point
    KeyExtent ke1 = new KeyExtent(TableId.of("0"), new Text("0bbf20e"), null);
    KeyExtent ke2 = new KeyExtent(TableId.of("0"), new Text("0bc0756"), new Text("0bbf20e"));

    setLocation(tservers, "tserver2", mte1, ke1, "tserver4");
    setLocation(tservers, "tserver3", mte2, ke2, "tserver5");

    // look up something that comes after the last entry in mte1
    locateTabletTest(tab0TabletCache, "0bbff", ke2, "tserver5");
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\clientImpl\TabletLocatorImplTest.java
  public void testBug2() throws Exception {
    // a bug that occurred while running a functional test
    KeyExtent mte1 = new KeyExtent(MetadataTable.ID, new Text("~"), RTE.endRow());
    KeyExtent mte2 = new KeyExtent(MetadataTable.ID, null, new Text("~"));

    TServers tservers = new TServers();
    TestTabletLocationObtainer ttlo = new TestTabletLocationObtainer(tservers);

    RootTabletLocator rtl = new TestRootTabletLocator();
    TabletLocatorImpl rootTabletCache =
        new TabletLocatorImpl(MetadataTable.ID, rtl, ttlo, new YesLockChecker());
    TabletLocatorImpl tab0TabletCache =
        new TabletLocatorImpl(TableId.of("0"), rootTabletCache, ttlo, new YesLockChecker());

    setLocation(tservers, "tserver1", RTE, mte1, "tserver2");
    setLocation(tservers, "tserver1", RTE, mte2, "tserver3");

    // create the ~ tablet so it exists
    Map<KeyExtent,SortedMap<Key,Value>> ts3 = new HashMap<>();
    ts3.put(mte2, new TreeMap<>());
    tservers.tservers.put("tserver3", ts3);

    assertNull(tab0TabletCache.locateTablet(context, new Text("row_0000000000"), false, false));

  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\clientImpl\TabletLocatorImplTest.java
  public void testBug3() throws Exception {
    KeyExtent mte1 = new KeyExtent(MetadataTable.ID, new Text("1;c"), RTE.endRow());
    KeyExtent mte2 = new KeyExtent(MetadataTable.ID, new Text("1;f"), new Text("1;c"));
    KeyExtent mte3 = new KeyExtent(MetadataTable.ID, new Text("1;j"), new Text("1;f"));
    KeyExtent mte4 = new KeyExtent(MetadataTable.ID, new Text("1;r"), new Text("1;j"));
    KeyExtent mte5 = new KeyExtent(MetadataTable.ID, null, new Text("1;r"));

    KeyExtent ke1 = new KeyExtent(TableId.of("1"), null, null);

    TServers tservers = new TServers();
    TestTabletLocationObtainer ttlo = new TestTabletLocationObtainer(tservers);

    RootTabletLocator rtl = new TestRootTabletLocator();

    TabletLocatorImpl rootTabletCache =
        new TabletLocatorImpl(MetadataTable.ID, rtl, ttlo, new YesLockChecker());
    TabletLocatorImpl tab0TabletCache =
        new TabletLocatorImpl(TableId.of("1"), rootTabletCache, ttlo, new YesLockChecker());

    setLocation(tservers, "tserver1", RTE, mte1, "tserver2");
    setLocation(tservers, "tserver1", RTE, mte2, "tserver3");
    setLocation(tservers, "tserver1", RTE, mte3, "tserver4");
    setLocation(tservers, "tserver1", RTE, mte4, "tserver5");
    setLocation(tservers, "tserver1", RTE, mte5, "tserver6");

    createEmptyTablet(tservers, "tserver2", mte1);
    createEmptyTablet(tservers, "tserver3", mte2);
    createEmptyTablet(tservers, "tserver4", mte3);
    createEmptyTablet(tservers, "tserver5", mte4);
    setLocation(tservers, "tserver6", mte5, ke1, "tserver7");

    locateTabletTest(tab0TabletCache, "a", ke1, "tserver7");

  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\clientImpl\TabletLocatorImplTest.java
  public void testAccumulo1248() {
    TServers tservers = new TServers();
    TabletLocatorImpl metaCache = createLocators(tservers, "tserver1", "tserver2", "foo");

    KeyExtent ke1 = nke("foo", null, null);

    // set two locations for a tablet, this is not supposed to happen. The metadata cache should
    // throw an exception if it sees this rather than caching one of
    // the locations.
    setLocation(tservers, "tserver2", MTE, ke1, "L1", "I1");
    setLocation(tservers, "tserver2", MTE, ke1, "L2", "I2");

    try {
      metaCache.locateTablet(context, new Text("a"), false, false);
      fail();
    } catch (Exception e) {

    }

  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\clientImpl\TabletLocatorImplTest.java
  public void testLostLock() throws Exception {

    final HashSet<String> activeLocks = new HashSet<>();

    TServers tservers = new TServers();
    TabletLocatorImpl metaCache =
        createLocators(tservers, "tserver1", "tserver2", "foo", new TabletServerLockChecker() {
          @Override
          public boolean isLockHeld(String tserver, String session) {
            return activeLocks.contains(tserver + ":" + session);
          }

          @Override
          public void invalidateCache(String server) {}
        });

    KeyExtent ke1 = nke("foo", null, null);
    setLocation(tservers, "tserver2", MTE, ke1, "L1", "5");

    activeLocks.add("L1:5");

    locateTabletTest(metaCache, "a", ke1, "L1");
    locateTabletTest(metaCache, "a", ke1, "L1");

    activeLocks.clear();

    locateTabletTest(metaCache, "a", null, null);
    locateTabletTest(metaCache, "a", null, null);
    locateTabletTest(metaCache, "a", null, null);

    clearLocation(tservers, "tserver2", MTE, ke1, "5");
    setLocation(tservers, "tserver2", MTE, ke1, "L2", "6");

    activeLocks.add("L2:6");

    locateTabletTest(metaCache, "a", ke1, "L2");
    locateTabletTest(metaCache, "a", ke1, "L2");

    clearLocation(tservers, "tserver2", MTE, ke1, "6");

    locateTabletTest(metaCache, "a", ke1, "L2");

    setLocation(tservers, "tserver2", MTE, ke1, "L3", "7");

    locateTabletTest(metaCache, "a", ke1, "L2");

    activeLocks.clear();

    locateTabletTest(metaCache, "a", null, null);
    locateTabletTest(metaCache, "a", null, null);

    activeLocks.add("L3:7");

    locateTabletTest(metaCache, "a", ke1, "L3");
    locateTabletTest(metaCache, "a", ke1, "L3");

    List<Mutation> ml = nml(nm("a", "cf1:cq1=v1", "cf1:cq2=v2"), nm("w", "cf1:cq3=v3"));
    Map<String,Map<KeyExtent,List<String>>> emb = cemb(nol("a", "L3", ke1), nol("w", "L3", ke1));
    runTest(metaCache, ml, emb);

    clearLocation(tservers, "tserver2", MTE, ke1, "7");

    runTest(metaCache, ml, emb);

    activeLocks.clear();

    emb.clear();

    runTest(metaCache, ml, emb, "a", "w");
    runTest(metaCache, ml, emb, "a", "w");

    KeyExtent ke11 = nke("foo", "m", null);
    KeyExtent ke12 = nke("foo", null, "m");

    setLocation(tservers, "tserver2", MTE, ke11, "L1", "8");
    setLocation(tservers, "tserver2", MTE, ke12, "L2", "9");

    runTest(metaCache, ml, emb, "a", "w");

    activeLocks.add("L1:8");

    emb = cemb(nol("a", "L1", ke11));
    runTest(metaCache, ml, emb, "w");

    activeLocks.add("L2:9");

    emb = cemb(nol("a", "L1", ke11), nol("w", "L2", ke12));
    runTest(metaCache, ml, emb);

    List<Range> ranges = nrl(new Range("a"), nr("b", "o"), nr("r", "z"));
    Map<String,Map<KeyExtent,List<Range>>> expected =
        createExpectedBinnings("L1", nol(ke11, nrl(new Range("a"), nr("b", "o"))), "L2",
            nol(ke12, nrl(nr("b", "o"), nr("r", "z"))));

    runTest(ranges, metaCache, expected);

    activeLocks.remove("L2:9");

    expected = createExpectedBinnings("L1", nol(ke11, nrl(new Range("a"))));
    runTest(ranges, metaCache, expected, nrl(nr("b", "o"), nr("r", "z")));

    activeLocks.clear();

    expected = createExpectedBinnings();
    runTest(ranges, metaCache, expected, nrl(new Range("a"), nr("b", "o"), nr("r", "z")));

    clearLocation(tservers, "tserver2", MTE, ke11, "8");
    clearLocation(tservers, "tserver2", MTE, ke12, "9");
    setLocation(tservers, "tserver2", MTE, ke11, "L3", "10");
    setLocation(tservers, "tserver2", MTE, ke12, "L4", "11");

    runTest(ranges, metaCache, expected, nrl(new Range("a"), nr("b", "o"), nr("r", "z")));

    activeLocks.add("L3:10");

    expected = createExpectedBinnings("L3", nol(ke11, nrl(new Range("a"))));
    runTest(ranges, metaCache, expected, nrl(nr("b", "o"), nr("r", "z")));

    activeLocks.add("L4:11");

    expected = createExpectedBinnings("L3", nol(ke11, nrl(new Range("a"), nr("b", "o"))), "L4",
        nol(ke12, nrl(nr("b", "o"), nr("r", "z"))));
    runTest(ranges, metaCache, expected);
  }

}
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\clientImpl\TabletServerBatchReaderTest.java
  public void testGetAuthorizations() {
    Authorizations expected = new Authorizations("a,b");
    try (BatchScanner s = new TabletServerBatchReader(context, TableId.of("foo"), expected, 1)) {
      assertEquals(expected, s.getAuthorizations());
    }
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\clientImpl\TabletServerBatchReaderTest.java
  public void testNullAuthorizationsFails() {
    assertThrows(IllegalArgumentException.class,
        () -> new TabletServerBatchReader(context, TableId.of("foo"), null, 1));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\clientImpl\ThriftScannerTest.java
  public void testPauseIncrease() throws Exception {
    long newPause = ThriftScanner.pause(5L, 5000L);
    assertTrue("New pause should be within [9,11], but was " + newPause,
        withinTenPercent(10L, newPause));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\clientImpl\ThriftScannerTest.java
  public void testMaxPause() throws Exception {
    long maxPause = 1L;
    long nextPause = ThriftScanner.pause(5L, maxPause);
    assertTrue("New pause should be within [0,2], but was " + nextPause,
        withinTenPercent(maxPause, nextPause));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\clientImpl\ThriftTransportKeyTest.java
  public void testSslAndSaslErrors() {
    ClientContext clientCtx = createMock(ClientContext.class);
    SslConnectionParams sslParams = createMock(SslConnectionParams.class);
    SaslConnectionParams saslParams = createMock(SaslConnectionParams.class);

    expect(clientCtx.getClientSslParams()).andReturn(sslParams).anyTimes();
    expect(clientCtx.getSaslParams()).andReturn(saslParams).anyTimes();

    // We don't care to verify the sslparam or saslparam mocks
    replay(clientCtx);

    try {
      new ThriftTransportKey(HostAndPort.fromParts("localhost", 9999), 120 * 1000, clientCtx);
    } finally {
      verify(clientCtx);
    }
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\clientImpl\ThriftTransportKeyTest.java
  public void testConnectionCaching() throws IOException, InterruptedException {
    UserGroupInformation user1 = UserGroupInformation.createUserForTesting("user1", new String[0]);
    final KerberosToken token = EasyMock.createMock(KerberosToken.class);

    // A first instance of the SASL cnxn params
    SaslConnectionParams saslParams1 =
        user1.doAs((PrivilegedExceptionAction<SaslConnectionParams>) () -> createSaslParams(token));

    // A second instance of what should be the same SaslConnectionParams
    SaslConnectionParams saslParams2 =
        user1.doAs((PrivilegedExceptionAction<SaslConnectionParams>) () -> createSaslParams(token));

    ThriftTransportKey ttk1 =
        new ThriftTransportKey(HostAndPort.fromParts("localhost", 9997), 1L, null, saslParams1),
        ttk2 =
            new ThriftTransportKey(HostAndPort.fromParts("localhost", 9997), 1L, null, saslParams2);

    // Should equals() and hashCode() to make sure we don't throw away thrift cnxns
    assertEquals(ttk1, ttk2);
    assertEquals(ttk1.hashCode(), ttk2.hashCode());
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\clientImpl\ThriftTransportKeyTest.java
  public void testSaslPrincipalIsSignificant() throws IOException, InterruptedException {
    UserGroupInformation user1 = UserGroupInformation.createUserForTesting("user1", new String[0]);
    final KerberosToken token = EasyMock.createMock(KerberosToken.class);
    SaslConnectionParams saslParams1 =
        user1.doAs((PrivilegedExceptionAction<SaslConnectionParams>) () -> createSaslParams(token));

    UserGroupInformation user2 = UserGroupInformation.createUserForTesting("user2", new String[0]);
    SaslConnectionParams saslParams2 =
        user2.doAs((PrivilegedExceptionAction<SaslConnectionParams>) () -> createSaslParams(token));

    ThriftTransportKey ttk1 =
        new ThriftTransportKey(HostAndPort.fromParts("localhost", 9997), 1L, null, saslParams1),
        ttk2 =
            new ThriftTransportKey(HostAndPort.fromParts("localhost", 9997), 1L, null, saslParams2);

    assertNotEquals(ttk1, ttk2);
    assertNotEquals(ttk1.hashCode(), ttk2.hashCode());
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\clientImpl\ThriftTransportKeyTest.java
  public void testSimpleEquivalence() {
    ClientContext clientCtx = createMock(ClientContext.class);

    expect(clientCtx.getClientSslParams()).andReturn(null).anyTimes();
    expect(clientCtx.getSaslParams()).andReturn(null).anyTimes();

    replay(clientCtx);

    ThriftTransportKey ttk =
        new ThriftTransportKey(HostAndPort.fromParts("localhost", 9999), 120 * 1000, clientCtx);

    assertEquals("Normal ThriftTransportKey doesn't equal itself", ttk, ttk);
  }
}
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\clientImpl\ZookeeperLockCheckerTest.java
  public void testInvalidateCache() {
    zc.clear(context.getZooKeeperRoot() + Constants.ZTSERVERS + "/server");
    replay(zc);
    zklc.invalidateCache("server");
    verify(zc);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\clientImpl\bulk\BulkImportFilterInvalidTest.java
  public void testFilterInvalidGood() throws IOException {
    FileStatus[] files = new FileStatus[FileOperations.getValidExtensions().size()];
    int i = 0;
    for (String extension : FileOperations.getValidExtensions()) {
      String filename = "testFile." + extension;
      fs.createNewFile(new Path(testdir, filename));
      files[i++] = fs.getFileStatus(new Path(testdir, filename));
    }
    // all files should be valid
    assertEquals(i, BulkImport.filterInvalid(files).size());
    assertArrayEquals(files, BulkImport.filterInvalid(files).toArray());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\clientImpl\bulk\BulkImportFilterInvalidTest.java
  public void testFilterInvalidFile() throws IOException {
    FileStatus[] files = new FileStatus[2];
    int i = 0;
    // create file with no extension and an invalid extension
    for (String flag : Arrays.asList("testFile", "testFile.bad")) {
      fs.createNewFile(new Path(testdir, flag));
      files[i++] = fs.getFileStatus(new Path(testdir, flag));
    }
    assertEquals(0, BulkImport.filterInvalid(files).size());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\clientImpl\bulk\BulkImportFilterInvalidTest.java
  public void testFilterInvalidwithDir() throws IOException {
    String dir = "justadir";
    fs.mkdirs(new Path(testdir, dir));
    FileStatus[] files = new FileStatus[1];
    files[0] = fs.getFileStatus(new Path(testdir, dir));
    // no files should be valid
    assertEquals(0, BulkImport.filterInvalid(files).size());

  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\clientImpl\bulk\BulkImportFilterInvalidTest.java
  public void testFilterInvalidwithWorkingFile() throws IOException {
    FileStatus[] files = new FileStatus[FileOperations.getBulkWorkingFiles().size()];
    int i = 0;
    for (String workingfile : FileOperations.getBulkWorkingFiles()) {
      fs.createNewFile(new Path(testdir, workingfile));
      files[i++] = fs.getFileStatus(new Path(testdir, workingfile));
    }
    // no files should be valid
    assertEquals(0, BulkImport.filterInvalid(files).size());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\clientImpl\bulk\BulkImportFilterInvalidTest.java
  public void testFilterInvalidMixGoodBad() throws IOException {
    FileStatus[] files = new FileStatus[FileOperations.getValidExtensions().size() + 1];
    int i = 0;
    for (String extension : FileOperations.getValidExtensions()) {
      String filename = "testFile." + extension;
      fs.createNewFile(new Path(testdir, filename));
      files[i++] = fs.getFileStatus(new Path(testdir, filename));
    }
    // adding one more bad file so size is i+1
    fs.createNewFile(new Path(testdir, "testFile.bad"));
    files[i] = fs.getFileStatus(new Path(testdir, "testFile.bad"));
    // all files should be valid except the last
    assertEquals(i, BulkImport.filterInvalid(files).size());
    assertArrayEquals(Arrays.copyOf(files, i), BulkImport.filterInvalid(files).toArray());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\clientImpl\bulk\BulkImportTest.java
  public void testMergeOverlappingSingleSplit() {
    SortedMap<KeyExtent,Files> mappings = new TreeMap<>();

    // simulate the tablet (m,s] splitting into (m,p] and (p,s] while files are being examined
    addMapping(mappings, null, "m", "f0");
    addMapping(mappings, "m", "s", "f1", "f2");
    addMapping(mappings, "p", "s", "f3");
    addMapping(mappings, "m", "p", "f4");
    addMapping(mappings, "s", null, "f5");

    var actual = BulkImport.mergeOverlapping(mappings);

    SortedMap<KeyExtent,Files> expected = new TreeMap<>();
    addMapping(expected, null, "m", "f0");
    addMapping(expected, "m", "s", "f1", "f2", "f3", "f4");
    addMapping(expected, "s", null, "f5");

    assertEquals(expected, actual);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\clientImpl\bulk\BulkImportTest.java
  public void testMergeOverlappingMultipleSplit() {
    SortedMap<KeyExtent,Files> mappings = new TreeMap<>();

    // simulate the tablet (m,s] splitting into (m,o],(o,p],(p,s] while files are being examined
    addMapping(mappings, null, "m", "f0");
    addMapping(mappings, "m", "s", "f1");
    addMapping(mappings, "m", "o", "f2");
    addMapping(mappings, "o", "p", "f3");
    addMapping(mappings, "p", "s", "f4");
    addMapping(mappings, "s", null, "f5");

    var actual = BulkImport.mergeOverlapping(mappings);

    SortedMap<KeyExtent,Files> expected = new TreeMap<>();
    addMapping(expected, null, "m", "f0");
    addMapping(expected, "m", "s", "f1", "f2", "f3", "f4");
    addMapping(expected, "s", null, "f5");

    assertEquals(expected, actual);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\clientImpl\bulk\BulkImportTest.java
  public void testMergeOverlappingTabletsMergedAway() {
    // simulate the tablets (m,p] and (p,s] being merged into (m,s] and that splitting into
    // (m,q],(q,s] while files are being examined

    SortedMap<KeyExtent,Files> mappings = new TreeMap<>();

    addMapping(mappings, null, "m", "f0");
    addMapping(mappings, "p", "s", "f1");
    addMapping(mappings, "m", "p", "f2");
    addMapping(mappings, "m", "s", "f3");
    addMapping(mappings, "q", "s", "f4");
    addMapping(mappings, "m", "q", "f5");
    addMapping(mappings, "s", null, "f6");
    assertThrows(RuntimeException.class, () -> BulkImport.mergeOverlapping(mappings));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\clientImpl\bulk\BulkSerializeTest.java
  public void writeReadLoadMapping() throws Exception {
    TableId tableId = TableId.of("3");
    SortedMap<KeyExtent,Bulk.Files> mapping = generateMapping(tableId);

    ByteArrayOutputStream baos = new ByteArrayOutputStream();

    BulkSerialize.writeLoadMapping(mapping, "/some/dir", p -> baos);

    ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());

    try (LoadMappingIterator lmi = BulkSerialize.readLoadMapping("/some/dir", tableId, p -> bais)) {
      SortedMap<KeyExtent,Bulk.Files> readMapping = new TreeMap<>();
      lmi.forEachRemaining(e -> readMapping.put(e.getKey(), e.getValue()));
      assertEquals(mapping, readMapping);
    }
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\clientImpl\bulk\BulkSerializeTest.java
  public void writeReadRenames() throws Exception {

    Map<String,String> renames = new HashMap<>();
    for (String f : "f1 f2 f3 f4 f5".split(" "))
      renames.put("old_" + f + ".rf", "new_" + f + ".rf");

    ByteArrayOutputStream baos = new ByteArrayOutputStream();

    BulkSerialize.writeRenameMap(renames, "/some/dir", p -> baos);

    ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());

    Map<String,String> readMap = BulkSerialize.readRenameMap("/some/dir", p -> bais);

    assertEquals("Read renames file wrong size", renames.size(), readMap.size());
    assertEquals("Read renames file different from what was written.", renames, readMap);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\clientImpl\bulk\BulkSerializeTest.java
  public void testRemap() throws Exception {
    TableId tableId = TableId.of("3");
    SortedMap<KeyExtent,Bulk.Files> mapping = generateMapping(tableId);

    SortedMap<KeyExtent,Bulk.Files> newNameMapping = new TreeMap<>();

    Map<String,String> nameMap = new HashMap<>();

    mapping.forEach((extent, files) -> {
      Files newFiles = new Files();
      files.forEach(fi -> {
        newFiles.add(new FileInfo("N" + fi.name, fi.estSize, fi.estEntries));
        nameMap.put(fi.name, "N" + fi.name);
      });

      newNameMapping.put(extent, newFiles);
    });

    ByteArrayOutputStream mappingBaos = new ByteArrayOutputStream();
    ByteArrayOutputStream nameBaos = new ByteArrayOutputStream();

    BulkSerialize.writeRenameMap(nameMap, "/some/dir", p -> nameBaos);
    BulkSerialize.writeLoadMapping(mapping, "/some/dir", p -> mappingBaos);

    Input input = p -> {
      if (p.getName().equals(Constants.BULK_LOAD_MAPPING)) {
        return new ByteArrayInputStream(mappingBaos.toByteArray());
      } else if (p.getName().equals(Constants.BULK_RENAME_FILE)) {
        return new ByteArrayInputStream(nameBaos.toByteArray());
      } else {
        throw new IllegalArgumentException("bad path " + p);
      }
    };

    try (LoadMappingIterator lmi =
        BulkSerialize.getUpdatedLoadMapping("/some/dir", tableId, input)) {
      SortedMap<KeyExtent,Bulk.Files> actual = new TreeMap<>();
      lmi.forEachRemaining(e -> actual.put(e.getKey(), e.getValue()));
      assertEquals(newNameMapping, actual);
    }

  }

  public SortedMap<KeyExtent,Bulk.Files> generateMapping(TableId tableId) {
    SortedMap<KeyExtent,Bulk.Files> mapping = new TreeMap<>();
    Bulk.Files testFiles = new Bulk.Files();
    Bulk.Files testFiles2 = new Bulk.Files();
    Bulk.Files testFiles3 = new Bulk.Files();
    long c = 0L;
    for (String f : "f1 f2 f3".split(" ")) {
      c++;
      testFiles.add(new Bulk.FileInfo(f, c, c));
    }
    c = 0L;
    for (String f : "g1 g2 g3".split(" ")) {
      c++;
      testFiles2.add(new Bulk.FileInfo(f, c, c));
    }
    for (String f : "h1 h2 h3".split(" ")) {
      c++;
      testFiles3.add(new Bulk.FileInfo(f, c, c));
    }

    // add out of order to test sorting
    mapping.put(new KeyExtent(tableId, new Text("d"), new Text("c")), testFiles);
    mapping.put(new KeyExtent(tableId, new Text("c"), new Text("b")), testFiles2);
    mapping.put(new KeyExtent(tableId, new Text("b"), new Text("a")), testFiles3);

    return mapping;
  }
}
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\clientImpl\bulk\ConcurrentKeyExtentCacheTest.java
  public void testExactEndRows() {
    Random rand = new SecureRandom();

    TestCache tc = new TestCache();

    rand.ints(20000, 0, 256).mapToObj(i -> new Text(String.format("%02x", i))).sequential()
        .forEach(lookupRow -> testLookup(tc, lookupRow));
    assertEquals(extentsSet, tc.seen);

    // try parallel
    TestCache tc2 = new TestCache();
    rand.ints(20000, 0, 256).mapToObj(i -> new Text(String.format("%02x", i))).parallel()
        .forEach(lookupRow -> testLookup(tc2, lookupRow));
    assertEquals(extentsSet, tc.seen);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\clientImpl\bulk\ConcurrentKeyExtentCacheTest.java
  public void testRandom() {
    TestCache tc = new TestCache();

    Random rand = new SecureRandom();
    rand.ints(20000).mapToObj(i -> new Text(String.format("%08x", i))).sequential()
        .forEach(lookupRow -> testLookup(tc, lookupRow));
    assertEquals(extentsSet, tc.seen);

    // try parallel
    TestCache tc2 = new TestCache();
    rand.ints(20000).mapToObj(i -> new Text(String.format("%08x", i))).parallel()
        .forEach(lookupRow -> testLookup(tc2, lookupRow));
    assertEquals(extentsSet, tc2.seen);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\clientImpl\lexicoder\ByteUtilsTest.java
  public void testSplit() {
    byte[][] result;

    // always returns the original array itself
    result = ByteUtils.split(empty);
    assertEquals(1, result.length);
    assertArrayEquals(empty, result[0]);

    result = ByteUtils.split(noSplits);
    assertEquals(1, result.length);
    assertArrayEquals(noSplits, result[0]);

    result = ByteUtils.split(splitAt5);
    assertEquals(2, result.length);
    assertArrayEquals("1234".getBytes(), result[0]);
    assertArrayEquals("56789".getBytes(), result[1]);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\clientImpl\lexicoder\ByteUtilsTest.java
  public void testSplitWithOffset() {
    int offset;
    byte[][] result;

    // still see both splits
    offset = 4;
    result = ByteUtils.split(splitAt5, offset, splitAt5.length - offset);
    assertEquals(2, result.length);
    assertArrayEquals(empty, result[0]);
    assertArrayEquals("56789".getBytes(), result[1]);

    // should only see 1 split at this offset
    offset = 5;
    result = ByteUtils.split(splitAt5, offset, splitAt5.length - offset);
    assertEquals(1, result.length);
    assertArrayEquals("56789".getBytes(), result[0]);

    // still one split, but smaller ending
    offset = 5;
    int len = splitAt5.length - offset - 1;
    result = ByteUtils.split(splitAt5, offset, len);
    assertEquals(1, result.length);
    assertArrayEquals("5678".getBytes(), result[0]);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\clientImpl\lexicoder\ByteUtilsTest.java
  public void testEscape() {
    byte[] bytes = {0x00, 0x01};
    byte[] escaped = ByteUtils.escape(bytes);
    assertArrayEquals(bytes, ByteUtils.unescape(escaped));

    // no escaped bytes found so returns the input
    byte[] notEscaped = {0x02, 0x02, 0x02};
    assertArrayEquals(notEscaped, ByteUtils.unescape(notEscaped));
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\clientImpl\lexicoder\ByteUtilsTest.java
  public void testIllegalArgument() {
    // incomplete bytes would cause an ArrayIndexOutOfBounds in the past
    byte[] errorBytes = {0x01};
    assertThrows(IllegalArgumentException.class, () -> ByteUtils.unescape(errorBytes));
  }
}
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\clientImpl\mapreduce\BatchInputSplitTest.java
  public void testSimpleWritable() throws IOException {
    List<Range> ranges = Collections.singletonList(new Range(new Key("a"), new Key("b")));
    BatchInputSplit split =
        new BatchInputSplit("table", TableId.of("1"), ranges, new String[] {"localhost"});

    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    DataOutputStream dos = new DataOutputStream(baos);
    split.write(dos);

    BatchInputSplit newSplit = new BatchInputSplit();

    ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());
    DataInputStream dis = new DataInputStream(bais);
    newSplit.readFields(dis);

    assertEquals(split.getTableName(), newSplit.getTableName());
    assertEquals(split.getTableId(), newSplit.getTableId());
    assertEquals(split.getRanges(), newSplit.getRanges());
    assertTrue(Arrays.equals(split.getLocations(), newSplit.getLocations()));
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\clientImpl\mapreduce\BatchInputSplitTest.java
  public void testAllFieldsWritable() throws IOException {
    List<Range> ranges = Collections.singletonList(new Range(new Key("a"), new Key("b")));
    BatchInputSplit split =
        new BatchInputSplit("table", TableId.of("1"), ranges, new String[] {"localhost"});

    Set<Pair<Text,Text>> fetchedColumns = new HashSet<>();

    fetchedColumns.add(new Pair<>(new Text("colf1"), new Text("colq1")));
    fetchedColumns.add(new Pair<>(new Text("colf2"), new Text("colq2")));

    // Fake some iterators
    ArrayList<IteratorSetting> iterators = new ArrayList<>();
    IteratorSetting setting = new IteratorSetting(50, SummingCombiner.class);
    setting.addOption("foo", "bar");
    iterators.add(setting);

    setting = new IteratorSetting(100, WholeRowIterator.class);
    setting.addOption("bar", "foo");
    iterators.add(setting);

    split.setTableName("table");
    split.setFetchedColumns(fetchedColumns);
    split.setIterators(iterators);
    split.setLogLevel(Level.WARN);

    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    DataOutputStream dos = new DataOutputStream(baos);
    split.write(dos);

    BatchInputSplit newSplit = new BatchInputSplit();

    ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());
    DataInputStream dis = new DataInputStream(bais);
    newSplit.readFields(dis);

    assertEquals(split.getRanges(), newSplit.getRanges());
    assertArrayEquals(split.getLocations(), newSplit.getLocations());

    assertEquals(split.getTableName(), newSplit.getTableName());
    assertEquals(split.getFetchedColumns(), newSplit.getFetchedColumns());
    assertEquals(split.getIterators(), newSplit.getIterators());
    assertEquals(split.getLogLevel(), newSplit.getLogLevel());
  }
}
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\clientImpl\mapreduce\lib\ConfiguratorBaseTest.java
  public void testEnumToConfKey() {
    assertEquals(this.getClass().getSimpleName() + ".PrivateTestingEnum.Something",
        ConfiguratorBase.enumToConfKey(this.getClass(), PrivateTestingEnum.SOMETHING));
    assertEquals(this.getClass().getSimpleName() + ".PrivateTestingEnum.SomethingElse",
        ConfiguratorBase.enumToConfKey(this.getClass(), PrivateTestingEnum.SOMETHING_ELSE));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\clientImpl\mapreduce\lib\ConfiguratorBaseTest.java
  public void testSetConnectorInfoClassOfQConfigurationStringAuthenticationToken() {
    Configuration conf = new Configuration();
    assertFalse(ConfiguratorBase.isConnectorInfoSet(this.getClass(), conf));
    ConfiguratorBase.setConnectorInfo(this.getClass(), conf, "testUser",
        new PasswordToken("testPassword"));
    assertTrue(ConfiguratorBase.isConnectorInfoSet(this.getClass(), conf));
    assertEquals("testUser", ConfiguratorBase.getPrincipal(this.getClass(), conf));
    AuthenticationToken token = ConfiguratorBase.getAuthenticationToken(this.getClass(), conf);
    assertNotNull(token);
    assertEquals(PasswordToken.class, token.getClass());
    assertEquals(new PasswordToken("testPassword"), token);
    assertEquals(
        "inline:" + PasswordToken.class.getName() + ":"
            + Base64.getEncoder().encodeToString(
                AuthenticationTokenSerializer.serialize(new PasswordToken("testPassword"))),
        conf.get(
            ConfiguratorBase.enumToConfKey(this.getClass(), ConfiguratorBase.ConnectorInfo.TOKEN)));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\clientImpl\mapreduce\lib\ConfiguratorBaseTest.java
  public void testSetConnectorInfoClassOfQConfigurationStringString() {
    Configuration conf = new Configuration();
    assertFalse(ConfiguratorBase.isConnectorInfoSet(this.getClass(), conf));
    ConfiguratorBase.setConnectorInfo(this.getClass(), conf, "testUser", "testFile");
    assertTrue(ConfiguratorBase.isConnectorInfoSet(this.getClass(), conf));
    assertEquals("testUser", ConfiguratorBase.getPrincipal(this.getClass(), conf));
    assertEquals("file:testFile", conf.get(
        ConfiguratorBase.enumToConfKey(this.getClass(), ConfiguratorBase.ConnectorInfo.TOKEN)));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\clientImpl\mapreduce\lib\ConfiguratorBaseTest.java
  public void testSetZooKeeperInstance() {
    Configuration conf = new Configuration();
    ConfiguratorBase.setZooKeeperInstance(this.getClass(), conf,
        org.apache.accumulo.core.client.ClientConfiguration.create()
            .withInstance("testInstanceName").withZkHosts("testZooKeepers").withSsl(true)
            .withZkTimeout(15000));
    org.apache.accumulo.core.client.ClientConfiguration clientConf =
        org.apache.accumulo.core.client.ClientConfiguration.deserialize(conf.get(ConfiguratorBase
            .enumToConfKey(this.getClass(), ConfiguratorBase.InstanceOpts.CLIENT_CONFIG)));
    assertEquals("testInstanceName", clientConf
        .get(org.apache.accumulo.core.client.ClientConfiguration.ClientProperty.INSTANCE_NAME));
    assertEquals("testZooKeepers", clientConf
        .get(org.apache.accumulo.core.client.ClientConfiguration.ClientProperty.INSTANCE_ZK_HOST));
    assertEquals("true", clientConf.get(
        org.apache.accumulo.core.client.ClientConfiguration.ClientProperty.INSTANCE_RPC_SSL_ENABLED));
    assertEquals("15000", clientConf.get(
        org.apache.accumulo.core.client.ClientConfiguration.ClientProperty.INSTANCE_ZK_TIMEOUT));
    assertEquals(org.apache.accumulo.core.client.ZooKeeperInstance.class.getSimpleName(), conf
        .get(ConfiguratorBase.enumToConfKey(this.getClass(), ConfiguratorBase.InstanceOpts.TYPE)));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\clientImpl\mapreduce\lib\ConfiguratorBaseTest.java
  public void testSetLogLevel() {
    Configuration conf = new Configuration();
    Level currentLevel = Logger.getLogger(this.getClass()).getLevel();

    ConfiguratorBase.setLogLevel(this.getClass(), conf, Level.DEBUG);
    Logger.getLogger(this.getClass()).setLevel(currentLevel);
    assertEquals(Level.DEBUG, ConfiguratorBase.getLogLevel(this.getClass(), conf));

    ConfiguratorBase.setLogLevel(this.getClass(), conf, Level.INFO);
    Logger.getLogger(this.getClass()).setLevel(currentLevel);
    assertEquals(Level.INFO, ConfiguratorBase.getLogLevel(this.getClass(), conf));

    ConfiguratorBase.setLogLevel(this.getClass(), conf, Level.FATAL);
    Logger.getLogger(this.getClass()).setLevel(currentLevel);
    assertEquals(Level.FATAL, ConfiguratorBase.getLogLevel(this.getClass(), conf));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\clientImpl\mapreduce\lib\ConfiguratorBaseTest.java
  public void testSetVisibilityCacheSize() {
    Configuration conf = new Configuration();
    assertEquals(Constants.DEFAULT_VISIBILITY_CACHE_SIZE,
        ConfiguratorBase.getVisibilityCacheSize(conf));
    ConfiguratorBase.setVisibilityCacheSize(conf, 2000);
    assertEquals(2000, ConfiguratorBase.getVisibilityCacheSize(conf));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\conf\AccumuloConfigurationTest.java
  public void testGetPropertyByString() {
    AccumuloConfiguration c = DefaultConfiguration.getInstance();
    boolean found = false;
    for (Property p : Property.values()) {
      if (p.getType() != PropertyType.PREFIX) {
        found = true;
        // ensure checking by property and by key works the same
        assertEquals(c.get(p), c.get(p.getKey()));
        // ensure that getting by key returns the expected value
        assertEquals(p.getDefaultValue(), c.get(p.getKey()));
      }
    }
    assertTrue("test was a dud, and did nothing", found);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\conf\AccumuloConfigurationTest.java
  public void testGetSinglePort() {
    AccumuloConfiguration c = DefaultConfiguration.getInstance();
    ConfigurationCopy cc = new ConfigurationCopy(c);
    cc.set(Property.TSERV_CLIENTPORT, "9997");
    int[] ports = cc.getPort(Property.TSERV_CLIENTPORT);
    assertEquals(1, ports.length);
    assertEquals(9997, ports[0]);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\conf\AccumuloConfigurationTest.java
  public void testGetAnyPort() {
    AccumuloConfiguration c = DefaultConfiguration.getInstance();
    ConfigurationCopy cc = new ConfigurationCopy(c);
    cc.set(Property.TSERV_CLIENTPORT, "0");
    int[] ports = cc.getPort(Property.TSERV_CLIENTPORT);
    assertEquals(1, ports.length);
    assertEquals(0, ports[0]);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\conf\AccumuloConfigurationTest.java
  public void testGetInvalidPort() {
    AccumuloConfiguration c = DefaultConfiguration.getInstance();
    ConfigurationCopy cc = new ConfigurationCopy(c);
    cc.set(Property.TSERV_CLIENTPORT, "1020");
    int[] ports = cc.getPort(Property.TSERV_CLIENTPORT);
    assertEquals(1, ports.length);
    assertEquals(Integer.parseInt(Property.TSERV_CLIENTPORT.getDefaultValue()), ports[0]);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\conf\AccumuloConfigurationTest.java
  public void testGetPortRange() {
    AccumuloConfiguration c = DefaultConfiguration.getInstance();
    ConfigurationCopy cc = new ConfigurationCopy(c);
    cc.set(Property.TSERV_CLIENTPORT, "9997-9999");
    int[] ports = cc.getPort(Property.TSERV_CLIENTPORT);
    assertEquals(3, ports.length);
    assertEquals(9997, ports[0]);
    assertEquals(9998, ports[1]);
    assertEquals(9999, ports[2]);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\conf\AccumuloConfigurationTest.java
  public void testGetPortRangeInvalidLow() {
    AccumuloConfiguration c = DefaultConfiguration.getInstance();
    ConfigurationCopy cc = new ConfigurationCopy(c);
    cc.set(Property.TSERV_CLIENTPORT, "1020-1026");
    int[] ports = cc.getPort(Property.TSERV_CLIENTPORT);
    assertEquals(3, ports.length);
    assertEquals(1024, ports[0]);
    assertEquals(1025, ports[1]);
    assertEquals(1026, ports[2]);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\conf\AccumuloConfigurationTest.java
  public void testGetPortRangeInvalidHigh() {
    AccumuloConfiguration c = DefaultConfiguration.getInstance();
    ConfigurationCopy cc = new ConfigurationCopy(c);
    cc.set(Property.TSERV_CLIENTPORT, "65533-65538");
    int[] ports = cc.getPort(Property.TSERV_CLIENTPORT);
    assertEquals(3, ports.length);
    assertEquals(65533, ports[0]);
    assertEquals(65534, ports[1]);
    assertEquals(65535, ports[2]);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\conf\AccumuloConfigurationTest.java
  public void testGetPortInvalidSyntax() {
    AccumuloConfiguration c = DefaultConfiguration.getInstance();
    ConfigurationCopy cc = new ConfigurationCopy(c);
    cc.set(Property.TSERV_CLIENTPORT, "[65533,65538]");
    cc.getPort(Property.TSERV_CLIENTPORT);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\conf\AccumuloConfigurationTest.java
  public void testMutatePrefixMap() {
    TestConfiguration tc = new TestConfiguration();
    tc.set(Property.TABLE_ARBITRARY_PROP_PREFIX.getKey() + "a1", "325");
    tc.set(Property.TABLE_ARBITRARY_PROP_PREFIX.getKey() + "a2", "asg34");

    Map<String,String> pm1 = tc.getAllPropertiesWithPrefix(Property.TABLE_ARBITRARY_PROP_PREFIX);

    Map<String,String> expected1 = new HashMap<>();
    expected1.put(Property.TABLE_ARBITRARY_PROP_PREFIX.getKey() + "a1", "325");
    expected1.put(Property.TABLE_ARBITRARY_PROP_PREFIX.getKey() + "a2", "asg34");
    assertEquals(expected1, pm1);

    assertThrows(UnsupportedOperationException.class, () -> pm1.put("k9", "v3"));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\conf\AccumuloConfigurationTest.java
  public void testGetByPrefix() {
    // This test checks that when anything changes that all prefix maps are regenerated. However
    // when there are not changes the test expects all the exact same
    // map to always be returned.

    TestConfiguration tc = new TestConfiguration();

    tc.set(Property.TABLE_ARBITRARY_PROP_PREFIX.getKey() + "a1", "325");
    tc.set(Property.TABLE_ARBITRARY_PROP_PREFIX.getKey() + "a2", "asg34");

    tc.set(Property.TABLE_ITERATOR_SCAN_PREFIX.getKey() + "i1", "class34");
    tc.set(Property.TABLE_ITERATOR_SCAN_PREFIX.getKey() + "i1.opt", "o99");

    Map<String,String> pm1 = tc.getAllPropertiesWithPrefix(Property.TABLE_ARBITRARY_PROP_PREFIX);
    Map<String,String> pm2 = tc.getAllPropertiesWithPrefix(Property.TABLE_ARBITRARY_PROP_PREFIX);

    assertSame(pm1, pm2);
    Map<String,String> expected1 = new HashMap<>();
    expected1.put(Property.TABLE_ARBITRARY_PROP_PREFIX.getKey() + "a1", "325");
    expected1.put(Property.TABLE_ARBITRARY_PROP_PREFIX.getKey() + "a2", "asg34");
    assertEquals(expected1, pm1);

    Map<String,String> pm3 = tc.getAllPropertiesWithPrefix(Property.TABLE_ITERATOR_SCAN_PREFIX);
    Map<String,String> pm4 = tc.getAllPropertiesWithPrefix(Property.TABLE_ITERATOR_SCAN_PREFIX);

    assertSame(pm3, pm4);
    Map<String,String> expected2 = new HashMap<>();
    expected2.put(Property.TABLE_ITERATOR_SCAN_PREFIX.getKey() + "i1", "class34");
    expected2.put(Property.TABLE_ITERATOR_SCAN_PREFIX.getKey() + "i1.opt", "o99");
    assertEquals(expected2, pm3);

    Map<String,String> pm5 = tc.getAllPropertiesWithPrefix(VFS_CONTEXT_CLASSPATH_PROPERTY);
    Map<String,String> pm6 = tc.getAllPropertiesWithPrefix(VFS_CONTEXT_CLASSPATH_PROPERTY);
    assertSame(pm5, pm6);
    assertEquals(0, pm5.size());

    // ensure getting one prefix does not cause others to unnecessarily regenerate
    Map<String,String> pm7 = tc.getAllPropertiesWithPrefix(Property.TABLE_ARBITRARY_PROP_PREFIX);
    assertSame(pm1, pm7);

    Map<String,String> pm8 = tc.getAllPropertiesWithPrefix(Property.TABLE_ITERATOR_SCAN_PREFIX);
    assertSame(pm3, pm8);

    Map<String,String> pm9 = tc.getAllPropertiesWithPrefix(VFS_CONTEXT_CLASSPATH_PROPERTY);
    assertSame(pm5, pm9);

    tc.set(Property.TABLE_ITERATOR_SCAN_PREFIX.getKey() + "i2", "class42");
    tc.set(Property.TABLE_ITERATOR_SCAN_PREFIX.getKey() + "i2.opt", "o78234");

    expected2.put(Property.TABLE_ITERATOR_SCAN_PREFIX.getKey() + "i2", "class42");
    expected2.put(Property.TABLE_ITERATOR_SCAN_PREFIX.getKey() + "i2.opt", "o78234");

    Map<String,String> pmA = tc.getAllPropertiesWithPrefix(Property.TABLE_ITERATOR_SCAN_PREFIX);
    Map<String,String> pmB = tc.getAllPropertiesWithPrefix(Property.TABLE_ITERATOR_SCAN_PREFIX);
    assertNotSame(pm3, pmA);
    assertSame(pmA, pmB);
    assertEquals(expected2, pmA);

    Map<String,String> pmC = tc.getAllPropertiesWithPrefix(Property.TABLE_ARBITRARY_PROP_PREFIX);
    Map<String,String> pmD = tc.getAllPropertiesWithPrefix(Property.TABLE_ARBITRARY_PROP_PREFIX);
    assertNotSame(pm1, pmC);
    assertSame(pmC, pmD);
    assertEquals(expected1, pmC);

    tc.set(VFS_CONTEXT_CLASSPATH_PROPERTY.getKey() + "ctx123", "hdfs://ib/p1");

    Map<String,String> pmE = tc.getAllPropertiesWithPrefix(VFS_CONTEXT_CLASSPATH_PROPERTY);
    Map<String,String> pmF = tc.getAllPropertiesWithPrefix(VFS_CONTEXT_CLASSPATH_PROPERTY);
    assertSame(pmE, pmF);
    assertNotSame(pm5, pmE);
    assertEquals(Map.of(VFS_CONTEXT_CLASSPATH_PROPERTY.getKey() + "ctx123", "hdfs://ib/p1"), pmE);

    Map<String,String> pmG = tc.getAllPropertiesWithPrefix(Property.TABLE_ITERATOR_SCAN_PREFIX);
    Map<String,String> pmH = tc.getAllPropertiesWithPrefix(Property.TABLE_ITERATOR_SCAN_PREFIX);
    assertNotSame(pmA, pmG);
    assertSame(pmG, pmH);
    assertEquals(expected2, pmG);

    Map<String,String> pmI = tc.getAllPropertiesWithPrefix(Property.TABLE_ARBITRARY_PROP_PREFIX);
    Map<String,String> pmJ = tc.getAllPropertiesWithPrefix(Property.TABLE_ARBITRARY_PROP_PREFIX);
    assertNotSame(pmC, pmI);
    assertSame(pmI, pmJ);
    assertEquals(expected1, pmI);

    Map<String,String> pmK = tc.getAllPropertiesWithPrefix(VFS_CONTEXT_CLASSPATH_PROPERTY);
    assertSame(pmE, pmK);

    Map<String,String> pmL = tc.getAllPropertiesWithPrefix(Property.TABLE_ITERATOR_SCAN_PREFIX);
    assertSame(pmG, pmL);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\conf\AccumuloConfigurationTest.java
  public void testScanExecutors() {
    String defName = SimpleScanDispatcher.DEFAULT_SCAN_EXECUTOR_NAME;

    TestConfiguration tc = new TestConfiguration(DefaultConfiguration.getInstance());

    Collection<ScanExecutorConfig> executors = tc.getScanExecutors();

    assertEquals(2, executors.size());

    ScanExecutorConfig sec =
        executors.stream().filter(c -> c.name.equals(defName)).findFirst().get();
    assertEquals(Integer.parseInt(Property.TSERV_SCAN_EXECUTORS_DEFAULT_THREADS.getDefaultValue()),
        sec.maxThreads);
    assertFalse(sec.priority.isPresent());
    assertTrue(sec.prioritizerClass.get().isEmpty());
    assertTrue(sec.prioritizerOpts.isEmpty());

    // ensure deprecated props is read if nothing else is set
    tc.set("tserver.readahead.concurrent.max", "6");
    assertEquals(6, sec.getCurrentMaxThreads());
    assertEquals(Integer.parseInt(Property.TSERV_SCAN_EXECUTORS_DEFAULT_THREADS.getDefaultValue()),
        sec.maxThreads);
    ScanExecutorConfig sec2 =
        tc.getScanExecutors().stream().filter(c -> c.name.equals(defName)).findFirst().get();
    assertEquals(6, sec2.maxThreads);

    // ensure new prop overrides deprecated prop
    tc.set(Property.TSERV_SCAN_EXECUTORS_DEFAULT_THREADS.getKey(), "9");
    assertEquals(9, sec.getCurrentMaxThreads());
    assertEquals(Integer.parseInt(Property.TSERV_SCAN_EXECUTORS_DEFAULT_THREADS.getDefaultValue()),
        sec.maxThreads);
    ScanExecutorConfig sec3 =
        tc.getScanExecutors().stream().filter(c -> c.name.equals(defName)).findFirst().get();
    assertEquals(9, sec3.maxThreads);

    ScanExecutorConfig sec4 =
        executors.stream().filter(c -> c.name.equals("meta")).findFirst().get();
    assertEquals(Integer.parseInt(Property.TSERV_SCAN_EXECUTORS_META_THREADS.getDefaultValue()),
        sec4.maxThreads);
    assertFalse(sec4.priority.isPresent());
    assertFalse(sec4.prioritizerClass.isPresent());
    assertTrue(sec4.prioritizerOpts.isEmpty());

    tc.set("tserver.metadata.readahead.concurrent.max", "2");
    assertEquals(2, sec4.getCurrentMaxThreads());
    ScanExecutorConfig sec5 =
        tc.getScanExecutors().stream().filter(c -> c.name.equals("meta")).findFirst().get();
    assertEquals(2, sec5.maxThreads);

    tc.set(Property.TSERV_SCAN_EXECUTORS_META_THREADS.getKey(), "3");
    assertEquals(3, sec4.getCurrentMaxThreads());
    ScanExecutorConfig sec6 =
        tc.getScanExecutors().stream().filter(c -> c.name.equals("meta")).findFirst().get();
    assertEquals(3, sec6.maxThreads);

    String prefix = Property.TSERV_SCAN_EXECUTORS_PREFIX.getKey();
    tc.set(prefix + "hulksmash.threads", "66");
    tc.set(prefix + "hulksmash.priority", "3");
    tc.set(prefix + "hulksmash.prioritizer", "com.foo.ScanPrioritizer");
    tc.set(prefix + "hulksmash.prioritizer.opts.k1", "v1");
    tc.set(prefix + "hulksmash.prioritizer.opts.k2", "v3");

    executors = tc.getScanExecutors();
    assertEquals(3, executors.size());
    ScanExecutorConfig sec7 =
        executors.stream().filter(c -> c.name.equals("hulksmash")).findFirst().get();
    assertEquals(66, sec7.maxThreads);
    assertEquals(3, sec7.priority.getAsInt());
    assertEquals("com.foo.ScanPrioritizer", sec7.prioritizerClass.get());
    assertEquals(Map.of("k1", "v1", "k2", "v3"), sec7.prioritizerOpts);

    tc.set(prefix + "hulksmash.threads", "44");
    assertEquals(66, sec7.maxThreads);
    assertEquals(44, sec7.getCurrentMaxThreads());

    ScanExecutorConfig sec8 =
        tc.getScanExecutors().stream().filter(c -> c.name.equals("hulksmash")).findFirst().get();
    assertEquals(44, sec8.maxThreads);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\conf\ClientPropertyTest.java
  public void testAuthentication() {
    Properties props = new Properties();
    props.setProperty(ClientProperty.AUTH_PRINCIPAL.getKey(), "user");
    ClientProperty.setPassword(props, "testpass1");
    assertEquals("testpass1", ClientProperty.AUTH_TOKEN.getValue(props));
    AuthenticationToken token = ClientProperty.getAuthenticationToken(props);
    assertTrue(token instanceof PasswordToken);
    assertEquals("testpass1", new String(((PasswordToken) token).getPassword()));

    ClientProperty.setAuthenticationToken(props, new PasswordToken("testpass2"));
    assertEquals("AAAAHR+LCAAAAAAAAAArSS0uKUgsLjYCANxwRH4JAAAA",
        ClientProperty.AUTH_TOKEN.getValue(props));
    token = ClientProperty.getAuthenticationToken(props);
    assertTrue(token instanceof PasswordToken);
    assertEquals("testpass2", new String(((PasswordToken) token).getPassword()));

    ClientProperty.setAuthenticationToken(props, new PasswordToken("testpass3"));
    assertEquals("AAAAHR+LCAAAAAAAAAArSS0uKUgsLjYGAEpAQwkJAAAA",
        ClientProperty.AUTH_TOKEN.getValue(props));
    token = ClientProperty.getAuthenticationToken(props);
    assertTrue(token instanceof PasswordToken);
    assertEquals("testpass3", new String(((PasswordToken) token).getPassword()));

    ClientProperty.setKerberosKeytab(props, "/path/to/keytab");
    assertEquals("/path/to/keytab", ClientProperty.AUTH_TOKEN.getValue(props));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\conf\ClientPropertyTest.java
  public void testTypes() {
    Properties props = new Properties();
    props.setProperty(ClientProperty.BATCH_WRITER_LATENCY_MAX.getKey(), "10s");
    Long value = ClientProperty.BATCH_WRITER_LATENCY_MAX.getTimeInMillis(props);
    assertEquals(10000L, value.longValue());

    props.setProperty(ClientProperty.BATCH_WRITER_MEMORY_MAX.getKey(), "555M");
    value = ClientProperty.BATCH_WRITER_MEMORY_MAX.getBytes(props);
    assertEquals(581959680L, value.longValue());

    ClientProperty.BATCH_WRITER_MEMORY_MAX.setBytes(props, 5819L);
    value = ClientProperty.BATCH_WRITER_MEMORY_MAX.getBytes(props);
    assertEquals(5819L, value.longValue());

    ClientProperty.BATCH_WRITER_LATENCY_MAX.setTimeInMillis(props, 1234L);
    value = ClientProperty.BATCH_WRITER_LATENCY_MAX.getTimeInMillis(props);
    assertEquals(1234L, value.longValue());

    assertThrows(IllegalStateException.class,
        () -> ClientProperty.BATCH_WRITER_LATENCY_MAX.getBytes(props));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\conf\ConfigSanityCheckTest.java
  public void testPass() {
    m.put(Property.MANAGER_CLIENTPORT.getKey(), "9999");
    m.put(Property.MANAGER_TABLET_BALANCER.getKey(),
        "org.apache.accumulo.server.master.balancer.TableLoadBalancer");
    m.put(Property.MANAGER_BULK_RETRIES.getKey(), "3");
    ConfigSanityCheck.validate(m.entrySet());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\conf\ConfigSanityCheckTest.java
  public void testPass_Empty() {
    ConfigSanityCheck.validate(m.entrySet());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\conf\ConfigSanityCheckTest.java
  public void testPass_UnrecognizedValidProperty() {
    m.put(Property.MANAGER_CLIENTPORT.getKey(), "9999");
    m.put(Property.MANAGER_PREFIX.getKey() + "something", "abcdefg");
    ConfigSanityCheck.validate(m.entrySet());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\conf\ConfigSanityCheckTest.java
  public void testPass_UnrecognizedProperty() {
    m.put(Property.MANAGER_CLIENTPORT.getKey(), "9999");
    m.put("invalid.prefix.value", "abcdefg");
    ConfigSanityCheck.validate(m.entrySet());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\conf\ConfigSanityCheckTest.java
  public void testFail_Prefix() {
    m.put(Property.MANAGER_CLIENTPORT.getKey(), "9999");
    m.put(Property.MANAGER_PREFIX.getKey(), "oops");
    ConfigSanityCheck.validate(m.entrySet());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\conf\ConfigSanityCheckTest.java
  public void testFail_InstanceZkTimeoutOutOfRange() {
    m.put(Property.INSTANCE_ZK_TIMEOUT.getKey(), "10ms");
    ConfigSanityCheck.validate(m.entrySet());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\conf\ConfigSanityCheckTest.java
  public void testFail_badCryptoService() {
    m.put(Property.INSTANCE_CRYPTO_SERVICE.getKey(), "DoesNotExistCryptoService");
    ConfigSanityCheck.validate(m.entrySet());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\conf\ConfigSanityCheckTest.java
  public void testPass_defaultCryptoService() {
    m.put(Property.INSTANCE_CRYPTO_SERVICE.getKey(),
        Property.INSTANCE_CRYPTO_SERVICE.getDefaultValue());
    ConfigSanityCheck.validate(m.entrySet());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\conf\ConfigurationTypeHelperTest.java
  public void testGetMemoryInBytes() {
    Arrays.<Function<String,Long>>asList(ConfigurationTypeHelper::getFixedMemoryAsBytes,
        ConfigurationTypeHelper::getMemoryAsBytes).stream().forEach(memFunc -> {
          assertEquals(42L, memFunc.apply("42").longValue());
          assertEquals(42L, memFunc.apply("42b").longValue());
          assertEquals(42L, memFunc.apply("42B").longValue());
          assertEquals(42L * 1024L, memFunc.apply("42K").longValue());
          assertEquals(42L * 1024L, memFunc.apply("42k").longValue());
          assertEquals(42L * 1024L * 1024L, memFunc.apply("42M").longValue());
          assertEquals(42L * 1024L * 1024L, memFunc.apply("42m").longValue());
          assertEquals(42L * 1024L * 1024L * 1024L, memFunc.apply("42G").longValue());
          assertEquals(42L * 1024L * 1024L * 1024L, memFunc.apply("42g").longValue());
        });
    assertEquals(Runtime.getRuntime().maxMemory() / 10,
        ConfigurationTypeHelper.getMemoryAsBytes("10%"));
    assertEquals(Runtime.getRuntime().maxMemory() / 5,
        ConfigurationTypeHelper.getMemoryAsBytes("20%"));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\conf\ConfigurationTypeHelperTest.java
  public void testGetFixedMemoryAsBytesFailureCases1() {
    ConfigurationTypeHelper.getFixedMemoryAsBytes("42x");
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\conf\ConfigurationTypeHelperTest.java
  public void testGetFixedMemoryAsBytesFailureCases2() {
    ConfigurationTypeHelper.getFixedMemoryAsBytes("FooBar");
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\conf\ConfigurationTypeHelperTest.java
  public void testGetFixedMemoryAsBytesFailureCases3() {
    ConfigurationTypeHelper.getFixedMemoryAsBytes("40%");
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\conf\ConfigurationTypeHelperTest.java
  public void testGetMemoryAsBytesFailureCases1() {
    ConfigurationTypeHelper.getMemoryAsBytes("42x");
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\conf\ConfigurationTypeHelperTest.java
  public void testGetMemoryAsBytesFailureCases2() {
    ConfigurationTypeHelper.getMemoryAsBytes("FooBar");
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\conf\ConfigurationTypeHelperTest.java
  public void testGetTimeInMillis() {
    assertEquals(42L * 24 * 60 * 60 * 1000, ConfigurationTypeHelper.getTimeInMillis("42d"));
    assertEquals(42L * 60 * 60 * 1000, ConfigurationTypeHelper.getTimeInMillis("42h"));
    assertEquals(42L * 60 * 1000, ConfigurationTypeHelper.getTimeInMillis("42m"));
    assertEquals(42L * 1000, ConfigurationTypeHelper.getTimeInMillis("42s"));
    assertEquals(42L * 1000, ConfigurationTypeHelper.getTimeInMillis("42"));
    assertEquals(42L, ConfigurationTypeHelper.getTimeInMillis("42ms"));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\conf\ConfigurationTypeHelperTest.java
  public void testGetTimeInMillisFailureCase1() {
    ConfigurationTypeHelper.getTimeInMillis("abc");
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\conf\ConfigurationTypeHelperTest.java
  public void testGetTimeInMillisFailureCase2() {
    ConfigurationTypeHelper.getTimeInMillis("ms");
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\conf\ConfigurationTypeHelperTest.java
  public void testGetFraction() {
    double delta = 0.0000000000001;
    assertEquals(0.5d, ConfigurationTypeHelper.getFraction("0.5"), delta);
    assertEquals(3.0d, ConfigurationTypeHelper.getFraction("3"), delta);
    assertEquals(-0.25d, ConfigurationTypeHelper.getFraction("-25%"), delta);
    assertEquals(0.99546d, ConfigurationTypeHelper.getFraction("99.546%"), delta);
    assertEquals(0.0d, ConfigurationTypeHelper.getFraction("0%"), delta);
    assertEquals(0.0d, ConfigurationTypeHelper.getFraction("-0.000"), delta);
    assertEquals(0.001d, ConfigurationTypeHelper.getFraction(".1%"), delta);
    assertEquals(1d, ConfigurationTypeHelper.getFraction("1."), delta);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\conf\ConfigurationTypeHelperTest.java
  public void testGetFractionFailureCase1() {
    ConfigurationTypeHelper.getFraction("%");
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\conf\ConfigurationTypeHelperTest.java
  public void testGetFractionFailureCase2() {
    ConfigurationTypeHelper.getFraction("abc0%");
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\conf\ConfigurationTypeHelperTest.java
  public void testGetFractionFailureCase3() {
    ConfigurationTypeHelper.getFraction(".%");
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\conf\DefaultConfigurationTest.java
  public void testGet() {
    assertEquals(Property.MANAGER_CLIENTPORT.getDefaultValue(), c.get(Property.MANAGER_CLIENTPORT));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\conf\DefaultConfigurationTest.java
  public void testGetProperties() {
    Map<String,String> p = new java.util.HashMap<>();
    c.getProperties(p, x -> true);
    assertEquals(Property.MANAGER_CLIENTPORT.getDefaultValue(),
        p.get(Property.MANAGER_CLIENTPORT.getKey()));
    assertFalse(p.containsKey(Property.MANAGER_PREFIX.getKey()));
    assertTrue(p.containsKey(Property.TSERV_DEFAULT_BLOCKSIZE.getKey()));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\conf\DefaultConfigurationTest.java
  public void testSanityCheck() {
    ConfigSanityCheck.validate(c);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\conf\DeprecatedPropertyUtilTest.java
  public void testNonDeprecatedPropertyRename() {
    String oldProp = "some_property_name";
    String newProp = DeprecatedPropertyUtil.getReplacementName(oldProp, NOOP);
    assertSame(oldProp, newProp);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\conf\DeprecatedPropertyUtilTest.java
  public void testDeprecatedPropertyRename() {
    // 'middle.test' -> 'new.test'
    String newProp = DeprecatedPropertyUtil.getReplacementName("middle.test", NOOP);
    assertEquals("new.test", newProp);
    // 'old.test' -> 'middle.test' -> 'new.test'
    String newProp2 = DeprecatedPropertyUtil.getReplacementName("old.test", NOOP);
    assertEquals("new.test", newProp2);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\conf\DeprecatedPropertyUtilTest.java
  public void testMasterManagerPropertyRename() {
    Arrays.stream(Property.values()).filter(p -> p.getType() != PropertyType.PREFIX)
        .filter(p -> p.getKey().startsWith(Property.MANAGER_PREFIX.getKey())).forEach(p -> {
          String oldProp =
              "master." + p.getKey().substring(Property.MANAGER_PREFIX.getKey().length());
          assertEquals(p.getKey(), DeprecatedPropertyUtil.getReplacementName(oldProp, NOOP));
        });
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\conf\DeprecatedPropertyUtilTest.java
  public void testSanityCheckManagerProperties() {
    var config = new BaseConfiguration();
    config.setProperty("regular.prop1", "value");
    config.setProperty("regular.prop2", "value");
    assertEquals(2, config.size());
    DeprecatedPropertyUtil.sanityCheckManagerProperties(config); // should succeed
    config.setProperty("master.deprecatedProp", "value");
    assertEquals(3, config.size());
    DeprecatedPropertyUtil.sanityCheckManagerProperties(config); // should succeed
    config.setProperty("manager.replacementProp", "value");
    assertEquals(4, config.size());
    assertThrows("Sanity check should fail when 'master.*' and 'manager.*' appear in same config",
        IllegalStateException.class,
        () -> DeprecatedPropertyUtil.sanityCheckManagerProperties(config));
    config.clearProperty("master.deprecatedProp");
    assertEquals(3, config.size());
    DeprecatedPropertyUtil.sanityCheckManagerProperties(config); // should succeed
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\conf\HadoopCredentialProviderTest.java
  public void testNullConfigOnGetValue() {
    HadoopCredentialProvider.getValue(null, "alias");
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\conf\HadoopCredentialProviderTest.java
  public void testNullAliasOnGetValue() {
    HadoopCredentialProvider.getValue(new Configuration(false), null);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\conf\HadoopCredentialProviderTest.java
  public void testExtractFromProvider() {
    String absPath = getKeyStoreUrl(populatedKeyStore);
    Configuration conf = new Configuration();
    HadoopCredentialProvider.setPath(conf, absPath);
    Map<String,String> expectations = new HashMap<>();
    expectations.put("key1", "value1");
    expectations.put("key2", "value2");

    checkCredentialProviders(conf, expectations);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\conf\HadoopCredentialProviderTest.java
  public void testEmptyKeyStoreParses() {
    String absPath = getKeyStoreUrl(emptyKeyStore);
    Configuration conf = new Configuration();
    HadoopCredentialProvider.setPath(conf, absPath);

    checkCredentialProviders(conf, new HashMap<>());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\conf\HadoopCredentialProviderTest.java
  public void testEmptyAndPopulatedKeyStores() {
    String populatedAbsPath = getKeyStoreUrl(populatedKeyStore),
        emptyAbsPath = getKeyStoreUrl(emptyKeyStore);
    Configuration conf = new Configuration();
    HadoopCredentialProvider.setPath(conf, populatedAbsPath + "," + emptyAbsPath);
    Map<String,String> expectations = new HashMap<>();
    expectations.put("key1", "value1");
    expectations.put("key2", "value2");

    checkCredentialProviders(conf, expectations);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\conf\HadoopCredentialProviderTest.java
  public void testNonExistentClassesDoesntFail() {
    Configuration conf = new Configuration();
    HadoopCredentialProvider.setPath(conf, "jceks://file/foo/bar.jceks");
    List<String> keys = HadoopCredentialProvider.getKeys(conf);
    assertNotNull(keys);
    assertEquals(Collections.emptyList(), keys);

    assertNull(HadoopCredentialProvider.getValue(conf, "key1"));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\conf\HadoopCredentialProviderTest.java
  public void testConfigurationCreation() {
    final String path = "jceks://file/tmp/foo.jks";
    final Configuration actualConf = hadoopConf;
    HadoopCredentialProvider.setPath(actualConf, path);
    assertNotNull(actualConf);
    assertEquals(path, actualConf.get("hadoop.security.credential.provider.path"));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\conf\HadoopCredentialProviderTest.java
  public void createKeystoreProvider() throws Exception {
    File targetDir = new File(System.getProperty("user.dir") + "/target");
    File keystoreFile = new File(targetDir, "create.jks");
    if (keystoreFile.exists()) {
      if (!keystoreFile.delete()) {
        log.error("Unable to delete {}", keystoreFile);
      }
    }

    String providerUrl = "jceks://file" + keystoreFile.getAbsolutePath();
    Configuration conf = new Configuration();
    HadoopCredentialProvider.setPath(conf, providerUrl);

    String alias = "foo";
    char[] credential = "bar".toCharArray();
    HadoopCredentialProvider.createEntry(conf, alias, credential);

    assertArrayEquals(credential, HadoopCredentialProvider.getValue(conf, alias));
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\conf\HadoopCredentialProviderTest.java
  public void extractFromHdfs() throws Exception {
    File target = new File(System.getProperty("user.dir"), "target");
    String prevValue = System.setProperty("test.build.data",
        new File(target, this.getClass().getName() + "_minidfs").toString());
    MiniDFSCluster dfsCluster = new MiniDFSCluster.Builder(new Configuration()).build();
    try {
      if (null != prevValue) {
        System.setProperty("test.build.data", prevValue);
      } else {
        System.clearProperty("test.build.data");
      }

      // One namenode, One configuration
      Configuration dfsConfiguration = dfsCluster.getConfiguration(0);
      Path destPath = new Path("/accumulo.jceks");
      FileSystem dfs = dfsCluster.getFileSystem();
      // Put the populated keystore in hdfs
      dfs.copyFromLocalFile(new Path(populatedKeyStore.toURI()), destPath);

      Configuration cpConf = dfsConfiguration;
      HadoopCredentialProvider.setPath(cpConf, "jceks://hdfs/accumulo.jceks");

      // The values in the keystore
      Map<String,String> expectations = new HashMap<>();
      expectations.put("key1", "value1");
      expectations.put("key2", "value2");

      checkCredentialProviders(cpConf, expectations);
    } finally {
      dfsCluster.shutdown();
    }
  }

}
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\conf\IterConfigUtilTest.java
  public void test1() throws IOException {
    ConfigurationCopy conf = new ConfigurationCopy();

    // create an iterator that adds 1 and then squares
    conf.set(Property.TABLE_ITERATOR_PREFIX + IteratorScope.minc.name() + ".addIter",
        "1," + AddingIter.class.getName());
    conf.set(Property.TABLE_ITERATOR_PREFIX + IteratorScope.minc.name() + ".sqIter",
        "2," + SquaringIter.class.getName());

    TreeMap<Key,Value> tm = new TreeMap<>();

    MultiIteratorTest.newKeyValue(tm, 1, 0, false, "1");
    MultiIteratorTest.newKeyValue(tm, 2, 0, false, "2");

    SortedMapIterator source = new SortedMapIterator(tm);
    SortedKeyValueIterator<Key,Value> iter = createIter(IteratorScope.minc, source, conf);
    iter.seek(new Range(), EMPTY_COL_FAMS, false);

    assertTrue(iter.hasTop());
    assertEquals(iter.getTopKey(), MultiIteratorTest.newKey(1, 0));
    assertEquals("4", iter.getTopValue().toString());

    iter.next();

    assertTrue(iter.hasTop());
    assertEquals(iter.getTopKey(), MultiIteratorTest.newKey(2, 0));
    assertEquals("9", iter.getTopValue().toString());

    iter.next();

    assertFalse(iter.hasTop());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\conf\IterConfigUtilTest.java
  public void test4() throws IOException {

    // try loading for a different scope
    AccumuloConfiguration conf = new ConfigurationCopy();

    TreeMap<Key,Value> tm = new TreeMap<>();

    MultiIteratorTest.newKeyValue(tm, 1, 0, false, "1");
    MultiIteratorTest.newKeyValue(tm, 2, 0, false, "2");

    SortedMapIterator source = new SortedMapIterator(tm);

    SortedKeyValueIterator<Key,Value> iter = createIter(IteratorScope.majc, source, conf);
    iter.seek(new Range(), EMPTY_COL_FAMS, false);

    assertTrue(iter.hasTop());
    assertEquals(iter.getTopKey(), MultiIteratorTest.newKey(1, 0));
    assertEquals("1", iter.getTopValue().toString());

    iter.next();

    assertTrue(iter.hasTop());
    assertEquals(iter.getTopKey(), MultiIteratorTest.newKey(2, 0));
    assertEquals("2", iter.getTopValue().toString());

    iter.next();

    assertFalse(iter.hasTop());

  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\conf\IterConfigUtilTest.java
  public void test3() throws IOException {
    // change the load order, so it squares and then adds

    ConfigurationCopy conf = new ConfigurationCopy();

    TreeMap<Key,Value> tm = new TreeMap<>();

    MultiIteratorTest.newKeyValue(tm, 1, 0, false, "1");
    MultiIteratorTest.newKeyValue(tm, 2, 0, false, "2");

    SortedMapIterator source = new SortedMapIterator(tm);

    conf.set(Property.TABLE_ITERATOR_PREFIX + IteratorScope.minc.name() + ".addIter",
        "2," + AddingIter.class.getName());
    conf.set(Property.TABLE_ITERATOR_PREFIX + IteratorScope.minc.name() + ".sqIter",
        "1," + SquaringIter.class.getName());

    SortedKeyValueIterator<Key,Value> iter = createIter(IteratorScope.minc, source, conf);
    iter.seek(new Range(), EMPTY_COL_FAMS, false);

    assertTrue(iter.hasTop());
    assertEquals(iter.getTopKey(), MultiIteratorTest.newKey(1, 0));
    assertEquals("2", iter.getTopValue().toString());

    iter.next();

    assertTrue(iter.hasTop());
    assertEquals(iter.getTopKey(), MultiIteratorTest.newKey(2, 0));
    assertEquals("5", iter.getTopValue().toString());

    iter.next();

    assertFalse(iter.hasTop());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\conf\IterConfigUtilTest.java
  public void test2() throws IOException {

    ConfigurationCopy conf = new ConfigurationCopy();

    // create an iterator that adds 1 and then squares
    conf.set(Property.TABLE_ITERATOR_PREFIX + IteratorScope.minc.name() + ".addIter",
        "1," + AddingIter.class.getName());
    conf.set(Property.TABLE_ITERATOR_PREFIX + IteratorScope.minc.name() + ".addIter.opt.amount",
        "7");
    conf.set(Property.TABLE_ITERATOR_PREFIX + IteratorScope.minc.name() + ".sqIter",
        "2," + SquaringIter.class.getName());

    TreeMap<Key,Value> tm = new TreeMap<>();

    MultiIteratorTest.newKeyValue(tm, 1, 0, false, "1");
    MultiIteratorTest.newKeyValue(tm, 2, 0, false, "2");

    SortedMapIterator source = new SortedMapIterator(tm);

    SortedKeyValueIterator<Key,Value> iter = createIter(IteratorScope.minc, source, conf);
    iter.seek(new Range(), EMPTY_COL_FAMS, false);

    assertTrue(iter.hasTop());
    assertEquals(iter.getTopKey(), MultiIteratorTest.newKey(1, 0));
    assertEquals("64", iter.getTopValue().toString());

    iter.next();

    assertTrue(iter.hasTop());
    assertEquals(iter.getTopKey(), MultiIteratorTest.newKey(2, 0));
    assertEquals("81", iter.getTopValue().toString());

    iter.next();

    assertFalse(iter.hasTop());

  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\conf\IterConfigUtilTest.java
  public void test5() throws IOException {
    ConfigurationCopy conf = new ConfigurationCopy();

    // create an iterator that ages off
    conf.set(Property.TABLE_ITERATOR_PREFIX + IteratorScope.minc.name() + ".filter",
        "1," + AgeOffFilter.class.getName());
    conf.set(Property.TABLE_ITERATOR_PREFIX + IteratorScope.minc.name() + ".filter.opt.ttl", "100");
    conf.set(Property.TABLE_ITERATOR_PREFIX + IteratorScope.minc.name() + ".filter.opt.currentTime",
        "1000");

    TreeMap<Key,Value> tm = new TreeMap<>();

    MultiIteratorTest.newKeyValue(tm, 1, 850, false, "1");
    MultiIteratorTest.newKeyValue(tm, 2, 950, false, "2");

    SortedMapIterator source = new SortedMapIterator(tm);

    SortedKeyValueIterator<Key,Value> iter = createIter(IteratorScope.minc, source, conf);
    iter.seek(new Range(), EMPTY_COL_FAMS, false);

    assertTrue(iter.hasTop());
    assertEquals(iter.getTopKey(), MultiIteratorTest.newKey(2, 950));
    iter.next();

    assertFalse(iter.hasTop());

  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\conf\IterConfigUtilTest.java
  public void onlyReadsRelevantIteratorScopeConfigurations() {
    Map<String,String> data = new HashMap<>();

    // Make some configuration items, one with a bogus scope
    data.put(Property.TABLE_ITERATOR_SCAN_PREFIX + "foo", "50," + SummingCombiner.class.getName());
    data.put(Property.TABLE_ITERATOR_SCAN_PREFIX + "foo.opt.all", "true");
    data.put(Property.TABLE_ITERATOR_PREFIX + ".fakescope.bar",
        "50," + SummingCombiner.class.getName());
    data.put(Property.TABLE_ITERATOR_SCAN_PREFIX + "foo.opt.fakeopt", "fakevalue");

    AccumuloConfiguration conf = new ConfigurationCopy(data);

    List<IterInfo> iterators =
        IterConfigUtil.parseIterConf(IteratorScope.scan, EMPTY_ITERS, new HashMap<>(), conf);

    assertEquals(1, iterators.size());
    IterInfo ii = iterators.get(0);
    assertEquals(new IterInfo(50, SummingCombiner.class.getName(), "foo"), ii);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\conf\IterConfigUtilTest.java
  public void testInvalidIteratorFormats() {

    Map<String,String> data = new HashMap<>();
    Map<String,Map<String,String>> options = new HashMap<>();
    AccumuloConfiguration conf;

    // create iterator with 'dot' in name
    List<IterInfo> iterators = new ArrayList<>();
    try {
      data.put(Property.TABLE_ITERATOR_SCAN_PREFIX + "foo.bar",
          "50," + SummingCombiner.class.getName());
      conf = new ConfigurationCopy(data);
      iterators = IterConfigUtil.parseIterConf(IteratorScope.scan, iterators, options, conf);
    } catch (IllegalArgumentException ex) {
      log.debug("caught expected exception: " + ex.getMessage());
    }
    data.clear();
    iterators.clear();
    options.clear();

    // create iterator with 'dot' in name and with split size of 3. If split size of three, then
    // second part must be 'opt'.
    try {
      data.put(Property.TABLE_ITERATOR_SCAN_PREFIX + "foo.bar.baz",
          "49," + SummingCombiner.class.getName());
      conf = new ConfigurationCopy(data);
      iterators = IterConfigUtil.parseIterConf(IteratorScope.scan, iterators, options, conf);
    } catch (IllegalArgumentException ex) {
      log.debug("caught expected exception: " + ex.getMessage());
    }
    data.clear();
    iterators.clear();
    options.clear();

    // create iterator with invalid option format
    try {
      data.put(Property.TABLE_ITERATOR_SCAN_PREFIX + "foobar",
          "48," + SummingCombiner.class.getName());
      data.put(Property.TABLE_ITERATOR_SCAN_PREFIX + "foobar.opt", "fakevalue");
      conf = new ConfigurationCopy(data);
      iterators = IterConfigUtil.parseIterConf(IteratorScope.scan, iterators, options, conf);
      assertEquals(1, iterators.size());
      IterInfo ii = iterators.get(0);
      assertEquals(new IterInfo(48, SummingCombiner.class.getName(), "foobar"), ii);
    } catch (IllegalArgumentException ex) {
      log.debug("caught expected exception: " + ex.getMessage());
    }
    data.clear();
    iterators.clear();
    options.clear();

    // create iterator with 'opt' in incorrect position
    try {
      data.put(Property.TABLE_ITERATOR_SCAN_PREFIX + "foobaz",
          "47," + SummingCombiner.class.getName());
      data.put(Property.TABLE_ITERATOR_SCAN_PREFIX + "foobaz.fake.opt", "fakevalue");
      conf = new ConfigurationCopy(data);
      iterators = IterConfigUtil.parseIterConf(IteratorScope.scan, iterators, options, conf);
      assertEquals(1, iterators.size());
      IterInfo ii = iterators.get(0);
      assertEquals(new IterInfo(47, SummingCombiner.class.getName(), "foobaz"), ii);
    } catch (IllegalArgumentException ex) {
      log.debug("caught expected exception: " + ex.getMessage());
    }
  }

}
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\conf\PropertyTest.java
  public void testProperties() {
    HashSet<String> validPrefixes = new HashSet<>();
    for (Property prop : Property.values()) {
      if (prop.getType().equals(PropertyType.PREFIX)) {
        validPrefixes.add(prop.getKey());
      }
    }

    HashSet<String> propertyNames = new HashSet<>();
    for (Property prop : Property.values()) {
      // make sure properties default values match their type
      if (prop.getType() == PropertyType.PREFIX) {
        assertNull("PREFIX property " + prop.name() + " has unexpected non-null default value.",
            prop.getDefaultValue());
      } else {
        assertTrue(
            "Property " + prop + " has invalid default value " + prop.getDefaultValue()
                + " for type " + prop.getType(),
            prop.getType().isValidFormat(prop.getDefaultValue()));
      }

      // make sure property has a description
      assertFalse("Description not set for " + prop,
          prop.getDescription() == null || prop.getDescription().isEmpty());

      // make sure property starts with valid prefix
      boolean containsValidPrefix = false;
      for (String pre : validPrefixes) {
        if (prop.getKey().startsWith(pre)) {
          containsValidPrefix = true;
          break;
        }
      }
      assertTrue("Invalid prefix on prop " + prop, containsValidPrefix);

      // make sure properties aren't duplicate
      assertFalse("Duplicate property name " + prop.getKey(),
          propertyNames.contains(prop.getKey()));
      propertyNames.add(prop.getKey());

    }
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\conf\PropertyTest.java
  public void testPorts() {
    HashSet<Integer> usedPorts = new HashSet<>();
    for (Property prop : Property.values()) {
      if (prop.getType().equals(PropertyType.PORT)) {
        int port = Integer.parseInt(prop.getDefaultValue());
        assertFalse("Port already in use: " + port, usedPorts.contains(port));
        usedPorts.add(port);
        assertTrue("Port out of range of valid ports: " + port, port > 1023 && port < 65536);
      }
    }
  }

  // This test verifies all "sensitive" properties are properly marked as sensitive
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\conf\PropertyTest.java
  public void testSensitiveKeys() {
    // add trace token, because it's a sensitive property not in the default configuration
    ConfigurationCopy conf = new ConfigurationCopy(DefaultConfiguration.getInstance());
    conf.set("trace.token.property.blah", "something");

    // ignores duplicates because ConfigurationCopy already de-duplicates
    Collector<Entry<String,String>,?,TreeMap<String,String>> treeMapCollector =
        Collectors.toMap(Entry::getKey, Entry::getValue, (a, b) -> a, TreeMap::new);

    Predicate<Entry<String,String>> sensitiveNames =
        e -> e.getKey().equals(Property.INSTANCE_SECRET.getKey())
            || e.getKey().toLowerCase().contains("password")
            || e.getKey().toLowerCase().endsWith("secret")
            || e.getKey().startsWith(Property.TRACE_TOKEN_PROPERTY_PREFIX.getKey());

    Predicate<Entry<String,String>> isMarkedSensitive = e -> Property.isSensitive(e.getKey());

    TreeMap<String,String> expected = StreamSupport.stream(conf.spliterator(), false)
        .filter(sensitiveNames).collect(treeMapCollector);
    TreeMap<String,String> actual = StreamSupport.stream(conf.spliterator(), false)
        .filter(isMarkedSensitive).collect(treeMapCollector);

    // make sure trace token property wasn't excluded from both
    assertEquals("something", expected.get("trace.token.property.blah"));
    assertEquals(expected, actual);
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\conf\PropertyTest.java
  public void validatePropertyKeys() {
    for (Property prop : Property.values()) {
      if (prop.getType().equals(PropertyType.PREFIX)) {
        assertTrue(prop.getKey().endsWith("."));
        assertNull(prop.getDefaultValue());
      }
    }
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\conf\PropertyTest.java
  public void testAnnotations() {
    assertTrue(Property.GENERAL_VOLUME_CHOOSER.isExperimental());
    assertFalse(Property.TABLE_SAMPLER.isExperimental());

    assertTrue(Property.INSTANCE_SECRET.isSensitive());
    assertFalse(Property.INSTANCE_VOLUMES.isSensitive());

    @SuppressWarnings("deprecation")
    Property deprecatedProp = Property.GENERAL_CLASSPATHS;
    assertTrue(deprecatedProp.isDeprecated());
    assertFalse(Property.INSTANCE_VOLUMES_REPLACEMENTS.isDeprecated());
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\conf\PropertyTest.java
  public void testGetPropertyByKey() {
    for (Property prop : Property.values()) {
      assertSame(prop, Property.getPropertyByKey(prop.getKey()));
    }
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\conf\PropertyTest.java
  public void testIsValidPropertyKey() {
    for (Property prop : Property.values()) {
      assertTrue(Property.isValidPropertyKey(prop.getKey()));
      if (prop.getType().equals(PropertyType.PREFIX)) {
        assertTrue(Property.isValidPropertyKey(prop.getKey() + "foo9"));
      }
    }

    assertFalse(Property.isValidPropertyKey("abc.def"));
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\conf\PropertyTest.java
  public void testIsValidTablePropertyKey() {
    for (Property prop : Property.values()) {
      if (prop.getKey().startsWith("table.") && !prop.getKey().equals("table.")) {
        assertTrue(prop.getKey(), Property.isValidTablePropertyKey(prop.getKey()));

        if (prop.getType().equals(PropertyType.PREFIX)) {
          assertTrue(Property.isValidTablePropertyKey(prop.getKey() + "foo9"));
        } else {
          assertFalse(Property.isValidTablePropertyKey(prop.getKey() + "foo9"));
        }
      } else {
        assertFalse(Property.isValidTablePropertyKey(prop.getKey()));
      }

    }

    assertFalse(Property.isValidTablePropertyKey("abc.def"));
  }
}
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\conf\PropertyTypeTest.java
  public void testGetFormatDescription() {
    assertEquals(
        "An arbitrary string of characters whose format is unspecified"
            + " and interpreted based on the context of the property to which it" + " applies.",
        PropertyType.STRING.getFormatDescription());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\conf\PropertyTypeTest.java
  public void testToString() {
    assertEquals("string", PropertyType.STRING.toString());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\conf\PropertyTypeTest.java
  public void testFullCoverage() {
    // This test checks the remainder of the methods in this class to ensure each property type has
    // a corresponding test
    Stream<String> types = Arrays.stream(PropertyType.values()).map(Enum<PropertyType>::name);

    List<String> typesTested = Arrays.stream(this.getClass().getMethods()).map(Method::getName)
        .filter(m -> m.startsWith("testType")).map(m -> m.substring(8))
        .collect(Collectors.toList());

    types = types.map(t -> {
      assertTrue(PropertyType.class.getSimpleName() + "." + t + " does not have a test.",
          typesTested.contains(t));
      return t;
    });
    assertEquals(types.count(), typesTested.size());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\conf\PropertyTypeTest.java
  public void testTypeABSOLUTEPATH() {
    valid(null, "/foo", "/foo/c", "/", System.getProperty("user.dir"));
    // in Hadoop 2.x, Path only normalizes Windows paths properly when run on a Windows system
    // this makes the following checks fail
    if (System.getProperty("os.name").toLowerCase().contains("windows")) {
      valid("d:\\foo12", "c:\\foo\\g", "c:\\foo\\c", "c:\\");
    }
    invalid("foo12", "foo/g", "foo\\c");
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\conf\PropertyTypeTest.java
  public void testTypeBOOLEAN() {
    valid(null, "True", "true", "False", "false", "tRUE", "fAlSe");
    invalid("foobar", "", "F", "T", "1", "0", "f", "t");
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\conf\PropertyTypeTest.java
  public void testTypeCLASSNAME() {
    valid(null, "", String.class.getName(), String.class.getName() + "$1",
        String.class.getName() + "$TestClass");
    invalid("abc-def", "-", "!@#$%");
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\conf\PropertyTypeTest.java
  public void testTypeCLASSNAMELIST() {
    testTypeCLASSNAME(); // test single class name
    valid(null, Joiner.on(",").join(String.class.getName(), String.class.getName() + "$1",
        String.class.getName() + "$TestClass"));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\conf\PropertyTypeTest.java
  public void testTypeCOUNT() {
    valid(null, "0", "1024", Long.toString(Integer.MAX_VALUE));
    invalid(Long.toString(Integer.MAX_VALUE + 1L), "-65535", "-1");
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\conf\PropertyTypeTest.java
  public void testTypeDURABILITY() {
    valid(null, "none", "log", "flush", "sync");
    invalid("", "other");
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\conf\PropertyTypeTest.java
  public void testTypeGC_POST_ACTION() {
    valid(null, "none", "flush", "compact");
    invalid("", "other");
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\conf\PropertyTypeTest.java
  public void testTypeFRACTION() {
    valid(null, "1", "0", "1.0", "25%", "2.5%", "10.2E-3", "10.2E-3%", ".3");
    invalid("", "other", "20%%", "-0.3", "3.6a", "%25", "3%a");
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\conf\PropertyTypeTest.java
  public void testTypeHOSTLIST() {
    valid(null, "localhost", "server1,server2,server3", "server1:1111,server2:3333",
        "localhost:1111", "server2:1111", "www.server", "www.server:1111", "www.server.com",
        "www.server.com:111");
    invalid(":111", "local host");
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\conf\PropertyTypeTest.java
  public void testTypeBYTES() {
    valid(null, "1024", "20B", "100K", "1500M", "2G");
    invalid("1M500K", "1M 2K", "1MB", "1.5G", "1,024K", "", "a", "10%");
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\conf\PropertyTypeTest.java
  public void testTypeMEMORY() {
    valid(null, "1024", "20B", "100K", "1500M", "2G", "10%");
    invalid("1M500K", "1M 2K", "1MB", "1.5G", "1,024K", "", "a");
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\conf\PropertyTypeTest.java
  public void testTypePATH() {
    valid(null, "", "/absolute/path", "relative/path", "/with/trailing/slash/",
        "with/trailing/slash/");
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\conf\PropertyTypeTest.java
  public void testTypePORT() {
    valid(null, "0", "1024", "30000", "65535");
    invalid("65536", "-65535", "-1", "1023");
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\conf\PropertyTypeTest.java
  public void testTypePREFIX() {
    invalid(null, "", "whatever");
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\conf\PropertyTypeTest.java
  public void testTypeSTRING() {
    valid(null, "", "whatever");
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\conf\PropertyTypeTest.java
  public void testTypeTIMEDURATION() {
    valid(null, "600", "30s", "45m", "30000ms", "3d", "1h");
    invalid("1w", "1h30m", "1s 200ms", "ms", "", "a");
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\conf\PropertyTypeTest.java
  public void testTypeURI() {
    valid(null, "", "hdfs://hostname", "file:///path/", "hdfs://example.com:port/path");
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\conf\SiteConfigurationTest.java
  public void testOnlySensitivePropertiesExtractedFromCredentialProvider()
      throws SecurityException {
    // site-cfg.jceks={'ignored.property'=>'ignored', 'instance.secret'=>'mysecret',
    // 'general.rpc.timeout'=>'timeout'}
    URL keystore = SiteConfigurationTest.class.getResource("/site-cfg.jceks");
    assertNotNull(keystore);
    String credProvPath = "jceks://file" + new File(keystore.getFile()).getAbsolutePath();

    var overrides =
        Map.of(Property.GENERAL_SECURITY_CREDENTIAL_PROVIDER_PATHS.getKey(), credProvPath);
    var config = new SiteConfiguration.Builder().noFile().withOverrides(overrides).build();

    assertEquals("mysecret", config.get(Property.INSTANCE_SECRET));
    assertNull(config.get("ignored.property"));
    assertEquals(Property.GENERAL_RPC_TIMEOUT.getDefaultValue(),
        config.get(Property.GENERAL_RPC_TIMEOUT.getKey()));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\conf\SiteConfigurationTest.java
  public void testDefault() {
    var conf = SiteConfiguration.auto();
    assertEquals("localhost:2181", conf.get(Property.INSTANCE_ZK_HOST));
    assertEquals("DEFAULT", conf.get(Property.INSTANCE_SECRET));
    assertEquals("", conf.get(Property.INSTANCE_VOLUMES));
    assertEquals("120s", conf.get(Property.GENERAL_RPC_TIMEOUT));
    assertEquals("1G", conf.get(Property.TSERV_WALOG_MAX_SIZE));
    assertEquals("org.apache.accumulo.core.cryptoImpl.NoCryptoService",
        conf.get(Property.INSTANCE_CRYPTO_SERVICE));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\conf\SiteConfigurationTest.java
  public void testFile() {
    System.setProperty("DIR", "/tmp/test/dir");
    URL propsUrl = getClass().getClassLoader().getResource("accumulo2.properties");
    var conf = new SiteConfiguration.Builder().fromUrl(propsUrl).build();
    assertEquals("myhost123:2181", conf.get(Property.INSTANCE_ZK_HOST));
    assertEquals("mysecret", conf.get(Property.INSTANCE_SECRET));
    assertEquals("hdfs://localhost:8020/accumulo123", conf.get(Property.INSTANCE_VOLUMES));
    assertEquals("123s", conf.get(Property.GENERAL_RPC_TIMEOUT));
    assertEquals("256M", conf.get(Property.TSERV_WALOG_MAX_SIZE));
    assertEquals("org.apache.accumulo.core.cryptoImpl.AESCryptoService",
        conf.get(Property.INSTANCE_CRYPTO_SERVICE));
    assertEquals(System.getenv("USER"), conf.get("general.test.user.name"));
    assertEquals("/tmp/test/dir", conf.get("general.test.user.dir"));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\conf\SiteConfigurationTest.java
  public void testConfigOverrides() {
    var conf = SiteConfiguration.auto();
    assertEquals("localhost:2181", conf.get(Property.INSTANCE_ZK_HOST));

    conf = new SiteConfiguration.Builder().noFile()
        .withOverrides(Map.of(Property.INSTANCE_ZK_HOST.getKey(), "myhost:2181")).build();
    assertEquals("myhost:2181", conf.get(Property.INSTANCE_ZK_HOST));

    var results = new HashMap<String,String>();
    conf.getProperties(results, p -> p.startsWith("instance"));
    assertEquals("myhost:2181", results.get(Property.INSTANCE_ZK_HOST.getKey()));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\constraints\DefaultKeySizeConstraintTest.java
  public void testConstraint() {

    // pass constraints
    Mutation m = new Mutation("rowId");
    m.put("colf", "colq", new Value(new byte[] {}));
    assertEquals(Collections.emptyList(), constraint.check(null, m));

    // test with row id > 1mb
    m = new Mutation(oversized);
    m.put("colf", "colq", new Value(new byte[] {}));
    assertEquals(
        Collections.singletonList(DefaultKeySizeConstraint.MAX__KEY_SIZE_EXCEEDED_VIOLATION),
        constraint.check(null, m));

    // test with colf > 1mb
    m = new Mutation("rowid");
    m.put(new Text(oversized), new Text("colq"), new Value(new byte[] {}));
    assertEquals(
        Collections.singletonList(DefaultKeySizeConstraint.MAX__KEY_SIZE_EXCEEDED_VIOLATION),
        constraint.check(null, m));

    // test with colf > 1mb
    m = new Mutation("rowid");
    m.put(new Text(oversized), new Text("colq"), new Value(new byte[] {}));
    assertEquals(
        Collections.singletonList(DefaultKeySizeConstraint.MAX__KEY_SIZE_EXCEEDED_VIOLATION),
        constraint.check(null, m));

    // test sum of smaller sizes violates 1mb constraint
    m = new Mutation(large);
    m.put(new Text(large), new Text(large), new Value(new byte[] {}));
    assertEquals(
        Collections.singletonList(DefaultKeySizeConstraint.MAX__KEY_SIZE_EXCEEDED_VIOLATION),
        constraint.check(null, m));
  }
}
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\constraints\NoDeleteConstraintTest.java
  public void testConstraint() {
    Mutation m1 = new Mutation("r1");
    m1.putDelete("f1", "q1");

    NoDeleteConstraint ndc = new NoDeleteConstraint();

    List<Short> results = ndc.check(null, m1);
    assertEquals(1, results.size());
    assertEquals(1, results.get(0).intValue());

    Mutation m2 = new Mutation("r1");
    m2.put("f1", "q1", new Value("v1"));

    results = ndc.check(null, m2);
    assertNull(results);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\crypto\BlockedIOStreamTest.java
  public void testLargeBlockIO() throws IOException {
    writeRead(1024, 2048);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\crypto\BlockedIOStreamTest.java
  public void testSmallBufferBlockedIO() throws IOException {
    writeRead(16, (12 + 4) * (int) (Math.ceil(25.0 / 12) + Math.ceil(31.0 / 12)));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\crypto\BlockedIOStreamTest.java
  public void testSpillingOverOutputStream() throws IOException {
    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    // buffer will be size 12
    BlockedOutputStream blockOut = new BlockedOutputStream(baos, 16, 16);
    Random r = new SecureRandom();

    byte[] undersized = new byte[11];
    byte[] perfectSized = new byte[12];
    byte[] overSized = new byte[13];
    byte[] perfectlyOversized = new byte[13];
    byte filler = (byte) r.nextInt();

    r.nextBytes(undersized);
    r.nextBytes(perfectSized);
    r.nextBytes(overSized);
    r.nextBytes(perfectlyOversized);

    // 1 block
    blockOut.write(undersized);
    blockOut.write(filler);
    blockOut.flush();

    // 2 blocks
    blockOut.write(perfectSized);
    blockOut.write(filler);
    blockOut.flush();

    // 2 blocks
    blockOut.write(overSized);
    blockOut.write(filler);
    blockOut.flush();

    // 3 blocks
    blockOut.write(undersized);
    blockOut.write(perfectlyOversized);
    blockOut.write(filler);
    blockOut.flush();

    blockOut.close();
    assertEquals(16 * 8, baos.toByteArray().length);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\crypto\BlockedIOStreamTest.java
  public void testGiantWrite() throws IOException {
    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    int blockSize = 16;
    // buffer will be size 12
    BlockedOutputStream blockOut = new BlockedOutputStream(baos, blockSize, blockSize);
    Random r = new SecureRandom();

    int size = 1024 * 1024 * 128;
    byte[] giant = new byte[size];
    byte[] pattern = new byte[1024];

    r.nextBytes(pattern);

    for (int i = 0; i < size / 1024; i++) {
      System.arraycopy(pattern, 0, giant, i * 1024, 1024);
    }

    blockOut.write(giant);
    blockOut.flush();

    blockOut.close();
    baos.close();

    int blocks = (int) Math.ceil(size / (blockSize - 4.0));
    byte[] byteStream = baos.toByteArray();

    assertEquals(blocks * 16, byteStream.length);

    DataInputStream blockIn = new DataInputStream(
        new BlockedInputStream(new ByteArrayInputStream(byteStream), blockSize, blockSize));
    Arrays.fill(giant, (byte) 0);
    blockIn.readFully(giant, 0, size);
    blockIn.close();

    for (int i = 0; i < size / 1024; i++) {
      byte[] readChunk = new byte[1024];
      System.arraycopy(giant, i * 1024, readChunk, 0, 1024);
      assertArrayEquals(pattern, readChunk);
    }
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\crypto\CryptoTest.java
  public void simpleGCMTest() throws Exception {
    AccumuloConfiguration conf = getAccumuloConfig(CRYPTO_ON_CONF);

    CryptoService cryptoService = new AESCryptoService();
    cryptoService.init(conf.getAllPropertiesWithPrefix(Property.INSTANCE_CRYPTO_PREFIX));
    CryptoEnvironment encEnv = new CryptoEnvironmentImpl(Scope.RFILE, null);
    FileEncrypter encrypter = cryptoService.getFileEncrypter(encEnv);
    byte[] params = encrypter.getDecryptionParameters();
    assertNotNull(params);

    ByteArrayOutputStream out = new ByteArrayOutputStream();
    DataOutputStream dataOut = new DataOutputStream(out);
    CryptoUtils.writeParams(params, dataOut);
    OutputStream encrypted = encrypter.encryptStream(dataOut);

    assertNotNull(encrypted);
    DataOutputStream cipherOut = new DataOutputStream(encrypted);

    cipherOut.writeUTF(MARKER_STRING);

    cipherOut.close();
    dataOut.close();
    encrypted.close();
    out.close();

    byte[] cipherText = out.toByteArray();

    // decrypt
    ByteArrayInputStream in = new ByteArrayInputStream(cipherText);
    params = CryptoUtils.readParams(new DataInputStream(in));
    CryptoEnvironment decEnv = new CryptoEnvironmentImpl(Scope.RFILE, params);
    FileDecrypter decrypter = cryptoService.getFileDecrypter(decEnv);
    DataInputStream decrypted = new DataInputStream(decrypter.decryptStream(in));
    String plainText = decrypted.readUTF();
    decrypted.close();
    in.close();

    assertEquals(MARKER_STRING, new String(plainText));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\crypto\CryptoTest.java
  public void testAESCryptoServiceWAL() throws Exception {
    AESCryptoService cs = new AESCryptoService();
    byte[] resultingBytes = encrypt(cs, Scope.WAL, CRYPTO_ON_CONF);

    String stringifiedBytes = Arrays.toString(resultingBytes);
    String stringifiedMarkerBytes = getStringifiedBytes(null, MARKER_STRING, MARKER_INT);

    assertNotEquals(stringifiedBytes, stringifiedMarkerBytes);

    decrypt(resultingBytes, Scope.WAL, CRYPTO_ON_CONF);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\crypto\CryptoTest.java
  public void testAESCryptoServiceRFILE() throws Exception {
    AESCryptoService cs = new AESCryptoService();
    byte[] resultingBytes = encrypt(cs, Scope.RFILE, CRYPTO_ON_CONF);

    String stringifiedBytes = Arrays.toString(resultingBytes);
    String stringifiedMarkerBytes = getStringifiedBytes(null, MARKER_STRING, MARKER_INT);

    assertNotEquals(stringifiedBytes, stringifiedMarkerBytes);

    decrypt(resultingBytes, Scope.RFILE, CRYPTO_ON_CONF);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\crypto\CryptoTest.java
  public void testNoEncryptionWAL() throws Exception {
    CryptoService cs = CryptoServiceFactory.newDefaultInstance();
    byte[] encryptedBytes = encrypt(cs, Scope.WAL, CRYPTO_OFF_CONF);

    String stringifiedBytes = Arrays.toString(encryptedBytes);
    String stringifiedMarkerBytes =
        getStringifiedBytes("U+1F47B".getBytes(), MARKER_STRING, MARKER_INT);

    assertEquals(stringifiedBytes, stringifiedMarkerBytes);

    decrypt(encryptedBytes, Scope.WAL, CRYPTO_OFF_CONF);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\crypto\CryptoTest.java
  public void testNoEncryptionRFILE() throws Exception {
    CryptoService cs = CryptoServiceFactory.newDefaultInstance();
    byte[] encryptedBytes = encrypt(cs, Scope.RFILE, CRYPTO_OFF_CONF);

    String stringifiedBytes = Arrays.toString(encryptedBytes);
    String stringifiedMarkerBytes =
        getStringifiedBytes("U+1F47B".getBytes(), MARKER_STRING, MARKER_INT);

    assertEquals(stringifiedBytes, stringifiedMarkerBytes);

    decrypt(encryptedBytes, Scope.RFILE, CRYPTO_OFF_CONF);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\crypto\CryptoTest.java
  public void testRFileEncrypted() throws Exception {
    AccumuloConfiguration cryptoOnConf = getAccumuloConfig(CRYPTO_ON_CONF);
    FileSystem fs = FileSystem.getLocal(hadoopConf);
    ArrayList<Key> keys = testData();
    SummarizerConfiguration sumConf =
        SummarizerConfiguration.builder(KeyCounter.class.getName()).build();

    String file = "target/testFile1.rf";
    fs.delete(new Path(file), true);
    try (RFileWriter writer = RFile.newWriter().to(file).withFileSystem(fs)
        .withTableProperties(cryptoOnConf).withSummarizers(sumConf).build()) {
      Value empty = new Value(new byte[] {});
      writer.startDefaultLocalityGroup();
      for (Key key : keys) {
        writer.append(key, empty);
      }
    }

    Scanner iter =
        RFile.newScanner().from(file).withFileSystem(fs).withTableProperties(cryptoOnConf).build();
    ArrayList<Key> keysRead = new ArrayList<>();
    iter.forEach(e -> keysRead.add(e.getKey()));
    assertEquals(keys, keysRead);

    Collection<Summary> summaries =
        RFile.summaries().from(file).withFileSystem(fs).withTableProperties(cryptoOnConf).read();
    Summary summary = Iterables.getOnlyElement(summaries);
    assertEquals(keys.size(), (long) summary.getStatistics().get("keys"));
    assertEquals(1, summary.getStatistics().size());
    assertEquals(0, summary.getFileStatistics().getInaccurate());
    assertEquals(1, summary.getFileStatistics().getTotal());

  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\crypto\CryptoTest.java
  // This test is to ensure when Crypto is configured that it can read unencrypted files
  public void testReadNoCryptoWithCryptoConfigured() throws Exception {
    AccumuloConfiguration cryptoOffConf = getAccumuloConfig(CRYPTO_OFF_CONF);
    AccumuloConfiguration cryptoOnConf = getAccumuloConfig(CRYPTO_ON_CONF);
    FileSystem fs = FileSystem.getLocal(hadoopConf);
    ArrayList<Key> keys = testData();

    String file = "target/testFile2.rf";
    fs.delete(new Path(file), true);
    try (RFileWriter writer =
        RFile.newWriter().to(file).withFileSystem(fs).withTableProperties(cryptoOffConf).build()) {
      Value empty = new Value(new byte[] {});
      writer.startDefaultLocalityGroup();
      for (Key key : keys) {
        writer.append(key, empty);
      }
    }

    Scanner iter =
        RFile.newScanner().from(file).withFileSystem(fs).withTableProperties(cryptoOnConf).build();
    ArrayList<Key> keysRead = new ArrayList<>();
    iter.forEach(e -> keysRead.add(e.getKey()));
    assertEquals(keys, keysRead);
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\crypto\CryptoTest.java
  public void testMissingConfigProperties() throws ReflectiveOperationException {
    ConfigurationCopy aconf = new ConfigurationCopy(DefaultConfiguration.getInstance());
    Configuration conf = new Configuration(false);
    for (Map.Entry<String,String> e : conf) {
      aconf.set(e.getKey(), e.getValue());
    }
    aconf.set(Property.INSTANCE_CRYPTO_SERVICE,
        "org.apache.accumulo.core.cryptoImpl.AESCryptoService");
    String configuredClass = aconf.get(Property.INSTANCE_CRYPTO_SERVICE.getKey());
    Class<? extends CryptoService> clazz =
        ClassLoaderUtil.loadClass(configuredClass, CryptoService.class);
    CryptoService cs = clazz.getDeclaredConstructor().newInstance();

    assertEquals(AESCryptoService.class, cs.getClass());
    assertThrows(NullPointerException.class,
        () -> cs.init(aconf.getAllPropertiesWithPrefix(Property.TABLE_PREFIX)));
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\crypto\CryptoTest.java
  public void testAESKeyUtilsGeneratesKey() throws NoSuchAlgorithmException,
      NoSuchProviderException, NoSuchPaddingException, InvalidKeyException {
    SecureRandom sr = SecureRandom.getInstance("SHA1PRNG", "SUN");
    // verify valid key sizes (corresponds to 128, 192, and 256 bits)
    for (int i : new int[] {16, 24, 32}) {
      verifyKeySizeForCBC(sr, i);
    }
    // verify invalid key sizes
    for (int i : new int[] {1, 2, 8, 11, 15, 64, 128}) {
      assertThrows(InvalidKeyException.class, () -> verifyKeySizeForCBC(sr, i));
    }
  }

  // this has to be a separate method, for spotbugs, because spotbugs annotation doesn't seem to
  // apply to the lambda inline
  @SuppressFBWarnings(value = "CIPHER_INTEGRITY", justification = "CBC is being tested")
  private void verifyKeySizeForCBC(SecureRandom sr, int sizeInBytes)
      throws InvalidKeyException, NoSuchAlgorithmException, NoSuchPaddingException {
    java.security.Key key = AESKeyUtils.generateKey(sr, sizeInBytes);
    Cipher.getInstance("AES/CBC/NoPadding").init(Cipher.ENCRYPT_MODE, key);
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\crypto\CryptoTest.java
  public void testAESKeyUtilsWrapAndUnwrap()
      throws NoSuchAlgorithmException, NoSuchProviderException {
    SecureRandom sr = SecureRandom.getInstance("SHA1PRNG", "SUN");
    java.security.Key kek = AESKeyUtils.generateKey(sr, 16);
    java.security.Key fek = AESKeyUtils.generateKey(sr, 16);
    byte[] wrapped = AESKeyUtils.wrapKey(fek, kek);
    assertFalse(Arrays.equals(fek.getEncoded(), wrapped));
    java.security.Key unwrapped = AESKeyUtils.unwrapKey(wrapped, kek);
    assertEquals(unwrapped, fek);
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\crypto\CryptoTest.java
  public void testAESKeyUtilsFailUnwrapWithWrongKEK()
      throws NoSuchAlgorithmException, NoSuchProviderException {
    SecureRandom sr = SecureRandom.getInstance("SHA1PRNG", "SUN");
    java.security.Key kek = AESKeyUtils.generateKey(sr, 16);
    java.security.Key fek = AESKeyUtils.generateKey(sr, 16);
    byte[] wrongBytes = kek.getEncoded();
    wrongBytes[0]++;
    java.security.Key wrongKek = new SecretKeySpec(wrongBytes, "AES");

    byte[] wrapped = AESKeyUtils.wrapKey(fek, kek);
    assertThrows(CryptoException.class, () -> AESKeyUtils.unwrapKey(wrapped, wrongKek));
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\crypto\CryptoTest.java
  public void testAESKeyUtilsLoadKekFromUri() throws IOException {
    SecretKeySpec fileKey = AESKeyUtils.loadKekFromUri(keyPath);
    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    DataOutputStream dos = new DataOutputStream(baos);
    dos.writeUTF("sixteenbytekey");
    SecretKeySpec handKey = new SecretKeySpec(baos.toByteArray(), "AES");
    assertEquals(fileKey, handKey);
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\crypto\CryptoTest.java
  public void testAESKeyUtilsLoadKekFromUriInvalidUri() {
    assertThrows(CryptoException.class, () -> AESKeyUtils.loadKekFromUri(
        System.getProperty("user.dir") + "/target/CryptoTest-testkeyfile-doesnt-exist"));
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\crypto\CryptoTest.java
  public void testAESKeyUtilsLoadKekFromEmptyFile() {
    assertThrows(CryptoException.class, () -> AESKeyUtils.loadKekFromUri(emptyKeyPath));
  }

  private ArrayList<Key> testData() {
    ArrayList<Key> keys = new ArrayList<>();
    keys.add(new Key("a", "cf", "cq"));
    keys.add(new Key("a1", "cf", "cq"));
    keys.add(new Key("a2", "cf", "cq"));
    keys.add(new Key("a3", "cf", "cq"));
    return keys;
  }

  private <C extends CryptoService> byte[] encrypt(C cs, Scope scope, String configFile)
      throws Exception {
    AccumuloConfiguration conf = getAccumuloConfig(configFile);
    cs.init(conf.getAllPropertiesWithPrefix(Property.INSTANCE_CRYPTO_PREFIX));
    CryptoEnvironmentImpl env = new CryptoEnvironmentImpl(scope, null);
    FileEncrypter encrypter = cs.getFileEncrypter(env);
    byte[] params = encrypter.getDecryptionParameters();

    assertNotNull("CryptoService returned null FileEncrypter", encrypter);

    ByteArrayOutputStream out = new ByteArrayOutputStream();
    DataOutputStream dataOut = new DataOutputStream(out);
    CryptoUtils.writeParams(params, dataOut);
    DataOutputStream encrypted =
        new DataOutputStream(encrypter.encryptStream(new NoFlushOutputStream(dataOut)));
    assertNotNull(encrypted);

    encrypted.writeUTF(MARKER_STRING);
    encrypted.writeInt(MARKER_INT);
    encrypted.close();
    dataOut.close();
    out.close();
    return out.toByteArray();
  }

  private void decrypt(byte[] resultingBytes, Scope scope, String configFile) throws Exception {
    try (DataInputStream dataIn = new DataInputStream(new ByteArrayInputStream(resultingBytes))) {
      byte[] params = CryptoUtils.readParams(dataIn);

      AccumuloConfiguration conf = getAccumuloConfig(configFile);
      CryptoService cryptoService = CryptoServiceFactory.newInstance(conf, ClassloaderType.JAVA);
      CryptoEnvironment env = new CryptoEnvironmentImpl(scope, params);

      FileDecrypter decrypter = cryptoService.getFileDecrypter(env);

      try (DataInputStream decrypted = new DataInputStream(decrypter.decryptStream(dataIn))) {
        String markerString = decrypted.readUTF();
        int markerInt = decrypted.readInt();

        assertEquals(MARKER_STRING, markerString);
        assertEquals(MARKER_INT, markerInt);
      }
    }
  }

  private String getStringifiedBytes(byte[] params, String s, int i) throws IOException {
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    DataOutputStream dataOut = new DataOutputStream(out);

    if (params != null) {
      dataOut.writeInt(params.length);
      dataOut.write(params);
    }
    dataOut.writeUTF(s);
    dataOut.writeInt(i);
    dataOut.close();
    byte[] stringMarkerBytes = out.toByteArray();
    return Arrays.toString(stringMarkerBytes);
  }

  // simple counter to just make sure crypto works with summaries
  public static class KeyCounter implements Summarizer {
    @Override
    public Collector collector(SummarizerConfiguration sc) {
      return new Collector() {

        long keys = 0;

        @Override
        public void accept(Key k, Value v) {
          if (!k.isDeleted())
            keys++;
        }

        @Override
        public void summarize(StatisticConsumer sc) {
          sc.accept("keys", keys);
        }
      };
    }

    @Override
    public Combiner combiner(SummarizerConfiguration sc) {
      return (m1, m2) -> m2.forEach((k, v) -> m1.merge(k, v, Long::sum));
    }
  }

}
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\ArrayByteSequenceTest.java
  public void testInvalidByteBufferBounds0() {
    abs = new ArrayByteSequence(data, -1, 0);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\ArrayByteSequenceTest.java
  public void testInvalidByteBufferBounds1() {
    abs = new ArrayByteSequence(data, data.length + 1, 0);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\ArrayByteSequenceTest.java
  public void testInvalidByteBufferBounds2() {
    abs = new ArrayByteSequence(data, 0, -1);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\ArrayByteSequenceTest.java
  public void testInvalidByteBufferBounds3() {
    abs = new ArrayByteSequence(data, 6, 2);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\ArrayByteSequenceTest.java
  public void testInvalidByteAt0() {
    abs.byteAt(-1);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\ArrayByteSequenceTest.java
  public void testInvalidByteAt1() {
    abs.byteAt(data.length);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\ArrayByteSequenceTest.java
  public void testSubSequence() {
    assertEquals(0, abs.subSequence(0, 0).length());
    assertEquals("mile", abs.subSequence(1, 5).toString());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\ArrayByteSequenceTest.java
  public void testInvalidSubsequence0() {
    abs.subSequence(5, 1);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\ArrayByteSequenceTest.java
  public void testInvalidSubsequence1() {
    abs.subSequence(-1, 1);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\ArrayByteSequenceTest.java
  public void testInvalidSubsequence3() {
    abs.subSequence(0, 10);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\ArrayByteSequenceTest.java
  public void testFromByteBuffer() {
    ByteBuffer bb = ByteBuffer.wrap(data, 1, 4);
    abs = new ArrayByteSequence(bb);

    assertEquals("mile", abs.toString());

    bb = bb.asReadOnlyBuffer();
    abs = new ArrayByteSequence(bb);

    assertEquals("mile", abs.toString());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\ArrayByteSequenceTest.java
  public void testToString() {
    assertEquals("String conversion should round trip correctly", "",
        new ArrayByteSequence("").toString());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\ByteSequenceTest.java
  public void testCompareBytes() {
    ByteSequence a = new ArrayByteSequence("a");
    ByteSequence b = new ArrayByteSequence("b");
    ByteSequence abc = new ArrayByteSequence("abc");

    assertLessThan(a, b);
    assertLessThan(a, abc);
    assertLessThan(abc, b);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\ColumnTest.java
  public void testEquals() {
    for (int i = 0; i < col.length; i++) {
      for (int j = 0; j < col.length; j++) {
        if (i == j || (i == 0 && j == 1) || (i == 1 && j == 0))
          assertTrue(col[i].equals(col[j]));
        else
          assertFalse(col[i].equals(col[j]));
      }
    }
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\ColumnTest.java
  public void testCompare() {
    for (int i = 0; i < col.length; i++) {
      for (int j = 0; j < col.length; j++) {
        if (i == j || (i == 0 && j == 1) || (i == 1 && j == 0))
          assertEquals(0, col[i].compareTo(col[j]));
        else
          assertNotEquals(0, col[i].compareTo(col[j]));
      }
    }
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\ColumnTest.java
  public void testEqualsCompare() {
    for (Column value : col)
      for (Column column : col)
        assertEquals(value.equals(column), value.compareTo(column) == 0);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\ColumnTest.java
  public void testWriteReadFields() throws IOException {
    for (Column c : col) {
      ByteArrayOutputStream baos = new ByteArrayOutputStream();
      c.write(new DataOutputStream(baos));

      Column other = new Column();
      other.readFields(new DataInputStream(new ByteArrayInputStream(baos.toByteArray())));

      assertEquals(c, other);
    }
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\ColumnTest.java
  public void testThriftRoundTrip() {
    for (Column c : col) {
      TColumn tc = c.toThrift();
      assertEquals(c, new Column(tc));
    }
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\ConditionalMutationTest.java
  public void testConstruction_ByteArray() {
    assertArrayEquals(ROW, cm.getRow());
    List<Condition> cs = cm.getConditions();
    assertEquals(2, cs.size());
    assertEquals(c1, cs.get(0));
    assertEquals(c2, cs.get(1));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\ConditionalMutationTest.java
  public void testConstruction_ByteArray_StartAndLength() {
    cm = new ConditionalMutation(ROW, 1, 1, c1, c2);
    assertArrayEquals("o".getBytes(UTF_8), cm.getRow());
    List<Condition> cs = cm.getConditions();
    assertEquals(2, cs.size());
    assertEquals(c1, cs.get(0));
    assertEquals(c2, cs.get(1));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\ConditionalMutationTest.java
  public void testConstruction_Text() {
    cm = new ConditionalMutation(new Text(ROW), c1, c2);
    assertArrayEquals(ROW, cm.getRow());
    List<Condition> cs = cm.getConditions();
    assertEquals(2, cs.size());
    assertEquals(c1, cs.get(0));
    assertEquals(c2, cs.get(1));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\ConditionalMutationTest.java
  public void testConstruction_CharSequence() {
    cm = new ConditionalMutation(new String(ROW, UTF_8), c1, c2);
    assertArrayEquals(ROW, cm.getRow());
    List<Condition> cs = cm.getConditions();
    assertEquals(2, cs.size());
    assertEquals(c1, cs.get(0));
    assertEquals(c2, cs.get(1));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\ConditionalMutationTest.java
  public void testConstruction_ByteSequence() {
    cm = new ConditionalMutation(new ArrayByteSequence(ROW), c1, c2);
    assertArrayEquals(ROW, cm.getRow());
    List<Condition> cs = cm.getConditions();
    assertEquals(2, cs.size());
    assertEquals(c1, cs.get(0));
    assertEquals(c2, cs.get(1));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\ConditionalMutationTest.java
  public void testCopyConstructor() {
    ConditionalMutation cm2 = new ConditionalMutation(cm);
    assertArrayEquals(cm.getRow(), cm2.getRow());
    assertEquals(cm.getConditions(), cm2.getConditions());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\ConditionalMutationTest.java
  public void testAddCondition() {
    Condition c3 = new Condition(FAMILY, QUALIFIER3);
    cm.addCondition(c3);
    List<Condition> cs = cm.getConditions();
    assertEquals(3, cs.size());
    assertEquals(c1, cs.get(0));
    assertEquals(c2, cs.get(1));
    assertEquals(c3, cs.get(2));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\ConditionalMutationTest.java
  public void testEquals() {
    // reflexivity
    assertTrue(cm.equals(cm));

    // non-nullity
    assertNotEquals(cm, (Object) null);

    // symmetry
    ConditionalMutation cm2 = new ConditionalMutation(ROW, c1, c2);
    assertTrue(cm.equals(cm2));
    assertTrue(cm2.equals(cm));

    ConditionalMutation cm3 = new ConditionalMutation("row2".getBytes(UTF_8), c1, c2);
    assertFalse(cm.equals(cm3));
    cm3 = new ConditionalMutation(ROW, c2, c1);
    assertNotEquals(cm.getConditions(), cm3.getConditions());
    assertFalse(cm.equals(cm3));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\ConditionalMutationTest.java
  public void testEquals_Mutation() {
    Mutation m = new Mutation(ROW);
    assertFalse(m.equals(cm));
    assertFalse(cm.equals(m));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\ConditionalMutationTest.java
  public void testHashcode() {
    ConditionalMutation cm2 = new ConditionalMutation(ROW, c1, c2);
    assertTrue(cm.equals(cm2));
    assertEquals(cm2.hashCode(), cm.hashCode());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\ConditionTest.java
  public void testConstruction_CharSequence() {
    assertEquals(FAMILY, toString(c.getFamily()));
    assertEquals(QUALIFIER, toString(c.getQualifier()));
    assertEquals(EMPTY, c.getVisibility());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\ConditionTest.java
  public void testConstruction_ByteArray() {
    c = new Condition(FAMILY.getBytes(UTF_8), QUALIFIER.getBytes(UTF_8));
    assertEquals(FAMILY, toString(c.getFamily()));
    assertEquals(QUALIFIER, toString(c.getQualifier()));
    assertEquals(EMPTY, c.getVisibility());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\ConditionTest.java
  public void testConstruction_Text() {
    c = new Condition(new Text(FAMILY), new Text(QUALIFIER));
    assertEquals(FAMILY, toString(c.getFamily()));
    assertEquals(QUALIFIER, toString(c.getQualifier()));
    assertEquals(EMPTY, c.getVisibility());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\ConditionTest.java
  public void testConstruction_ByteSequence() {
    c = new Condition(new ArrayByteSequence(FAMILY.getBytes(UTF_8)),
        new ArrayByteSequence(QUALIFIER.getBytes(UTF_8)));
    assertEquals(FAMILY, toString(c.getFamily()));
    assertEquals(QUALIFIER, toString(c.getQualifier()));
    assertEquals(EMPTY, c.getVisibility());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\ConditionTest.java
  public void testGetSetTimestamp() {
    c.setTimestamp(1234L);
    assertEquals(Long.valueOf(1234L), c.getTimestamp());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\ConditionTest.java
  public void testSetValue_CharSequence() {
    c.setValue(VALUE);
    assertEquals(VALUE, toString(c.getValue()));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\ConditionTest.java
  public void testSetValue_ByteArray() {
    c.setValue(VALUE.getBytes(UTF_8));
    assertEquals(VALUE, toString(c.getValue()));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\ConditionTest.java
  public void testSetValue_Text() {
    c.setValue(new Text(VALUE));
    assertEquals(VALUE, toString(c.getValue()));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\ConditionTest.java
  public void testSetValue_ByteSequence() {
    c.setValue(new ArrayByteSequence(VALUE.getBytes(UTF_8)));
    assertEquals(VALUE, toString(c.getValue()));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\ConditionTest.java
  public void testGetSetVisibility() {
    ColumnVisibility vis = new ColumnVisibility(VISIBILITY);
    c.setVisibility(vis);
    assertEquals(VISIBILITY, toString(c.getVisibility()));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\ConditionTest.java
  public void testGetSetIterators() {
    c.setIterators(ITERATORS);
    assertArrayEquals(ITERATORS, c.getIterators());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\ConditionTest.java
  public void testSetIterators_DuplicateName() {
    IteratorSetting[] iterators = {new IteratorSetting(1, "first", "someclass"),
        new IteratorSetting(2, "second", "someotherclass"),
        new IteratorSetting(3, "first", "yetanotherclass")};
    c.setIterators(iterators);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\ConditionTest.java
  public void testSetIterators_DuplicatePriority() {
    IteratorSetting[] iterators = {new IteratorSetting(1, "first", "someclass"),
        new IteratorSetting(2, "second", "someotherclass"),
        new IteratorSetting(1, "third", "yetanotherclass")};
    c.setIterators(iterators);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\ConditionTest.java
  public void testEquals() {
    ColumnVisibility cvis = new ColumnVisibility(VISIBILITY);
    c.setVisibility(cvis);
    c.setValue(VALUE);
    c.setTimestamp(1234L);
    c.setIterators(ITERATORS);

    // reflexivity
    assertEquals(c, c);

    // non-nullity
    assertFalse(c.equals(null));

    // symmetry
    Condition c2 = new Condition(FAMILY, QUALIFIER);
    c2.setVisibility(cvis);
    c2.setValue(VALUE);
    c2.setTimestamp(1234L);
    c2.setIterators(ITERATORS);
    assertEquals(c, c2);
    assertEquals(c2, c);

    Condition c3 = new Condition("nope", QUALIFIER);
    c3.setVisibility(cvis);
    c3.setValue(VALUE);
    c3.setTimestamp(1234L);
    c3.setIterators(ITERATORS);
    assertNotEquals(c, c3);
    assertNotEquals(c3, c);
    c3 = new Condition(FAMILY, "nope");
    c3.setVisibility(cvis);
    c3.setValue(VALUE);
    c3.setTimestamp(1234L);
    c3.setIterators(ITERATORS);
    assertNotEquals(c, c3);
    assertNotEquals(c3, c);

    c2.setVisibility(new ColumnVisibility("sekrit"));
    assertNotEquals(c, c2);
    assertNotEquals(c2, c);
    c2.setVisibility(cvis);
    c2.setValue(EMPTY);
    assertNotEquals(c, c2);
    assertNotEquals(c2, c);
    c2.setValue(VALUE);
    c2.setTimestamp(2345L);
    assertNotEquals(c, c2);
    assertNotEquals(c2, c);
    c2.setTimestamp(1234L);
    c2.setIterators();
    assertNotEquals(c, c2);
    assertNotEquals(c2, c);
    c2.setIterators(ITERATORS);
    assertEquals(c, c2);
    assertEquals(c2, c);

    // set everything but vis, so its null
    Condition c4 = new Condition(FAMILY, QUALIFIER);
    c4.setValue(VALUE);
    c4.setTimestamp(1234L);
    c4.setIterators(ITERATORS);

    assertNotEquals(c, c4);
    assertNotEquals(c4, c);

    // set everything but timestamp, so its null
    Condition c5 = new Condition(FAMILY, QUALIFIER);
    c5.setVisibility(cvis);
    c5.setValue(VALUE);
    c5.setIterators(ITERATORS);

    assertNotEquals(c, c5);
    assertNotEquals(c5, c);

    // set everything but value
    Condition c6 = new Condition(FAMILY, QUALIFIER);
    c6.setVisibility(cvis);
    c6.setTimestamp(1234L);
    c6.setIterators(ITERATORS);

    assertNotEquals(c, c6);
    assertNotEquals(c6, c);

    // test w/ no optional fields set
    Condition c7 = new Condition(FAMILY, QUALIFIER);
    Condition c8 = new Condition(FAMILY, QUALIFIER);
    assertEquals(c7, c8);
    assertEquals(c8, c7);

  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\ConditionTest.java
  public void testHashCode() {
    ColumnVisibility cvis = new ColumnVisibility(VISIBILITY);
    c.setVisibility(cvis);
    c.setValue(VALUE);
    c.setTimestamp(1234L);
    c.setIterators(ITERATORS);
    int hc1 = c.hashCode();

    Condition c2 = new Condition(FAMILY, QUALIFIER);
    c2.setVisibility(cvis);
    c2.setValue(VALUE);
    c2.setTimestamp(1234L);
    c2.setIterators(ITERATORS);
    assertEquals(c, c2);
    assertEquals(hc1, c2.hashCode());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\ConstraintViolationSummaryTest.java
  public void testToString() {
    ConstraintViolationSummary cvs =
        new ConstraintViolationSummary("fooClass", (short) 1, "fooDescription", 100L);
    assertEquals("ConstraintViolationSummary(constrainClass:fooClass,"
        + " violationCode:1, violationDescription:fooDescription,"
        + " numberOfViolatingMutations:100)", cvs.toString());

    cvs = new ConstraintViolationSummary(null, (short) 2, null, 101L);
    assertEquals(
        "ConstraintViolationSummary(constrainClass:null,"
            + " violationCode:2, violationDescription:null," + " numberOfViolatingMutations:101)",
        cvs.toString());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\KeyBuilderTest.java
  public void testKeyBuildingFromRow() {
    Key keyBuilt = Key.builder().row("foo").build();
    Key keyExpected = new Key("foo");
    assertEquals(keyExpected, keyBuilt);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\KeyBuilderTest.java
  public void testKeyBuildingFromRowFamily() {
    Key keyBuilt = Key.builder().row("foo").family("bar").build();
    Key keyExpected = new Key("foo", "bar");
    assertEquals(keyExpected, keyBuilt);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\KeyBuilderTest.java
  public void testKeyBuildingFromRowFamilyQualifier() {
    Key keyBuilt = Key.builder().row("foo").family("bar").qualifier("baz").build();
    Key keyExpected = new Key("foo", "bar", "baz");
    assertEquals(keyExpected, keyBuilt);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\KeyBuilderTest.java
  public void testKeyBuildingFromRowFamilyQualifierVisibility() {
    Key keyBuilt = Key.builder().row("foo").family("bar").qualifier("baz").visibility("v").build();
    Key keyExpected = new Key("foo", "bar", "baz", "v");
    assertEquals(keyExpected, keyBuilt);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\KeyBuilderTest.java
  public void testKeyBuildingFromRowFamilyQualifierVisibilityTimestamp() {
    Key keyBuilt = Key.builder().row("foo").family("bar").qualifier("baz").visibility("v")
        .timestamp(1L).build();
    Key keyExpected = new Key("foo", "bar", "baz", "v", 1L);
    assertEquals(keyExpected, keyBuilt);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\KeyBuilderTest.java
  public void testKeyBuildingFromRowFamilyQualifierVisibilityTimestampDeleted() {
    Key keyBuilt = Key.builder().row("foo").family("bar").qualifier("baz").visibility("v")
        .timestamp(10L).deleted(true).build();
    Key keyExpected = new Key("foo", "bar", "baz", "v", 10L);
    keyExpected.setDeleted(true);
    assertEquals(keyExpected, keyBuilt);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\KeyBuilderTest.java
  public void testKeyBuildingFromRowVisibility() {
    Key keyBuilt = Key.builder().row("foo").visibility("v").build();
    Key keyExpected = new Key("foo", "", "", "v");
    assertEquals(keyExpected, keyBuilt);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\KeyBuilderTest.java
  public void testKeyBuildingFromRowFamilyVisibility() {
    Key keyBuilt = Key.builder().row("foo").family("bar").visibility("v").build();
    Key keyExpected = new Key("foo", "bar", "", "v");
    assertEquals(keyExpected, keyBuilt);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\KeyBuilderTest.java
  public void textKeyBuildingFromRowTimestamp() {
    Key keyBuilt = Key.builder().row("foo").timestamp(3L).build();
    Key keyExpected = new Key("foo");
    keyExpected.setTimestamp(3L);
    assertEquals(keyExpected, keyBuilt);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\KeyBuilderTest.java
  public void testKeyBuildingFromRowBytes() {
    Key keyBuilt = Key.builder().row(rowBytes).build();
    Key keyExpected = new Key(rowBytes, EMPTY_BYTES, EMPTY_BYTES, EMPTY_BYTES, Long.MAX_VALUE);
    assertEquals(keyExpected, keyBuilt);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\KeyBuilderTest.java
  public void testKeyBuildingFromRowFamilyBytes() {
    Key keyBuilt = Key.builder().row(rowBytes).family(familyBytes).build();
    Key keyExpected = new Key(rowBytes, familyBytes, EMPTY_BYTES, EMPTY_BYTES, Long.MAX_VALUE);
    assertEquals(keyExpected, keyBuilt);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\KeyBuilderTest.java
  public void testKeyBuildingFromRowFamilyQualifierBytes() {
    Key keyBuilt =
        Key.builder().row(rowBytes).family(familyBytes).qualifier(qualifierBytes).build();
    Key keyExpected = new Key(rowBytes, familyBytes, qualifierBytes, EMPTY_BYTES, Long.MAX_VALUE);
    assertEquals(keyExpected, keyBuilt);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\KeyBuilderTest.java
  public void testKeyBuildingFromRowFamilyQualifierVisibilityBytes() {
    Key keyBuilt = Key.builder().row(rowBytes).family(familyBytes).qualifier(qualifierBytes)
        .visibility(visibilityBytes).build();
    Key keyExpected =
        new Key(rowBytes, familyBytes, qualifierBytes, visibilityBytes, Long.MAX_VALUE);
    assertEquals(keyExpected, keyBuilt);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\KeyBuilderTest.java
  public void testKeyBuildingFromRowFamilyQualifierVisibilityTimestampBytes() {
    Key keyBuilt = Key.builder().row(rowBytes).family(familyBytes).qualifier(qualifierBytes)
        .visibility(visibilityBytes).timestamp(1L).build();
    Key keyExpected = new Key(rowBytes, familyBytes, qualifierBytes, visibilityBytes, 1L);
    assertEquals(keyExpected, keyBuilt);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\KeyBuilderTest.java
  public void testKeyBuildingFromRowFamilyQualifierVisibilityTimestampDeletedBytes() {
    Key keyBuilt = Key.builder().row(rowBytes).family(familyBytes).qualifier(qualifierBytes)
        .visibility(visibilityBytes).timestamp(10L).deleted(true).build();
    Key keyExpected = new Key(rowBytes, familyBytes, qualifierBytes, visibilityBytes, 10L);
    keyExpected.setDeleted(true);
    assertEquals(keyExpected, keyBuilt);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\KeyBuilderTest.java
  public void testKeyBuildingFromRowVisibilityBytes() {
    Key keyBuilt = Key.builder().row(rowBytes).visibility(visibilityBytes).build();
    Key keyExpected = new Key(rowBytes, EMPTY_BYTES, EMPTY_BYTES, visibilityBytes, Long.MAX_VALUE);
    assertEquals(keyExpected, keyBuilt);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\KeyBuilderTest.java
  public void testKeyBuildingFromRowFamilyVisibilityBytes() {
    Key keyBuilt =
        Key.builder().row(rowBytes).family(familyBytes).visibility(visibilityBytes).build();
    Key keyExpected = new Key(rowBytes, familyBytes, EMPTY_BYTES, visibilityBytes, Long.MAX_VALUE);
    assertEquals(keyExpected, keyBuilt);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\KeyBuilderTest.java
  public void textKeyBuildingFromRowTimestampBytes() {
    Key keyBuilt = Key.builder().row(rowBytes).timestamp(3L).build();
    Key keyExpected = new Key(rowBytes, EMPTY_BYTES, EMPTY_BYTES, EMPTY_BYTES, Long.MAX_VALUE);
    keyExpected.setTimestamp(3L);
    assertEquals(keyExpected, keyBuilt);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\KeyBuilderTest.java
  public void testKeyBuildingFromRowText() {
    Key keyBuilt = Key.builder().row(rowText).build();
    Key keyExpected = new Key(rowText);
    assertEquals(keyExpected, keyBuilt);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\KeyBuilderTest.java
  public void testKeyBuildingFromRowFamilyText() {
    Key keyBuilt = Key.builder().row(rowText).family(familyText).build();
    Key keyExpected = new Key(rowText, familyText);
    assertEquals(keyExpected, keyBuilt);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\KeyBuilderTest.java
  public void testKeyBuildingFromRowFamilyQualifierText() {
    Key keyBuilt = Key.builder().row(rowText).family(familyText).qualifier(qualifierText).build();
    Key keyExpected = new Key(rowText, familyText, qualifierText);
    assertEquals(keyExpected, keyBuilt);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\KeyBuilderTest.java
  public void testKeyBuildingFromRowFamilyQualifierVisibilityText() {
    Key keyBuilt = Key.builder().row(rowText).family(familyText).qualifier(qualifierText)
        .visibility(visibilityText).build();
    Key keyExpected = new Key(rowText, familyText, qualifierText, visibilityText);
    assertEquals(keyExpected, keyBuilt);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\KeyBuilderTest.java
  public void testKeyBuildingFromRowFamilyQualifierVisibilityTimestampText() {
    Key keyBuilt = Key.builder().row(rowText).family(familyText).qualifier(qualifierText)
        .visibility(visibilityText).timestamp(1L).build();
    Key keyExpected = new Key(rowText, familyText, qualifierText, visibilityText, 1L);
    assertEquals(keyExpected, keyBuilt);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\KeyBuilderTest.java
  public void testKeyBuildingFromRowFamilyQualifierVisibilityTimestampDeletedText() {
    Key keyBuilt = Key.builder().row(rowText).family(familyText).qualifier(qualifierText)
        .visibility(visibilityText).timestamp(10L).deleted(true).build();
    Key keyExpected = new Key(rowText, familyText, qualifierText, visibilityText, 10L);
    keyExpected.setDeleted(true);
    assertEquals(keyExpected, keyBuilt);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\KeyBuilderTest.java
  public void testKeyBuildingFromRowVisibilityText() {
    Key keyBuilt = Key.builder().row(rowText).visibility(visibilityText).build();
    Key keyExpected = new Key(rowText, new Text(), new Text(), visibilityText);
    assertEquals(keyExpected, keyBuilt);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\KeyBuilderTest.java
  public void testKeyBuildingFromRowFamilyVisibilityText() {
    Key keyBuilt = Key.builder().row(rowText).family(familyText).visibility(visibilityText).build();
    Key keyExpected = new Key(rowText, familyText, new Text(), visibilityText);
    assertEquals(keyExpected, keyBuilt);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\KeyBuilderTest.java
  public void testKeyBuildingFromRowFamilyVisibilityVisibility() {
    Key keyBuilt =
        Key.builder().row(rowText).family(familyText).visibility(visibilityVisibility).build();
    Key keyExpected =
        new Key(rowText, familyText, new Text(), visibilityVisibility, Long.MAX_VALUE);
    assertEquals(keyExpected, keyBuilt);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\KeyBuilderTest.java
  public void testKeyBuildingFromRowTimestampText() {
    Key keyBuilt = Key.builder().row(rowText).timestamp(3L).build();
    Key keyExpected = new Key(rowText);
    keyExpected.setTimestamp(3L);
    assertEquals(keyExpected, keyBuilt);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\KeyBuilderTest.java
  public void testKeyBuildingReusingBytes() {
    byte[] reuse = {1, 2, 3};
    KeyBuilder.Build keyBuilder = Key.builder(false).row(reuse);
    Key keyBuilt = keyBuilder.build();
    assertSame(reuse, keyBuilt.getRowBytes());
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\KeyBuilderTest.java
  public void testKeyBuildingCopyBytes() {
    byte[] reuse = {1, 2, 3};
    KeyBuilder.Build keyBuilder = Key.builder(true).row(reuse);
    Key keyBuilt = keyBuilder.build();
    assertNotEquals(reuse, keyBuilt.getRowBytes());
    Key keyBuilt2 = keyBuilder.build();
    assertNotEquals(reuse, keyBuilt2.getRowBytes());
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\KeyBuilderTest.java
  public void testKeyHeterogeneous() {
    Key keyBuilt = Key.builder().row(rowText).family(familyBytes).qualifier("foo").build();
    Text fooText = new Text("foo");
    Key keyExpected =
        new Key(rowText.getBytes(), 0, rowText.getLength(), familyBytes, 0, familyBytes.length,
            fooText.getBytes(), 0, fooText.getLength(), EMPTY_BYTES, 0, 0, Long.MAX_VALUE);
    assertEquals(keyExpected, keyBuilt);
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\KeyBuilderTest.java
  public void testKeyUsingSubsetOfBytes() {
    Key keyBuilt = Key.builder().row(rowBytes, 0, rowBytes.length - 1).build();
    Key keyExpected = new Key(rowBytes, 0, rowBytes.length - 1, EMPTY_BYTES, 0, 0, EMPTY_BYTES, 0,
        0, EMPTY_BYTES, 0, 0, Long.MAX_VALUE);
    assertEquals(keyExpected, keyBuilt);
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\KeyBuilderTest.java
  public void testKeyBuildingWithMultipleTimestamps() {
    Key keyBuilt = Key.builder().row("r").timestamp(44).timestamp(99).build();
    Key keyExpected = new Key("r", "", "", 99);
    assertEquals(keyExpected, keyBuilt);
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\KeyBuilderTest.java
  public void testKeyBuildingWithMultipleDeleted() {
    Key keyBuilt = Key.builder().row("r").deleted(true).deleted(false).build();
    Key keyExpected = new Key("r");
    keyExpected.setDeleted(false);
    assertEquals(keyExpected, keyBuilt);
  }
}
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\KeyExtentTest.java
  public void testDecodingMetadataRow() {
    Text flattenedExtent = new Text("foo;bar");

    ke = KeyExtent.fromMetaRow(flattenedExtent);

    assertEquals(new Text("bar"), ke.endRow());
    assertEquals("foo", ke.tableId().canonical());
    assertNull(ke.prevEndRow());

    flattenedExtent = new Text("foo<");

    ke = KeyExtent.fromMetaRow(flattenedExtent);

    assertNull(ke.endRow());
    assertEquals("foo", ke.tableId().canonical());
    assertNull(ke.prevEndRow());

    flattenedExtent = new Text("foo;bar;");

    ke = KeyExtent.fromMetaRow(flattenedExtent);

    assertEquals(new Text("bar;"), ke.endRow());
    assertEquals("foo", ke.tableId().canonical());
    assertNull(ke.prevEndRow());

  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\KeyExtentTest.java
  public void testOverlaps() {
    SortedMap<KeyExtent,Object> set0 = new TreeMap<>();
    set0.put(nke("a", null, null), null);

    // Nothing overlaps with the empty set
    assertFalse(overlaps(nke("t", null, null), null));
    assertFalse(overlaps(nke("t", null, null), set0));

    SortedMap<KeyExtent,Object> set1 = new TreeMap<>();

    // Everything overlaps with the infinite range
    set1.put(nke("t", null, null), null);
    assertTrue(overlaps(nke("t", null, null), set1));
    assertTrue(overlaps(nke("t", "b", "a"), set1));
    assertTrue(overlaps(nke("t", null, "a"), set1));

    set1.put(nke("t", "b", "a"), null);
    assertTrue(overlaps(nke("t", null, null), set1));
    assertTrue(overlaps(nke("t", "b", "a"), set1));
    assertTrue(overlaps(nke("t", null, "a"), set1));

    // simple overlaps
    SortedMap<KeyExtent,Object> set2 = new TreeMap<>();
    set2.put(nke("a", null, null), null);
    set2.put(nke("t", "m", "j"), null);
    set2.put(nke("z", null, null), null);
    assertTrue(overlaps(nke("t", null, null), set2));
    assertTrue(overlaps(nke("t", "m", "j"), set2));
    assertTrue(overlaps(nke("t", "z", "a"), set2));
    assertFalse(overlaps(nke("t", "j", "a"), set2));
    assertFalse(overlaps(nke("t", "z", "m"), set2));

    // non-overlaps
    assertFalse(overlaps(nke("t", "b", "a"), set2));
    assertFalse(overlaps(nke("t", "z", "y"), set2));
    assertFalse(overlaps(nke("t", "b", null), set2));
    assertFalse(overlaps(nke("t", null, "y"), set2));
    assertFalse(overlaps(nke("t", "j", null), set2));
    assertFalse(overlaps(nke("t", null, "m"), set2));

    // infinite overlaps
    SortedMap<KeyExtent,Object> set3 = new TreeMap<>();
    set3.put(nke("t", "j", null), null);
    set3.put(nke("t", null, "m"), null);
    assertTrue(overlaps(nke("t", "k", "a"), set3));
    assertTrue(overlaps(nke("t", "k", null), set3));
    assertTrue(overlaps(nke("t", "z", "k"), set3));
    assertTrue(overlaps(nke("t", null, "k"), set3));
    assertTrue(overlaps(nke("t", null, null), set3));

    // falls between
    assertFalse(overlaps(nke("t", "l", "k"), set3));

    SortedMap<KeyExtent,Object> set4 = new TreeMap<>();
    set4.put(nke("t", null, null), null);
    assertTrue(overlaps(nke("t", "k", "a"), set4));
    assertTrue(overlaps(nke("t", "k", null), set4));
    assertTrue(overlaps(nke("t", "z", "k"), set4));
    assertTrue(overlaps(nke("t", null, "k"), set4));
    assertTrue(overlaps(nke("t", null, null), set4));
    assertTrue(overlaps(nke("t", null, null), set4));

    for (String er : new String[] {"z", "y", "r", null}) {
      for (String per : new String[] {"a", "b", "d", null}) {
        assertTrue(nke("t", "y", "b").overlaps(nke("t", er, per)));
        assertTrue(nke("t", "y", null).overlaps(nke("t", er, per)));
        assertTrue(nke("t", null, "b").overlaps(nke("t", er, per)));
        assertTrue(nke("t", null, null).overlaps(nke("t", er, per)));
      }
    }

    assertFalse(nke("t", "y", "b").overlaps(nke("t", "z", "y")));
    assertFalse(nke("t", "y", "b").overlaps(nke("t", null, "y")));
    assertFalse(nke("t", "y", null).overlaps(nke("t", "z", "y")));
    assertFalse(nke("t", "y", null).overlaps(nke("t", null, "y")));
    assertFalse(nke("t", "y", "b").overlaps(nke("t", "b", "a")));
    assertFalse(nke("t", "y", "b").overlaps(nke("t", "b", null)));
    assertFalse(nke("t", null, "b").overlaps(nke("t", "b", "a")));
    assertFalse(nke("t", null, "b").overlaps(nke("t", "b", null)));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\KeyExtentTest.java
  public void testWriteReadFields() throws Exception {
    ke = nke("t", "e", "b");
    assertEquals(ke, writeAndReadFields(ke));

    ke = nke("t", "e", null);
    assertEquals(ke, writeAndReadFields(ke));

    ke = nke("t", null, "b");
    assertEquals(ke, writeAndReadFields(ke));

    ke = nke("t", null, null);
    assertEquals(ke, writeAndReadFields(ke));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\KeyTest.java
  public void testDeletedCompare() {
    Key k1 = new Key("r1".getBytes(), "cf".getBytes(), "cq".getBytes(), new byte[0], 0, false);
    Key k2 = new Key("r1".getBytes(), "cf".getBytes(), "cq".getBytes(), new byte[0], 0, false);
    Key k3 = new Key("r1".getBytes(), "cf".getBytes(), "cq".getBytes(), new byte[0], 0, true);
    Key k4 = new Key("r1".getBytes(), "cf".getBytes(), "cq".getBytes(), new byte[0], 0, true);

    assertEquals(k1, k2);
    assertEquals(k3, k4);
    assertTrue(k1.compareTo(k3) > 0);
    assertTrue(k3.compareTo(k1) < 0);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\KeyTest.java
  public void testCopyData() {
    byte[] row = "r".getBytes();
    byte[] cf = "cf".getBytes();
    byte[] cq = "cq".getBytes();
    byte[] cv = "cv".getBytes();

    Key k1 = new Key(row, cf, cq, cv, 5L, false, false);
    Key k2 = new Key(row, cf, cq, cv, 5L, false, true);

    assertSame(row, k1.getRowBytes());
    assertSame(cf, k1.getColFamily());
    assertSame(cq, k1.getColQualifier());
    assertSame(cv, k1.getColVisibility());

    assertSame(row, k1.getRowData().getBackingArray());
    assertSame(cf, k1.getColumnFamilyData().getBackingArray());
    assertSame(cq, k1.getColumnQualifierData().getBackingArray());
    assertSame(cv, k1.getColumnVisibilityData().getBackingArray());

    assertNotSame(row, k2.getRowBytes());
    assertNotSame(cf, k2.getColFamily());
    assertNotSame(cq, k2.getColQualifier());
    assertNotSame(cv, k2.getColVisibility());

    assertNotSame(row, k2.getRowData().getBackingArray());
    assertNotSame(cf, k2.getColumnFamilyData().getBackingArray());
    assertNotSame(cq, k2.getColumnQualifierData().getBackingArray());
    assertNotSame(cv, k2.getColumnVisibilityData().getBackingArray());

    assertEquals(k1, k2);

  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\KeyTest.java
  public void testCopyDataWithByteArrayConstructors() {
    byte[] row = "r".getBytes();
    byte[] cf = "cf".getBytes();
    byte[] cq = "cq".getBytes();
    byte[] cv = "cv".getBytes();
    byte[] empty = "".getBytes();

    Key kRow = new Key(row);
    Key kRowcolFam = new Key(row, cf);
    Key kRowcolFamColQual = new Key(row, cf, cq);
    Key kRowcolFamColQualColVis = new Key(row, cf, cq, cv);
    Key kRowcolFamColQualColVisTimeStamp = new Key(row, cf, cq, cv, 5L);

    // test row constructor
    assertNotSameByteArray(kRow, row, empty, empty, empty);

    // test row, column family constructor
    assertNotSameByteArray(kRowcolFam, row, cf, empty, empty);

    // test row, column family, column qualifier constructor
    assertNotSameByteArray(kRowcolFamColQual, row, cf, cq, empty);

    // test row, column family, column qualifier, column visibility constructor
    assertNotSameByteArray(kRowcolFamColQualColVis, row, cf, cq, cv);

    // test row, column family, column qualifier, column visibility, timestamp constructor
    assertNotSameByteArray(kRowcolFamColQualColVisTimeStamp, row, cf, cq, cv);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\KeyTest.java
  public void testTextConstructorByteArrayConversion() {
    Text rowText = new Text("r");
    Text cfText = new Text("cf");
    Text cqText = new Text("cq");
    Text cvText = new Text("cv");

    // make Keys from Text parameters
    Key kRow = new Key(rowText);
    Key kRowColFam = new Key(rowText, cfText);
    Key kRowColFamColQual = new Key(rowText, cfText, cqText);
    Key kRowColFamColQualColVis = new Key(rowText, cfText, cqText, cvText);
    Key kRowColFamColQualColVisTimeStamp = new Key(rowText, cfText, cqText, cvText, 5L);

    // test row constructor
    assertTextValueConversionToByteArray(kRow);

    // test row, column family constructor
    assertTextValueConversionToByteArray(kRowColFam);

    // test row, column family, column qualifier constructor
    assertTextValueConversionToByteArray(kRowColFamColQual);

    // test row, column family, column qualifier, column visibility constructor
    assertTextValueConversionToByteArray(kRowColFamColQualColVis);

    // test row, column family, column qualifier, column visibility, timestamp constructor
    assertTextValueConversionToByteArray(kRowColFamColQualColVisTimeStamp);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\KeyTest.java
  public void testString() {
    Key k1 = new Key("r1");
    Key k2 = new Key(new Text("r1"));
    assertEquals(k2, k1);

    k1 = new Key("r1", "cf1");
    k2 = new Key(new Text("r1"), new Text("cf1"));
    assertEquals(k2, k1);

    k1 = new Key("r1", "cf2", "cq2");
    k2 = new Key(new Text("r1"), new Text("cf2"), new Text("cq2"));
    assertEquals(k2, k1);

    k1 = new Key("r1", "cf2", "cq2", "cv");
    k2 = new Key(new Text("r1"), new Text("cf2"), new Text("cq2"), new Text("cv"));
    assertEquals(k2, k1);

    k1 = new Key("r1", "cf2", "cq2", "cv", 89);
    k2 = new Key(new Text("r1"), new Text("cf2"), new Text("cq2"), new Text("cv"), 89);
    assertEquals(k2, k1);

    k1 = new Key("r1", "cf2", "cq2", 89);
    k2 = new Key(new Text("r1"), new Text("cf2"), new Text("cq2"), 89);
    assertEquals(k2, k1);

  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\KeyTest.java
  public void testVisibilityFollowingKey() {
    Key k = new Key("r", "f", "q", "v");
    assertEquals(k.followingKey(PartialKey.ROW_COLFAM_COLQUAL_COLVIS).toString(),
        "r f:q [v%00;] " + Long.MAX_VALUE + " false");
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\KeyTest.java
  public void testVisibilityGetters() {
    Key k = new Key("r", "f", "q", "v1|(v2&v3)");

    Text expression = k.getColumnVisibility();
    ColumnVisibility parsed = k.getColumnVisibilityParsed();

    assertEquals(expression, new Text(parsed.getExpression()));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\KeyTest.java
  public void testThrift() {
    Key k = new Key("r1", "cf2", "cq2", "cv");
    TKey tk = k.toThrift();
    Key k2 = new Key(tk);
    assertEquals(k, k2);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\KeyTest.java
  public void testThrift_Invalid() {
    Key k = new Key("r1", "cf2", "cq2", "cv");
    TKey tk = k.toThrift();
    tk.setRow((byte[]) null);
    new Key(tk);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\KeyTest.java
  public void testCompressDecompress() {
    List<KeyValue> kvs = new ArrayList<>();
    kvs.add(new KeyValue(new Key(), new byte[] {}));
    kvs.add(new KeyValue(new Key("r"), new byte[] {}));
    kvs.add(new KeyValue(new Key("r", "cf"), new byte[] {}));
    kvs.add(new KeyValue(new Key("r2", "cf"), new byte[] {}));
    kvs.add(new KeyValue(new Key("r", "cf", "cq"), new byte[] {}));
    kvs.add(new KeyValue(new Key("r2", "cf2", "cq"), new byte[] {}));
    kvs.add(new KeyValue(new Key("r", "cf", "cq", "cv"), new byte[] {}));
    kvs.add(new KeyValue(new Key("r2", "cf2", "cq2", "cv"), new byte[] {}));
    kvs.add(new KeyValue(new Key("r2", "cf2", "cq2", "cv"), new byte[] {}));
    kvs.add(new KeyValue(new Key(), new byte[] {}));

    List<TKeyValue> tkvs = Key.compress(kvs);
    Key.decompress(tkvs);

    assertEquals(kvs.size(), tkvs.size());
    Iterator<KeyValue> kvi = kvs.iterator();
    Iterator<TKeyValue> tkvi = tkvs.iterator();

    while (kvi.hasNext()) {
      KeyValue kv = kvi.next();
      TKeyValue tkv = tkvi.next();
      assertEquals(kv.getKey(), new Key(tkv.getKey()));
    }
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\KeyTest.java
  public void testBytesText() {
    byte[] row = {1};
    Key bytesRowKey = new Key(row);
    Key textRowKey = new Key(new Text(row));
    assertEquals(bytesRowKey, textRowKey);

    byte[] colFamily = {0, 1};
    Key bytesColFamilyKey = new Key(row, colFamily);
    Key textColFamilyKey = new Key(new Text(row), new Text(colFamily));
    assertEquals(bytesColFamilyKey, textColFamilyKey);

    byte[] colQualifier = {0, 0, 1};
    Key bytesColQualifierKey = new Key(row, colFamily, colQualifier);
    Key textColQualifierKey = new Key(new Text(row), new Text(colFamily), new Text(colQualifier));
    assertEquals(bytesColQualifierKey, textColQualifierKey);

    byte[] colVisibility = {0, 0, 0, 1};
    Key bytesColVisibilityKey = new Key(row, colFamily, colQualifier, colVisibility);
    Key textColVisibilityKey = new Key(new Text(row), new Text(colFamily), new Text(colQualifier),
        new Text(colVisibility));
    assertEquals(bytesColVisibilityKey, textColVisibilityKey);

    long ts = 0L;
    Key bytesTSKey = new Key(row, colFamily, colQualifier, colVisibility, ts);
    Key textTSKey = new Key(new Text(row), new Text(colFamily), new Text(colQualifier),
        new Text(colVisibility), ts);
    assertEquals(bytesTSKey, textTSKey);

    Key bytesTSKey2 = new Key(row, ts);
    Key textTSKey2 = new Key(new Text(row), ts);
    assertEquals(bytesTSKey2, textTSKey2);

    Key bytesTSKey3 = new Key(row, colFamily, colQualifier, ts);
    Key testTSKey3 = new Key(new Text(row), new Text(colFamily), new Text(colQualifier), ts);
    assertEquals(bytesTSKey3, testTSKey3);

    ColumnVisibility colVisibility2 = new ColumnVisibility("v1");
    Key bytesColVisibilityKey2 = new Key(row, colFamily, colQualifier, colVisibility2, ts);
    Key textColVisibilityKey2 =
        new Key(new Text(row), new Text(colFamily), new Text(colQualifier), colVisibility2, ts);
    assertEquals(bytesColVisibilityKey2, textColVisibilityKey2);
  }
}
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\LoadPlanTest.java
  public void testBadRange1() {
    LoadPlan.builder().loadFileTo("f1.rf", RangeType.TABLE, "a", "a").build();
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\LoadPlanTest.java
  public void testBadRange2() {
    LoadPlan.builder().loadFileTo("f1.rf", RangeType.TABLE, "b", "a").build();
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\LoadPlanTest.java
  public void testBadRange3() {
    LoadPlan.builder().loadFileTo("f1.rf", RangeType.FILE, "b", "a").build();
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\LoadPlanTest.java
  public void testBadRange4() {
    LoadPlan.builder().loadFileTo("f1.rf", RangeType.FILE, null, "a").build();
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\LoadPlanTest.java
  public void testBadRange5() {
    LoadPlan.builder().loadFileTo("f1.rf", RangeType.FILE, "a", null).build();
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\LoadPlanTest.java
  public void testTypes() {
    LoadPlan loadPlan = LoadPlan.builder().loadFileTo("f1.rf", RangeType.FILE, "1112", "1145")
        .loadFileTo("f2.rf", RangeType.FILE, "abc".getBytes(UTF_8), "def".getBytes(UTF_8))
        .loadFileTo("f3.rf", RangeType.FILE, new Text("368"), new Text("479"))
        .loadFileTo("f4.rf", RangeType.TABLE, null, "aaa")
        .loadFileTo("f5.rf", RangeType.TABLE, "yyy", null)
        .loadFileTo("f6.rf", RangeType.TABLE, null, "bbb".getBytes(UTF_8))
        .loadFileTo("f7.rf", RangeType.TABLE, "www".getBytes(UTF_8), null)
        .loadFileTo("f8.rf", RangeType.TABLE, null, new Text("ccc"))
        .loadFileTo("f9.rf", RangeType.TABLE, new Text("xxx"), null)
        .loadFileTo("fa.rf", RangeType.TABLE, "1138", "1147")
        .loadFileTo("fb.rf", RangeType.TABLE, "heg".getBytes(UTF_8), "klt".getBytes(UTF_8))
        .loadFileTo("fc.rf", RangeType.TABLE, new Text("agt"), new Text("ctt"))
        .addPlan(
            LoadPlan.builder().loadFileTo("fd.rf", RangeType.TABLE, (String) null, null).build())
        .build();

    Set<String> expected = new HashSet<>();
    expected.add("f1.rf:FILE:1112:1145");
    expected.add("f2.rf:FILE:abc:def");
    expected.add("f3.rf:FILE:368:479");
    expected.add("f4.rf:TABLE:null:aaa");
    expected.add("f5.rf:TABLE:yyy:null");
    expected.add("f6.rf:TABLE:null:bbb");
    expected.add("f7.rf:TABLE:www:null");
    expected.add("f8.rf:TABLE:null:ccc");
    expected.add("f9.rf:TABLE:xxx:null");
    expected.add("fa.rf:TABLE:1138:1147");
    expected.add("fb.rf:TABLE:heg:klt");
    expected.add("fc.rf:TABLE:agt:ctt");
    expected.add("fd.rf:TABLE:null:null");

    Set<String> actual =
        loadPlan.getDestinations().stream().map(LoadPlanTest::toString).collect(toSet());

    assertEquals(expected, actual);

  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\MutationTest.java
  public void test1() {
    Mutation m = new Mutation(new Text("r1"));
    m.put(new Text("cf1"), new Text("cq1"), new Value("v1"));

    List<ColumnUpdate> updates = m.getUpdates();

    assertEquals(1, updates.size());

    ColumnUpdate cu = updates.get(0);

    assertEquals("cf1", new String(cu.getColumnFamily()));
    assertEquals("cq1", new String(cu.getColumnQualifier()));
    assertEquals("", new String(cu.getColumnVisibility()));
    assertFalse(cu.hasTimestamp());

  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\MutationTest.java
  public void test2() throws IOException {
    Mutation m = new Mutation(new Text("r1"));
    m.put(new Text("cf1"), new Text("cq1"), new Value("v1"));
    m.put(new Text("cf2"), new Text("cq2"), 56, new Value("v2"));

    List<ColumnUpdate> updates = m.getUpdates();

    assertEquals(2, updates.size());

    assertEquals("r1", new String(m.getRow()));
    ColumnUpdate cu = updates.get(0);

    assertEquals("cf1", new String(cu.getColumnFamily()));
    assertEquals("cq1", new String(cu.getColumnQualifier()));
    assertEquals("", new String(cu.getColumnVisibility()));
    assertFalse(cu.hasTimestamp());

    cu = updates.get(1);

    assertEquals("cf2", new String(cu.getColumnFamily()));
    assertEquals("cq2", new String(cu.getColumnQualifier()));
    assertEquals("", new String(cu.getColumnVisibility()));
    assertTrue(cu.hasTimestamp());
    assertEquals(56, cu.getTimestamp());

    m = cloneMutation(m);

    assertEquals("r1", new String(m.getRow()));
    updates = m.getUpdates();

    assertEquals(2, updates.size());

    cu = updates.get(0);

    assertEquals("cf1", new String(cu.getColumnFamily()));
    assertEquals("cq1", new String(cu.getColumnQualifier()));
    assertEquals("", new String(cu.getColumnVisibility()));
    assertFalse(cu.hasTimestamp());

    cu = updates.get(1);

    assertEquals("cf2", new String(cu.getColumnFamily()));
    assertEquals("cq2", new String(cu.getColumnQualifier()));
    assertEquals("", new String(cu.getColumnVisibility()));
    assertTrue(cu.hasTimestamp());
    assertEquals(56, cu.getTimestamp());

  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\MutationTest.java
  public void test3() throws IOException {
    Mutation m = new Mutation(new Text("r1"));
    for (int i = 0; i < 5; i++) {
      int len = Mutation.VALUE_SIZE_COPY_CUTOFF - 2 + i;
      byte[] val = new byte[len];
      for (int j = 0; j < len; j++)
        val[j] = (byte) i;

      m.put(new Text("cf" + i), new Text("cq" + i), new Value(val));

    }

    for (int r = 0; r < 3; r++) {
      assertEquals("r1", new String(m.getRow()));
      List<ColumnUpdate> updates = m.getUpdates();
      assertEquals(5, updates.size());
      for (int i = 0; i < 5; i++) {
        ColumnUpdate cu = updates.get(i);
        assertEquals("cf" + i, new String(cu.getColumnFamily()));
        assertEquals("cq" + i, new String(cu.getColumnQualifier()));
        assertEquals("", new String(cu.getColumnVisibility()));
        assertFalse(cu.hasTimestamp());

        byte[] val = cu.getValue();
        int len = Mutation.VALUE_SIZE_COPY_CUTOFF - 2 + i;
        assertEquals(len, val.length);
        for (int j = 0; j < len; j++)
          assertEquals(i, val[j]);
      }

      m = cloneMutation(m);
    }
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\MutationTest.java
  public void testAtFamilyTypes() {
    final String fam = "f16bc";
    final String qual = "q1pm2";
    final String val = "v8672194923750";

    Mutation expected = new Mutation("row5");
    expected.put(fam, qual, val);

    // Test all family methods, keeping qual and val constant as Strings
    // fam: byte[]
    Mutation actual = new Mutation("row5");
    actual.at().family(fam.getBytes(UTF_8)).qualifier(qual).put(val);
    assertEquals(expected, actual);

    // fam: ByteBuffer
    final ByteBuffer bbFam = ByteBuffer.wrap(fam.getBytes(UTF_8));
    final int bbFamStartPos = bbFam.position();
    actual = new Mutation("row5");
    actual.at().family(bbFam).qualifier(qual).put(val);
    assertEquals(expected, actual);

    // make sure the ByteBuffer last byte filled in the buffer (its position) is same as before the
    // API call
    assertEquals(bbFamStartPos, bbFam.position());

    // fam: CharSequence (String implementation)
    actual = new Mutation("row5");
    actual.at().family(fam).qualifier(qual).put(val);
    assertEquals(expected, actual);

    // fam: Text
    actual = new Mutation("row5");
    actual.at().family(new Text(fam)).qualifier(qual).put(val);
    assertEquals(expected, actual);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\MutationTest.java
  public void testAtQualifierTypes() {
    final String fam = "f16bc";
    final String qual = "q1pm2";
    final String val = "v8672194923750";

    Mutation expected = new Mutation("row5");
    expected.put(fam, qual, val);

    // Test all qualifier methods, keeping fam and val constant as Strings
    // qual: byte[]
    Mutation actual = new Mutation("row5");
    actual.at().family(fam).qualifier(qual.getBytes(UTF_8)).put(val);
    assertEquals(expected, actual);

    // qual: ByteBuffer
    final ByteBuffer bbQual = ByteBuffer.wrap(qual.getBytes(UTF_8));
    final int bbQualStartPos = bbQual.position();
    actual = new Mutation("row5");
    actual.at().family(fam).qualifier(bbQual).put(val);
    assertEquals(expected, actual);

    // make sure the ByteBuffer last byte filled in the buffer (its position) is same as before the
    // API call
    assertEquals(bbQualStartPos, bbQual.position());

    // qual: CharSequence (String implementation)
    actual = new Mutation("row5");
    actual.at().family(fam).qualifier(qual).put(val);
    assertEquals(expected, actual);

    // qual: Text
    actual = new Mutation("row5");
    actual.at().family(fam).qualifier(new Text(qual)).put(val);
    assertEquals(expected, actual);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\MutationTest.java
  public void testAtVisiblityTypes() {
    final byte[] fam = "f16bc".getBytes(UTF_8);
    final byte[] qual = "q1pm2".getBytes(UTF_8);
    final ColumnVisibility vis = new ColumnVisibility("v35x2");
    final byte[] val = "v8672194923750".getBytes(UTF_8);

    Mutation expected = new Mutation("row5");
    expected.put(fam, qual, vis, val);

    // Test all visibility methods, keeping fam, qual, and val constant as byte arrays
    // vis: byte[]
    Mutation actual = new Mutation("row5");
    actual.at().family(fam).qualifier(qual).visibility(vis.getExpression()).put(val);
    assertEquals(expected, actual);

    // vis: ByteBuffer
    final ByteBuffer bbVis = ByteBuffer.wrap(vis.getExpression());
    final int bbVisStartPos = bbVis.position();
    actual = new Mutation("row5");
    actual.at().family(fam).qualifier(qual).visibility(bbVis).put(val);
    assertEquals(expected, actual);

    // make sure the ByteBuffer last byte filled in the buffer (its position) is same as before the
    // API call
    assertEquals(bbVisStartPos, bbVis.position());

    // vis: CharSequence (String implementation)
    actual = new Mutation("row5");
    actual.at().family(fam).qualifier(qual).visibility(new String(vis.getExpression())).put(val);
    assertEquals(expected, actual);

    // vis: ColumnVisibility
    actual = new Mutation("row5");
    actual.at().family(fam).qualifier(qual).visibility(vis).put(val);
    assertEquals(expected, actual);

    // vis: Text
    actual = new Mutation("row5");
    actual.at().family(fam).qualifier(qual).visibility(new Text(vis.getExpression())).put(val);
    assertEquals(expected, actual);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\MutationTest.java
  public void testAtTimestampTypes() {
    final String fam = "f16bc";
    final String qual = "q1pm2";
    final long ts = 324324L;
    final String val = "v8672194923750";

    Mutation expected = new Mutation("row5");
    expected.put(fam, qual, ts, val);

    // Test timestamp method, keeping fam and val constant as Strings
    Mutation actual = new Mutation("row5");
    actual.at().family(fam).qualifier(qual).timestamp(ts).put(val);
    assertEquals(expected, actual);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\MutationTest.java
  public void testAtPutTypes() {
    final String fam = "f16bc";
    final String qual = "q1pm2";
    final String val = "v8672194923750";

    Mutation expected = new Mutation("row5");
    expected.put(fam, qual, val);

    // Test all pull methods, keeping fam and qual,constant as Strings
    // put: byte[]
    Mutation actual = new Mutation("row5");
    actual.at().family(fam).qualifier(qual).put(val.getBytes(UTF_8));
    assertEquals(expected, actual);

    // put: ByteBuffer
    final ByteBuffer bbVal = ByteBuffer.wrap(val.getBytes(UTF_8));
    final int bbValStartPos = bbVal.position();
    actual = new Mutation("row5");
    actual.at().family(fam).qualifier(qual).put(bbVal);
    assertEquals(expected, actual);

    // make sure the ByteBuffer last byte filled in the buffer (its position) is same as before the
    // API call
    assertEquals(bbValStartPos, bbVal.position());

    // put: CharSequence (String implementation)
    actual = new Mutation("row5");
    actual.at().family(fam).qualifier(qual).put(val);
    assertEquals(expected, actual);

    // put: Text
    actual = new Mutation("row5");
    actual.at().family(fam).qualifier(qual).put(val);
    assertEquals(expected, actual);

    // put: Value
    actual = new Mutation("row5");
    actual.at().family(fam).qualifier(qual).put(new Value(val));
    assertEquals(expected, actual);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\MutationTest.java
  public void testFluentPutNull() {
    final String fam = "f16bc";
    final String qual = "q1pm2";
    final String val = "v8672194923750";

    Mutation expected = new Mutation("row5");
    expected.put(fam, qual, val);

    Mutation actual = new Mutation("row5");
    actual.at().family(fam).qualifier(qual).put(val.getBytes());
    assertEquals(expected, actual);
    assertEquals(34, actual.numBytes());
    actual.at().family(fam).qualifier(qual).put("test2");
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\MutationTest.java
  public void testFluentPutLarge() {
    byte[] largeVal = new byte[Mutation.VALUE_SIZE_COPY_CUTOFF + 13];
    Arrays.fill(largeVal, (byte) 3);

    Mutation m = new Mutation("row123");
    m.at().family("fam").qualifier("qual").put(largeVal);
    assertEquals(32800, m.numBytes());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\MutationTest.java
  public void testAtDelete() {
    final String fam = "f16bc";
    final String qual = "q1pm2";

    Mutation expected = new Mutation("row5");
    expected.putDelete(fam, qual);

    Mutation actual = new Mutation("row5");
    actual.at().family(fam).qualifier(qual).delete();
    assertEquals(expected, actual);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\MutationTest.java
  public void testPuts() {
    Mutation m = new Mutation(new Text("r1"));

    m.put(nt("cf1"), nt("cq1"), nv("v1"));
    m.put(nt("cf2"), nt("cq2"), new ColumnVisibility("cv2"), nv("v2"));
    m.put(nt("cf3"), nt("cq3"), 3L, nv("v3"));
    m.put(nt("cf4"), nt("cq4"), new ColumnVisibility("cv4"), 4L, nv("v4"));

    m.putDelete(nt("cf5"), nt("cq5"));
    m.putDelete(nt("cf6"), nt("cq6"), new ColumnVisibility("cv6"));
    m.putDelete(nt("cf7"), nt("cq7"), 7L);
    m.putDelete(nt("cf8"), nt("cq8"), new ColumnVisibility("cv8"), 8L);

    assertEquals(8, m.size());

    List<ColumnUpdate> updates = m.getUpdates();

    assertEquals(8, m.size());
    assertEquals(8, updates.size());

    verifyColumnUpdate(updates.get(0), "cf1", "cq1", "", 0L, false, false, "v1");
    verifyColumnUpdate(updates.get(1), "cf2", "cq2", "cv2", 0L, false, false, "v2");
    verifyColumnUpdate(updates.get(2), "cf3", "cq3", "", 3L, true, false, "v3");
    verifyColumnUpdate(updates.get(3), "cf4", "cq4", "cv4", 4L, true, false, "v4");

    verifyColumnUpdate(updates.get(4), "cf5", "cq5", "", 0L, false, true, "");
    verifyColumnUpdate(updates.get(5), "cf6", "cq6", "cv6", 0L, false, true, "");
    verifyColumnUpdate(updates.get(6), "cf7", "cq7", "", 7L, true, true, "");
    verifyColumnUpdate(updates.get(7), "cf8", "cq8", "cv8", 8L, true, true, "");

  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\MutationTest.java
  public void testPutsString() {
    Mutation m = new Mutation("r1");

    m.put("cf1", "cq1", nv("v1"));
    m.put("cf2", "cq2", new ColumnVisibility("cv2"), nv("v2"));
    m.put("cf3", "cq3", 3L, nv("v3"));
    m.put("cf4", "cq4", new ColumnVisibility("cv4"), 4L, nv("v4"));

    m.putDelete("cf5", "cq5");
    m.putDelete("cf6", "cq6", new ColumnVisibility("cv6"));
    m.putDelete("cf7", "cq7", 7L);
    m.putDelete("cf8", "cq8", new ColumnVisibility("cv8"), 8L);

    assertEquals(8, m.size());

    List<ColumnUpdate> updates = m.getUpdates();

    assertEquals(8, m.size());
    assertEquals(8, updates.size());

    verifyColumnUpdate(updates.get(0), "cf1", "cq1", "", 0L, false, false, "v1");
    verifyColumnUpdate(updates.get(1), "cf2", "cq2", "cv2", 0L, false, false, "v2");
    verifyColumnUpdate(updates.get(2), "cf3", "cq3", "", 3L, true, false, "v3");
    verifyColumnUpdate(updates.get(3), "cf4", "cq4", "cv4", 4L, true, false, "v4");

    verifyColumnUpdate(updates.get(4), "cf5", "cq5", "", 0L, false, true, "");
    verifyColumnUpdate(updates.get(5), "cf6", "cq6", "cv6", 0L, false, true, "");
    verifyColumnUpdate(updates.get(6), "cf7", "cq7", "", 7L, true, true, "");
    verifyColumnUpdate(updates.get(7), "cf8", "cq8", "cv8", 8L, true, true, "");
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\MutationTest.java
  public void testPutsStringString() {
    Mutation m = new Mutation("r1");

    m.put("cf1", "cq1", "v1");
    m.put("cf2", "cq2", new ColumnVisibility("cv2"), "v2");
    m.put("cf3", "cq3", 3L, "v3");
    m.put("cf4", "cq4", new ColumnVisibility("cv4"), 4L, "v4");

    m.putDelete("cf5", "cq5");
    m.putDelete("cf6", "cq6", new ColumnVisibility("cv6"));
    m.putDelete("cf7", "cq7", 7L);
    m.putDelete("cf8", "cq8", new ColumnVisibility("cv8"), 8L);

    assertEquals(8, m.size());
    assertEquals("r1", new String(m.getRow()));

    List<ColumnUpdate> updates = m.getUpdates();

    assertEquals(8, m.size());
    assertEquals(8, updates.size());

    verifyColumnUpdate(updates.get(0), "cf1", "cq1", "", 0L, false, false, "v1");
    verifyColumnUpdate(updates.get(1), "cf2", "cq2", "cv2", 0L, false, false, "v2");
    verifyColumnUpdate(updates.get(2), "cf3", "cq3", "", 3L, true, false, "v3");
    verifyColumnUpdate(updates.get(3), "cf4", "cq4", "cv4", 4L, true, false, "v4");

    verifyColumnUpdate(updates.get(4), "cf5", "cq5", "", 0L, false, true, "");
    verifyColumnUpdate(updates.get(5), "cf6", "cq6", "cv6", 0L, false, true, "");
    verifyColumnUpdate(updates.get(6), "cf7", "cq7", "", 7L, true, true, "");
    verifyColumnUpdate(updates.get(7), "cf8", "cq8", "cv8", 8L, true, true, "");
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\MutationTest.java
  public void testMultipleReadFieldsCalls() throws IOException {
    // Create test mutations and write them to a byte output stream
    Mutation m1 = new Mutation("row1");
    m1.put("cf1.1", "cq1.1", new ColumnVisibility("A|B"), "val1.1");
    m1.put("cf1.2", "cq1.2", new ColumnVisibility("C|D"), "val1.2");
    byte[] val1_3 = new byte[Mutation.VALUE_SIZE_COPY_CUTOFF + 3];
    Arrays.fill(val1_3, (byte) 3);
    m1.put("cf1.3", "cq1.3", new ColumnVisibility("E|F"), new String(val1_3));
    int size1 = m1.size();
    long nb1 = m1.numBytes();

    Mutation m2 = new Mutation("row2");
    byte[] val2 = new byte[Mutation.VALUE_SIZE_COPY_CUTOFF + 2];
    Arrays.fill(val2, (byte) 2);
    m2.put("cf2", "cq2", new ColumnVisibility("G|H"), 1234, new String(val2));
    int size2 = m2.size();
    long nb2 = m2.numBytes();

    ByteArrayOutputStream bos = new ByteArrayOutputStream();
    DataOutputStream dos = new DataOutputStream(bos);
    m1.write(dos);
    m2.write(dos);
    dos.close();

    // Now read the mutations back in from the byte array, making sure to
    // reuse the same mutation object, and make sure everything is correct.
    ByteArrayInputStream bis = new ByteArrayInputStream(bos.toByteArray());
    DataInputStream dis = new DataInputStream(bis);

    Mutation m = new Mutation();
    m.readFields(dis);

    assertEquals("row1", new String(m.getRow()));
    assertEquals(size1, m.size());
    assertEquals(nb1, m.numBytes());
    assertEquals(3, m.getUpdates().size());
    verifyColumnUpdate(m.getUpdates().get(0), "cf1.1", "cq1.1", "A|B", 0L, false, false, "val1.1");
    verifyColumnUpdate(m.getUpdates().get(1), "cf1.2", "cq1.2", "C|D", 0L, false, false, "val1.2");
    verifyColumnUpdate(m.getUpdates().get(2), "cf1.3", "cq1.3", "E|F", 0L, false, false,
        new String(val1_3));

    // Reuse the same mutation object (which is what happens in the hadoop framework
    // when objects are read by an input format)
    m.readFields(dis);

    assertEquals("row2", new String(m.getRow()));
    assertEquals(size2, m.size());
    assertEquals(nb2, m.numBytes());
    assertEquals(1, m.getUpdates().size());
    verifyColumnUpdate(m.getUpdates().get(0), "cf2", "cq2", "G|H", 1234L, true, false,
        new String(val2));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\MutationTest.java
  public void test4() throws Exception {
    Mutation m1 = new Mutation(new Text("r1"));

    m1.put(nt("cf1"), nt("cq1"), nv("v1"));
    m1.put(nt("cf2"), nt("cq2"), new ColumnVisibility("cv2"), nv("v2"));

    ByteArrayOutputStream bos = new ByteArrayOutputStream();
    DataOutputStream dos = new DataOutputStream(bos);
    m1.write(dos);
    dos.close();

    Mutation m2 = new Mutation(new Text("r2"));

    m2.put(nt("cf3"), nt("cq3"), nv("v3"));
    m2.put(nt("cf4"), nt("cq4"), new ColumnVisibility("cv2"), nv("v4"));

    ByteArrayInputStream bis = new ByteArrayInputStream(bos.toByteArray());
    DataInputStream dis = new DataInputStream(bis);

    // used to be a bug where puts done before readFields would be seen
    // after readFields
    m2.readFields(dis);

    assertEquals("r1", new String(m2.getRow()));
    assertEquals(2, m2.getUpdates().size());
    assertEquals(2, m2.size());
    verifyColumnUpdate(m2.getUpdates().get(0), "cf1", "cq1", "", 0L, false, false, "v1");
    verifyColumnUpdate(m2.getUpdates().get(1), "cf2", "cq2", "cv2", 0L, false, false, "v2");
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\MutationTest.java
  public void testNewSerialization() throws Exception {
    // write an old mutation
    OldMutation m2 = new OldMutation("r1");
    m2.put("cf1", "cq1", "v1");
    m2.put("cf2", "cq2", new ColumnVisibility("cv2"), "v2");
    m2.putDelete("cf3", "cq3");
    ByteArrayOutputStream bos = new ByteArrayOutputStream();
    DataOutputStream dos = new DataOutputStream(bos);
    m2.write(dos);
    dos.close();
    long oldSize = dos.size();
    ByteArrayInputStream bis = new ByteArrayInputStream(bos.toByteArray());
    DataInputStream dis = new DataInputStream(bis);
    m2.readFields(dis);
    dis.close();

    // check it
    assertEquals("r1", new String(m2.getRow()));
    assertEquals(3, m2.getUpdates().size());
    assertEquals(3, m2.size());
    verifyColumnUpdate(m2.getUpdates().get(0), "cf1", "cq1", "", 0L, false, false, "v1");
    verifyColumnUpdate(m2.getUpdates().get(1), "cf2", "cq2", "cv2", 0L, false, false, "v2");
    verifyColumnUpdate(m2.getUpdates().get(2), "cf3", "cq3", "", 0L, false, true, "");

    Mutation m1 = convert(m2);

    assertEquals("r1", new String(m1.getRow()));
    assertEquals(3, m1.getUpdates().size());
    assertEquals(3, m1.size());
    verifyColumnUpdate(m1.getUpdates().get(0), "cf1", "cq1", "", 0L, false, false, "v1");
    verifyColumnUpdate(m1.getUpdates().get(1), "cf2", "cq2", "cv2", 0L, false, false, "v2");
    verifyColumnUpdate(m1.getUpdates().get(2), "cf3", "cq3", "", 0L, false, true, "");

    Text exampleRow = new Text(" 123456789 123456789 123456789 123456789 123456789");
    int exampleLen = exampleRow.getLength();
    m1 = new Mutation(exampleRow);
    m1.put("", "", "");

    bos = new ByteArrayOutputStream();
    dos = new DataOutputStream(bos);
    m1.write(dos);
    dos.close();
    long newSize = dos.size();
    assertTrue(newSize < oldSize);
    assertEquals(10, newSize - exampleLen);
    assertEquals(68, oldSize - exampleLen);
    // I am converting to integer to avoid comparing floats which are inaccurate
    assertEquals(14705, (int) (((newSize - exampleLen) * 100. / (oldSize - exampleLen)) * 1000));
    StringBuilder sb = new StringBuilder();
    byte[] ba = bos.toByteArray();
    for (int i = 0; i < bos.size(); i += 4) {
      for (int j = i; j < bos.size() && j < i + 4; j++) {
        sb.append(String.format("%02x", ba[j]));
      }
      sb.append(" ");
    }
    assertEquals("80322031 32333435 36373839 20313233 34353637"
        + " 38392031 32333435 36373839 20313233 34353637"
        + " 38392031 32333435 36373839 06000000 00000001 ", sb.toString());

  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\MutationTest.java
  public void testReserialize() throws Exception {
    // test reading in a new mutation from an old mutation and reserializing the new mutation...
    // this was failing
    OldMutation om = new OldMutation("r1");
    om.put("cf1", "cq1", "v1");
    om.put("cf2", "cq2", new ColumnVisibility("cv2"), "v2");
    om.putDelete("cf3", "cq3");
    StringBuilder bigVal = new StringBuilder();
    for (int i = 0; i < 100000; i++) {
      bigVal.append('a');
    }
    om.put("cf2", "big", bigVal);

    Mutation m1 = convert(om);

    ByteArrayOutputStream bos = new ByteArrayOutputStream();
    DataOutputStream dos = new DataOutputStream(bos);
    m1.write(dos);
    dos.close();

    Mutation m2 = new Mutation();

    ByteArrayInputStream bis = new ByteArrayInputStream(bos.toByteArray());
    DataInputStream dis = new DataInputStream(bis);
    m2.readFields(dis);

    assertEquals("r1", new String(m1.getRow()));
    assertEquals(4, m2.getUpdates().size());
    assertEquals(4, m2.size());
    verifyColumnUpdate(m2.getUpdates().get(0), "cf1", "cq1", "", 0L, false, false, "v1");
    verifyColumnUpdate(m2.getUpdates().get(1), "cf2", "cq2", "cv2", 0L, false, false, "v2");
    verifyColumnUpdate(m2.getUpdates().get(2), "cf3", "cq3", "", 0L, false, true, "");
    verifyColumnUpdate(m2.getUpdates().get(3), "cf2", "big", "", 0L, false, false,
        bigVal.toString());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\MutationTest.java
  public void testInitialBufferSizesEquals() {
    // m1 uses CharSequence constructor
    Mutation m1 = new Mutation("r1");
    // m2 uses a different buffer size
    Mutation m2 = new Mutation("r1", 4242);
    // m3 uses Text constructor
    Mutation m3 = new Mutation(new Text("r1"));
    // m4 uses a different buffer size
    Mutation m4 = new Mutation(new Text("r1"), 4242);
    // m5 uses bytes constructor with offset/length
    byte[] r1Bytes = "r1".getBytes(UTF_8);
    Mutation m5 = new Mutation(r1Bytes);
    // m6 uses a different buffer size
    Mutation m6 = new Mutation(r1Bytes, 4242);
    // m7 uses bytes constructor with offset/length
    Mutation m7 = new Mutation(r1Bytes, 0, r1Bytes.length);
    // m8 uses a different buffer size
    Mutation m8 = new Mutation(r1Bytes, 0, r1Bytes.length, 4242);

    Mutation[] muts = {m1, m2, m3, m4, m5, m6, m7, m8};
    populate(muts);

    for (Mutation m : muts) {
      assertEquals(m1, m);
    }
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\MutationTest.java
  public void testEquals() {
    Mutation m1 = new Mutation("r1");

    m1.put("cf1", "cq1", "v1");
    m1.put("cf1", "cq1", new ColumnVisibility("A&B"), "v2");
    m1.put("cf1", "cq1", 3, "v3");
    m1.put("cf1", "cq1", new ColumnVisibility("A&B&C"), 4, "v4");
    m1.putDelete("cf2", "cf3");
    m1.putDelete("cf2", "cf4", 3);
    m1.putDelete("cf2", "cf4", new ColumnVisibility("A&B&C"), 3);

    // m2 has same data as m1
    Mutation m2 = new Mutation("r1");

    m2.put("cf1", "cq1", "v1");
    m2.put("cf1", "cq1", new ColumnVisibility("A&B"), "v2");
    m2.put("cf1", "cq1", 3, "v3");
    m2.put("cf1", "cq1", new ColumnVisibility("A&B&C"), 4, "v4");
    m2.putDelete("cf2", "cf3");
    m2.putDelete("cf2", "cf4", 3);
    m2.putDelete("cf2", "cf4", new ColumnVisibility("A&B&C"), 3);

    // m3 has different row than m1
    Mutation m3 = new Mutation("r2");

    m3.put("cf1", "cq1", "v1");
    m3.put("cf1", "cq1", new ColumnVisibility("A&B"), "v2");
    m3.put("cf1", "cq1", 3, "v3");
    m3.put("cf1", "cq1", new ColumnVisibility("A&B&C"), 4, "v4");
    m3.putDelete("cf2", "cf3");
    m3.putDelete("cf2", "cf4", 3);
    m3.putDelete("cf2", "cf4", new ColumnVisibility("A&B&C"), 3);

    // m4 has a different column than m1
    Mutation m4 = new Mutation("r1");

    m4.put("cf2", "cq1", "v1");
    m4.put("cf1", "cq1", new ColumnVisibility("A&B"), "v2");
    m4.put("cf1", "cq1", 3, "v3");
    m4.put("cf1", "cq1", new ColumnVisibility("A&B&C"), 4, "v4");
    m4.putDelete("cf2", "cf3");
    m4.putDelete("cf2", "cf4", 3);
    m4.putDelete("cf2", "cf4", new ColumnVisibility("A&B&C"), 3);

    // m5 has a different value than m1
    Mutation m5 = new Mutation("r1");

    m5.put("cf1", "cq1", "v1");
    m5.put("cf1", "cq1", new ColumnVisibility("A&B"), "v2");
    m5.put("cf1", "cq1", 3, "v4");
    m5.put("cf1", "cq1", new ColumnVisibility("A&B&C"), 4, "v4");
    m5.putDelete("cf2", "cf3");
    m5.putDelete("cf2", "cf4", 3);
    m5.putDelete("cf2", "cf4", new ColumnVisibility("A&B&C"), 3);

    assertEquals(m1, m1);
    assertEquals(m1, m2);
    assertEquals(m2, m1);
    assertEquals(m2.hashCode(), m1.hashCode());
    assertNotEquals(0, m1.hashCode());
    assertFalse(m1.equals(m3));
    assertFalse(m3.equals(m1));
    assertFalse(m1.equals(m4));
    assertFalse(m4.equals(m1));
    assertFalse(m3.equals(m4));
    assertFalse(m1.equals(m5));
    assertFalse(m5.equals(m1));
    assertFalse(m3.equals(m5));
    assertFalse(m4.equals(m5));
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\MutationTest.java
  public void testThrift() {
    Mutation m1 = new Mutation("r1");
    m1.put("cf1", "cq1", "v1");
    TMutation tm1 = m1.toThrift();
    Mutation m2 = new Mutation(tm1);
    assertEquals(m1, m2);
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\MutationTest.java
  public void testThrift_Invalid() {
    Mutation m1 = new Mutation("r1");
    m1.put("cf1", "cq1", "v1");
    TMutation tm1 = m1.toThrift();
    tm1.setRow((byte[]) null);
    new Mutation(tm1);
  }

  /*
   * The following two tests assert that no exception is thrown after calling hashCode or equals on
   * a Mutation. These guard against the condition noted in ACCUMULO-3718.
   */
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\MutationTest.java
  public void testPutAfterHashCode() {
    Mutation m = new Mutation("r");
    m.hashCode();
    try {
      m.put("cf", "cq", "v");
    } catch (IllegalStateException e) {
      fail("Calling Mutation#hashCode then Mutation#put should not result in an"
          + " IllegalStateException.");
    }
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\MutationTest.java
  public void testPutAfterEquals() {
    Mutation m = new Mutation("r");
    Mutation m2 = new Mutation("r2");
    m.equals(m2);
    try {
      m.put("cf", "cq", "v");
      m2.put("cf", "cq", "v");
    } catch (IllegalStateException e) {
      fail("Calling Mutation#equals then Mutation#put should not result in an"
          + " IllegalStateException.");
    }
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\MutationTest.java
  public void testSanityCheck() {
    Mutation m = new Mutation("too big mutation");
    m.put("cf", "cq1", "v");
    m.estRowAndLargeValSize += (Long.MAX_VALUE / 2);
    m.put("cf", "cq2", "v");
  }
}
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\NamespaceIdTest.java
  public void testCacheNoDuplicates() {
    // the next line just preloads the built-ins, since they now exist in a separate class from
    // NamespaceId, and aren't preloaded when the NamespaceId class is referenced
    assertNotSame(Namespace.ACCUMULO.id(), Namespace.DEFAULT.id());

    String namespaceString = "namespace-" + name.getMethodName();
    long initialSize = cacheCount();
    NamespaceId nsId = NamespaceId.of(namespaceString);
    assertEquals(initialSize + 1, cacheCount());
    assertEquals(namespaceString, nsId.canonical());

    // ensure duplicates are not created
    NamespaceId builtInNamespaceId = NamespaceId.of("+accumulo");
    assertSame(Namespace.ACCUMULO.id(), builtInNamespaceId);
    builtInNamespaceId = NamespaceId.of("+default");
    assertSame(Namespace.DEFAULT.id(), builtInNamespaceId);
    nsId = NamespaceId.of(namespaceString);
    assertEquals(initialSize + 1, cacheCount());
    assertEquals(namespaceString, nsId.canonical());
    NamespaceId nsId2 = NamespaceId.of(namespaceString);
    assertEquals(initialSize + 1, cacheCount());
    assertSame(nsId, nsId2);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\NamespaceIdTest.java
  public void testCacheIncreasesAndDecreasesAfterGC() {
    long initialSize = cacheCount();
    assertTrue(initialSize < 20); // verify initial amount is reasonably low
    LOG.info("Initial cache size: {}", initialSize);
    LOG.info(NamespaceId.cache.asMap().toString());

    // add one and check increase
    String namespaceString = "namespace-" + name.getMethodName();
    NamespaceId nsId = NamespaceId.of(namespaceString);
    assertEquals(initialSize + 1, cacheCount());
    assertEquals(namespaceString, nsId.canonical());

    // create a bunch more and throw them away
    long preGCSize = 0;
    int i = 0;
    while ((preGCSize = cacheCount()) < 100) {
      NamespaceId.of(new String("namespace" + i++));
    }
    LOG.info("Entries before System.gc(): {}", preGCSize);
    assertEquals(100, preGCSize);
    long postGCSize = preGCSize;
    while (postGCSize >= preGCSize) {
      TableIdTest.tryToGc();
      postGCSize = cacheCount();
      LOG.info("Entries after System.gc(): {}", postGCSize);
    }
  }
}
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\RangeTest.java
  public void testMergeOverlapping1() {
    List<Range> rl = newRangeList(newRange("a", "c"), newRange("a", "b"));
    List<Range> expected = newRangeList(newRange("a", "c"));
    check(Range.mergeOverlapping(rl), expected);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\RangeTest.java
  public void testMergeOverlapping2() {
    List<Range> rl = newRangeList(newRange("a", "c"), newRange("d", "f"));
    List<Range> expected = newRangeList(newRange("a", "c"), newRange("d", "f"));
    check(Range.mergeOverlapping(rl), expected);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\RangeTest.java
  public void testMergeOverlapping3() {
    List<Range> rl = newRangeList(newRange("a", "e"), newRange("b", "f"), newRange("c", "r"),
        newRange("g", "j"), newRange("t", "x"));
    List<Range> expected = newRangeList(newRange("a", "r"), newRange("t", "x"));
    check(Range.mergeOverlapping(rl), expected);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\RangeTest.java
  public void testMergeOverlapping4() {
    List<Range> rl = newRangeList(newRange("a", "e"), newRange("b", "f"), newRange("c", "r"),
        newRange("g", "j"));
    List<Range> expected = newRangeList(newRange("a", "r"));
    check(Range.mergeOverlapping(rl), expected);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\RangeTest.java
  public void testMergeOverlapping5() {
    List<Range> rl = newRangeList(newRange("a", "e"));
    List<Range> expected = newRangeList(newRange("a", "e"));
    check(Range.mergeOverlapping(rl), expected);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\RangeTest.java
  public void testMergeOverlapping6() {
    List<Range> rl = newRangeList();
    List<Range> expected = newRangeList();
    check(Range.mergeOverlapping(rl), expected);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\RangeTest.java
  public void testMergeOverlapping7() {
    List<Range> rl = newRangeList(newRange("a", "e"), newRange("g", "q"), newRange("r", "z"));
    List<Range> expected = newRangeList(newRange("a", "e"), newRange("g", "q"), newRange("r", "z"));
    check(Range.mergeOverlapping(rl), expected);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\RangeTest.java
  public void testMergeOverlapping8() {
    List<Range> rl = newRangeList(newRange("a", "c"), newRange("a", "c"));
    List<Range> expected = newRangeList(newRange("a", "c"));
    check(Range.mergeOverlapping(rl), expected);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\RangeTest.java
  public void testMergeOverlapping9() {
    List<Range> rl = newRangeList(newRange(null, null));
    List<Range> expected = newRangeList(newRange(null, null));
    check(Range.mergeOverlapping(rl), expected);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\RangeTest.java
  public void testMergeOverlapping10() {
    List<Range> rl = newRangeList(newRange(null, null), newRange("a", "c"));
    List<Range> expected = newRangeList(newRange(null, null));
    check(Range.mergeOverlapping(rl), expected);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\RangeTest.java
  public void testMergeOverlapping11() {
    List<Range> rl = newRangeList(newRange("a", "c"), newRange(null, null));
    List<Range> expected = newRangeList(newRange(null, null));
    check(Range.mergeOverlapping(rl), expected);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\RangeTest.java
  public void testMergeOverlapping12() {
    List<Range> rl = newRangeList(newRange("b", "d"), newRange("c", null));
    List<Range> expected = newRangeList(newRange("b", null));
    check(Range.mergeOverlapping(rl), expected);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\RangeTest.java
  public void testMergeOverlapping13() {
    List<Range> rl = newRangeList(newRange("b", "d"), newRange("a", null));
    List<Range> expected = newRangeList(newRange("a", null));
    check(Range.mergeOverlapping(rl), expected);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\RangeTest.java
  public void testMergeOverlapping14() {
    List<Range> rl = newRangeList(newRange("b", "d"), newRange("e", null));
    List<Range> expected = newRangeList(newRange("b", "d"), newRange("e", null));
    check(Range.mergeOverlapping(rl), expected);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\RangeTest.java
  public void testMergeOverlapping15() {
    List<Range> rl = newRangeList(newRange("b", "d"), newRange("e", null), newRange("c", "f"));
    List<Range> expected = newRangeList(newRange("b", null));
    check(Range.mergeOverlapping(rl), expected);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\RangeTest.java
  public void testMergeOverlapping16() {
    List<Range> rl = newRangeList(newRange("b", "d"), newRange("f", null), newRange("c", "e"));
    List<Range> expected = newRangeList(newRange("b", "e"), newRange("f", null));
    check(Range.mergeOverlapping(rl), expected);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\RangeTest.java
  public void testMergeOverlapping17() {
    List<Range> rl = newRangeList(newRange("b", "d"), newRange("r", null), newRange("c", "e"),
        newRange("g", "t"));
    List<Range> expected = newRangeList(newRange("b", "e"), newRange("g", null));
    check(Range.mergeOverlapping(rl), expected);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\RangeTest.java
  public void testMergeOverlapping18() {
    List<Range> rl = newRangeList(newRange(null, "d"), newRange("r", null), newRange("c", "e"),
        newRange("g", "t"));
    List<Range> expected = newRangeList(newRange(null, "e"), newRange("g", null));
    check(Range.mergeOverlapping(rl), expected);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\RangeTest.java
  public void testMergeOverlapping19() {
    List<Range> rl = newRangeList(newRange(null, "d"), newRange("r", null), newRange("c", "e"),
        newRange("g", "t"), newRange("d", "h"));
    List<Range> expected = newRangeList(newRange(null, null));
    check(Range.mergeOverlapping(rl), expected);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\RangeTest.java
  public void testMergeOverlapping20() {

    List<Range> rl = newRangeList(new Range(new Text("a"), true, new Text("b"), false),
        new Range(new Text("b"), false, new Text("c"), false));
    List<Range> expected = newRangeList(new Range(new Text("a"), true, new Text("b"), false),
        new Range(new Text("b"), false, new Text("c"), false));
    check(Range.mergeOverlapping(rl), expected);

    rl = newRangeList(new Range(new Text("a"), true, new Text("b"), false),
        new Range(new Text("b"), true, new Text("c"), false));
    expected = newRangeList(new Range(new Text("a"), true, new Text("c"), false));
    check(Range.mergeOverlapping(rl), expected);

    rl = newRangeList(new Range(new Text("a"), true, new Text("b"), true),
        new Range(new Text("b"), false, new Text("c"), false));
    expected = newRangeList(new Range(new Text("a"), true, new Text("c"), false));
    check(Range.mergeOverlapping(rl), expected);

    rl = newRangeList(new Range(new Text("a"), true, new Text("b"), true),
        new Range(new Text("b"), true, new Text("c"), false));
    expected = newRangeList(new Range(new Text("a"), true, new Text("c"), false));
    check(Range.mergeOverlapping(rl), expected);

  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\RangeTest.java
  public void testMergeOverlapping22() {

    Range ke1 = new KeyExtent(TableId.of("tab1"), new Text("Bank"), null).toMetaRange();
    Range ke2 =
        new KeyExtent(TableId.of("tab1"), new Text("Fails"), new Text("Bank")).toMetaRange();
    Range ke3 = new KeyExtent(TableId.of("tab1"), new Text("Sam"), new Text("Fails")).toMetaRange();
    Range ke4 = new KeyExtent(TableId.of("tab1"), new Text("bails"), new Text("Sam")).toMetaRange();
    Range ke5 = new KeyExtent(TableId.of("tab1"), null, new Text("bails")).toMetaRange();

    List<Range> rl = newRangeList(ke1, ke2, ke3, ke4, ke5);
    List<Range> expected =
        newRangeList(new KeyExtent(TableId.of("tab1"), null, null).toMetaRange());
    check(Range.mergeOverlapping(rl), expected);

    rl = newRangeList(ke1, ke2, ke4, ke5);
    expected =
        newRangeList(new KeyExtent(TableId.of("tab1"), new Text("Fails"), null).toMetaRange(),
            new KeyExtent(TableId.of("tab1"), null, new Text("Sam")).toMetaRange());
    check(Range.mergeOverlapping(rl), expected);

    rl = newRangeList(ke2, ke3, ke4, ke5);
    expected =
        newRangeList(new KeyExtent(TableId.of("tab1"), null, new Text("Bank")).toMetaRange());
    check(Range.mergeOverlapping(rl), expected);

    rl = newRangeList(ke1, ke2, ke3, ke4);
    expected =
        newRangeList(new KeyExtent(TableId.of("tab1"), new Text("bails"), null).toMetaRange());
    check(Range.mergeOverlapping(rl), expected);

    rl = newRangeList(ke2, ke3, ke4);
    expected = newRangeList(
        new KeyExtent(TableId.of("tab1"), new Text("bails"), new Text("Bank")).toMetaRange());

    check(Range.mergeOverlapping(rl), expected);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\RangeTest.java
  public void testMergeOverlapping21() {
    for (boolean b1 : new boolean[] {true, false})
      for (boolean b2 : new boolean[] {true, false})
        for (boolean b3 : new boolean[] {true, false})
          for (boolean b4 : new boolean[] {true, false}) {

            // System.out.println("b1:"+b1+" b2:"+b2+" b3:"+b3+" b4:"+b4);

            List<Range> rl =
                newRangeList(new Range(new Key(new Text("a")), b1, new Key(new Text("m")), b2),
                    new Range(new Key(new Text("b")), b3, new Key(new Text("n")), b4));
            List<Range> expected =
                newRangeList(new Range(new Key(new Text("a")), b1, new Key(new Text("n")), b4));
            check(Range.mergeOverlapping(rl), expected);

            rl = newRangeList(new Range(new Key(new Text("a")), b1, new Key(new Text("m")), b2),
                new Range(new Key(new Text("a")), b3, new Key(new Text("n")), b4));
            expected = newRangeList(
                new Range(new Key(new Text("a")), b1 || b3, new Key(new Text("n")), b4));
            check(Range.mergeOverlapping(rl), expected);

            rl = newRangeList(new Range(new Key(new Text("a")), b1, new Key(new Text("n")), b2),
                new Range(new Key(new Text("b")), b3, new Key(new Text("n")), b4));
            expected = newRangeList(
                new Range(new Key(new Text("a")), b1, new Key(new Text("n")), b2 || b4));
            check(Range.mergeOverlapping(rl), expected);

            rl = newRangeList(new Range(new Key(new Text("a")), b1, new Key(new Text("n")), b2),
                new Range(new Key(new Text("a")), b3, new Key(new Text("n")), b4));
            expected = newRangeList(
                new Range(new Key(new Text("a")), b1 || b3, new Key(new Text("n")), b2 || b4));
            check(Range.mergeOverlapping(rl), expected);
          }

  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\RangeTest.java
  public void testEqualsNull() {

    assertTrue(newRange(null, "d").equals(newRange(null, "d")));

    assertTrue(newRange(null, null).equals(newRange(null, null)));

    assertTrue(newRange("a", null).equals(newRange("a", null)));

    assertFalse(newRange(null, "d").equals(newRange("a", "d")));
    assertFalse(newRange("a", "d").equals(newRange(null, "d")));

    assertFalse(newRange(null, null).equals(newRange("a", "d")));
    assertFalse(newRange("a", "d").equals(newRange(null, null)));

    assertFalse(newRange("a", null).equals(newRange("a", "d")));
    assertFalse(newRange("a", "d").equals(newRange("a", null)));
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\RangeTest.java
  public void testEquals() {
    assertFalse(newRange("b", "d").equals(newRange("a", "d")));
    assertFalse(newRange("a", "d").equals(newRange("b", "d")));

    assertFalse(newRange("x", "y").equals(newRange("a", "d")));
    assertFalse(newRange("a", "d").equals(newRange("x", "y")));

    assertFalse(newRange("a", "z").equals(newRange("a", "d")));
    assertFalse(newRange("a", "d").equals(newRange("a", "z")));

    assertTrue(newRange("a", "z").equals(newRange("a", "z")));
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\RangeTest.java
  public void testRow1() {
    Range rowRange = new Range(new Text("r1"));

    assertTrue(rowRange.contains(new Key(new Text("r1"))));
    assertTrue(rowRange.contains(new Key(new Text("r1"), new Text("cf1"))));
    assertTrue(rowRange.contains(new Key(new Text("r1"), new Text("cf1"), new Text("cq1"))));

    assertFalse(rowRange.contains(new Key(new Text("r1")).followingKey(PartialKey.ROW)));
    assertFalse(rowRange.contains(new Key(new Text("r11"))));
    assertFalse(rowRange.contains(new Key(new Text("r0"))));
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\RangeTest.java
  public void testRow2() {
    Range rowRange = new Range(new Text("r1"), new Text("r2"));

    assertTrue(rowRange.contains(new Key(new Text("r1"))));
    assertTrue(rowRange.contains(new Key(new Text("r1"), new Text("cf1"))));
    assertTrue(rowRange.contains(new Key(new Text("r1"), new Text("cf1"), new Text("cq1"))));

    assertTrue(rowRange.contains(new Key(new Text("r1")).followingKey(PartialKey.ROW)));
    assertTrue(rowRange.contains(new Key(new Text("r11"))));

    assertTrue(rowRange.contains(new Key(new Text("r2"))));
    assertTrue(rowRange.contains(new Key(new Text("r2"), new Text("cf1"))));
    assertTrue(rowRange.contains(new Key(new Text("r2"), new Text("cf1"), new Text("cq1"))));

    assertFalse(rowRange.contains(new Key(new Text("r0"))));
    assertFalse(rowRange.contains(new Key(new Text("r2")).followingKey(PartialKey.ROW)));
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\RangeTest.java
  public void testRow3() {
    Range rowRange = new Range(new Text("r1"), false, new Text("r2"), false);

    assertFalse(rowRange.contains(new Key(new Text("r1"))));
    assertFalse(rowRange.contains(new Key(new Text("r1"), new Text("cf1"))));
    assertFalse(rowRange.contains(new Key(new Text("r1"), new Text("cf1"), new Text("cq1"))));

    assertTrue(rowRange.contains(new Key(new Text("r1")).followingKey(PartialKey.ROW)));
    assertTrue(rowRange.contains(new Key(new Text("r11"))));

    assertFalse(rowRange.contains(new Key(new Text("r2"))));
    assertFalse(rowRange.contains(new Key(new Text("r2"), new Text("cf1"))));
    assertFalse(rowRange.contains(new Key(new Text("r2"), new Text("cf1"), new Text("cq1"))));

    assertFalse(rowRange.contains(new Key(new Text("r0"))));
    assertFalse(rowRange.contains(new Key(new Text("r2")).followingKey(PartialKey.ROW)));
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\RangeTest.java
  public void testRow4() {
    Range rowRange = new Range(new Text("r1"), true, new Text("r2"), false);

    assertTrue(rowRange.contains(new Key(new Text("r1"))));
    assertTrue(rowRange.contains(new Key(new Text("r1"), new Text("cf1"))));
    assertTrue(rowRange.contains(new Key(new Text("r1"), new Text("cf1"), new Text("cq1"))));

    assertTrue(rowRange.contains(new Key(new Text("r1")).followingKey(PartialKey.ROW)));
    assertTrue(rowRange.contains(new Key(new Text("r11"))));

    assertFalse(rowRange.contains(new Key(new Text("r2"))));
    assertFalse(rowRange.contains(new Key(new Text("r2"), new Text("cf1"))));
    assertFalse(rowRange.contains(new Key(new Text("r2"), new Text("cf1"), new Text("cq1"))));

    assertFalse(rowRange.contains(new Key(new Text("r0"))));
    assertFalse(rowRange.contains(new Key(new Text("r2")).followingKey(PartialKey.ROW)));
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\RangeTest.java
  public void testRow5() {
    Range rowRange = new Range(new Text("r1"), false, new Text("r2"), true);

    assertFalse(rowRange.contains(new Key(new Text("r1"))));
    assertFalse(rowRange.contains(new Key(new Text("r1"), new Text("cf1"))));
    assertFalse(rowRange.contains(new Key(new Text("r1"), new Text("cf1"), new Text("cq1"))));

    assertTrue(rowRange.contains(new Key(new Text("r1")).followingKey(PartialKey.ROW)));
    assertTrue(rowRange.contains(new Key(new Text("r11"))));

    assertTrue(rowRange.contains(new Key(new Text("r2"))));
    assertTrue(rowRange.contains(new Key(new Text("r2"), new Text("cf1"))));
    assertTrue(rowRange.contains(new Key(new Text("r2"), new Text("cf1"), new Text("cq1"))));

    assertFalse(rowRange.contains(new Key(new Text("r0"))));
    assertFalse(rowRange.contains(new Key(new Text("r2")).followingKey(PartialKey.ROW)));
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\RangeTest.java
  public void testRow6() {
    Range rowRange = new Range(new Text("r1"), true, null, true);

    assertTrue(rowRange.contains(new Key(new Text("r1"))));
    assertTrue(rowRange.contains(new Key(new Text("r1"), new Text("cf1"))));
    assertTrue(rowRange.contains(new Key(new Text("r1"), new Text("cf1"), new Text("cq1"))));

    assertTrue(rowRange.contains(new Key(new Text("r1")).followingKey(PartialKey.ROW)));
    assertTrue(rowRange.contains(new Key(new Text("r11"))));

    assertTrue(rowRange.contains(new Key(new Text("r2"))));
    assertTrue(rowRange.contains(new Key(new Text("r2"), new Text("cf1"))));
    assertTrue(rowRange.contains(new Key(new Text("r2"), new Text("cf1"), new Text("cq1"))));

    assertFalse(rowRange.contains(new Key(new Text("r0"))));
    assertTrue(rowRange.contains(new Key(new Text("r2")).followingKey(PartialKey.ROW)));
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\RangeTest.java
  public void testRow7() {
    Range rowRange = new Range(null, true, new Text("r2"), true);

    assertTrue(rowRange.contains(new Key(new Text("r1"))));
    assertTrue(rowRange.contains(new Key(new Text("r1"), new Text("cf1"))));
    assertTrue(rowRange.contains(new Key(new Text("r1"), new Text("cf1"), new Text("cq1"))));

    assertTrue(rowRange.contains(new Key(new Text("r1")).followingKey(PartialKey.ROW)));
    assertTrue(rowRange.contains(new Key(new Text("r11"))));

    assertTrue(rowRange.contains(new Key(new Text("r2"))));
    assertTrue(rowRange.contains(new Key(new Text("r2"), new Text("cf1"))));
    assertTrue(rowRange.contains(new Key(new Text("r2"), new Text("cf1"), new Text("cq1"))));

    assertTrue(rowRange.contains(new Key(new Text("r0"))));
    assertFalse(rowRange.contains(new Key(new Text("r2")).followingKey(PartialKey.ROW)));
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\RangeTest.java
  public void testRow8() {
    Range rowRange = new Range((Text) null);

    assertTrue(rowRange.contains(new Key(new Text("r1"))));
    assertTrue(rowRange.contains(new Key(new Text("r1"), new Text("cf1"))));
    assertTrue(rowRange.contains(new Key(new Text("r1"), new Text("cf1"), new Text("cq1"))));

    assertTrue(rowRange.contains(new Key(new Text("r1")).followingKey(PartialKey.ROW)));
    assertTrue(rowRange.contains(new Key(new Text("r11"))));

    assertTrue(rowRange.contains(new Key(new Text("r2"))));
    assertTrue(rowRange.contains(new Key(new Text("r2"), new Text("cf1"))));
    assertTrue(rowRange.contains(new Key(new Text("r2"), new Text("cf1"), new Text("cq1"))));

    assertTrue(rowRange.contains(new Key(new Text("r0"))));
    assertTrue(rowRange.contains(new Key(new Text("r2")).followingKey(PartialKey.ROW)));
  }

  private static Range newRange(String r1, boolean r1i, String r2, boolean r2i) {
    Text tr1 = null;
    Text tr2 = null;

    if (r1 != null)
      tr1 = new Text(r1);

    if (r2 != null)
      tr2 = new Text(r2);

    return new Range(tr1, r1i, tr2, r2i);

  }

  private static Key newKey(String r) {
    return new Key(new Text(r));
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\RangeTest.java
  public void testClip1() {
    Range fence = newRange("a", false, "c", false);

    runClipTest(fence, newRange("a", false, "c", false), newRange("a", false, "c", false));
    runClipTest(fence, newRange("a", true, "c", false), newRange("a", false, "c", false));
    runClipTest(fence, newRange("a", false, "c", true), newRange("a", false, "c", false));
    runClipTest(fence, newRange("a", true, "c", true), newRange("a", false, "c", false));

    fence = newRange("a", true, "c", false);

    runClipTest(fence, newRange("a", false, "c", false), newRange("a", false, "c", false));
    runClipTest(fence, newRange("a", true, "c", false), newRange("a", true, "c", false));
    runClipTest(fence, newRange("a", false, "c", true), newRange("a", false, "c", false));
    runClipTest(fence, newRange("a", true, "c", true), newRange("a", true, "c", false));

    fence = newRange("a", false, "c", true);

    runClipTest(fence, newRange("a", false, "c", false), newRange("a", false, "c", false));
    runClipTest(fence, newRange("a", true, "c", false), newRange("a", false, "c", false));
    runClipTest(fence, newRange("a", false, "c", true), newRange("a", false, "c", true));
    runClipTest(fence, newRange("a", true, "c", true), newRange("a", false, "c", true));

    fence = newRange("a", true, "c", true);

    runClipTest(fence, newRange("a", false, "c", false), newRange("a", false, "c", false));
    runClipTest(fence, newRange("a", true, "c", false), newRange("a", true, "c", false));
    runClipTest(fence, newRange("a", false, "c", true), newRange("a", false, "c", true));
    runClipTest(fence, newRange("a", true, "c", true), newRange("a", true, "c", true));
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\RangeTest.java
  public void testClip2() {
    Range fence = newRange("a", false, "c", false);

    runClipTest(fence, newRange(null, true, null, true), newRange("a", false, "c", false));
    runClipTest(fence, newRange(null, true, "c", true), newRange("a", false, "c", false));
    runClipTest(fence, newRange("a", true, null, true), newRange("a", false, "c", false));
    runClipTest(fence, newRange("a", true, "c", true), newRange("a", false, "c", false));
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\RangeTest.java
  public void testClip3() {
    Range fence = newRange("a", false, "c", false);

    runClipTest(fence, newRange("0", false, "z", false), newRange("a", false, "c", false));
    runClipTest(fence, newRange("0", true, "z", false), newRange("a", false, "c", false));
    runClipTest(fence, newRange("0", false, "z", true), newRange("a", false, "c", false));
    runClipTest(fence, newRange("0", true, "z", true), newRange("a", false, "c", false));

    runClipTest(fence, newRange("0", false, "b", false), newRange("a", false, "b", false));
    runClipTest(fence, newRange("0", true, "b", false), newRange("a", false, "b", false));
    runClipTest(fence, newRange("0", false, "b", true), newRange("a", false, "b", true));
    runClipTest(fence, newRange("0", true, "b", true), newRange("a", false, "b", true));

    runClipTest(fence, newRange("a1", false, "z", false), newRange("a1", false, "c", false));
    runClipTest(fence, newRange("a1", true, "z", false), newRange("a1", true, "c", false));
    runClipTest(fence, newRange("a1", false, "z", true), newRange("a1", false, "c", false));
    runClipTest(fence, newRange("a1", true, "z", true), newRange("a1", true, "c", false));

    runClipTest(fence, newRange("a1", false, "b", false), newRange("a1", false, "b", false));
    runClipTest(fence, newRange("a1", true, "b", false), newRange("a1", true, "b", false));
    runClipTest(fence, newRange("a1", false, "b", true), newRange("a1", false, "b", true));
    runClipTest(fence, newRange("a1", true, "b", true), newRange("a1", true, "b", true));
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\RangeTest.java
  public void testClip4() {
    Range fence = new Range(newKey("c"), false, newKey("n"), false);

    runClipTest(fence, new Range(newKey("a"), false, newKey("c"), false));
    runClipTest(fence, new Range(newKey("a"), false, newKey("c"), true));
    runClipTest(fence, new Range(newKey("n"), false, newKey("r"), false));
    runClipTest(fence, new Range(newKey("n"), true, newKey("r"), false));
    runClipTest(fence, new Range(newKey("a"), true, newKey("b"), false));
    runClipTest(fence, new Range(newKey("a"), true, newKey("b"), true));

    fence = new Range(newKey("c"), true, newKey("n"), true);

    runClipTest(fence, new Range(newKey("a"), false, newKey("c"), false));
    runClipTest(fence, new Range(newKey("a"), false, newKey("c"), true),
        new Range(newKey("c"), true, newKey("c"), true));
    runClipTest(fence, new Range(newKey("n"), false, newKey("r"), false));
    runClipTest(fence, new Range(newKey("n"), true, newKey("r"), false),
        new Range(newKey("n"), true, newKey("n"), true));
    runClipTest(fence, new Range(newKey("q"), false, newKey("r"), false));
    runClipTest(fence, new Range(newKey("q"), true, newKey("r"), false));

    fence = newRange("b", true, "b", true);

    runClipTest(fence, newRange("b", false, "c", false));
    runClipTest(fence, newRange("b", true, "c", false), newRange("b", true, "b", true));
    runClipTest(fence, newRange("a", false, "b", false));
    runClipTest(fence, newRange("a", false, "b", true), newRange("b", true, "b", true));

  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\RangeTest.java
  public void testBug1() {

    // unit test related to a bug that was observed (bug was not in range, but want to ensure the
    // following works)

    // clip caught the scanner going to a tablet passed the end of the scan range
    Range fence = new Range(new Text("10<"), false, new Text("~"), true);

    Key k1 = new Key(new Text("10<"), new Text("~tab"), new Text("~pr"));
    Range range = new Range(k1, true, k1.followingKey(PartialKey.ROW), false);

    runClipTest(fence, range);

    // scanner was not handling edge case properly...
    Range scanRange =
        new Range(
            new Key("10;007cdc5b0".getBytes(), "~tab".getBytes(), "~pr".getBytes(), "".getBytes(),
                130962, false),
            false, new Key(new Text("10<")).followingKey(PartialKey.ROW), false);
    // below is the proper check the scanner now does instead of just comparing the row bytes
    scanRange.afterEndKey(new Key(new Text("10<")).followingKey(PartialKey.ROW));
  }

  private void runClipTest(Range fence, Range range) {
    try {
      fence.clip(range);
      fail();
    } catch (IllegalArgumentException e) {

    }

  }

  private void runClipTest(Range fence, Range range, Range expected) {
    Range clipped = fence.clip(range);
    assertEquals(expected, clipped);
  }

  private static Key newKey(String r, String cf, String cq) {
    return new Key(new Text(r), new Text(cf), new Text(cq));
  }

  private static Key newKey(String r, String cf, String cq, String cv) {
    return new Key(new Text(r), new Text(cf), new Text(cq), new Text(cv));
  }

  private static Column newColumn(String cf, String cq) {
    return new Column(cf.getBytes(), cq == null ? null : cq.getBytes(), null);
  }

  private static Column newColumn(String cf) {
    return newColumn(cf, null);
  }

  private static Range newRange(String row) {
    return new Range(new Text(row));
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\RangeTest.java
  public void testBound1() {
    Range range1 = newRange("row1");

    Range range2 = range1.bound(newColumn("b"), newColumn("e"));

    assertFalse(range2.contains(newKey("row1")));
    assertFalse(range2.contains(newKey("row1", "a", "z")));
    assertTrue(range2.contains(newKey("row1", "b", "")));
    assertTrue(range2.contains(newKey("row1", "b", "z")));
    assertTrue(range2.contains(newKey("row1", "c", "z")));
    assertTrue(range2.contains(newKey("row1", "e", "")));
    assertTrue(range2.contains(newKey("row1", "e", "z")));
    assertFalse(range2.contains(newKey("row1", "e", "").followingKey(PartialKey.ROW_COLFAM)));
    assertFalse(range2.contains(newKey("row1", "f", "")));
    assertFalse(range2.contains(newKey("row1", "f", "z")));

  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\RangeTest.java
  public void testBound2() {
    Range range1 = new Range(newKey("row1", "b", "x"), true, newKey("row1", "f", "x"), true);

    Range range2 = range1.bound(newColumn("a"), newColumn("g"));
    assertEquals(range1, range2);
    assertFalse(range2.contains(newKey("row1", "a", "x")));
    assertTrue(range2.contains(newKey("row1", "b", "x")));
    assertTrue(range2.contains(newKey("row1", "f", "x")));
    assertFalse(range2.contains(newKey("row1", "g", "")));

    Range range3 = range1.bound(newColumn("c"), newColumn("d"));
    assertFalse(range3.contains(newKey("row1", "b", "x")));
    assertTrue(range3.contains(newKey("row1", "c", "")));
    assertTrue(range3.contains(newKey("row1", "c", "z")));
    assertTrue(range3.contains(newKey("row1", "d", "")));
    assertTrue(range3.contains(newKey("row1", "d", "z")));
    assertFalse(range3.contains(newKey("row1", "e", "")));
    assertFalse(range3.contains(newKey("row1", "f", "x")));

    Range range4 = range1.bound(newColumn("c", "w"), newColumn("d", "z"));
    assertFalse(range4.contains(newKey("row1", "b", "x")));
    assertTrue(range4.contains(newKey("row1", "c", "w")));
    assertTrue(range4.contains(newKey("row1", "c", "w", "")));
    assertTrue(range4.contains(newKey("row1", "c", "w", "a")));
    assertTrue(range4.contains(newKey("row1", "d", "z", "")));
    assertTrue(range4.contains(newKey("row1", "d", "z", "a")));
    assertFalse(range4.contains(newKey("row1", "d", "{", "")));
    assertFalse(
        range4.contains(newKey("row1", "d", "z", "a").followingKey(PartialKey.ROW_COLFAM_COLQUAL)));
    assertFalse(range4.contains(newKey("row1", "f", "x")));

    Range range5 = range1.bound(newColumn("b", "w"), newColumn("f", "z"));
    assertEquals(range1, range5);
    assertFalse(range5.contains(newKey("row1", "b", "w")));
    assertTrue(range5.contains(newKey("row1", "b", "x")));
    assertTrue(range5.contains(newKey("row1", "f", "x")));
    assertFalse(range5.contains(newKey("row1", "f", "z")));

    Range range6 = range1.bound(newColumn("b", "y"), newColumn("f", "w"));
    assertFalse(range6.contains(newKey("row1", "b", "x")));
    assertTrue(range6.contains(newKey("row1", "b", "y")));
    assertTrue(range6.contains(newKey("row1", "f", "w")));
    assertTrue(range6.contains(newKey("row1", "f", "w", "a")));
    assertFalse(
        range6.contains(newKey("row1", "f", "w").followingKey(PartialKey.ROW_COLFAM_COLQUAL)));
    assertFalse(range6.contains(newKey("row1", "f", "x")));

    Range range7 = range1.bound(newColumn("a", "y"), newColumn("g", "w"));
    assertEquals(range1, range7);
    assertFalse(range7.contains(newKey("row1", "b", "w")));
    assertTrue(range7.contains(newKey("row1", "b", "x")));
    assertTrue(range7.contains(newKey("row1", "f", "x")));
    assertFalse(range7.contains(newKey("row1", "f", "z")));
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\RangeTest.java
  public void testString() {
    Range r1 = new Range(new Text("r1"));
    Range r2 = new Range("r1");
    assertEquals(r1, r2);

    r1 = new Range(new Text("r1"), new Text("r2"));
    r2 = new Range("r1", "r2");
    assertEquals(r1, r2);

    r1 = new Range(new Text("r1"), false, new Text("r2"), true);
    r2 = new Range("r1", false, "r2", true);
    assertEquals(r1, r2);

    r1 = new Range(new Text("r1"), true, new Text("r2"), false);
    r2 = new Range("r1", true, "r2", false);
    assertEquals(r1, r2);

  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\RangeTest.java
  public void testExactRange() {
    Range r = Range.exact("abc");
    assertTrue(r.contains(new Key("abc")));
    assertTrue(r.contains(new Key("abc", "def")));
    assertFalse(r.contains(new Key("abcd")));
    assertFalse(r.contains(new Key("abb")));
    assertFalse(r.contains(new Key("abd")));

    r = Range.exact("abc", "def");
    assertTrue(r.contains(new Key("abc", "def", "ghi")));
    assertFalse(r.contains(new Key("abc", "defg")));
    assertFalse(r.contains(new Key("abc", "dee")));
    assertFalse(r.contains(new Key("abc", "deg")));

    r = Range.exact("abc", "def", "ghi");
    assertTrue(r.contains(new Key("abc", "def", "ghi", "j&k")));
    assertFalse(r.contains(new Key("abc", "def", "ghij")));
    assertFalse(r.contains(new Key("abc", "def", "ghh")));
    assertFalse(r.contains(new Key("abc", "def", "ghj")));

    r = Range.exact("abc", "def", "ghi", "j&k");
    assertTrue(r.contains(new Key("abc", "def", "ghi", "j&k", 7L)));
    assertFalse(r.contains(new Key("abc", "def", "ghi", "j&kl")));
    assertFalse(r.contains(new Key("abc", "def", "ghi", "j&j")));
    assertFalse(r.contains(new Key("abc", "def", "ghi", "j&l")));

    r = Range.exact("abc", "def", "ghi", "j&k", 7L);
    assertTrue(r.contains(new Key("abc", "def", "ghi", "j&k", 7L)));
    assertFalse(r.contains(new Key("abc", "def", "ghi", "j&k", 6L)));
    assertFalse(r.contains(new Key("abc", "def", "ghi", "j&k", 8L)));
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\RangeTest.java
  public void testPrefixRange() {
    Range r = Range.prefix("abc");
    assertTrue(r.contains(new Key("abc")));
    assertTrue(r.contains(new Key("abc", "def")));
    assertTrue(r.contains(new Key("abcd")));
    assertFalse(r.contains(new Key("abb")));
    assertFalse(r.contains(new Key("abd")));

    r = Range.prefix("abc", "def");
    assertTrue(r.contains(new Key("abc", "def", "ghi")));
    assertTrue(r.contains(new Key("abc", "defg")));
    assertFalse(r.contains(new Key("abc", "dee")));
    assertFalse(r.contains(new Key("abc", "deg")));

    r = Range.prefix("abc", "def", "ghi");
    assertTrue(r.contains(new Key("abc", "def", "ghi", "j&k")));
    assertTrue(r.contains(new Key("abc", "def", "ghij")));
    assertFalse(r.contains(new Key("abc", "def", "ghh")));
    assertFalse(r.contains(new Key("abc", "def", "ghj")));

    r = Range.prefix("abc", "def", "ghi", "j&k");
    assertTrue(r.contains(new Key("abc", "def", "ghi", "j&k", 7L)));
    assertTrue(r.contains(new Key("abc", "def", "ghi", "j&kl")));
    assertFalse(r.contains(new Key("abc", "def", "ghi", "j&j")));
    assertFalse(r.contains(new Key("abc", "def", "ghi", "j&l")));

    r = Range.prefix(makeText((byte) 0x07, (byte) 0xff));
    assertTrue(r.contains(new Key(makeText((byte) 0x07, (byte) 0xff))));
    assertTrue(r.contains(new Key(makeText((byte) 0x07, (byte) 0xff, (byte) 0x00))));
    assertFalse(r.contains(new Key(makeText((byte) 0x07, (byte) 0xfe))));
    assertFalse(r.contains(new Key(makeText((byte) 0x08))));

    r = Range.prefix(makeText((byte) 0xff));
    assertTrue(r.isInfiniteStopKey());
    assertTrue(r.contains(new Key(makeText((byte) 0xff))));
    assertTrue(r.contains(new Key(makeText((byte) 0xff, (byte) 0x07))));

    r = Range.prefix(new Text("abc"), makeText((byte) 0xff));
    assertTrue(r.contains(new Key(new Text("abc"), makeText((byte) 0xff))));
    assertTrue(r.contains(new Key(new Text("abc"), makeText((byte) 0xff, (byte) 0x07))));
    assertFalse(r.contains(new Key(new Text("abcd"))));
    assertFalse(r.contains(new Key(new Text("abd"))));

    r = Range.prefix(new Text("abc"), new Text("def"), makeText((byte) 0xff));
    assertTrue(r.contains(new Key(new Text("abc"), new Text("def"), makeText((byte) 0xff))));
    assertTrue(
        r.contains(new Key(new Text("abc"), new Text("def"), makeText((byte) 0xff, (byte) 0x07))));
    assertFalse(r.contains(new Key(new Text("abc"), new Text("defg"))));
    assertFalse(r.contains(new Key(new Text("abc"), new Text("deg"))));

    r = Range.prefix(new Text("abc"), new Text("def"), new Text("ghi"), makeText((byte) 0xff));
    assertTrue(r.contains(
        new Key(new Text("abc"), new Text("def"), new Text("ghi"), makeText((byte) 0xff))));
    assertTrue(r.contains(new Key(new Text("abc"), new Text("def"), new Text("ghi"),
        makeText((byte) 0xff, (byte) 0x07))));
    assertFalse(r.contains(new Key(new Text("abc"), new Text("def"), new Text("ghij"))));
    assertFalse(r.contains(new Key(new Text("abc"), new Text("def"), new Text("ghj"))));
  }

  public static Text makeText(byte... b) {
    return new Text(b);
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\RangeTest.java
  public void testPrefix() {
    assertEquals(Range.followingPrefix(makeText((byte) 0x07)), new Text(makeText((byte) 0x08)));
    assertEquals(Range.followingPrefix(makeText((byte) 0xfe)), new Text(makeText((byte) 0xff)));
    assertNull(Range.followingPrefix(makeText((byte) 0xff)));
    assertNull(Range.followingPrefix(makeText((byte) 0xff, (byte) 0xff)));
    assertEquals(Range.followingPrefix(makeText((byte) 0x07, (byte) 0xff)),
        new Text(makeText((byte) 0x08)));
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\RangeTest.java
  public void testReadFields() throws Exception {
    Range r = newRange("nuts", "soup");
    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    DataOutputStream dos = new DataOutputStream(baos);
    r.write(dos);
    dos.close();
    ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());
    DataInputStream dis = new DataInputStream(bais);
    Range r2 = new Range();
    r2.readFields(dis);
    dis.close();

    assertEquals(r, r2);
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\RangeTest.java
  public void testReadFields_Check() throws Exception {
    Range r =
        new Range(new Key(new Text("soup")), true, false, new Key(new Text("nuts")), true, false);
    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    DataOutputStream dos = new DataOutputStream(baos);
    r.write(dos);
    dos.close();
    ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());
    Range r2 = new Range();
    try (DataInputStream dis = new DataInputStream(bais)) {
      r2.readFields(dis);
      fail("readFields allowed invalid range");
    } catch (InvalidObjectException exc) {
      /* good! */
    }
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\RangeTest.java
  public void testThrift() {
    Range r = newRange("nuts", "soup");
    TRange tr = r.toThrift();
    Range r2 = new Range(tr);
    assertEquals(r, r2);
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\RangeTest.java
  public void testThrift_Check() {
    Range r =
        new Range(new Key(new Text("soup")), true, false, new Key(new Text("nuts")), true, false);
    TRange tr = r.toThrift();
    try {
      new Range(tr);
      fail("Thrift constructor allowed invalid range");
    } catch (IllegalArgumentException exc) {
      /* good! */
    }
  }
}
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\TableIdTest.java
  public void testCacheNoDuplicates() {
    // the next two lines just preloads the built-ins, since they now exist in a separate class from
    // TableId, and aren't preloaded when the TableId class is referenced
    assertNotSame(RootTable.ID, MetadataTable.ID);
    assertNotSame(RootTable.ID, ReplicationTable.ID);

    String tableString = "table-" + name.getMethodName();
    long initialSize = cacheCount();
    TableId table1 = TableId.of(tableString);
    assertEquals(initialSize + 1, cacheCount());
    assertEquals(tableString, table1.canonical());

    // ensure duplicates are not created
    TableId builtInTableId = TableId.of("!0");
    assertSame(MetadataTable.ID, builtInTableId);
    builtInTableId = TableId.of("+r");
    assertSame(RootTable.ID, builtInTableId);
    builtInTableId = TableId.of("+rep");
    assertSame(ReplicationTable.ID, builtInTableId);
    table1 = TableId.of(tableString);
    assertEquals(initialSize + 1, cacheCount());
    assertEquals(tableString, table1.canonical());
    TableId table2 = TableId.of(tableString);
    assertEquals(initialSize + 1, cacheCount());
    assertEquals(tableString, table2.canonical());
    assertSame(table1, table2);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\TableIdTest.java
  public void testCacheIncreasesAndDecreasesAfterGC() {
    long initialSize = cacheCount();
    assertTrue(initialSize < 20); // verify initial amount is reasonably low
    LOG.info("Initial cache size: {}", initialSize);
    LOG.info(TableId.cache.asMap().toString());

    // add one and check increase
    String tableString = "table-" + name.getMethodName();
    TableId table1 = TableId.of(tableString);
    assertEquals(initialSize + 1, cacheCount());
    assertEquals(tableString, table1.canonical());

    // create a bunch more and throw them away
    long preGCSize = 0;
    int i = 0;
    while ((preGCSize = cacheCount()) < 100) {
      TableId.of(new String("table" + i++));
    }
    LOG.info("Entries before System.gc(): {}", preGCSize);
    assertEquals(100, preGCSize);
    long postGCSize = preGCSize;
    while (postGCSize >= preGCSize) {
      tryToGc();
      postGCSize = cacheCount();
      LOG.info("Entries after System.gc(): {}", postGCSize);
    }
  }

  @SuppressFBWarnings(value = "DM_GC", justification = "gc is okay for test")
  static void tryToGc() {
    System.gc();
    try {
      Thread.sleep(100);
    } catch (InterruptedException e) {
      fail("Thread interrupted while waiting for GC");
    }
  }
}
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\ValueTest.java
  public void testDefault() {
    Value v = new Value();
    assertEquals(0, v.get().length);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\ValueTest.java
  public void testNullBytesConstructor() {
    new Value((byte[]) null);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\ValueTest.java
  public void testNullCopyConstructor() {
    new Value((Value) null);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\ValueTest.java
  public void testNullByteBufferConstructor() {
    new Value((ByteBuffer) null);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\ValueTest.java
  public void testNullSet() {
    Value v = new Value();
    v.set(null);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\ValueTest.java
  public void testByteArray() {
    Value v = new Value(DATA);
    assertArrayEquals(DATA, v.get());
    assertSame(DATA, v.get());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\ValueTest.java
  public void testByteArrayCopy() {
    Value v = new Value(DATA, true);
    assertArrayEquals(DATA, v.get());
    assertNotSame(DATA, v.get());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\ValueTest.java
  public void testByteBuffer() {
    Value v = new Value(DATABUFF);
    assertArrayEquals(DATA, v.get());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\ValueTest.java
  public void testValueCopy() {
    Value ov = createMock(Value.class);
    expect(ov.get()).andReturn(DATA);
    expect(ov.getSize()).andReturn(4);
    replay(ov);
    Value v = new Value(ov);
    assertArrayEquals(DATA, v.get());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\ValueTest.java
  public void testByteArrayOffsetLength() {
    Value v = new Value(DATA, 0, 4);
    assertArrayEquals(DATA, v.get());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\ValueTest.java
  public void testSet() {
    Value v = new Value();
    v.set(DATA);
    assertArrayEquals(DATA, v.get());
    assertSame(DATA, v.get());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\ValueTest.java
  public void testCopy() {
    Value v = new Value();
    v.copy(DATA);
    assertArrayEquals(DATA, v.get());
    assertNotSame(DATA, v.get());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\ValueTest.java
  public void testGetSize() {
    Value v = new Value(DATA);
    assertEquals(DATA.length, v.getSize());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\ValueTest.java
  public void testGetSizeDefault() {
    Value v = new Value();
    assertEquals(0, v.getSize());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\ValueTest.java
  public void testWriteRead() throws Exception {
    Value v = new Value(DATA);
    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    DataOutputStream dos = new DataOutputStream(baos);
    v.write(dos);
    dos.close();
    ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());
    DataInputStream dis = new DataInputStream(bais);
    Value v2 = new Value();
    v2.readFields(dis);
    dis.close();
    assertArrayEquals(DATA, v2.get());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\ValueTest.java
  public void testHashCode() {
    Value v1 = new Value(DATA);
    Value v2 = new Value(DATA);
    assertEquals(v1.hashCode(), v2.hashCode());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\ValueTest.java
  public void testCompareTo() {
    Value v1 = new Value(DATA);
    Value v2 = new Value(toBytes("datb"));
    assertTrue(v1.compareTo(v2) < 0);
    assertTrue(v2.compareTo(v1) > 0);
    Value v1a = new Value(DATA);
    assertEquals(0, v1.compareTo(v1a));
    Value v3 = new Value(toBytes("datc"));
    assertTrue(v2.compareTo(v3) < 0);
    assertTrue(v1.compareTo(v3) < 0);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\ValueTest.java
  public void testEquals() {
    Value v1 = new Value(DATA);
    assertEquals(v1, v1);
    Value v2 = new Value(DATA);
    assertEquals(v1, v2);
    assertEquals(v2, v1);
    Value v3 = new Value(toBytes("datb"));
    assertNotEquals(v1, v3);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\ValueTest.java
  public void testString() {
    Value v1 = new Value("abc");
    Value v2 = new Value("abc".getBytes(UTF_8));
    assertEquals(v2, v1);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\ValueTest.java
  public void testNullCharSequence() {
    new Value((CharSequence) null);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\ValueTest.java
  public void testText() {
    Value v1 = new Value(new Text("abc"));
    Value v2 = new Value("abc");
    assertEquals(v2, v1);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\data\ValueTest.java
  public void testNullText() {
    new Value((Text) null);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\file\BloomFilterLayerLookupTest.java
  public void test() throws IOException {
    HashSet<Integer> valsSet = new HashSet<>();
    for (int i = 0; i < 100000; i++) {
      valsSet.add(random.nextInt(Integer.MAX_VALUE));
    }

    ArrayList<Integer> vals = new ArrayList<>(valsSet);
    Collections.sort(vals);

    ConfigurationCopy acuconf = new ConfigurationCopy(DefaultConfiguration.getInstance());
    acuconf.set(Property.TABLE_BLOOM_ENABLED, "true");
    acuconf.set(Property.TABLE_BLOOM_KEY_FUNCTOR, ColumnFamilyFunctor.class.getName());
    acuconf.set(Property.TABLE_FILE_TYPE, RFile.EXTENSION);
    acuconf.set(Property.TABLE_BLOOM_LOAD_THRESHOLD, "1");
    acuconf.set(Property.TSERV_BLOOM_LOAD_MAXCONCURRENT, "1");

    Configuration conf = new Configuration();
    FileSystem fs = FileSystem.get(conf);

    // get output file name
    String suffix = FileOperations.getNewFileExtension(acuconf);
    String fname = new File(tempDir.getRoot(), testName + "." + suffix).getAbsolutePath();
    FileSKVWriter bmfw = FileOperations.getInstance().newWriterBuilder()
        .forFile(fname, fs, conf, CryptoServiceFactory.newDefaultInstance())
        .withTableConfiguration(acuconf).build();

    // write data to file
    long t1 = System.currentTimeMillis();
    bmfw.startDefaultLocalityGroup();
    for (Integer i : vals) {
      String fi = String.format("%010d", i);
      bmfw.append(new Key(new Text("r" + fi), new Text("cf1")), new Value("v" + fi));
      bmfw.append(new Key(new Text("r" + fi), new Text("cf2")), new Value("v" + fi));
    }
    long t2 = System.currentTimeMillis();

    log.debug(String.format("write rate %6.2f%n", vals.size() / ((t2 - t1) / 1000.0)));
    bmfw.close();

    t1 = System.currentTimeMillis();
    FileSKVIterator bmfr = FileOperations.getInstance().newReaderBuilder()
        .forFile(fname, fs, conf, CryptoServiceFactory.newDefaultInstance())
        .withTableConfiguration(acuconf).build();
    t2 = System.currentTimeMillis();
    log.debug("Opened {} in {}", fname, (t2 - t1));

    int hits = 0;
    t1 = System.currentTimeMillis();
    for (int i = 0; i < 5000; i++) {
      int row = random.nextInt(Integer.MAX_VALUE);
      seek(bmfr, row);
      if (valsSet.contains(row)) {
        hits++;
        assertTrue(bmfr.hasTop());
      }
    }
    t2 = System.currentTimeMillis();

    double rate1 = 5000 / ((t2 - t1) / 1000.0);
    log.debug(String.format("random lookup rate : %6.2f%n", rate1));
    log.debug("hits = {}", hits);

    int count = 0;
    t1 = System.currentTimeMillis();
    for (Integer row : valsSet) {
      seek(bmfr, row);
      assertTrue(bmfr.hasTop());
      count++;
      if (count >= 500) {
        break;
      }
    }
    t2 = System.currentTimeMillis();

    double rate2 = 500 / ((t2 - t1) / 1000.0);
    log.debug(String.format("existant lookup rate %6.2f%n", rate2));
    log.debug("expected hits 500.  Receive hits: {}", count);
    bmfr.close();

    assertTrue(rate1 > rate2);
  }

  private void seek(FileSKVIterator bmfr, int row) throws IOException {
    String fi = String.format("%010d", row);
    // bmfr.seek(new Range(new Text("r"+fi)));
    Key k1 = new Key(new Text("r" + fi), new Text("cf1"));
    bmfr.seek(new Range(k1, true, k1.followingKey(PartialKey.ROW_COLFAM), false), new ArrayList<>(),
        false);
  }

}
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\file\FileOperationsTest.java
  public void handlesFilenamesWithMoreThanOneDot() throws IOException {

    boolean caughtException = false;
    FileSKVWriter writer = null;
    String filename = "target/test.file." + RFile.EXTENSION;
    File testFile = new File(filename);
    if (testFile.exists()) {
      FileUtils.forceDelete(testFile);
    }
    try {
      FileOperations fileOperations = FileOperations.getInstance();
      Configuration conf = new Configuration();
      FileSystem fs = FileSystem.getLocal(conf);
      AccumuloConfiguration acuconf = DefaultConfiguration.getInstance();
      writer = fileOperations.newWriterBuilder()
          .forFile(filename, fs, conf, CryptoServiceFactory.newDefaultInstance())
          .withTableConfiguration(acuconf).build();
      writer.close();
    } catch (Exception ex) {
      caughtException = true;
    } finally {
      if (writer != null) {
        writer.close();
      }
      FileUtils.forceDelete(testFile);
    }

    assertFalse("Should not throw with more than 1 dot in filename.", caughtException);
  }
}
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\file\blockfile\cache\BlockCacheFactoryTest.java
  public void testCreateLruBlockCacheFactory() throws Exception {
    DefaultConfiguration dc = DefaultConfiguration.getInstance();
    ConfigurationCopy cc = new ConfigurationCopy(dc);
    cc.set(Property.TSERV_CACHE_MANAGER_IMPL, LruBlockCacheManager.class.getName());
    BlockCacheManagerFactory.getInstance(cc);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\file\blockfile\cache\BlockCacheFactoryTest.java
  public void testCreateTinyLfuBlockCacheFactory() throws Exception {
    DefaultConfiguration dc = DefaultConfiguration.getInstance();
    ConfigurationCopy cc = new ConfigurationCopy(dc);
    cc.set(Property.TSERV_CACHE_MANAGER_IMPL, TinyLfuBlockCacheManager.class.getName());
    BlockCacheManagerFactory.getInstance(cc);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\file\blockfile\cache\BlockCacheFactoryTest.java
  public void testStartWithDefault() throws Exception {
    DefaultConfiguration dc = DefaultConfiguration.getInstance();
    BlockCacheManager manager = BlockCacheManagerFactory.getInstance(dc);
    manager.start(new BlockCacheConfiguration(dc));
    assertNotNull(manager.getBlockCache(CacheType.INDEX));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\file\blockfile\cache\BlockCacheManagerTest.java
  public void testGetPropertyPrefix() {
    assertEquals("tserver.cache.config.lru.data.",
        BlockCacheManager.getFullyQualifiedPropertyPrefix("lru", CacheType.DATA));
    assertEquals("tserver.cache.config.lru.index.",
        BlockCacheManager.getFullyQualifiedPropertyPrefix("lru", CacheType.INDEX));
    assertEquals("tserver.cache.config.lru.summary.",
        BlockCacheManager.getFullyQualifiedPropertyPrefix("lru", CacheType.SUMMARY));
    assertEquals("tserver.cache.config.lru.default.",
        BlockCacheManager.getFullyQualifiedPropertyPrefix("lru"));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\file\blockfile\cache\TestCachedBlockQueue.java
  public void testQueue() {

    CachedBlock cb1 = new CachedBlock(1000, "cb1", 1);
    CachedBlock cb2 = new CachedBlock(1500, "cb2", 2);
    CachedBlock cb3 = new CachedBlock(1000, "cb3", 3);
    CachedBlock cb4 = new CachedBlock(1500, "cb4", 4);
    CachedBlock cb5 = new CachedBlock(1000, "cb5", 5);
    CachedBlock cb6 = new CachedBlock(1750, "cb6", 6);
    CachedBlock cb7 = new CachedBlock(1000, "cb7", 7);
    CachedBlock cb8 = new CachedBlock(1500, "cb8", 8);
    CachedBlock cb9 = new CachedBlock(1000, "cb9", 9);
    CachedBlock cb10 = new CachedBlock(1500, "cb10", 10);

    CachedBlockQueue queue = new CachedBlockQueue(10000, 1000);

    queue.add(cb1);
    queue.add(cb2);
    queue.add(cb3);
    queue.add(cb4);
    queue.add(cb5);
    queue.add(cb6);
    queue.add(cb7);
    queue.add(cb8);
    queue.add(cb9);
    queue.add(cb10);

    // We expect cb1 through cb8 to be in the queue
    long expectedSize = cb1.heapSize() + cb2.heapSize() + cb3.heapSize() + cb4.heapSize()
        + cb5.heapSize() + cb6.heapSize() + cb7.heapSize() + cb8.heapSize();

    assertEquals(queue.heapSize(), expectedSize);

    LinkedList<org.apache.accumulo.core.file.blockfile.cache.lru.CachedBlock> blocks =
        queue.getList();
    assertEquals(blocks.poll().getName(), "cb1");
    assertEquals(blocks.poll().getName(), "cb2");
    assertEquals(blocks.poll().getName(), "cb3");
    assertEquals(blocks.poll().getName(), "cb4");
    assertEquals(blocks.poll().getName(), "cb5");
    assertEquals(blocks.poll().getName(), "cb6");
    assertEquals(blocks.poll().getName(), "cb7");
    assertEquals(blocks.poll().getName(), "cb8");

  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\file\blockfile\cache\TestCachedBlockQueue.java
  public void testQueueSmallBlockEdgeCase() {

    CachedBlock cb1 = new CachedBlock(1000, "cb1", 1);
    CachedBlock cb2 = new CachedBlock(1500, "cb2", 2);
    CachedBlock cb3 = new CachedBlock(1000, "cb3", 3);
    CachedBlock cb4 = new CachedBlock(1500, "cb4", 4);
    CachedBlock cb5 = new CachedBlock(1000, "cb5", 5);
    CachedBlock cb6 = new CachedBlock(1750, "cb6", 6);
    CachedBlock cb7 = new CachedBlock(1000, "cb7", 7);
    CachedBlock cb8 = new CachedBlock(1500, "cb8", 8);
    CachedBlock cb9 = new CachedBlock(1000, "cb9", 9);
    CachedBlock cb10 = new CachedBlock(1500, "cb10", 10);

    CachedBlockQueue queue = new CachedBlockQueue(10000, 1000);

    queue.add(cb1);
    queue.add(cb2);
    queue.add(cb3);
    queue.add(cb4);
    queue.add(cb5);
    queue.add(cb6);
    queue.add(cb7);
    queue.add(cb8);
    queue.add(cb9);
    queue.add(cb10);

    CachedBlock cb0 = new CachedBlock(10 + CachedBlock.PER_BLOCK_OVERHEAD, "cb0", 0);
    queue.add(cb0);

    // This is older so we must include it, but it will not end up kicking
    // anything out because (heapSize - cb8.heapSize + cb0.heapSize < maxSize)
    // and we must always maintain heapSize >= maxSize once we achieve it.

    // We expect cb0 through cb8 to be in the queue
    long expectedSize = cb1.heapSize() + cb2.heapSize() + cb3.heapSize() + cb4.heapSize()
        + cb5.heapSize() + cb6.heapSize() + cb7.heapSize() + cb8.heapSize() + cb0.heapSize();

    assertEquals(queue.heapSize(), expectedSize);

    LinkedList<org.apache.accumulo.core.file.blockfile.cache.lru.CachedBlock> blocks =
        queue.getList();
    assertEquals(blocks.poll().getName(), "cb0");
    assertEquals(blocks.poll().getName(), "cb1");
    assertEquals(blocks.poll().getName(), "cb2");
    assertEquals(blocks.poll().getName(), "cb3");
    assertEquals(blocks.poll().getName(), "cb4");
    assertEquals(blocks.poll().getName(), "cb5");
    assertEquals(blocks.poll().getName(), "cb6");
    assertEquals(blocks.poll().getName(), "cb7");
    assertEquals(blocks.poll().getName(), "cb8");

  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\file\blockfile\cache\TestLruBlockCache.java
  public void testConfiguration() {
    ConfigurationCopy cc = new ConfigurationCopy();
    cc.set(Property.TSERV_CACHE_MANAGER_IMPL, LruBlockCacheManager.class.getName());
    cc.set(Property.TSERV_DEFAULT_BLOCKSIZE, Long.toString(1019));
    cc.set(Property.TSERV_INDEXCACHE_SIZE, Long.toString(1000023));
    cc.set(Property.TSERV_DATACACHE_SIZE, Long.toString(1000027));
    cc.set(Property.TSERV_SUMMARYCACHE_SIZE, Long.toString(1000029));

    LruBlockCacheConfiguration.builder(CacheType.INDEX).useEvictionThread(false).minFactor(0.93f)
        .acceptableFactor(0.97f).singleFactor(0.20f).multiFactor(0.30f).memoryFactor(0.50f)
        .mapConcurrencyLevel(5).buildMap().forEach(cc::set);

    String defaultPrefix = BlockCacheManager.CACHE_PROPERTY_BASE
        + LruBlockCacheConfiguration.PROPERTY_PREFIX + ".default.";

    // this should be overridden by cache type specific setting
    cc.set(defaultPrefix + LruBlockCacheConfiguration.MEMORY_FACTOR_PROPERTY, "0.6");

    // this is not set for the cache type, so should fall back to default
    cc.set(defaultPrefix + LruBlockCacheConfiguration.MAP_LOAD_PROPERTY, "0.53");

    BlockCacheConfiguration bcc = new BlockCacheConfiguration(cc);
    LruBlockCacheConfiguration lbcc = new LruBlockCacheConfiguration(bcc, CacheType.INDEX);

    assertFalse(lbcc.isUseEvictionThread());
    assertEquals(0.93f, lbcc.getMinFactor(), 0.0000001);
    assertEquals(0.97f, lbcc.getAcceptableFactor(), 0.0000001);
    assertEquals(0.20f, lbcc.getSingleFactor(), 0.0000001);
    assertEquals(0.30f, lbcc.getMultiFactor(), 0.0000001);
    assertEquals(0.50f, lbcc.getMemoryFactor(), 0.0000001);
    assertEquals(0.53f, lbcc.getMapLoadFactor(), 0.0000001);
    assertEquals(5, lbcc.getMapConcurrencyLevel());
    assertEquals(1019, lbcc.getBlockSize());
    assertEquals(1000023, lbcc.getMaxSize());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\file\blockfile\cache\TestLruBlockCache.java
  public void testBackgroundEvictionThread() throws Exception {

    long maxSize = 100000;
    long blockSize = calculateBlockSizeDefault(maxSize, 9); // room for 9, will evict

    DefaultConfiguration dc = DefaultConfiguration.getInstance();
    ConfigurationCopy cc = new ConfigurationCopy(dc);
    cc.set(Property.TSERV_CACHE_MANAGER_IMPL, LruBlockCacheManager.class.getName());
    BlockCacheManager manager = BlockCacheManagerFactory.getInstance(cc);
    cc.set(Property.TSERV_DEFAULT_BLOCKSIZE, Long.toString(blockSize));
    cc.set(Property.TSERV_INDEXCACHE_SIZE, Long.toString(maxSize));
    manager.start(new BlockCacheConfiguration(cc));
    LruBlockCache cache = (LruBlockCache) manager.getBlockCache(CacheType.INDEX);

    Block[] blocks = generateFixedBlocks(10, blockSize, "block");

    // Add all the blocks
    for (Block block : blocks) {
      cache.cacheBlock(block.blockName, block.buf);
    }

    // Let the eviction run
    int n = 0;
    while (cache.getEvictionCount() == 0) {
      Thread.sleep(1000);
      assertTrue(n++ < 1);
    }
    // A single eviction run should have occurred
    assertEquals(cache.getEvictionCount(), 1);

    manager.stop();
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\file\blockfile\cache\TestLruBlockCache.java
  public void testCacheSimple() throws Exception {

    long maxSize = 1000000;
    long blockSize = calculateBlockSizeDefault(maxSize, 101);

    DefaultConfiguration dc = DefaultConfiguration.getInstance();
    ConfigurationCopy cc = new ConfigurationCopy(dc);
    cc.set(Property.TSERV_CACHE_MANAGER_IMPL, LruBlockCacheManager.class.getName());
    BlockCacheManager manager = BlockCacheManagerFactory.getInstance(cc);
    cc.set(Property.TSERV_DEFAULT_BLOCKSIZE, Long.toString(blockSize));
    cc.set(Property.TSERV_INDEXCACHE_SIZE, Long.toString(maxSize));
    manager.start(new BlockCacheConfiguration(cc));
    LruBlockCache cache = (LruBlockCache) manager.getBlockCache(CacheType.INDEX);

    Block[] blocks = generateRandomBlocks(100, blockSize);

    long expectedCacheSize = cache.heapSize();

    // Confirm empty
    for (Block block : blocks) {
      assertNull(cache.getBlock(block.blockName));
    }

    // Add blocks
    for (Block block : blocks) {
      cache.cacheBlock(block.blockName, block.buf);
      expectedCacheSize += block.heapSize();
    }

    // Verify correctly calculated cache heap size
    assertEquals(expectedCacheSize, cache.heapSize());

    // Check if all blocks are properly cached and retrieved
    for (Block block : blocks) {
      CacheEntry ce = cache.getBlock(block.blockName);
      assertNotNull(ce);
      assertEquals(ce.getBuffer().length, block.buf.length);
    }

    // Verify correctly calculated cache heap size
    assertEquals(expectedCacheSize, cache.heapSize());

    // Check if all blocks are properly cached and retrieved
    for (Block block : blocks) {
      CacheEntry ce = cache.getBlock(block.blockName);
      assertNotNull(ce);
      assertEquals(ce.getBuffer().length, block.buf.length);
    }

    // Expect no evictions
    assertEquals(0, cache.getEvictionCount());
    // Thread t = new LruBlockCache.StatisticsThread(cache);
    // t.start();
    // t.join();
    manager.stop();
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\file\blockfile\cache\TestLruBlockCache.java
  public void testCacheEvictionSimple() throws Exception {

    long maxSize = 100000;
    long blockSize = calculateBlockSizeDefault(maxSize, 10);

    DefaultConfiguration dc = DefaultConfiguration.getInstance();
    ConfigurationCopy cc = new ConfigurationCopy(dc);
    cc.set(Property.TSERV_CACHE_MANAGER_IMPL, LruBlockCacheManager.class.getName());
    BlockCacheManager manager = BlockCacheManagerFactory.getInstance(cc);
    cc.set(Property.TSERV_DEFAULT_BLOCKSIZE, Long.toString(blockSize));
    cc.set(Property.TSERV_INDEXCACHE_SIZE, Long.toString(maxSize));
    LruBlockCacheConfiguration.builder(CacheType.INDEX).useEvictionThread(false).buildMap()
        .forEach(cc::set);
    manager.start(new BlockCacheConfiguration(cc));

    LruBlockCache cache = (LruBlockCache) manager.getBlockCache(CacheType.INDEX);

    Block[] blocks = generateFixedBlocks(10, blockSize, "block");

    long expectedCacheSize = cache.heapSize();

    // Add all the blocks
    for (Block block : blocks) {
      cache.cacheBlock(block.blockName, block.buf);
      expectedCacheSize += block.heapSize();
    }

    // A single eviction run should have occurred
    assertEquals(1, cache.getEvictionCount());

    // Our expected size overruns acceptable limit
    assertTrue(
        expectedCacheSize > (maxSize * LruBlockCacheConfiguration.DEFAULT_ACCEPTABLE_FACTOR));

    // But the cache did not grow beyond max
    assertTrue(cache.heapSize() < maxSize);

    // And is still below the acceptable limit
    assertTrue(cache.heapSize() < (maxSize * LruBlockCacheConfiguration.DEFAULT_ACCEPTABLE_FACTOR));

    // All blocks except block 0 and 1 should be in the cache
    assertNull(cache.getBlock(blocks[0].blockName));
    assertNull(cache.getBlock(blocks[1].blockName));
    for (int i = 2; i < blocks.length; i++) {
      assertTrue(Arrays.equals(cache.getBlock(blocks[i].blockName).getBuffer(), blocks[i].buf));
    }
    manager.stop();
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\file\blockfile\cache\TestLruBlockCache.java
  public void testCacheEvictionTwoPriorities() throws Exception {

    long maxSize = 100000;
    long blockSize = calculateBlockSizeDefault(maxSize, 10);

    DefaultConfiguration dc = DefaultConfiguration.getInstance();
    ConfigurationCopy cc = new ConfigurationCopy(dc);
    cc.set(Property.TSERV_CACHE_MANAGER_IMPL, LruBlockCacheManager.class.getName());
    BlockCacheManager manager = BlockCacheManagerFactory.getInstance(cc);
    cc.set(Property.TSERV_DEFAULT_BLOCKSIZE, Long.toString(blockSize));
    cc.set(Property.TSERV_INDEXCACHE_SIZE, Long.toString(maxSize));
    LruBlockCacheConfiguration.builder(CacheType.INDEX).useEvictionThread(false).minFactor(0.98f)
        .acceptableFactor(0.99f).singleFactor(0.25f).multiFactor(0.50f).memoryFactor(0.25f)
        .buildMap().forEach(cc::set);
    manager.start(new BlockCacheConfiguration(cc));
    LruBlockCache cache = (LruBlockCache) manager.getBlockCache(CacheType.INDEX);

    Block[] singleBlocks = generateFixedBlocks(5, 10000, "single");
    Block[] multiBlocks = generateFixedBlocks(5, 10000, "multi");

    long expectedCacheSize = cache.heapSize();

    // Add and get the multi blocks
    for (Block block : multiBlocks) {
      cache.cacheBlock(block.blockName, block.buf);
      expectedCacheSize += block.heapSize();
      assertTrue(Arrays.equals(cache.getBlock(block.blockName).getBuffer(), block.buf));
    }

    // Add the single blocks (no get)
    for (Block block : singleBlocks) {
      cache.cacheBlock(block.blockName, block.buf);
      expectedCacheSize += block.heapSize();
    }

    // A single eviction run should have occurred
    assertEquals(cache.getEvictionCount(), 1);

    // We expect two entries evicted
    assertEquals(cache.getEvictedCount(), 2);

    // Our expected size overruns acceptable limit
    assertTrue(
        expectedCacheSize > (maxSize * LruBlockCacheConfiguration.DEFAULT_ACCEPTABLE_FACTOR));

    // But the cache did not grow beyond max
    assertTrue(cache.heapSize() <= maxSize);

    // And is now below the acceptable limit
    assertTrue(
        cache.heapSize() <= (maxSize * LruBlockCacheConfiguration.DEFAULT_ACCEPTABLE_FACTOR));

    // We expect fairness across the two priorities.
    // This test makes multi go barely over its limit, in-memory
    // empty, and the rest in single. Two single evictions and
    // one multi eviction expected.
    assertNull(cache.getBlock(singleBlocks[0].blockName));
    assertNull(cache.getBlock(multiBlocks[0].blockName));

    // And all others to be cached
    for (int i = 1; i < 4; i++) {
      assertTrue(Arrays.equals(cache.getBlock(singleBlocks[i].blockName).getBuffer(),
          singleBlocks[i].buf));
      assertTrue(
          Arrays.equals(cache.getBlock(multiBlocks[i].blockName).getBuffer(), multiBlocks[i].buf));
    }
    manager.stop();
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\file\blockfile\cache\TestLruBlockCache.java
  public void testCacheEvictionThreePriorities() throws Exception {

    long maxSize = 100000;
    long blockSize = calculateBlockSize(maxSize, 10);

    DefaultConfiguration dc = DefaultConfiguration.getInstance();
    ConfigurationCopy cc = new ConfigurationCopy(dc);
    cc.set(Property.TSERV_CACHE_MANAGER_IMPL, LruBlockCacheManager.class.getName());
    BlockCacheManager manager = BlockCacheManagerFactory.getInstance(cc);
    cc.set(Property.TSERV_DEFAULT_BLOCKSIZE, Long.toString(blockSize));
    cc.set(Property.TSERV_INDEXCACHE_SIZE, Long.toString(maxSize));
    LruBlockCacheConfiguration.builder(CacheType.INDEX).useEvictionThread(false).minFactor(0.98f)
        .acceptableFactor(0.99f).singleFactor(0.33f).multiFactor(0.33f).memoryFactor(0.34f)
        .buildMap().forEach(cc::set);
    manager.start(new BlockCacheConfiguration(cc));
    LruBlockCache cache = (LruBlockCache) manager.getBlockCache(CacheType.INDEX);

    Block[] singleBlocks = generateFixedBlocks(5, blockSize, "single");
    Block[] multiBlocks = generateFixedBlocks(5, blockSize, "multi");
    Block[] memoryBlocks = generateFixedBlocks(5, blockSize, "memory");

    long expectedCacheSize = cache.heapSize();

    // Add 3 blocks from each priority
    for (int i = 0; i < 3; i++) {

      // Just add single blocks
      cache.cacheBlock(singleBlocks[i].blockName, singleBlocks[i].buf);
      expectedCacheSize += singleBlocks[i].heapSize();

      // Add and get multi blocks
      cache.cacheBlock(multiBlocks[i].blockName, multiBlocks[i].buf);
      expectedCacheSize += multiBlocks[i].heapSize();
      cache.getBlock(multiBlocks[i].blockName);

      // Add memory blocks as such
      cache.cacheBlock(memoryBlocks[i].blockName, memoryBlocks[i].buf, true);
      expectedCacheSize += memoryBlocks[i].heapSize();

    }

    // Do not expect any evictions yet
    assertEquals(0, cache.getEvictionCount());

    // Verify cache size
    assertEquals(expectedCacheSize, cache.heapSize());

    // Insert a single block, oldest single should be evicted
    cache.cacheBlock(singleBlocks[3].blockName, singleBlocks[3].buf);

    // Single eviction, one thing evicted
    assertEquals(1, cache.getEvictionCount());
    assertEquals(1, cache.getEvictedCount());

    // Verify oldest single block is the one evicted
    assertNull(cache.getBlock(singleBlocks[0].blockName));

    // Change the oldest remaining single block to a multi
    cache.getBlock(singleBlocks[1].blockName);

    // Insert another single block
    cache.cacheBlock(singleBlocks[4].blockName, singleBlocks[4].buf);

    // Two evictions, two evicted.
    assertEquals(2, cache.getEvictionCount());
    assertEquals(2, cache.getEvictedCount());

    // Oldest multi block should be evicted now
    assertNull(cache.getBlock(multiBlocks[0].blockName));

    // Insert another memory block
    cache.cacheBlock(memoryBlocks[3].blockName, memoryBlocks[3].buf, true);

    // Three evictions, three evicted.
    assertEquals(3, cache.getEvictionCount());
    assertEquals(3, cache.getEvictedCount());

    // Oldest memory block should be evicted now
    assertNull(cache.getBlock(memoryBlocks[0].blockName));

    // Add a block that is twice as big (should force two evictions)
    Block[] bigBlocks = generateFixedBlocks(3, blockSize * 3, "big");
    cache.cacheBlock(bigBlocks[0].blockName, bigBlocks[0].buf);

    // Four evictions, six evicted (inserted block 3X size, expect +3 evicted)
    assertEquals(4, cache.getEvictionCount());
    assertEquals(6, cache.getEvictedCount());

    // Expect three remaining singles to be evicted
    assertNull(cache.getBlock(singleBlocks[2].blockName));
    assertNull(cache.getBlock(singleBlocks[3].blockName));
    assertNull(cache.getBlock(singleBlocks[4].blockName));

    // Make the big block a multi block
    cache.getBlock(bigBlocks[0].blockName);

    // Cache another single big block
    cache.cacheBlock(bigBlocks[1].blockName, bigBlocks[1].buf);

    // Five evictions, nine evicted (3 new)
    assertEquals(5, cache.getEvictionCount());
    assertEquals(9, cache.getEvictedCount());

    // Expect three remaining multis to be evicted
    assertNull(cache.getBlock(singleBlocks[1].blockName));
    assertNull(cache.getBlock(multiBlocks[1].blockName));
    assertNull(cache.getBlock(multiBlocks[2].blockName));

    // Cache a big memory block
    cache.cacheBlock(bigBlocks[2].blockName, bigBlocks[2].buf, true);

    // Six evictions, twelve evicted (3 new)
    assertEquals(6, cache.getEvictionCount());
    assertEquals(12, cache.getEvictedCount());

    // Expect three remaining in-memory to be evicted
    assertNull(cache.getBlock(memoryBlocks[1].blockName));
    assertNull(cache.getBlock(memoryBlocks[2].blockName));
    assertNull(cache.getBlock(memoryBlocks[3].blockName));

    manager.stop();
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\file\blockfile\cache\TestLruBlockCache.java
  public void testScanResistance() throws Exception {

    long maxSize = 100000;
    long blockSize = calculateBlockSize(maxSize, 10);

    DefaultConfiguration dc = DefaultConfiguration.getInstance();
    ConfigurationCopy cc = new ConfigurationCopy(dc);
    cc.set(Property.TSERV_CACHE_MANAGER_IMPL, LruBlockCacheManager.class.getName());
    BlockCacheManager manager = BlockCacheManagerFactory.getInstance(cc);
    cc.set(Property.TSERV_DEFAULT_BLOCKSIZE, Long.toString(blockSize));
    cc.set(Property.TSERV_INDEXCACHE_SIZE, Long.toString(maxSize));
    LruBlockCacheConfiguration.builder(CacheType.INDEX).useEvictionThread(false).minFactor(0.66f)
        .acceptableFactor(0.99f).singleFactor(0.33f).multiFactor(0.33f).memoryFactor(0.34f)
        .buildMap().forEach(cc::set);
    manager.start(new BlockCacheConfiguration(cc));
    LruBlockCache cache = (LruBlockCache) manager.getBlockCache(CacheType.INDEX);

    Block[] singleBlocks = generateFixedBlocks(20, blockSize, "single");
    Block[] multiBlocks = generateFixedBlocks(5, blockSize, "multi");

    // Add 5 multi blocks
    for (Block block : multiBlocks) {
      cache.cacheBlock(block.blockName, block.buf);
      cache.getBlock(block.blockName);
    }

    // Add 5 single blocks
    for (int i = 0; i < 5; i++) {
      cache.cacheBlock(singleBlocks[i].blockName, singleBlocks[i].buf);
    }

    // An eviction ran
    assertEquals(1, cache.getEvictionCount());

    // To drop down to 2/3 capacity, we'll need to evict 4 blocks
    assertEquals(4, cache.getEvictedCount());

    // Should have been taken off equally from single and multi
    assertNull(cache.getBlock(singleBlocks[0].blockName));
    assertNull(cache.getBlock(singleBlocks[1].blockName));
    assertNull(cache.getBlock(multiBlocks[0].blockName));
    assertNull(cache.getBlock(multiBlocks[1].blockName));

    // Let's keep "scanning" by adding single blocks. From here on we only
    // expect evictions from the single bucket.

    // Every time we reach 10 total blocks (every 4 inserts) we get 4 single
    // blocks evicted. Inserting 13 blocks should yield 3 more evictions and
    // 12 more evicted.

    for (int i = 5; i < 18; i++) {
      cache.cacheBlock(singleBlocks[i].blockName, singleBlocks[i].buf);
    }

    // 4 total evictions, 16 total evicted
    assertEquals(4, cache.getEvictionCount());
    assertEquals(16, cache.getEvictedCount());

    // Should now have 7 total blocks
    assertEquals(7, cache.size());

    manager.stop();
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\file\rfile\BlockIndexTest.java
  public void test1() throws IOException {
    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    DataOutputStream out = new DataOutputStream(baos);

    Key prevKey = null;

    int num = 1000;

    for (int i = 0; i < num; i++) {
      Key key = new Key(RFileTest.formatString("", i), "cf1", "cq1");
      new RelativeKey(prevKey, key).write(out);
      new Value(new byte[0]).write(out);
      prevKey = key;
    }

    out.close();
    final byte[] data = baos.toByteArray();

    CacheEntry ce = new MyCacheEntry(data);

    CachableBlockFile.CachedBlockRead cacheBlock = new CachableBlockFile.CachedBlockRead(ce, data);
    BlockIndex blockIndex = null;

    for (int i = 0; i < 129; i++)
      blockIndex = BlockIndex.getIndex(cacheBlock, new IndexEntry(prevKey, num, 0, 0, 0));

    BlockIndexEntry[] indexEntries = blockIndex.getIndexEntries();

    for (int i = 0; i < indexEntries.length; i++) {
      int row = Integer.parseInt(indexEntries[i].getPrevKey().getRowData().toString());

      BlockIndexEntry bie;

      bie =
          blockIndex.seekBlock(new Key(RFileTest.formatString("", row), "cf1", "cq1"), cacheBlock);
      if (i == 0)
        assertSame(null, bie);
      else
        assertSame(indexEntries[i - 1], bie);

      assertSame(bie, blockIndex
          .seekBlock(new Key(RFileTest.formatString("", row - 1), "cf1", "cq1"), cacheBlock));

      bie = blockIndex.seekBlock(new Key(RFileTest.formatString("", row + 1), "cf1", "cq1"),
          cacheBlock);
      assertSame(indexEntries[i], bie);

      RelativeKey rk = new RelativeKey();
      rk.setPrevKey(bie.getPrevKey());
      rk.readFields(cacheBlock);

      assertEquals(rk.getKey(), new Key(RFileTest.formatString("", row + 1), "cf1", "cq1"));

    }
    cacheBlock.close();
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\file\rfile\BlockIndexTest.java
  public void testSame() throws IOException {
    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    DataOutputStream out = new DataOutputStream(baos);

    Key prevKey = null;

    int num = 1000;

    for (int i = 0; i < num; i++) {
      Key key = new Key(RFileTest.formatString("", 1), "cf1", "cq1");
      new RelativeKey(prevKey, key).write(out);
      new Value(new byte[0]).write(out);
      prevKey = key;
    }

    for (int i = 0; i < num; i++) {
      Key key = new Key(RFileTest.formatString("", 3), "cf1", "cq1");
      new RelativeKey(prevKey, key).write(out);
      new Value(new byte[0]).write(out);
      prevKey = key;
    }

    for (int i = 0; i < num; i++) {
      Key key = new Key(RFileTest.formatString("", 5), "cf1", "cq1");
      new RelativeKey(prevKey, key).write(out);
      new Value(new byte[0]).write(out);
      prevKey = key;
    }

    out.close();
    final byte[] data = baos.toByteArray();

    CacheEntry ce = new MyCacheEntry(data);

    CachableBlockFile.CachedBlockRead cacheBlock = new CachableBlockFile.CachedBlockRead(ce, data);
    BlockIndex blockIndex = null;

    for (int i = 0; i < 257; i++)
      blockIndex = BlockIndex.getIndex(cacheBlock, new IndexEntry(prevKey, num, 0, 0, 0));

    assertSame(null,
        blockIndex.seekBlock(new Key(RFileTest.formatString("", 0), "cf1", "cq1"), cacheBlock));
    assertSame(null,
        blockIndex.seekBlock(new Key(RFileTest.formatString("", 1), "cf1", "cq1"), cacheBlock));

    for (int i = 2; i < 6; i++) {
      Key seekKey = new Key(RFileTest.formatString("", i), "cf1", "cq1");
      BlockIndexEntry bie = blockIndex.seekBlock(seekKey, cacheBlock);

      assertTrue(bie.getPrevKey().compareTo(seekKey) < 0);

      RelativeKey rk = new RelativeKey();
      rk.setPrevKey(bie.getPrevKey());
      rk.readFields(cacheBlock);

      assertTrue(rk.getKey().compareTo(seekKey) <= 0);
    }
    cacheBlock.close();
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\file\rfile\KeyShortenerTest.java
  public void testOneCharacterDifference() {
    // row has char that differs by one byte
    testKeys(new Key("r321hahahaha", "f89222", "q90232e"),
        new Key("r321hbhahaha", "f89222", "q90232e"), newKey(apendFF("r321ha"), E, E, 0));

    // family has char that differs by one byte
    testKeys(new Key("r321hahahaha", "f89222", "q90232e"),
        new Key("r321hahahaha", "f89322", "q90232e"),
        newKey("r321hahahaha", apendFF("f892"), E, 0));

    // qualifier has char that differs by one byte
    testKeys(new Key("r321hahahaha", "f89222", "q90232e"),
        new Key("r321hahahaha", "f89222", "q91232e"),
        newKey("r321hahahaha", "f89222", apendFF("q90"), 0));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\file\rfile\KeyShortenerTest.java
  public void testMultiCharacterDifference() {
    // row has char that differs by two bytes
    testKeys(new Key("r321hahahaha", "f89222", "q90232e"),
        new Key("r321hchahaha", "f89222", "q90232e"), newKey("r321hb", E, E, 0));

    // family has char that differs by two bytes
    testKeys(new Key("r321hahahaha", "f89222", "q90232e"),
        new Key("r321hahahaha", "f89422", "q90232e"), newKey("r321hahahaha", "f893", E, 0));

    // qualifier has char that differs by two bytes
    testKeys(new Key("r321hahahaha", "f89222", "q90232e"),
        new Key("r321hahahaha", "f89222", "q92232e"), newKey("r321hahahaha", "f89222", "q91", 0));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\file\rfile\KeyShortenerTest.java
  public void testOneCharacterDifferenceAndFF() {
    byte[] ff1 = Bytes.concat(apendFF("mop"), "b".getBytes());
    byte[] ff2 = Bytes.concat(apendFF("mop"), FF, "b".getBytes());

    String eff1 = "moq";

    testKeys(newKey(ff1, "f89222", "q90232e", 34), new Key("mor56", "f89222", "q90232e"),
        newKey(eff1, E, E, 0));
    testKeys(newKey("r1", ff1, "q90232e", 34), new Key("r1", "mor56", "q90232e"),
        newKey("r1", eff1, E, 0));
    testKeys(newKey("r1", "f1", ff1, 34), new Key("r1", "f1", "mor56"),
        newKey("r1", "f1", eff1, 0));

    testKeys(newKey(ff2, "f89222", "q90232e", 34), new Key("mor56", "f89222", "q90232e"),
        newKey(eff1, E, E, 0));
    testKeys(newKey("r1", ff2, "q90232e", 34), new Key("r1", "mor56", "q90232e"),
        newKey("r1", eff1, E, 0));
    testKeys(newKey("r1", "f1", ff2, 34), new Key("r1", "f1", "mor56"),
        newKey("r1", "f1", eff1, 0));

  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\file\rfile\KeyShortenerTest.java
  public void testOneCharacterDifferenceAtEnd() {
    testKeys(new Key("r321hahahaha", "f89222", "q90232e"),
        new Key("r321hahahahb", "f89222", "q90232e"), newKey(append00("r321hahahaha"), E, E, 0));
    testKeys(new Key("r321hahahaha", "f89222", "q90232e"),
        new Key("r321hahahaha", "f89223", "q90232e"),
        newKey("r321hahahaha", append00("f89222"), E, 0));
    testKeys(new Key("r321hahahaha", "f89222", "q90232e"),
        new Key("r321hahahaha", "f89222", "q90232f"),
        newKey("r321hahahaha", "f89222", append00("q90232e"), 0));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\file\rfile\KeyShortenerTest.java
  public void testSamePrefix() {
    testKeys(new Key("r3boot4", "f89222", "q90232e"), new Key("r3boot452", "f89222", "q90232e"),
        newKey(append00("r3boot4"), E, E, 0));
    testKeys(new Key("r3boot4", "f892", "q90232e"), new Key("r3boot4", "f89222", "q90232e"),
        newKey("r3boot4", append00("f892"), E, 0));
    testKeys(new Key("r3boot4", "f89222", "q902"), new Key("r3boot4", "f89222", "q90232e"),
        newKey("r3boot4", "f89222", append00("q902"), 0));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\file\rfile\KeyShortenerTest.java
  public void testSamePrefixAnd00() {
    Key prev = new Key("r3boot4", "f89222", "q90232e");
    assertEquals(prev,
        KeyShortener.shorten(prev, newKey(append00("r3boot4"), "f89222", "q90232e", 8)));
    prev = new Key("r3boot4", "f892", "q90232e");
    assertEquals(prev,
        KeyShortener.shorten(prev, newKey("r3boot4", append00("f892"), "q90232e", 8)));
    prev = new Key("r3boot4", "f89222", "q902");
    assertEquals(prev,
        KeyShortener.shorten(prev, newKey("r3boot4", "f89222", append00("q902"), 8)));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\file\rfile\KeyShortenerTest.java
  public void testSanityCheck1() {
    // prev and shortened equal
    Key prev = new Key("r001", "f002", "q006");
    assertEquals(prev, KeyShortener.sanityCheck(prev, new Key("r002", "f002", "q006"),
        new Key("r001", "f002", "q006")));
    // prev > shortened equal
    assertEquals(prev, KeyShortener.sanityCheck(prev, new Key("r003", "f002", "q006"),
        new Key("r001", "f002", "q006")));
    // current and shortened equal
    assertEquals(prev, KeyShortener.sanityCheck(prev, new Key("r003", "f002", "q006"),
        new Key("r003", "f002", "q006")));
    // shortened > current
    assertEquals(prev, KeyShortener.sanityCheck(prev, new Key("r003", "f002", "q006"),
        new Key("r004", "f002", "q006")));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\file\rfile\MultiLevelIndexTest.java
  public void test1() throws Exception {

    runTest(500, 1);
    runTest(500, 10);
    runTest(500, 100);
    runTest(500, 1000);
    runTest(500, 10000);

    runTest(1, 100);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\file\rfile\MultiThreadedRFileTest.java
  public void testMultipleReaders() throws IOException {
    final List<Throwable> threadExceptions = Collections.synchronizedList(new ArrayList<>());
    Map<String,MutableInt> messages = new HashMap<>();
    Map<String,String> stackTrace = new HashMap<>();

    final TestRFile trfBase = new TestRFile(conf);

    writeData(trfBase);

    trfBase.openReader();

    try {

      validate(trfBase);

      final TestRFile trfBaseCopy = trfBase.deepCopy();

      validate(trfBaseCopy);

      // now start up multiple RFile deepcopies
      int maxThreads = 10;
      String name = "MultiThreadedRFileTestThread";
      ThreadPoolExecutor pool = ThreadPools.createThreadPool(maxThreads + 1, maxThreads + 1, 5 * 60,
          TimeUnit.SECONDS, name, new LinkedBlockingQueue<>(), OptionalInt.empty(), false);
      pool.allowCoreThreadTimeOut(true);
      try {
        Runnable runnable = () -> {
          try {
            TestRFile trf = trfBase;
            synchronized (trfBaseCopy) {
              trf = trfBaseCopy.deepCopy();
            }
            validate(trf);
          } catch (Throwable t) {
            threadExceptions.add(t);
          }
        };
        for (int i = 0; i < maxThreads; i++) {
          pool.submit(runnable);
        }
      } finally {
        pool.shutdown();
        try {
          pool.awaitTermination(Long.MAX_VALUE, TimeUnit.MILLISECONDS);
        } catch (InterruptedException e) {
          e.printStackTrace();
        }
      }

      for (Throwable t : threadExceptions) {
        String msg = t.getClass() + " : " + t.getMessage();
        if (messages.containsKey(msg)) {
          messages.get(msg).increment();
        } else {
          messages.put(msg, new MutableInt(1));
        }
        StringWriter string = new StringWriter();
        PrintWriter writer = new PrintWriter(string);
        t.printStackTrace(writer);
        writer.flush();
        stackTrace.put(msg, string.getBuffer().toString());
      }
    } finally {
      trfBase.closeReader();
      trfBase.close();
    }

    for (String message : messages.keySet()) {
      LOG.error("{}: {}", messages.get(message), message);
      LOG.error("{}", stackTrace.get(message));
    }

    assertTrue(threadExceptions.isEmpty());
  }

  private void validate(TestRFile trf) throws IOException {
    Random random = new SecureRandom();
    for (int iteration = 0; iteration < 10; iteration++) {
      int part = random.nextInt(4);

      Range range = new Range(getKey(part, 0, 0), true, getKey(part, 4, 2048), true);
      trf.iter.seek(range, EMPTY_COL_FAMS, false);

      Key last = null;
      for (int locality = 0; locality < 4; locality++) {
        for (int i = 0; i < 2048; i++) {
          Key key = getKey(part, locality, i);
          Value value = getValue(i);
          assertTrue("No record found for row " + part + " locality " + locality + " index " + i,
              trf.iter.hasTop());
          assertEquals(
              "Invalid key found for row " + part + " locality " + locality + " index " + i, key,
              trf.iter.getTopKey());
          assertEquals(
              "Invalie value found for row " + part + " locality " + locality + " index " + i,
              value, trf.iter.getTopValue());
          last = trf.iter.getTopKey();
          trf.iter.next();
        }
      }
      if (trf.iter.hasTop()) {
        assertFalse("Found " + trf.iter.getTopKey() + " after " + last + " in " + range,
            trf.iter.hasTop());
      }

      range = new Range(getKey(4, 4, 0), true, null, true);
      trf.iter.seek(range, EMPTY_COL_FAMS, false);
      if (trf.iter.hasTop()) {
        assertFalse("Found " + trf.iter.getTopKey() + " in " + range, trf.iter.hasTop());
      }
    }

    Range range = new Range((Key) null, null);
    trf.iter.seek(range, EMPTY_COL_FAMS, false);

    Key last = null;
    for (int part = 0; part < 4; part++) {
      for (int locality = 0; locality < 4; locality++) {
        for (int i = 0; i < 2048; i++) {
          Key key = getKey(part, locality, i);
          Value value = getValue(i);
          assertTrue("No record found for row " + part + " locality " + locality + " index " + i,
              trf.iter.hasTop());
          assertEquals(
              "Invalid key found for row " + part + " locality " + locality + " index " + i, key,
              trf.iter.getTopKey());
          assertEquals(
              "Invalie value found for row " + part + " locality " + locality + " index " + i,
              value, trf.iter.getTopValue());
          last = trf.iter.getTopKey();
          trf.iter.next();
        }
      }
    }

    if (trf.iter.hasTop()) {
      assertFalse("Found " + trf.iter.getTopKey() + " after " + last + " in " + range,
          trf.iter.hasTop());
    }
  }

  private void writeData(TestRFile trfBase) throws IOException {
    trfBase.openWriter(false);

    try {
      for (int locality = 1; locality < 4; locality++) {
        trfBase.writer.startNewLocalityGroup("locality" + locality,
            Collections.singleton(new ArrayByteSequence(getCf(locality))));
        for (int part = 0; part < 4; part++) {
          for (int i = 0; i < 2048; i++) {
            trfBase.writer.append(getKey(part, locality, i), getValue(i));
          }
        }
      }

      trfBase.writer.startDefaultLocalityGroup();
      for (int part = 0; part < 4; part++) {
        for (int i = 0; i < 2048; i++) {
          trfBase.writer.append(getKey(part, 0, i), getValue(i));
        }
      }
    } finally {
      trfBase.closeWriter();
    }
  }

  private Key getKey(int part, int locality, int index) {
    String row = "r000" + part;
    String cf = getCf(locality);
    String cq = "cq" + pad(index);

    return newKey(row, cf, cq, "", 1);
  }

  private String pad(int val) {
    String valStr = String.valueOf(val);
    switch (valStr.length()) {
      case 1:
        return "000" + valStr;
      case 2:
        return "00" + valStr;
      case 3:
        return "0" + valStr;
      default:
        return valStr;
    }
  }

  private Value getValue(int index) {
    return newValue("" + index);
  }

  private String getCf(int locality) {
    return "cf" + locality;
  }

}
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\file\rfile\RelativeKeyTest.java
  public void testCommonPrefix() {
    // exact matches
    ArrayByteSequence exact = new ArrayByteSequence("abc");
    assertEquals(-1, RelativeKey.getCommonPrefix(exact, exact));
    assertEquals(-1, commonPrefixHelper("", ""));
    assertEquals(-1, commonPrefixHelper("a", "a"));
    assertEquals(-1, commonPrefixHelper("aa", "aa"));
    assertEquals(-1, commonPrefixHelper("aaa", "aaa"));
    assertEquals(-1, commonPrefixHelper("abab", "abab"));
    assertEquals(-1,
        commonPrefixHelper(new String("aaa"), new ArrayByteSequence("aaa").toString()));
    assertEquals(-1,
        commonPrefixHelper("abababababab".substring(3, 6), "ccababababcc".substring(3, 6)));

    // no common prefix
    assertEquals(0, commonPrefixHelper("", "a"));
    assertEquals(0, commonPrefixHelper("a", ""));
    assertEquals(0, commonPrefixHelper("a", "b"));
    assertEquals(0, commonPrefixHelper("aaaa", "bbbb"));

    // some common prefix
    assertEquals(1, commonPrefixHelper("a", "ab"));
    assertEquals(1, commonPrefixHelper("ab", "ac"));
    assertEquals(1, commonPrefixHelper("ab", "ac"));
    assertEquals(2, commonPrefixHelper("aa", "aaaa"));
    assertEquals(4, commonPrefixHelper("aaaaa", "aaaab"));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\file\rfile\RelativeKeyTest.java
  public void testReadWritePrefix() throws IOException {
    Key prevKey = new Key("row1", "columnfamily1", "columnqualifier1", "columnvisibility1", 1000);
    Key newKey = new Key("row2", "columnfamily2", "columnqualifier2", "columnvisibility2", 3000);
    RelativeKey expected = new RelativeKey(prevKey, newKey);

    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    DataOutputStream out = new DataOutputStream(baos);
    expected.write(out);

    RelativeKey actual = new RelativeKey();
    actual.setPrevKey(prevKey);
    actual.readFields(new DataInputStream(new ByteArrayInputStream(baos.toByteArray())));

    assertEquals(expected.getKey(), actual.getKey());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\file\rfile\RelativeKeyTest.java
  public void testSeekBeforeEverything() throws IOException {
    Key seekKey = new Key();
    Key prevKey = new Key();
    Key currKey = null;
    MutableByteSequence value = new MutableByteSequence(new byte[64], 0, 0);

    RelativeKey.SkippR skippr =
        RelativeKey.fastSkip(in, seekKey, value, prevKey, currKey, expectedKeys.size());
    assertEquals(1, skippr.skipped);
    assertEquals(new Key(), skippr.prevKey);
    assertEquals(expectedKeys.get(0), skippr.rk.getKey());
    assertEquals(expectedValues.get(0).toString(), value.toString());

    // ensure we can advance after fastskip
    skippr.rk.readFields(in);
    assertEquals(expectedKeys.get(1), skippr.rk.getKey());

    in.reset();

    seekKey = new Key("a", "b", "c", "d", 1);
    seekKey.setDeleted(true);
    skippr = RelativeKey.fastSkip(in, seekKey, value, prevKey, currKey, expectedKeys.size());
    assertEquals(1, skippr.skipped);
    assertEquals(new Key(), skippr.prevKey);
    assertEquals(expectedKeys.get(0), skippr.rk.getKey());
    assertEquals(expectedValues.get(0).toString(), value.toString());

    skippr.rk.readFields(in);
    assertEquals(expectedKeys.get(1), skippr.rk.getKey());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\file\rfile\RelativeKeyTest.java
  public void testSeekAfterEverythingWrongCount() throws IOException {
    Key seekKey = new Key("s", "t", "u", "v", 1);
    Key prevKey = new Key();
    Key currKey = null;
    MutableByteSequence value = new MutableByteSequence(new byte[64], 0, 0);

    RelativeKey.fastSkip(in, seekKey, value, prevKey, currKey, expectedKeys.size() + 1);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\file\rfile\RelativeKeyTest.java
  public void testSeekMiddle() throws IOException {
    int seekIndex = expectedKeys.size() / 2;
    Key seekKey = expectedKeys.get(seekIndex);
    Key prevKey = new Key();
    Key currKey = null;
    MutableByteSequence value = new MutableByteSequence(new byte[64], 0, 0);

    RelativeKey.SkippR skippr =
        RelativeKey.fastSkip(in, seekKey, value, prevKey, currKey, expectedKeys.size());

    assertEquals(seekIndex + 1, skippr.skipped);
    assertEquals(expectedKeys.get(seekIndex - 1), skippr.prevKey);
    assertEquals(expectedKeys.get(seekIndex), skippr.rk.getKey());
    assertEquals(expectedValues.get(seekIndex).toString(), value.toString());

    skippr.rk.readFields(in);
    assertEquals(expectedValues.get(seekIndex + 1).toString(), value.toString());

    // try fast skipping to a key that does not exist
    in.reset();
    Key fKey = expectedKeys.get(seekIndex).followingKey(PartialKey.ROW_COLFAM_COLQUAL);
    int i;
    for (i = seekIndex; expectedKeys.get(i).compareTo(fKey) < 0; i++) {}

    int left = expectedKeys.size();

    skippr =
        RelativeKey.fastSkip(in, expectedKeys.get(i), value, prevKey, currKey, expectedKeys.size());
    assertEquals(i + 1, skippr.skipped);
    left -= skippr.skipped;
    assertEquals(expectedKeys.get(i - 1), skippr.prevKey);
    assertEquals(expectedKeys.get(i), skippr.rk.getKey());
    assertEquals(expectedValues.get(i).toString(), value.toString());

    // try fast skipping to our current location
    skippr = RelativeKey.fastSkip(in, expectedKeys.get(i), value, expectedKeys.get(i - 1),
        expectedKeys.get(i), left);
    assertEquals(0, skippr.skipped);
    assertEquals(expectedKeys.get(i - 1), skippr.prevKey);
    assertEquals(expectedKeys.get(i), skippr.rk.getKey());
    assertEquals(expectedValues.get(i).toString(), value.toString());

    // try fast skipping 1 column family ahead from our current location, testing fastskip from
    // middle of block as opposed to stating at beginning of block
    fKey = expectedKeys.get(i).followingKey(PartialKey.ROW_COLFAM);
    int j;
    for (j = i; expectedKeys.get(j).compareTo(fKey) < 0; j++) {}
    skippr =
        RelativeKey.fastSkip(in, fKey, value, expectedKeys.get(i - 1), expectedKeys.get(i), left);
    assertEquals(j - i, skippr.skipped);
    assertEquals(expectedKeys.get(j - 1), skippr.prevKey);
    assertEquals(expectedKeys.get(j), skippr.rk.getKey());
    assertEquals(expectedValues.get(j).toString(), value.toString());

  }
}
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\file\rfile\RFileMetricsTest.java
  public void emptyFile() throws IOException {
    // test an empty file

    trf.openWriter();
    trf.closeWriter();

    trf.openReader(false);

    VisMetricsGatherer vmg = trf.gatherMetrics();

    Map<String,AtomicLongMap<String>> metrics = vmg.metric;
    Map<String,AtomicLongMap<String>> blocks = vmg.blocks;
    assertEquals(0, metrics.size());

    assertEquals(0, blocks.size());

    trf.closeReader();
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\file\rfile\RFileMetricsTest.java
  public void oneEntryDefaultLocGroup() throws IOException {
    // test an rfile with one entry in the default locality group

    trf.openWriter();
    trf.writer.append(RFileTest.newKey("r1", "cf1", "cq1", "L1", 55), RFileTest.newValue("foo"));
    trf.closeWriter();

    trf.openReader(false);

    VisMetricsGatherer vmg = trf.gatherMetrics();

    AtomicLongMap<String> metrics = vmg.metric.get(null);
    AtomicLongMap<String> blocks = vmg.blocks.get(null);
    assertEquals(1, metrics.get("L1"));

    assertEquals(1, blocks.get("L1"));

    assertEquals(1, vmg.numEntries.get(vmg.localityGroups.indexOf(null)).longValue());
    assertEquals(1, vmg.numBlocks.get(vmg.localityGroups.indexOf(null)).longValue());

    trf.closeReader();
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\file\rfile\RFileMetricsTest.java
  public void twoEntriesDefaultLocGroup() throws IOException {
    // test an rfile with two entries in the default locality group

    trf.openWriter();
    trf.writer.append(RFileTest.newKey("r1", "cf1", "cq1", "L1", 55), RFileTest.newValue("foo"));
    trf.writer.append(RFileTest.newKey("r1", "cf1", "cq1", "L2", 55), RFileTest.newValue("foo"));
    trf.closeWriter();

    trf.openReader(false);

    VisMetricsGatherer vmg = trf.gatherMetrics();

    AtomicLongMap<String> metrics = vmg.metric.get(null);
    AtomicLongMap<String> blocks = vmg.blocks.get(null);
    assertEquals(1, metrics.get("L1"));
    assertEquals(1, metrics.get("L2"));

    assertEquals(1, blocks.get("L1"));
    assertEquals(1, blocks.get("L2"));

    assertEquals(2, vmg.numEntries.get(vmg.localityGroups.indexOf(null)).longValue());
    assertEquals(1, vmg.numBlocks.get(vmg.localityGroups.indexOf(null)).longValue());

    trf.closeReader();

  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\file\rfile\RFileMetricsTest.java
  public void oneEntryNonDefaultLocGroup() throws IOException {
    // test an rfile with two entries in a non-default locality group

    trf.openWriter(false);
    Set<ByteSequence> lg1 = new HashSet<>();
    lg1.add(new ArrayByteSequence("cf1"));

    trf.writer.startNewLocalityGroup("lg1", lg1);
    trf.writer.append(RFileTest.newKey("r1", "cf1", "cq1", "L1", 55), RFileTest.newValue("foo"));
    trf.closeWriter();

    trf.openReader(false);

    VisMetricsGatherer vmg = trf.gatherMetrics();

    AtomicLongMap<String> metrics = vmg.metric.get("lg1");
    AtomicLongMap<String> blocks = vmg.blocks.get("lg1");
    assertEquals(1, metrics.get("L1"));

    assertEquals(1, blocks.get("L1"));

    assertEquals(1, vmg.numEntries.get(vmg.localityGroups.indexOf("lg1")).longValue());
    assertEquals(1, vmg.numBlocks.get(vmg.localityGroups.indexOf("lg1")).longValue());

    trf.closeReader();

  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\file\rfile\RFileMetricsTest.java
  public void twoEntryNonDefaultLocGroup() throws IOException {
    // test an rfile with two entries in a non-default locality group

    trf.openWriter(false);
    Set<ByteSequence> lg1 = new HashSet<>();
    lg1.add(new ArrayByteSequence("cf1"));

    trf.writer.startNewLocalityGroup("lg1", lg1);
    trf.writer.append(RFileTest.newKey("r1", "cf1", "cq1", "L1", 55), RFileTest.newValue("foo"));
    trf.writer.append(RFileTest.newKey("r1", "cf1", "cq1", "L2", 55), RFileTest.newValue("foo"));
    trf.closeWriter();

    trf.openReader(false);

    VisMetricsGatherer vmg = trf.gatherMetrics();

    AtomicLongMap<String> metrics = vmg.metric.get("lg1");
    AtomicLongMap<String> blocks = vmg.blocks.get("lg1");
    assertEquals(1, metrics.get("L1"));
    assertEquals(1, metrics.get("L2"));

    assertEquals(1, blocks.get("L1"));
    assertEquals(1, blocks.get("L2"));

    assertEquals(2, vmg.numEntries.get(vmg.localityGroups.indexOf("lg1")).longValue());
    assertEquals(1, vmg.numBlocks.get(vmg.localityGroups.indexOf("lg1")).longValue());

    trf.closeReader();

  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\file\rfile\RFileMetricsTest.java
  public void twoNonDefaultLocGroups() throws IOException {
    // test an rfile with two entries in 2 non-default locality groups

    trf.openWriter(false);
    Set<ByteSequence> lg1 = new HashSet<>();
    lg1.add(new ArrayByteSequence("cf1"));

    trf.writer.startNewLocalityGroup("lg1", lg1);
    trf.writer.append(RFileTest.newKey("r1", "cf1", "cq1", "L1", 55), RFileTest.newValue("foo"));
    trf.writer.append(RFileTest.newKey("r1", "cf1", "cq1", "L2", 55), RFileTest.newValue("foo"));

    Set<ByteSequence> lg2 = new HashSet<>();
    lg2.add(new ArrayByteSequence("cf2"));

    trf.writer.startNewLocalityGroup("lg2", lg2);
    trf.writer.append(RFileTest.newKey("r1", "cf2", "cq1", "L1", 55), RFileTest.newValue("foo"));
    trf.writer.append(RFileTest.newKey("r1", "cf2", "cq1", "L2", 55), RFileTest.newValue("foo"));

    trf.closeWriter();

    trf.openReader(false);

    VisMetricsGatherer vmg = trf.gatherMetrics();

    AtomicLongMap<String> metrics = vmg.metric.get("lg1");
    AtomicLongMap<String> blocks = vmg.blocks.get("lg1");
    assertEquals(1, metrics.get("L1"));
    assertEquals(1, metrics.get("L2"));

    assertEquals(1, blocks.get("L1"));
    assertEquals(1, blocks.get("L2"));

    assertEquals(2, vmg.numEntries.get(vmg.localityGroups.indexOf("lg1")).longValue());
    assertEquals(1, vmg.numBlocks.get(vmg.localityGroups.indexOf("lg1")).longValue());

    metrics = vmg.metric.get("lg2");
    blocks = vmg.blocks.get("lg2");
    assertEquals(1, metrics.get("L1"));
    assertEquals(1, metrics.get("L2"));

    assertEquals(1, blocks.get("L1"));
    assertEquals(1, blocks.get("L2"));

    assertEquals(2, vmg.numEntries.get(vmg.localityGroups.indexOf("lg2")).longValue());
    assertEquals(1, vmg.numBlocks.get(vmg.localityGroups.indexOf("lg2")).longValue());

    trf.closeReader();

  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\file\rfile\RFileMetricsTest.java
  public void nonDefaultAndDefaultLocGroup() throws IOException {
    // test an rfile with 3 entries in a non-default locality group and the default locality group

    trf.openWriter(false);
    Set<ByteSequence> lg1 = new HashSet<>();
    lg1.add(new ArrayByteSequence("cf1"));

    trf.writer.startNewLocalityGroup("lg1", lg1);
    trf.writer.append(RFileTest.newKey("r1", "cf1", "cq1", "L1", 55), RFileTest.newValue("foo"));
    trf.writer.append(RFileTest.newKey("r1", "cf1", "cq2", "L1", 55), RFileTest.newValue("foo"));
    trf.writer.append(RFileTest.newKey("r1", "cf1", "cq2", "L2", 55), RFileTest.newValue("foo"));

    trf.writer.startDefaultLocalityGroup();
    trf.writer.append(RFileTest.newKey("r1", "cf2", "cq1", "A", 55), RFileTest.newValue("foo"));
    trf.writer.append(RFileTest.newKey("r1", "cf2", "cq1", "B", 55), RFileTest.newValue("foo"));

    trf.closeWriter();

    trf.openReader(false);

    VisMetricsGatherer vmg = trf.gatherMetrics();

    AtomicLongMap<String> metrics = vmg.metric.get("lg1");
    AtomicLongMap<String> blocks = vmg.blocks.get("lg1");
    assertEquals(2, metrics.get("L1"));
    assertEquals(1, metrics.get("L2"));

    assertEquals(1, blocks.get("L1"));
    assertEquals(1, blocks.get("L2"));

    assertEquals(3, vmg.numEntries.get(vmg.localityGroups.indexOf("lg1")).longValue());
    assertEquals(1, vmg.numBlocks.get(vmg.localityGroups.indexOf("lg1")).longValue());

    metrics = vmg.metric.get(null);
    blocks = vmg.blocks.get(null);
    assertEquals(1, metrics.get("A"));
    assertEquals(1, metrics.get("B"));

    assertEquals(1, blocks.get("A"));
    assertEquals(1, blocks.get("B"));

    assertEquals(2, vmg.numEntries.get(vmg.localityGroups.indexOf(null)).longValue());
    assertEquals(1, vmg.numBlocks.get(vmg.localityGroups.indexOf(null)).longValue());

    trf.closeReader();

  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\file\rfile\RFileMetricsTest.java
  public void multiCFNonDefaultAndDefaultLocGroup() throws IOException {
    // test an rfile with multiple column families in a non-default locality group and the default
    // locality group

    trf.openWriter(false);
    Set<ByteSequence> lg1 = new HashSet<>();
    lg1.add(new ArrayByteSequence("cf1"));
    lg1.add(new ArrayByteSequence("cf3"));

    trf.writer.startNewLocalityGroup("lg1", lg1);
    trf.writer.append(RFileTest.newKey("r1", "cf1", "cq1", "L1", 55), RFileTest.newValue("foo"));
    trf.writer.append(RFileTest.newKey("r1", "cf1", "cq2", "L1", 55), RFileTest.newValue("foo"));
    trf.writer.append(RFileTest.newKey("r1", "cf3", "cq1", "L1", 55), RFileTest.newValue("foo"));
    trf.writer.append(RFileTest.newKey("r1", "cf3", "cq2", "L2", 55), RFileTest.newValue("foo"));

    trf.writer.startDefaultLocalityGroup();
    trf.writer.append(RFileTest.newKey("r1", "cf2", "cq1", "A", 55), RFileTest.newValue("foo"));
    trf.writer.append(RFileTest.newKey("r1", "cf2", "cq1", "B", 55), RFileTest.newValue("foo"));
    trf.writer.append(RFileTest.newKey("r1", "cf4", "cq1", "A", 55), RFileTest.newValue("foo"));
    trf.writer.append(RFileTest.newKey("r1", "cf4", "cq1", "B", 55), RFileTest.newValue("foo"));

    trf.closeWriter();

    trf.openReader(false);

    VisMetricsGatherer vmg = trf.gatherMetrics();

    AtomicLongMap<String> metrics = vmg.metric.get("lg1");
    AtomicLongMap<String> blocks = vmg.blocks.get("lg1");
    assertEquals(3, metrics.get("L1"));
    assertEquals(1, metrics.get("L2"));

    assertEquals(1, blocks.get("L1"));
    assertEquals(1, blocks.get("L2"));

    assertEquals(4, vmg.numEntries.get(vmg.localityGroups.indexOf("lg1")).longValue());
    assertEquals(1, vmg.numBlocks.get(vmg.localityGroups.indexOf("lg1")).longValue());

    metrics = vmg.metric.get(null);
    blocks = vmg.blocks.get(null);
    assertEquals(2, metrics.get("A"));
    assertEquals(2, metrics.get("B"));

    assertEquals(1, blocks.get("A"));
    assertEquals(1, blocks.get("B"));

    assertEquals(4, vmg.numEntries.get(vmg.localityGroups.indexOf(null)).longValue());
    assertEquals(1, vmg.numBlocks.get(vmg.localityGroups.indexOf(null)).longValue());

    trf.closeReader();

  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\file\rfile\RFileMetricsTest.java
  public void multiBlockDefaultLocGroup() throws IOException {
    // test an rfile with four blocks in the default locality group

    trf.openWriter(20);// Each entry is a block
    trf.writer.append(RFileTest.newKey("r1", "cf1", "cq1", "L1", 55), RFileTest.newValue("foo"));
    trf.writer.append(RFileTest.newKey("r1", "cf1", "cq2", "L1", 55), RFileTest.newValue("foo"));
    trf.writer.append(RFileTest.newKey("r1", "cf3", "cq1", "L1", 55), RFileTest.newValue("foo"));
    trf.writer.append(RFileTest.newKey("r1", "cf3", "cq2", "L2", 55), RFileTest.newValue("foo"));
    trf.closeWriter();

    trf.openReader(false);

    VisMetricsGatherer vmg = trf.gatherMetrics();

    AtomicLongMap<String> metrics = vmg.metric.get(null);
    AtomicLongMap<String> blocks = vmg.blocks.get(null);
    assertEquals(3, metrics.get("L1"));
    assertEquals(1, metrics.get("L2"));

    assertEquals(3, blocks.get("L1"));
    assertEquals(1, blocks.get("L2"));

    assertEquals(4, vmg.numEntries.get(vmg.localityGroups.indexOf(null)).longValue());
    assertEquals(4, vmg.numBlocks.get(vmg.localityGroups.indexOf(null)).longValue());

    trf.closeReader();

  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\file\rfile\RFileMetricsTest.java
  public void multiBlockNonDefaultLocGroup() throws IOException {
    // test an rfile with four blocks in a non-default locality group

    trf.openWriter(false, 20);// Each entry is a block
    Set<ByteSequence> lg1 = new HashSet<>();
    lg1.add(new ArrayByteSequence("cf1"));
    lg1.add(new ArrayByteSequence("cf3"));

    trf.writer.startNewLocalityGroup("lg1", lg1);
    trf.writer.append(RFileTest.newKey("r1", "cf1", "cq1", "L1", 55), RFileTest.newValue("foo"));
    trf.writer.append(RFileTest.newKey("r1", "cf1", "cq2", "L1", 55), RFileTest.newValue("foo"));
    trf.writer.append(RFileTest.newKey("r1", "cf3", "cq1", "L1", 55), RFileTest.newValue("foo"));
    trf.writer.append(RFileTest.newKey("r1", "cf3", "cq2", "L2", 55), RFileTest.newValue("foo"));
    trf.closeWriter();

    trf.openReader(false);

    VisMetricsGatherer vmg = trf.gatherMetrics();

    AtomicLongMap<String> metrics = vmg.metric.get("lg1");
    AtomicLongMap<String> blocks = vmg.blocks.get("lg1");
    assertEquals(3, metrics.get("L1"));
    assertEquals(1, metrics.get("L2"));

    assertEquals(3, blocks.get("L1"));
    assertEquals(1, blocks.get("L2"));

    assertEquals(4, vmg.numEntries.get(vmg.localityGroups.indexOf("lg1")).longValue());
    assertEquals(4, vmg.numBlocks.get(vmg.localityGroups.indexOf("lg1")).longValue());

    trf.closeReader();

  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\file\rfile\RFileMetricsTest.java
  public void multiBlockMultiCFNonDefaultAndDefaultLocGroup() throws IOException {
    // test an rfile with multiple column families and multiple blocks in a non-default locality
    // group and the default locality group

    trf.openWriter(false, 10);// Each entry is a block
    Set<ByteSequence> lg1 = new HashSet<>();
    lg1.add(new ArrayByteSequence("cf1"));
    lg1.add(new ArrayByteSequence("cf3"));

    trf.writer.startNewLocalityGroup("lg1", lg1);
    trf.writer.append(RFileTest.newKey("r1", "cf1", "cq1", "L1", 55), RFileTest.newValue("foo"));
    trf.writer.append(RFileTest.newKey("r1", "cf1", "cq2", "L1", 55), RFileTest.newValue("foo"));
    trf.writer.append(RFileTest.newKey("r1", "cf3", "cq1", "L1", 55), RFileTest.newValue("foo"));
    trf.writer.append(RFileTest.newKey("r1", "cf3", "cq2", "L2", 55), RFileTest.newValue("foo"));

    trf.writer.startDefaultLocalityGroup();
    trf.writer.append(RFileTest.newKey("r1", "cf2", "cq1", "A", 55), RFileTest.newValue("foo"));
    trf.writer.append(RFileTest.newKey("r1", "cf2", "cq1", "B", 55), RFileTest.newValue("foo"));
    trf.writer.append(RFileTest.newKey("r1", "cf4", "cq1", "A", 55), RFileTest.newValue("foo"));
    trf.writer.append(RFileTest.newKey("r1", "cf4", "cq1", "B", 55), RFileTest.newValue("foo"));

    trf.closeWriter();

    trf.openReader(false);

    VisMetricsGatherer vmg = trf.gatherMetrics();

    AtomicLongMap<String> metrics = vmg.metric.get("lg1");
    AtomicLongMap<String> blocks = vmg.blocks.get("lg1");
    assertEquals(3, metrics.get("L1"));
    assertEquals(1, metrics.get("L2"));

    assertEquals(3, blocks.get("L1"));
    assertEquals(1, blocks.get("L2"));

    assertEquals(4, vmg.numEntries.get(vmg.localityGroups.indexOf("lg1")).longValue());
    assertEquals(4, vmg.numBlocks.get(vmg.localityGroups.indexOf("lg1")).longValue());

    metrics = vmg.metric.get(null);
    blocks = vmg.blocks.get(null);
    assertEquals(2, metrics.get("A"));
    assertEquals(2, metrics.get("B"));

    assertEquals(2, blocks.get("A"));
    assertEquals(2, blocks.get("B"));

    assertEquals(4, vmg.numEntries.get(vmg.localityGroups.indexOf(null)).longValue());
    assertEquals(4, vmg.numBlocks.get(vmg.localityGroups.indexOf(null)).longValue());

    trf.closeReader();
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\file\rfile\RFileMetricsTest.java
  public void testManyFamiliesInDefaultLocGroup() throws IOException {
    trf.openWriter(false, 1024);

    String fam1 = String.format("%06x", 9000);
    String fam2 = String.format("%06x", 9001);

    Set<ByteSequence> lg1 = new HashSet<>();
    lg1.add(new ArrayByteSequence(fam1));
    lg1.add(new ArrayByteSequence(fam2));

    trf.writer.startNewLocalityGroup("lg1", lg1);

    for (int row = 0; row < 1100; row++) {
      String rs = String.format("%06x", row);
      trf.writer.append(new Key(rs, fam1, "q4", "A", 42L), new Value("v"));
      trf.writer.append(new Key(rs, fam2, "q4", "A|B", 42L), new Value("v"));
    }

    trf.writer.startDefaultLocalityGroup();

    String[] vis = {"A", "A&B", "A|C", "B&C", "Boo"};

    int fam = 0;
    for (int row = 0; row < 1000; row++) {
      String rs = String.format("%06x", row);
      for (int v = 0; v < 5; v++) {
        String fs = String.format("%06x", fam++);
        trf.writer.append(new Key(rs, fs, "q4", vis[v], 42L), new Value("v"));
      }
    }

    trf.closeWriter();

    trf.openReader(false);

    VisMetricsGatherer vmg = trf.gatherMetrics();

    Map<String,Long> expected = new HashMap<>();
    Map<String,Long> expectedBlocks = new HashMap<>();
    for (String v : vis) {
      expected.put(v, 1000L);
      expectedBlocks.put(v, 71L);
    }
    assertEquals(expected, vmg.metric.get(null).asMap());
    assertEquals(expectedBlocks, vmg.blocks.get(null).asMap());

    expected.clear();
    expectedBlocks.clear();
    expected.put("A", 1100L);
    expected.put("A|B", 1100L);
    expectedBlocks.put("A", 32L);
    expectedBlocks.put("A|B", 32L);
    assertEquals(expected, vmg.metric.get("lg1").asMap());
    assertEquals(expectedBlocks, vmg.blocks.get("lg1").asMap());

    assertEquals(2, vmg.metric.keySet().size());
    assertEquals(2, vmg.blocks.keySet().size());
  }
}
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\file\rfile\RFileTest.java
  public void test1() throws IOException {

    // test an empty file

    TestRFile trf = new TestRFile(conf);

    trf.openWriter();
    trf.closeWriter();

    trf.openReader();
    trf.iter.seek(new Range((Key) null, null), EMPTY_COL_FAMS, false);
    assertFalse(trf.iter.hasTop());

    assertNull(trf.reader.getLastKey());

    trf.closeReader();
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\file\rfile\RFileTest.java
  public void test2() throws IOException {

    // test an rfile with one entry

    TestRFile trf = new TestRFile(conf);

    trf.openWriter();
    trf.writer.append(newKey("r1", "cf1", "cq1", "L1", 55), newValue("foo"));
    trf.closeWriter();

    trf.openReader();
    // seek before everything
    trf.seek(null);
    assertTrue(trf.iter.hasTop());
    assertEquals(trf.iter.getTopKey(), newKey("r1", "cf1", "cq1", "L1", 55));
    assertEquals(trf.iter.getTopValue(), newValue("foo"));
    trf.iter.next();
    assertFalse(trf.iter.hasTop());

    // seek after the key
    trf.seek(newKey("r2", "cf1", "cq1", "L1", 55));
    assertFalse(trf.iter.hasTop());

    // seek exactly to the key
    trf.seek(newKey("r1", "cf1", "cq1", "L1", 55));
    assertTrue(trf.iter.hasTop());
    assertEquals(trf.iter.getTopKey(), newKey("r1", "cf1", "cq1", "L1", 55));
    assertEquals(trf.iter.getTopValue(), newValue("foo"));
    trf.iter.next();
    assertFalse(trf.iter.hasTop());

    assertEquals(newKey("r1", "cf1", "cq1", "L1", 55), trf.reader.getLastKey());

    trf.closeReader();
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\file\rfile\RFileTest.java
  public void test3() throws IOException {

    // test an rfile with multiple rows having multiple columns

    TestRFile trf = new TestRFile(conf);

    trf.openWriter();

    int val = 0;

    ArrayList<Key> expectedKeys = new ArrayList<>(10000);
    ArrayList<Value> expectedValues = new ArrayList<>(10000);

    for (int row = 0; row < 4; row++) {
      String rowS = formatString("r_", row);
      for (int cf = 0; cf < 4; cf++) {
        String cfS = formatString("cf_", cf);
        for (int cq = 0; cq < 4; cq++) {
          String cqS = formatString("cq_", cq);
          for (int cv = 'A'; cv < 'A' + 4; cv++) {
            String cvS = "" + (char) cv;
            for (int ts = 4; ts > 0; ts--) {
              Key k = newKey(rowS, cfS, cqS, cvS, ts);
              // check below ensures when all key sizes are same more than one index block is
              // created
              assertEquals(27, k.getSize());
              k.setDeleted(true);
              Value v = newValue("" + val);
              trf.writer.append(k, v);
              expectedKeys.add(k);
              expectedValues.add(v);

              k = newKey(rowS, cfS, cqS, cvS, ts);
              assertEquals(27, k.getSize());
              v = newValue("" + val);
              trf.writer.append(k, v);
              expectedKeys.add(k);
              expectedValues.add(v);

              val++;
            }
          }
        }
      }
    }

    // trf.writer.append(newKey("r1","cf1","cq1","L1", 55), newValue("foo"));
    trf.closeWriter();

    trf.openReader();
    // seek before everything
    trf.iter.seek(new Range((Key) null, null), EMPTY_COL_FAMS, false);
    verify(trf, expectedKeys.iterator(), expectedValues.iterator());

    // seek to the middle
    int index = expectedKeys.size() / 2;
    trf.seek(expectedKeys.get(index));
    verify(trf, expectedKeys.subList(index, expectedKeys.size()).iterator(),
        expectedValues.subList(index, expectedKeys.size()).iterator());

    // seek the first key
    index = 0;
    trf.seek(expectedKeys.get(index));
    verify(trf, expectedKeys.subList(index, expectedKeys.size()).iterator(),
        expectedValues.subList(index, expectedKeys.size()).iterator());

    // seek to the last key
    index = expectedKeys.size() - 1;
    trf.seek(expectedKeys.get(index));
    verify(trf, expectedKeys.subList(index, expectedKeys.size()).iterator(),
        expectedValues.subList(index, expectedKeys.size()).iterator());

    // seek after everything
    index = expectedKeys.size();
    trf.seek(new Key(new Text("z")));
    verify(trf, expectedKeys.subList(index, expectedKeys.size()).iterator(),
        expectedValues.subList(index, expectedKeys.size()).iterator());

    // test seeking to the current location
    index = expectedKeys.size() / 2;
    trf.seek(expectedKeys.get(index));
    assertTrue(trf.iter.hasTop());
    assertEquals(expectedKeys.get(index), trf.iter.getTopKey());
    assertEquals(expectedValues.get(index), trf.iter.getTopValue());

    trf.iter.next();
    index++;
    assertTrue(trf.iter.hasTop());
    assertEquals(expectedKeys.get(index), trf.iter.getTopKey());
    assertEquals(expectedValues.get(index), trf.iter.getTopValue());

    trf.seek(expectedKeys.get(index));

    assertTrue(trf.iter.hasTop());
    assertEquals(expectedKeys.get(index), trf.iter.getTopKey());
    assertEquals(expectedValues.get(index), trf.iter.getTopValue());

    // test seeking to each location in the file
    index = 0;
    for (Key key : expectedKeys) {
      trf.seek(key);
      assertTrue(trf.iter.hasTop());
      assertEquals(key, trf.iter.getTopKey());
      assertEquals(expectedValues.get(index), trf.iter.getTopValue());

      if (index > 0) {
        // Key pkey =
        expectedKeys.get(index - 1);
        // assertEquals(pkey, trf.reader.getPrevKey());
      }

      index++;
    }

    // test seeking backwards to each key
    for (int i = expectedKeys.size() - 1; i >= 0; i--) {
      Key key = expectedKeys.get(i);

      trf.seek(key);
      assertTrue(trf.iter.hasTop());
      assertEquals(key, trf.iter.getTopKey());
      assertEquals(expectedValues.get(i), trf.iter.getTopValue());

      if (i - 1 > 0) {
        // Key pkey =
        expectedKeys.get(i - 1);
        // assertEquals(pkey, trf.reader.getPrevKey());
      }
    }

    assertEquals(expectedKeys.get(expectedKeys.size() - 1), trf.reader.getLastKey());

    // test seeking to random location and reading all data from that point
    // there was an off by one bug with this in the transient index
    Random rand = new SecureRandom();
    for (int i = 0; i < 12; i++) {
      index = rand.nextInt(expectedKeys.size());
      trf.seek(expectedKeys.get(index));
      for (; index < expectedKeys.size(); index++) {
        assertTrue(trf.iter.hasTop());
        assertEquals(expectedKeys.get(index), trf.iter.getTopKey());
        assertEquals(expectedValues.get(index), trf.iter.getTopValue());
        trf.iter.next();
      }
    }

    // count the number of index entries
    FileSKVIterator iiter = trf.reader.getIndex();
    int count = 0;
    while (iiter.hasTop()) {
      count++;
      iiter.next();
    }
    assertEquals(20, count);

    trf.closeReader();
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\file\rfile\RFileTest.java
  public void test4() throws IOException {
    TestRFile trf = new TestRFile(conf);

    trf.openWriter();

    trf.writer.append(newKey("r1", "cf1", "cq1", "L1", 55), newValue("foo1"));
    try {
      trf.writer.append(newKey("r0", "cf1", "cq1", "L1", 55), newValue("foo1"));
      fail();
    } catch (IllegalArgumentException ioe) {

    }

    try {
      trf.writer.append(newKey("r1", "cf0", "cq1", "L1", 55), newValue("foo1"));
      fail();
    } catch (IllegalArgumentException ioe) {

    }

    try {
      trf.writer.append(newKey("r1", "cf1", "cq0", "L1", 55), newValue("foo1"));
      fail();
    } catch (IllegalArgumentException ioe) {

    }

    try {
      trf.writer.append(newKey("r1", "cf1", "cq1", "L0", 55), newValue("foo1"));
      fail();
    } catch (IllegalArgumentException ioe) {

    }

    try {
      trf.writer.append(newKey("r1", "cf1", "cq1", "L1", 56), newValue("foo1"));
      fail();
    } catch (IllegalArgumentException ioe) {

    }
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\file\rfile\RFileTest.java
  public void test5() throws IOException {

    TestRFile trf = new TestRFile(conf);

    trf.openWriter();
    trf.writer.append(newKey("r1", "cf1", "cq1", "L1", 55), newValue("foo1"));
    trf.writer.append(newKey("r1", "cf1", "cq4", "L1", 56), newValue("foo2"));
    trf.closeWriter();

    trf.openReader();

    // test seeking between keys
    trf.seek(newKey("r1", "cf1", "cq3", "L1", 55));
    assertTrue(trf.iter.hasTop());
    assertEquals(newKey("r1", "cf1", "cq4", "L1", 56), trf.iter.getTopKey());
    assertEquals(newValue("foo2"), trf.iter.getTopValue());

    // test seeking right before previous seek
    trf.seek(newKey("r1", "cf1", "cq0", "L1", 55));
    assertTrue(trf.iter.hasTop());
    assertEquals(newKey("r1", "cf1", "cq1", "L1", 55), trf.iter.getTopKey());
    assertEquals(newValue("foo1"), trf.iter.getTopValue());

    assertEquals(newKey("r1", "cf1", "cq4", "L1", 56), trf.reader.getLastKey());

    trf.closeReader();
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\file\rfile\RFileTest.java
  public void test6() throws IOException {

    TestRFile trf = new TestRFile(conf);

    trf.openWriter();
    for (int i = 0; i < 500; i++) {
      trf.writer.append(newKey(formatString("r_", i), "cf1", "cq1", "L1", 55), newValue("foo1"));
    }

    trf.closeWriter();

    trf.openReader();

    // repeatedly seek to locations before the first key in the file
    for (int i = 0; i < 10; i++) {
      trf.seek(newKey(formatString("q_", i), "cf1", "cq1", "L1", 55));
      assertTrue(trf.iter.hasTop());
      assertEquals(newKey(formatString("r_", 0), "cf1", "cq1", "L1", 55), trf.iter.getTopKey());
      assertEquals(newValue("foo1"), trf.iter.getTopValue());
    }

    // repeatedly seek to locations after the last key in the file
    for (int i = 0; i < 10; i++) {
      trf.seek(newKey(formatString("s_", i), "cf1", "cq1", "L1", 55));
      assertFalse(trf.iter.hasTop());
    }

    assertEquals(newKey(formatString("r_", 499), "cf1", "cq1", "L1", 55), trf.reader.getLastKey());

    trf.closeReader();
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\file\rfile\RFileTest.java
  public void test7() throws IOException {
    // these tests exercise setting the end key of a range

    TestRFile trf = new TestRFile(conf);

    trf.openWriter();
    for (int i = 2; i < 50; i++) {
      trf.writer.append(newKey(formatString("r_", i), "cf1", "cq1", "L1", 55), newValue("foo" + i));
    }

    trf.closeWriter();

    trf.openReader();

    // test that has top returns false when end of range reached
    trf.iter.seek(new Range(newKey(formatString("r_", 3), "cf1", "cq1", "L1", 55), true,
        newKey(formatString("r_", 4), "cf1", "cq1", "L1", 55), false), EMPTY_COL_FAMS, false);
    assertTrue(trf.iter.hasTop());
    assertEquals(trf.iter.getTopKey(), newKey(formatString("r_", 3), "cf1", "cq1", "L1", 55));
    assertEquals(newValue("foo" + 3), trf.iter.getTopValue());
    trf.iter.next();
    assertFalse(trf.iter.hasTop());

    // test seeking to a range that is between two keys, should not return anything
    trf.iter.seek(
        new Range(newKey(formatString("r_", 4) + "a", "cf1", "cq1", "L1", 55), true,
            newKey(formatString("r_", 4) + "b", "cf1", "cq1", "L1", 55), true),
        EMPTY_COL_FAMS, false);
    assertFalse(trf.iter.hasTop());

    // test seeking to another range after the previously seeked range, that is between the same two
    // keys in the file
    // as the previously seeked range.... this test an optimization on RFile
    trf.iter.seek(
        new Range(newKey(formatString("r_", 4) + "c", "cf1", "cq1", "L1", 55), true,
            newKey(formatString("r_", 4) + "d", "cf1", "cq1", "L1", 55), true),
        EMPTY_COL_FAMS, false);
    assertFalse(trf.iter.hasTop());

    trf.iter.seek(
        new Range(newKey(formatString("r_", 4) + "e", "cf1", "cq1", "L1", 55), true,
            newKey(formatString("r_", 4) + "f", "cf1", "cq1", "L1", 55), true),
        EMPTY_COL_FAMS, false);
    assertFalse(trf.iter.hasTop());

    // now ensure we can seek somewhere, that triggering the optimization does not cause any
    // problems
    trf.iter.seek(new Range(newKey(formatString("r_", 5), "cf1", "cq1", "L1", 55), true,
        newKey(formatString("r_", 6), "cf1", "cq1", "L1", 55), false), EMPTY_COL_FAMS, false);
    assertTrue(trf.iter.hasTop());
    assertEquals(trf.iter.getTopKey(), newKey(formatString("r_", 5), "cf1", "cq1", "L1", 55));
    assertEquals(newValue("foo" + 5), trf.iter.getTopValue());
    trf.iter.next();
    assertFalse(trf.iter.hasTop());

    // test seeking to range that is before the beginning of the file
    trf.iter.seek(new Range(newKey(formatString("r_", 0), "cf1", "cq1", "L1", 55), true,
        newKey(formatString("r_", 2), "cf1", "cq1", "L1", 55), false), EMPTY_COL_FAMS, false);
    assertFalse(trf.iter.hasTop());

    assertEquals(newKey(formatString("r_", 49), "cf1", "cq1", "L1", 55), trf.reader.getLastKey());

    trf.reader.close();
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\file\rfile\RFileTest.java
  public void test8() throws IOException {
    TestRFile trf = new TestRFile(conf);

    trf.openWriter();

    for (int i = 0; i < 2500; i++) {
      trf.writer.append(newKey(formatString("r_", i), "cf1", "cq1", "L1", 42), newValue("foo" + i));
    }

    trf.closeWriter();
    trf.openReader();

    // test seeking between each key forward
    for (int i = 0; i < 2499; i++) {
      trf.seek(newKey(formatString("r_", i), "cf1", "cq1", "L1", 42).followingKey(PartialKey.ROW));
      assertTrue(trf.iter.hasTop());
      assertEquals(newKey(formatString("r_", i + 1), "cf1", "cq1", "L1", 42), trf.iter.getTopKey());
    }

    // test seeking between each key forward
    for (int i = 0; i < 2499; i += 2) {
      trf.seek(newKey(formatString("r_", i), "cf1", "cq1", "L1", 42).followingKey(PartialKey.ROW));
      assertTrue(trf.iter.hasTop());
      assertEquals(newKey(formatString("r_", i + 1), "cf1", "cq1", "L1", 42), trf.iter.getTopKey());
    }

    // test seeking backwards between each key
    for (int i = 2498; i >= 0; i--) {
      trf.seek(newKey(formatString("r_", i), "cf1", "cq1", "L1", 42).followingKey(PartialKey.ROW));
      assertTrue(trf.iter.hasTop());
      assertEquals(newKey(formatString("r_", i + 1), "cf1", "cq1", "L1", 42), trf.iter.getTopKey());
    }

    trf.closeReader();

    // do same test with col fam
    trf = new TestRFile(conf);

    trf.openWriter();

    for (int i = 0; i < 2500; i++) {
      trf.writer.append(newKey(formatString("r_", 0), formatString("cf_", i), "cq1", "L1", 42),
          newValue("foo" + i));
    }

    trf.closeWriter();
    trf.openReader();

    // test seeking between each key forward
    for (int i = 0; i < 2499; i++) {
      trf.seek(newKey(formatString("r_", 0), formatString("cf_", i), "cq1", "L1", 42)
          .followingKey(PartialKey.ROW_COLFAM));
      assertTrue(trf.iter.hasTop());
      assertEquals(newKey(formatString("r_", 0), formatString("cf_", i + 1), "cq1", "L1", 42),
          trf.iter.getTopKey());
    }

    // test seeking between each key forward
    for (int i = 0; i < 2499; i += 2) {
      trf.seek(newKey(formatString("r_", 0), formatString("cf_", i), "cq1", "L1", 42)
          .followingKey(PartialKey.ROW_COLFAM));
      assertTrue(trf.iter.hasTop());
      assertEquals(newKey(formatString("r_", 0), formatString("cf_", i + 1), "cq1", "L1", 42),
          trf.iter.getTopKey());
    }

    // test seeking backwards between each key
    for (int i = 2498; i >= 0; i--) {
      trf.seek(newKey(formatString("r_", 0), formatString("cf_", i), "cq1", "L1", 42)
          .followingKey(PartialKey.ROW_COLFAM));
      assertTrue(trf.iter.hasTop());
      assertEquals(newKey(formatString("r_", 0), formatString("cf_", i + 1), "cq1", "L1", 42),
          trf.iter.getTopKey());
    }

    trf.closeReader();

    // do same test with col qual
    trf = new TestRFile(conf);

    trf.openWriter();

    for (int i = 0; i < 2500; i++) {
      trf.writer.append(
          newKey(formatString("r_", 0), formatString("cf_", 0), formatString("cq_", i), "L1", 42),
          newValue("foo" + i));
    }

    trf.closeWriter();
    trf.openReader();

    // test seeking between each key forward
    for (int i = 0; i < 2499; i++) {
      trf.seek(
          newKey(formatString("r_", 0), formatString("cf_", 0), formatString("cq_", i), "L1", 42)
              .followingKey(PartialKey.ROW_COLFAM_COLQUAL));
      assertTrue(trf.iter.hasTop());
      assertEquals(newKey(formatString("r_", 0), formatString("cf_", 0), formatString("cq_", i + 1),
          "L1", 42), trf.iter.getTopKey());
    }

    // test seeking between each key forward
    for (int i = 0; i < 2499; i += 2) {
      trf.seek(
          newKey(formatString("r_", 0), formatString("cf_", 0), formatString("cq_", i), "L1", 42)
              .followingKey(PartialKey.ROW_COLFAM_COLQUAL));
      assertTrue(trf.iter.hasTop());
      assertEquals(newKey(formatString("r_", 0), formatString("cf_", 0), formatString("cq_", i + 1),
          "L1", 42), trf.iter.getTopKey());
    }

    // test seeking backwards between each key
    for (int i = 2498; i >= 0; i--) {
      trf.seek(
          newKey(formatString("r_", 0), formatString("cf_", 0), formatString("cq_", i), "L1", 42)
              .followingKey(PartialKey.ROW_COLFAM_COLQUAL));
      assertTrue(trf.iter.hasTop());
      assertEquals(newKey(formatString("r_", 0), formatString("cf_", 0), formatString("cq_", i + 1),
          "L1", 42), trf.iter.getTopKey());
    }

    trf.closeReader();
  }

  public static Set<ByteSequence> newColFamByteSequence(String... colFams) {
    HashSet<ByteSequence> cfs = new HashSet<>();

    for (String cf : colFams) {
      cfs.add(new ArrayByteSequence(cf));
    }

    return cfs;
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\file\rfile\RFileTest.java
  public void test9() throws IOException {
    TestRFile trf = new TestRFile(conf);

    trf.openWriter(false);

    trf.writer.startNewLocalityGroup("lg1", newColFamByteSequence("cf1", "cf2"));

    trf.writer.append(newKey("0000", "cf1", "doe,john", "", 4), newValue("1123 West Left st"));
    trf.writer.append(newKey("0002", "cf2", "doe,jane", "", 5), newValue("1124 East Right st"));

    trf.writer.startNewLocalityGroup("lg2", newColFamByteSequence("cf3", "cf4"));

    trf.writer.append(newKey("0001", "cf3", "buck,john", "", 4), newValue("90 Slum st"));
    trf.writer.append(newKey("0003", "cf4", "buck,jane", "", 5), newValue("09 Slum st"));

    trf.writer.close();

    trf.openReader();

    // scan first loc group
    Range r = new Range(newKey("0000", "cf1", "doe,john", "", 4), true,
        newKey("0003", "cf4", "buck,jane", "", 5), true);
    trf.iter.seek(r, newColFamByteSequence("cf1", "cf2"), true);
    assertEquals(1, trf.reader.getNumLocalityGroupsSeeked());

    assertTrue(trf.iter.hasTop());
    assertEquals(trf.iter.getTopKey(), newKey("0000", "cf1", "doe,john", "", 4));
    assertEquals(newValue("1123 West Left st"), trf.iter.getTopValue());
    trf.iter.next();
    assertTrue(trf.iter.hasTop());
    assertEquals(trf.iter.getTopKey(), newKey("0002", "cf2", "doe,jane", "", 5));
    assertEquals(newValue("1124 East Right st"), trf.iter.getTopValue());
    trf.iter.next();
    assertFalse(trf.iter.hasTop());

    // scan second loc group
    r = new Range(newKey("0000", "cf1", "doe,john", "", 4), true,
        newKey("0003", "cf4", "buck,jane", "", 5), true);
    trf.iter.seek(r, newColFamByteSequence("cf3", "cf4"), true);
    assertEquals(1, trf.reader.getNumLocalityGroupsSeeked());

    assertTrue(trf.iter.hasTop());
    assertEquals(trf.iter.getTopKey(), newKey("0001", "cf3", "buck,john", "", 4));
    assertEquals(newValue("90 Slum st"), trf.iter.getTopValue());
    trf.iter.next();
    assertTrue(trf.iter.hasTop());
    assertEquals(trf.iter.getTopKey(), newKey("0003", "cf4", "buck,jane", "", 5));
    assertEquals(newValue("09 Slum st"), trf.iter.getTopValue());
    trf.iter.next();
    assertFalse(trf.iter.hasTop());

    // scan all loc groups
    r = new Range(newKey("0000", "cf1", "doe,john", "", 4), true,
        newKey("0003", "cf4", "buck,jane", "", 5), true);
    trf.iter.seek(r, EMPTY_COL_FAMS, false);
    assertEquals(2, trf.reader.getNumLocalityGroupsSeeked());

    assertTrue(trf.iter.hasTop());
    assertEquals(trf.iter.getTopKey(), newKey("0000", "cf1", "doe,john", "", 4));
    assertEquals(newValue("1123 West Left st"), trf.iter.getTopValue());
    trf.iter.next();
    assertTrue(trf.iter.hasTop());
    assertEquals(trf.iter.getTopKey(), newKey("0001", "cf3", "buck,john", "", 4));
    assertEquals(newValue("90 Slum st"), trf.iter.getTopValue());
    trf.iter.next();
    assertTrue(trf.iter.hasTop());
    assertEquals(trf.iter.getTopKey(), newKey("0002", "cf2", "doe,jane", "", 5));
    assertEquals(newValue("1124 East Right st"), trf.iter.getTopValue());
    trf.iter.next();
    assertTrue(trf.iter.hasTop());
    assertEquals(trf.iter.getTopKey(), newKey("0003", "cf4", "buck,jane", "", 5));
    assertEquals(newValue("09 Slum st"), trf.iter.getTopValue());
    trf.iter.next();
    assertFalse(trf.iter.hasTop());

    // scan no loc groups
    r = new Range(newKey("0000", "cf1", "doe,john", "", 4), true,
        newKey("0003", "cf4", "buck,jane", "", 5), true);
    trf.iter.seek(r, newColFamByteSequence("saint", "dogooder"), true);
    assertEquals(0, trf.reader.getNumLocalityGroupsSeeked());
    assertFalse(trf.iter.hasTop());

    // scan a subset of second locality group
    r = new Range(newKey("0000", "cf1", "doe,john", "", 4), true,
        newKey("0003", "cf4", "buck,jane", "", 5), true);
    trf.iter.seek(r, newColFamByteSequence("cf4"), true);
    assertEquals(1, trf.reader.getNumLocalityGroupsSeeked());

    assertTrue(trf.iter.hasTop());
    assertEquals(trf.iter.getTopKey(), newKey("0003", "cf4", "buck,jane", "", 5));
    assertEquals(newValue("09 Slum st"), trf.iter.getTopValue());
    trf.iter.next();
    assertFalse(trf.iter.hasTop());

    // scan a subset of second locality group
    r = new Range(newKey("0000", "cf1", "doe,john", "", 4), true,
        newKey("0003", "cf4", "buck,jane", "", 5), true);
    trf.iter.seek(r, newColFamByteSequence("cf3"), true);
    assertEquals(1, trf.reader.getNumLocalityGroupsSeeked());

    assertTrue(trf.iter.hasTop());
    assertEquals(trf.iter.getTopKey(), newKey("0001", "cf3", "buck,john", "", 4));
    assertEquals(newValue("90 Slum st"), trf.iter.getTopValue());
    trf.iter.next();
    assertFalse(trf.iter.hasTop());

    // scan subset of first loc group
    r = new Range(newKey("0000", "cf1", "doe,john", "", 4), true,
        newKey("0003", "cf4", "buck,jane", "", 5), true);
    trf.iter.seek(r, newColFamByteSequence("cf1"), true);
    assertEquals(1, trf.reader.getNumLocalityGroupsSeeked());

    assertTrue(trf.iter.hasTop());
    assertEquals(trf.iter.getTopKey(), newKey("0000", "cf1", "doe,john", "", 4));
    assertEquals(newValue("1123 West Left st"), trf.iter.getTopValue());
    trf.iter.next();
    assertFalse(trf.iter.hasTop());

    // scan subset of first loc group
    r = new Range(newKey("0000", "cf1", "doe,john", "", 4), true,
        newKey("0003", "cf4", "buck,jane", "", 5), true);
    trf.iter.seek(r, newColFamByteSequence("cf2"), true);
    assertEquals(1, trf.reader.getNumLocalityGroupsSeeked());

    assertTrue(trf.iter.hasTop());
    assertEquals(trf.iter.getTopKey(), newKey("0002", "cf2", "doe,jane", "", 5));
    assertEquals(newValue("1124 East Right st"), trf.iter.getTopValue());
    trf.iter.next();
    assertFalse(trf.iter.hasTop());

    // scan subset of all loc groups
    r = new Range(newKey("0000", "cf1", "doe,john", "", 4), true,
        newKey("0003", "cf4", "buck,jane", "", 5), true);
    trf.iter.seek(r, newColFamByteSequence("cf1", "cf4"), true);
    assertEquals(2, trf.reader.getNumLocalityGroupsSeeked());

    assertTrue(trf.iter.hasTop());
    assertEquals(trf.iter.getTopKey(), newKey("0000", "cf1", "doe,john", "", 4));
    assertEquals(newValue("1123 West Left st"), trf.iter.getTopValue());
    trf.iter.next();
    assertTrue(trf.iter.hasTop());
    assertEquals(trf.iter.getTopKey(), newKey("0003", "cf4", "buck,jane", "", 5));
    assertEquals(newValue("09 Slum st"), trf.iter.getTopValue());
    trf.iter.next();
    assertFalse(trf.iter.hasTop());

    trf.closeReader();

  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\file\rfile\RFileTest.java
  public void test10() throws IOException {

    // test empty locality groups
    TestRFile trf = new TestRFile(conf);

    trf.openWriter(false);
    trf.writer.startNewLocalityGroup("lg1", newColFamByteSequence("cf1", "cf2"));
    trf.writer.startNewLocalityGroup("lg2", newColFamByteSequence("cf3", "cf4"));
    trf.writer.startDefaultLocalityGroup();
    trf.writer.close();

    trf.openReader();
    trf.iter.seek(new Range(new Text(""), null), EMPTY_COL_FAMS, false);
    assertFalse(trf.iter.hasTop());

    trf.closeReader();

    // another empty locality group test
    trf = new TestRFile(conf);

    trf.openWriter(false);
    trf.writer.startNewLocalityGroup("lg1", newColFamByteSequence("cf1", "cf2"));
    trf.writer.append(newKey("0000", "cf1", "doe,john", "", 4), newValue("1123 West Left st"));
    trf.writer.append(newKey("0002", "cf2", "doe,jane", "", 5), newValue("1124 East Right st"));
    trf.writer.startNewLocalityGroup("lg2", newColFamByteSequence("cf3", "cf4"));
    trf.writer.startDefaultLocalityGroup();
    trf.writer.close();

    trf.openReader();
    trf.iter.seek(new Range(new Text(""), null), EMPTY_COL_FAMS, false);
    assertTrue(trf.iter.hasTop());
    assertEquals(trf.iter.getTopKey(), newKey("0000", "cf1", "doe,john", "", 4));
    assertEquals(newValue("1123 West Left st"), trf.iter.getTopValue());
    trf.iter.next();
    assertTrue(trf.iter.hasTop());
    assertEquals(trf.iter.getTopKey(), newKey("0002", "cf2", "doe,jane", "", 5));
    assertEquals(newValue("1124 East Right st"), trf.iter.getTopValue());
    trf.iter.next();
    assertFalse(trf.iter.hasTop());

    trf.closeReader();

    // another empty locality group test
    trf = new TestRFile(conf);

    trf.openWriter(false);
    trf.writer.startNewLocalityGroup("lg1", newColFamByteSequence("cf1", "cf2"));
    trf.writer.startNewLocalityGroup("lg2", newColFamByteSequence("cf3", "cf4"));
    trf.writer.append(newKey("0001", "cf3", "buck,john", "", 4), newValue("90 Slum st"));
    trf.writer.append(newKey("0003", "cf4", "buck,jane", "", 5), newValue("09 Slum st"));
    trf.writer.startDefaultLocalityGroup();
    trf.writer.close();

    trf.openReader();
    trf.iter.seek(new Range(new Text(""), null), EMPTY_COL_FAMS, false);
    assertTrue(trf.iter.hasTop());
    assertEquals(trf.iter.getTopKey(), newKey("0001", "cf3", "buck,john", "", 4));
    assertEquals(newValue("90 Slum st"), trf.iter.getTopValue());
    trf.iter.next();
    assertTrue(trf.iter.hasTop());
    assertEquals(trf.iter.getTopKey(), newKey("0003", "cf4", "buck,jane", "", 5));
    assertEquals(newValue("09 Slum st"), trf.iter.getTopValue());
    trf.iter.next();
    assertFalse(trf.iter.hasTop());

    trf.closeReader();

    // another empty locality group test
    trf = new TestRFile(conf);

    trf.openWriter(false);
    trf.writer.startNewLocalityGroup("lg1", newColFamByteSequence("cf1", "cf2"));
    trf.writer.startNewLocalityGroup("lg2", newColFamByteSequence("cf3", "cf4"));
    trf.writer.startDefaultLocalityGroup();
    trf.writer.append(newKey("0007", "good citizen", "q,john", "", 4), newValue("70 Apple st"));
    trf.writer.append(newKey("0008", "model citizen", "q,jane", "", 5), newValue("81 Plum st"));
    trf.writer.close();

    trf.openReader();
    trf.iter.seek(new Range(new Text(""), null), EMPTY_COL_FAMS, false);
    assertTrue(trf.iter.hasTop());
    assertEquals(trf.iter.getTopKey(), newKey("0007", "good citizen", "q,john", "", 4));
    assertEquals(newValue("70 Apple st"), trf.iter.getTopValue());
    trf.iter.next();
    assertTrue(trf.iter.hasTop());
    assertEquals(trf.iter.getTopKey(), newKey("0008", "model citizen", "q,jane", "", 5));
    assertEquals(newValue("81 Plum st"), trf.iter.getTopValue());
    trf.iter.next();
    assertFalse(trf.iter.hasTop());

    trf.closeReader();

    // another empty locality group test
    trf = new TestRFile(conf);

    trf.openWriter(false);
    trf.writer.startNewLocalityGroup("lg1", newColFamByteSequence("cf1", "cf2"));
    trf.writer.append(newKey("0000", "cf1", "doe,john", "", 4), newValue("1123 West Left st"));
    trf.writer.append(newKey("0002", "cf2", "doe,jane", "", 5), newValue("1124 East Right st"));
    trf.writer.startNewLocalityGroup("lg2", newColFamByteSequence("cf3", "cf4"));
    trf.writer.startDefaultLocalityGroup();
    trf.writer.append(newKey("0007", "good citizen", "q,john", "", 4), newValue("70 Apple st"));
    trf.writer.append(newKey("0008", "model citizen", "q,jane", "", 5), newValue("81 Plum st"));
    trf.writer.close();

    trf.openReader();
    trf.iter.seek(new Range(new Text(""), null), EMPTY_COL_FAMS, false);
    assertTrue(trf.iter.hasTop());
    assertEquals(trf.iter.getTopKey(), newKey("0000", "cf1", "doe,john", "", 4));
    assertEquals(newValue("1123 West Left st"), trf.iter.getTopValue());
    trf.iter.next();
    assertTrue(trf.iter.hasTop());
    assertEquals(trf.iter.getTopKey(), newKey("0002", "cf2", "doe,jane", "", 5));
    assertEquals(newValue("1124 East Right st"), trf.iter.getTopValue());
    trf.iter.next();
    assertTrue(trf.iter.hasTop());
    assertEquals(trf.iter.getTopKey(), newKey("0007", "good citizen", "q,john", "", 4));
    assertEquals(newValue("70 Apple st"), trf.iter.getTopValue());
    trf.iter.next();
    assertTrue(trf.iter.hasTop());
    assertEquals(trf.iter.getTopKey(), newKey("0008", "model citizen", "q,jane", "", 5));
    assertEquals(newValue("81 Plum st"), trf.iter.getTopValue());
    trf.iter.next();
    assertFalse(trf.iter.hasTop());

    trf.closeReader();
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\file\rfile\RFileTest.java
  public void test11() throws IOException {
    // test locality groups with more than two entries

    TestRFile trf = new TestRFile(conf);

    trf.openWriter(false);
    trf.writer.startNewLocalityGroup("lg1", newColFamByteSequence("3mod10"));
    for (int i = 3; i < 1024; i += 10) {
      trf.writer.append(newKey(formatString("i", i), "3mod10", "", "", i + 2), newValue("" + i));
    }

    trf.writer.startNewLocalityGroup("lg2", newColFamByteSequence("5mod10", "7mod10"));

    for (int i = 5; i < 1024;) {
      trf.writer.append(newKey(formatString("i", i), "5mod10", "", "", i + 2), newValue("" + i));
      i += 2;
      trf.writer.append(newKey(formatString("i", i), "7mod10", "", "", i + 2), newValue("" + i));
      i += 8;
    }

    trf.writer.startDefaultLocalityGroup();
    for (int i = 0; i < 1024; i++) {

      int m10 = i % 10;
      if (m10 == 3 || m10 == 5 || m10 == 7)
        continue;

      trf.writer.append(newKey(formatString("i", i), m10 + "mod10", "", "", i + 2),
          newValue("" + i));

    }
    trf.writer.close();

    // test a merged read of all column families
    trf.openReader();
    trf.iter.seek(new Range(new Text(""), null), EMPTY_COL_FAMS, false);
    assertEquals(3, trf.reader.getNumLocalityGroupsSeeked());
    for (int i = 0; i < 1024; i++) {
      assertTrue(trf.iter.hasTop());
      assertEquals(newKey(formatString("i", i), (i % 10) + "mod10", "", "", i + 2),
          trf.iter.getTopKey());
      assertEquals(newValue("" + i), trf.iter.getTopValue());
      trf.iter.next();
    }
    assertFalse(trf.iter.hasTop());

    // try reading each of the 10 column families separately
    for (int m = 0; m < 10; m++) {
      trf.iter.seek(new Range(new Key(), true, null, true), newColFamByteSequence(m + "mod10"),
          true);
      assertEquals(1, trf.reader.getNumLocalityGroupsSeeked());
      for (int i = m; i < 1024; i += 10) {
        assertTrue(trf.iter.hasTop());
        assertEquals(newKey(formatString("i", i), (i % 10) + "mod10", "", "", i + 2),
            trf.iter.getTopKey());
        assertEquals(newValue("" + i), trf.iter.getTopValue());
        trf.iter.next();
      }
      assertFalse(trf.iter.hasTop());

      // test excluding an individual column family
      trf.iter.seek(new Range(new Key(), true, null, true), newColFamByteSequence(m + "mod10"),
          false);
      if (m == 3)
        assertEquals(2, trf.reader.getNumLocalityGroupsSeeked());
      else
        assertEquals(3, trf.reader.getNumLocalityGroupsSeeked());
      for (int i = 0; i < 1024; i++) {

        if (i % 10 == m)
          continue;

        assertTrue(trf.iter.hasTop());
        assertEquals(newKey(formatString("i", i), (i % 10) + "mod10", "", "", i + 2),
            trf.iter.getTopKey());
        assertEquals(newValue("" + i), trf.iter.getTopValue());
        trf.iter.next();
      }
      assertFalse(trf.iter.hasTop());
    }

    // test Rfile deepcopy
    SortedKeyValueIterator<Key,Value> reader2 = trf.iter.deepCopy(null);

    // try reading from cloned reader at the same time as parent reader
    for (int m = 0; m < 9; m++) {
      trf.iter.seek(new Range(new Key(), true, null, true), newColFamByteSequence(m + "mod10"),
          true);
      assertEquals(1, trf.reader.getNumLocalityGroupsSeeked());
      reader2.seek(new Range(new Key(), true, null, true), newColFamByteSequence((m + 1) + "mod10"),
          true);
      // assertEquals(1, reader2.getNumLocalityGroupsSeeked());
      for (int i = m; i < 1024; i += 10) {
        // System.out.println(m+","+i);
        assertTrue(trf.iter.hasTop());
        assertEquals(newKey(formatString("i", i), (i % 10) + "mod10", "", "", i + 2),
            trf.iter.getTopKey());
        assertEquals(newValue("" + i), trf.iter.getTopValue());
        trf.iter.next();
        if (i + 1 < 1024) {
          assertTrue(reader2.hasTop());
          assertEquals(newKey(formatString("i", (i + 1)), ((i + 1) % 10) + "mod10", "", "", i + 3),
              reader2.getTopKey());
          assertEquals(newValue("" + (i + 1)), reader2.getTopValue());
          reader2.next();
        }
      }
      assertFalse(trf.iter.hasTop());
      assertFalse(reader2.hasTop());
    }

    trf.closeReader();
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\file\rfile\RFileTest.java
  public void test12() throws IOException {
    // test inserting column fams not in locality groups

    TestRFile trf = new TestRFile(conf);

    trf.openWriter(false);

    trf.writer.startNewLocalityGroup("lg1", newColFamByteSequence("a", "b"));

    trf.writer.append(newKey("0007", "a", "cq1", "", 4), newValue("1"));

    try {
      trf.writer.append(newKey("0009", "c", "cq1", "", 4), newValue("1"));
      fail();
    } catch (IllegalArgumentException ioe) {

    }

    trf.closeWriter();

    trf.openReader();

    trf.iter.seek(new Range(), EMPTY_COL_FAMS, false);
    assertTrue(trf.iter.hasTop());
    assertEquals(newKey("0007", "a", "cq1", "", 4), trf.iter.getTopKey());
    assertEquals(newValue("1"), trf.iter.getTopValue());
    trf.iter.next();
    assertFalse(trf.iter.hasTop());

  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\file\rfile\RFileTest.java
  public void test13() throws IOException {
    // test inserting column fam in default loc group that was in
    // previous locality group

    TestRFile trf = new TestRFile(conf);

    trf.openWriter(false);

    trf.writer.startNewLocalityGroup("lg1", newColFamByteSequence("a", "b"));

    trf.writer.append(newKey("0007", "a", "cq1", "", 4), newValue("1"));

    trf.writer.startDefaultLocalityGroup();

    try {
      trf.writer.append(newKey("0008", "a", "cq1", "", 4), newValue("1"));
      fail();
    } catch (IllegalArgumentException ioe) {

    }

    try {
      trf.writer.append(newKey("0009", "b", "cq1", "", 4), newValue("1"));
      fail();
    } catch (IllegalArgumentException ioe) {

    }

    trf.closeWriter();

    trf.openReader();

    trf.iter.seek(new Range(), EMPTY_COL_FAMS, false);
    assertTrue(trf.iter.hasTop());
    assertEquals(newKey("0007", "a", "cq1", "", 4), trf.iter.getTopKey());
    assertEquals(newValue("1"), trf.iter.getTopValue());
    trf.iter.next();
    assertFalse(trf.iter.hasTop());

  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\file\rfile\RFileTest.java
  public void test14() throws IOException {
    // test starting locality group after default locality group was started
    TestRFile trf = new TestRFile(conf);

    trf.openWriter(false);

    trf.writer.startDefaultLocalityGroup();
    try {
      trf.writer.startNewLocalityGroup("lg1", newColFamByteSequence("a", "b"));
      fail();
    } catch (IllegalStateException ioe) {

    }

    try {
      trf.writer.startDefaultLocalityGroup();
      fail();
    } catch (IllegalStateException ioe) {

    }

    trf.writer.close();
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\file\rfile\RFileTest.java
  public void test16() throws IOException {
    TestRFile trf = new TestRFile(conf);

    trf.openWriter(false);

    trf.writer.startNewLocalityGroup("lg1", newColFamByteSequence("a", "b"));

    trf.writer.append(newKey("0007", "a", "cq1", "", 4), newValue("1"));
    try {
      trf.writer.startNewLocalityGroup("lg1", newColFamByteSequence("b", "c"));
      fail();
    } catch (IllegalArgumentException ioe) {

    }

    trf.closeWriter();
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\file\rfile\RFileTest.java
  public void test17() throws IOException {
    // add alot of the same keys to rfile that cover multiple blocks...
    // this should cause the keys in the index to be exactly the same...
    // ensure seeks work correctly

    TestRFile trf = new TestRFile(conf);

    trf.openWriter(false);

    trf.writer.startDefaultLocalityGroup();
    for (int i = 0; i < 2048; i++) {
      trf.writer.append(newKey("r0000", "cf1", "cq1", "", 1), newValue("" + i));
    }

    for (int i = 2048; i < 4096; i++) {
      trf.writer.append(newKey("r0001", "cf1", "cq1", "", 1), newValue("" + i));
    }

    trf.writer.close();

    trf.openReader();

    FileSKVIterator indexIter = trf.reader.getIndex();
    int count = 0;
    while (indexIter.hasTop()) {
      count++;
      indexIter.next();
    }

    assertTrue(count > 4);

    trf.iter.seek(new Range(newKey("r0000", "cf1", "cq1", "", 1), true,
        newKey("r0001", "cf1", "cq1", "", 1), false), EMPTY_COL_FAMS, false);

    for (int i = 0; i < 2048; i++) {
      assertTrue(trf.iter.hasTop());
      assertEquals(newKey("r0000", "cf1", "cq1", "", 1), trf.iter.getTopKey());
      assertEquals(newValue("" + i), trf.iter.getTopValue());
      trf.iter.next();
    }

    assertFalse(trf.iter.hasTop());

    trf.iter.seek(new Range(newKey("r0000", "cf1", "cq1", "", 1), false,
        newKey("r0001", "cf1", "cq1", "", 1), true), EMPTY_COL_FAMS, false);

    for (int i = 2048; i < 4096; i++) {
      assertTrue(trf.iter.hasTop());
      assertEquals(newKey("r0001", "cf1", "cq1", "", 1), trf.iter.getTopKey());
      assertEquals(newValue("" + i), trf.iter.getTopValue());
      trf.iter.next();
    }

    assertFalse(trf.iter.hasTop());

    trf.iter.seek(new Range(newKey("r0001", "cf1", "cq1", "", 1), true,
        newKey("r0001", "cf1", "cq1", "", 1), true), EMPTY_COL_FAMS, false);

    for (int i = 2048; i < 4096; i++) {
      assertTrue(trf.iter.hasTop());
      assertEquals(newKey("r0001", "cf1", "cq1", "", 1), trf.iter.getTopKey());
      assertEquals(newValue("" + i), trf.iter.getTopValue());
      trf.iter.next();
    }

    assertFalse(trf.iter.hasTop());

    trf.iter.seek(new Range(newKey("r0002", "cf1", "cq1", "", 1), true,
        newKey("r0002", "cf1", "cq1", "", 1), true), EMPTY_COL_FAMS, false);
    assertFalse(trf.iter.hasTop());

    trf.iter.seek(new Range((Key) null, null), EMPTY_COL_FAMS, false);

    for (int i = 0; i < 2048; i++) {
      assertTrue(trf.iter.hasTop());
      assertEquals(newKey("r0000", "cf1", "cq1", "", 1), trf.iter.getTopKey());
      assertEquals(newValue("" + i), trf.iter.getTopValue());
      trf.iter.next();
    }

    for (int i = 2048; i < 4096; i++) {
      assertTrue(trf.iter.hasTop());
      assertEquals(newKey("r0001", "cf1", "cq1", "", 1), trf.iter.getTopKey());
      assertEquals(newValue("" + i), trf.iter.getTopValue());
      trf.iter.next();
    }

    assertFalse(trf.iter.hasTop());

    trf.closeReader();
  }

  private String t18ncf(int i) {
    return String.format("cf%06d", i);
  }

  private Set<ByteSequence> t18newColFamByteSequence(int... colFams) {
    HashSet<ByteSequence> cfs = new HashSet<>();
    for (int i : colFams) {
      cfs.add(new ArrayByteSequence(t18ncf(i)));
    }

    return cfs;
  }

  private void t18Append(TestRFile trf, HashSet<ByteSequence> allCf, int i) throws IOException {
    String cf = t18ncf(i);
    trf.writer.append(newKey("r0000", cf, "cq1", "", 1), newValue("" + i));
    allCf.add(new ArrayByteSequence(cf));
  }

  private void t18Verify(Set<ByteSequence> cfs, SortedKeyValueIterator<Key,Value> iter,
      Reader reader, HashSet<ByteSequence> allCf, int eialg, int eealg) throws IOException {

    HashSet<ByteSequence> colFamsSeen = new HashSet<>();

    iter.seek(new Range(), cfs, true);
    assertEquals(eialg, reader.getNumLocalityGroupsSeeked());

    while (iter.hasTop()) {
      colFamsSeen.add(iter.getTopKey().getColumnFamilyData());
      iter.next();
    }

    HashSet<ByteSequence> expected = new HashSet<>(allCf);
    expected.retainAll(cfs);
    assertEquals(expected, colFamsSeen);

    iter.seek(new Range(), cfs, false);
    assertEquals(eealg, reader.getNumLocalityGroupsSeeked());

    colFamsSeen.clear();
    while (iter.hasTop()) {
      colFamsSeen.add(iter.getTopKey().getColumnFamilyData());
      iter.next();
    }

    HashSet<ByteSequence> nonExcluded = new HashSet<>(allCf);
    nonExcluded.removeAll(cfs);
    assertEquals(nonExcluded, colFamsSeen);
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\file\rfile\RFileTest.java
  public void test18() throws IOException {
    // test writing more column families to default LG than it will track

    TestRFile trf = new TestRFile(conf);

    trf.openWriter(false);

    HashSet<ByteSequence> allCf = new HashSet<>();

    trf.writer.startNewLocalityGroup("lg1", t18newColFamByteSequence(0));
    for (int i = 0; i < 1; i++)
      t18Append(trf, allCf, i);

    trf.writer.startNewLocalityGroup("lg2", t18newColFamByteSequence(1, 2));
    for (int i = 1; i < 3; i++)
      t18Append(trf, allCf, i);

    trf.writer.startNewLocalityGroup("lg3", t18newColFamByteSequence(3, 4, 5));
    for (int i = 3; i < 6; i++)
      t18Append(trf, allCf, i);

    trf.writer.startDefaultLocalityGroup();

    int max = 6 + RFile.Writer.MAX_CF_IN_DLG + 100;
    for (int i = 6; i < max; i++)
      t18Append(trf, allCf, i);

    trf.closeWriter();

    trf.openReader();

    t18Verify(t18newColFamByteSequence(0), trf.iter, trf.reader, allCf, 1, 3);
    for (int i = 1; i < 10; i++)
      t18Verify(t18newColFamByteSequence(i), trf.iter, trf.reader, allCf, 1, 4);

    t18Verify(t18newColFamByteSequence(max + 1), trf.iter, trf.reader, allCf, 1, 4);

    t18Verify(t18newColFamByteSequence(1, 2, 3, 4), trf.iter, trf.reader, allCf, 2, 3);
    t18Verify(t18newColFamByteSequence(1, 2, 3, 4, 5), trf.iter, trf.reader, allCf, 2, 2);

    t18Verify(t18newColFamByteSequence(0, 1, 2, 3, 4), trf.iter, trf.reader, allCf, 3, 2);
    t18Verify(t18newColFamByteSequence(0, 1, 2, 3, 4, 5), trf.iter, trf.reader, allCf, 3, 1);
    t18Verify(t18newColFamByteSequence(0, 1, 2, 3, 4, 5, 6), trf.iter, trf.reader, allCf, 4, 1);

    t18Verify(t18newColFamByteSequence(0, 1), trf.iter, trf.reader, allCf, 2, 3);
    t18Verify(t18newColFamByteSequence(2, 3), trf.iter, trf.reader, allCf, 2, 4);
    t18Verify(t18newColFamByteSequence(5, 6), trf.iter, trf.reader, allCf, 2, 4);

    trf.closeReader();
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\file\rfile\RFileTest.java
  public void test19() throws IOException {
    // test RFile metastore
    TestRFile trf = new TestRFile(conf);

    trf.openWriter(false);

    trf.openWriter(false);
    trf.writer.startNewLocalityGroup("lg1", newColFamByteSequence("cf1", "cf2"));
    trf.writer.append(newKey("0000", "cf1", "doe,john", "", 4), newValue("1123 West Left st"));
    trf.writer.append(newKey("0002", "cf2", "doe,jane", "", 5), newValue("1124 East Right st"));
    trf.writer.startNewLocalityGroup("lg2", newColFamByteSequence("cf3", "cf4"));

    DataOutputStream dos = trf.writer.createMetaStore("count");

    dos.writeInt(2);
    dos.writeUTF("data1");
    dos.writeInt(1);
    dos.writeUTF("data2");
    dos.writeInt(1);

    dos.close();

    trf.closeWriter();

    trf.openReader();

    trf.iter.seek(new Range(), EMPTY_COL_FAMS, false);

    assertTrue(trf.iter.hasTop());
    assertEquals(trf.iter.getTopKey(), newKey("0000", "cf1", "doe,john", "", 4));
    assertEquals(newValue("1123 West Left st"), trf.iter.getTopValue());
    trf.iter.next();

    DataInputStream in = trf.reader.getMetaStore("count");

    assertEquals(2, in.readInt());
    assertEquals("data1", in.readUTF());
    assertEquals(1, in.readInt());
    assertEquals("data2", in.readUTF());
    assertEquals(1, in.readInt());

    in.close();

    assertTrue(trf.iter.hasTop());
    assertEquals(trf.iter.getTopKey(), newKey("0002", "cf2", "doe,jane", "", 5));
    assertEquals(newValue("1124 East Right st"), trf.iter.getTopValue());
    trf.iter.next();
    assertFalse(trf.iter.hasTop());

    trf.closeReader();
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\file\rfile\RFileTest.java
  public void testReseekUnconsumed() throws Exception {
    TestRFile trf = new TestRFile(conf);

    trf.openWriter();

    for (int i = 0; i < 2500; i++) {
      trf.writer.append(newKey(formatString("r_", i), "cf1", "cq1", "L1", 42), newValue("foo" + i));
    }

    trf.closeWriter();
    trf.openReader();

    Set<ByteSequence> cfs = Collections.emptySet();

    Random rand = new SecureRandom();

    for (int count = 0; count < 100; count++) {

      int start = rand.nextInt(2300);
      Range range = new Range(newKey(formatString("r_", start), "cf1", "cq1", "L1", 42),
          newKey(formatString("r_", start + 100), "cf1", "cq1", "L1", 42));

      trf.reader.seek(range, cfs, false);

      int numToScan = rand.nextInt(100);

      for (int j = 0; j < numToScan; j++) {
        assertTrue(trf.reader.hasTop());
        assertEquals(newKey(formatString("r_", start + j), "cf1", "cq1", "L1", 42),
            trf.reader.getTopKey());
        trf.reader.next();
      }

      assertTrue(trf.reader.hasTop());
      assertEquals(newKey(formatString("r_", start + numToScan), "cf1", "cq1", "L1", 42),
          trf.reader.getTopKey());

      // seek a little forward from the last range and read a few keys within the unconsumed portion
      // of the last range

      int start2 = start + numToScan + rand.nextInt(3);
      int end2 = start2 + rand.nextInt(3);

      range = new Range(newKey(formatString("r_", start2), "cf1", "cq1", "L1", 42),
          newKey(formatString("r_", end2), "cf1", "cq1", "L1", 42));
      trf.reader.seek(range, cfs, false);

      for (int j = start2; j <= end2; j++) {
        assertTrue(trf.reader.hasTop());
        assertEquals(newKey(formatString("r_", j), "cf1", "cq1", "L1", 42), trf.reader.getTopKey());
        trf.reader.next();
      }

      assertFalse(trf.reader.hasTop());

    }

    trf.closeReader();
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\file\rfile\RFileTest.java
  public void testMissingUnreleasedVersions() throws Exception {
    runVersionTest(5, getAccumuloConfig(CryptoTest.CRYPTO_OFF_CONF));
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\file\rfile\RFileTest.java
  public void testOldVersions() throws Exception {
    ConfigurationCopy defaultConf = getAccumuloConfig(CryptoTest.CRYPTO_OFF_CONF);
    runVersionTest(3, defaultConf);
    runVersionTest(4, defaultConf);
    runVersionTest(6, defaultConf);
    runVersionTest(7, defaultConf);
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\file\rfile\RFileTest.java
  public void testOldVersionsWithCrypto() throws Exception {
    ConfigurationCopy cryptoOnConf = getAccumuloConfig(CryptoTest.CRYPTO_ON_CONF);
    runVersionTest(3, cryptoOnConf);
    runVersionTest(4, cryptoOnConf);
    runVersionTest(6, cryptoOnConf);
    runVersionTest(7, cryptoOnConf);
  }

  private void runVersionTest(int version, ConfigurationCopy aconf) throws Exception {
    InputStream in = this.getClass().getClassLoader()
        .getResourceAsStream("org/apache/accumulo/core/file/rfile/ver_" + version + ".rf");
    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    byte[] buf = new byte[1024];
    int read;
    while ((read = in.read(buf)) > 0)
      baos.write(buf, 0, read);

    byte[] data = baos.toByteArray();
    SeekableByteArrayInputStream bais = new SeekableByteArrayInputStream(data);
    FSDataInputStream in2 = new FSDataInputStream(bais);
    aconf.set(Property.TSERV_CACHE_MANAGER_IMPL, LruBlockCacheManager.class.getName());
    aconf.set(Property.TSERV_DEFAULT_BLOCKSIZE, Long.toString(100000));
    aconf.set(Property.TSERV_DATACACHE_SIZE, Long.toString(100000000));
    aconf.set(Property.TSERV_INDEXCACHE_SIZE, Long.toString(100000000));
    BlockCacheManager manager = BlockCacheManagerFactory.getInstance(aconf);
    manager.start(new BlockCacheConfiguration(aconf));
    CachableBuilder cb = new CachableBuilder().input(in2).length(data.length).conf(hadoopConf)
        .cryptoService(CryptoServiceFactory.newInstance(aconf, ClassloaderType.JAVA))
        .cacheProvider(new BasicCacheProvider(manager.getBlockCache(CacheType.INDEX),
            manager.getBlockCache(CacheType.DATA)));
    Reader reader = new RFile.Reader(cb);
    checkIndex(reader);

    ColumnFamilySkippingIterator iter = new ColumnFamilySkippingIterator(reader);

    for (int start : new int[] {0, 10, 100, 998}) {
      for (int cf = 1; cf <= 4; cf++) {
        if (start == 0)
          iter.seek(new Range(), newColFamByteSequence(formatString("cf_", cf)), true);
        else
          iter.seek(new Range(formatString("r_", start), null),
              newColFamByteSequence(formatString("cf_", cf)), true);

        for (int i = start; i < 1000; i++) {
          assertTrue(iter.hasTop());
          assertEquals(newKey(formatString("r_", i), formatString("cf_", cf),
              formatString("cq_", 0), "", 1000 - i), iter.getTopKey());
          assertEquals(newValue(i + ""), iter.getTopValue());
          iter.next();
        }

        assertFalse(iter.hasTop());
      }

      if (start == 0)
        iter.seek(new Range(), newColFamByteSequence(), false);
      else
        iter.seek(new Range(formatString("r_", start), null), newColFamByteSequence(), false);

      for (int i = start; i < 1000; i++) {
        for (int cf = 1; cf <= 4; cf++) {
          assertTrue(iter.hasTop());
          assertEquals(newKey(formatString("r_", i), formatString("cf_", cf),
              formatString("cq_", 0), "", 1000 - i), iter.getTopKey());
          assertEquals(newValue(i + ""), iter.getTopValue());
          iter.next();
        }
      }

      assertFalse(iter.hasTop());
    }

    manager.stop();
    reader.close();
  }

  public static ConfigurationCopy getAccumuloConfig(String cryptoOn) {
    ConfigurationCopy cfg = new ConfigurationCopy(DefaultConfiguration.getInstance());
    switch (cryptoOn) {
      case CryptoTest.CRYPTO_ON_CONF:
        cfg.set(Property.INSTANCE_CRYPTO_SERVICE,
            "org.apache.accumulo.core.cryptoImpl.AESCryptoService");
        cfg.set(INSTANCE_CRYPTO_PREFIX.getKey() + "key.uri", CryptoTest.keyPath);
    }
    return cfg;
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\file\rfile\RFileTest.java
  public void testEncRFile1() throws Exception {
    conf = getAccumuloConfig(CryptoTest.CRYPTO_ON_CONF);
    test1();
    conf = null;
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\file\rfile\RFileTest.java
  public void testEncRFile2() throws Exception {
    conf = getAccumuloConfig(CryptoTest.CRYPTO_ON_CONF);
    test2();
    conf = null;
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\file\rfile\RFileTest.java
  public void testEncRFile3() throws Exception {
    conf = getAccumuloConfig(CryptoTest.CRYPTO_ON_CONF);
    test3();
    conf = null;
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\file\rfile\RFileTest.java
  public void testEncRFile4() throws Exception {
    conf = getAccumuloConfig(CryptoTest.CRYPTO_ON_CONF);
    test4();
    conf = null;
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\file\rfile\RFileTest.java
  public void testEncRFile5() throws Exception {
    conf = getAccumuloConfig(CryptoTest.CRYPTO_ON_CONF);
    test5();
    conf = null;
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\file\rfile\RFileTest.java
  public void testEncRFile6() throws Exception {
    conf = getAccumuloConfig(CryptoTest.CRYPTO_ON_CONF);
    test6();
    conf = null;
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\file\rfile\RFileTest.java
  public void testEncRFile7() throws Exception {
    conf = getAccumuloConfig(CryptoTest.CRYPTO_ON_CONF);
    test7();
    conf = null;
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\file\rfile\RFileTest.java
  public void testEncRFile8() throws Exception {
    conf = getAccumuloConfig(CryptoTest.CRYPTO_ON_CONF);
    test8();
    conf = null;
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\file\rfile\RFileTest.java
  public void testEncRFile9() throws Exception {
    conf = getAccumuloConfig(CryptoTest.CRYPTO_ON_CONF);
    test9();
    conf = null;
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\file\rfile\RFileTest.java
  public void testEncRFile10() throws Exception {
    conf = getAccumuloConfig(CryptoTest.CRYPTO_ON_CONF);
    test10();
    conf = null;
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\file\rfile\RFileTest.java
  public void testEncRFile11() throws Exception {
    conf = getAccumuloConfig(CryptoTest.CRYPTO_ON_CONF);
    test11();
    conf = null;
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\file\rfile\RFileTest.java
  public void testEncRFile12() throws Exception {
    conf = getAccumuloConfig(CryptoTest.CRYPTO_ON_CONF);
    test12();
    conf = null;
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\file\rfile\RFileTest.java
  public void testEncRFile13() throws Exception {
    conf = getAccumuloConfig(CryptoTest.CRYPTO_ON_CONF);
    test13();
    conf = null;
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\file\rfile\RFileTest.java
  public void testEncRFile14() throws Exception {
    conf = getAccumuloConfig(CryptoTest.CRYPTO_ON_CONF);
    test14();
    conf = null;
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\file\rfile\RFileTest.java
  public void testEncRFile16() throws Exception {
    conf = getAccumuloConfig(CryptoTest.CRYPTO_ON_CONF);
    test16();
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\file\rfile\RFileTest.java
  public void testEncRFile17() throws Exception {
    conf = getAccumuloConfig(CryptoTest.CRYPTO_ON_CONF);
    test17();
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\file\rfile\RFileTest.java
  public void testEncRFile18() throws Exception {
    conf = getAccumuloConfig(CryptoTest.CRYPTO_ON_CONF);
    test18();
    conf = null;
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\file\rfile\RFileTest.java
  public void testEncRFile19() throws Exception {
    conf = getAccumuloConfig(CryptoTest.CRYPTO_ON_CONF);
    test19();
    conf = null;
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\file\rfile\RFileTest.java
  public void testEncryptedRFiles() throws Exception {
    conf = getAccumuloConfig(CryptoTest.CRYPTO_ON_CONF);
    test1();
    test2();
    test3();
    test4();
    test5();
    test6();
    test7();
    test8();
    conf = null;
  }

  private Key newKey(int r, int c) {
    String row = String.format("r%06d", r);
    switch (c) {
      case 0:
        return new Key(row, "user", "addr");
      case 1:
        return new Key(row, "user", "name");
      default:
        throw new IllegalArgumentException();
    }
  }

  private Value newValue(int r, int c) {
    switch (c) {
      case 0:
        return new Value("123" + r + " west st");
      case 1:
        return new Value("bob" + r);
      default:
        throw new IllegalArgumentException();
    }
  }

  private static void hash(Hasher hasher, Key key, Value val) {
    hasher.putBytes(key.getRowData().toArray());
    hasher.putBytes(key.getColumnFamilyData().toArray());
    hasher.putBytes(key.getColumnQualifierData().toArray());
    hasher.putBytes(key.getColumnVisibilityData().toArray());
    hasher.putLong(key.getTimestamp());
    hasher.putBoolean(key.isDeleted());
    hasher.putBytes(val.get());
  }

  private static void add(TestRFile trf, Key key, Value val, Hasher dataHasher,
      List<Entry<Key,Value>> sample, Sampler sampler) throws IOException {
    if (sampler.accept(key)) {
      sample.add(new AbstractMap.SimpleImmutableEntry<>(key, val));
    }

    hash(dataHasher, key, val);

    trf.writer.append(key, val);
  }

  private List<Entry<Key,Value>> toList(SortedKeyValueIterator<Key,Value> sample)
      throws IOException {
    ArrayList<Entry<Key,Value>> ret = new ArrayList<>();

    while (sample.hasTop()) {
      ret.add(new AbstractMap.SimpleImmutableEntry<>(new Key(sample.getTopKey()),
          new Value(sample.getTopValue())));
      sample.next();
    }

    return ret;
  }

  private void checkSample(SortedKeyValueIterator<Key,Value> sample,
      List<Entry<Key,Value>> sampleData) throws IOException {
    checkSample(sample, sampleData, EMPTY_COL_FAMS, false);
  }

  private void checkSample(SortedKeyValueIterator<Key,Value> sample,
      List<Entry<Key,Value>> sampleData, Collection<ByteSequence> columnFamilies, boolean inclusive)
      throws IOException {

    sample.seek(new Range(), columnFamilies, inclusive);
    assertEquals(sampleData, toList(sample));

    Random rand = new SecureRandom();
    long seed = rand.nextLong();
    rand.setSeed(seed);

    // randomly seek sample iterator and verify
    for (int i = 0; i < 33; i++) {
      Key startKey = null;
      boolean startInclusive = false;
      int startIndex = 0;

      Key endKey = null;
      boolean endInclusive = false;
      int endIndex = sampleData.size();

      if (rand.nextBoolean()) {
        startIndex = rand.nextInt(sampleData.size());
        startKey = sampleData.get(startIndex).getKey();
        startInclusive = rand.nextBoolean();
        if (!startInclusive) {
          startIndex++;
        }
      }

      if (startIndex < endIndex && rand.nextBoolean()) {
        endIndex -= rand.nextInt(endIndex - startIndex);
        endKey = sampleData.get(endIndex - 1).getKey();
        endInclusive = rand.nextBoolean();
        if (!endInclusive) {
          endIndex--;
        }
      } else if (startIndex == endIndex) {
        endInclusive = rand.nextBoolean();
      }

      sample.seek(new Range(startKey, startInclusive, endKey, endInclusive), columnFamilies,
          inclusive);
      assertEquals("seed: " + seed, sampleData.subList(startIndex, endIndex), toList(sample));
    }
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\file\rfile\RFileTest.java
  public void testSample() throws IOException {

    int num = 10000;

    for (int sampleBufferSize : new int[] {1 << 10, 1 << 20}) {
      // force sample buffer to flush for smaller data
      RFile.setSampleBufferSize(sampleBufferSize);

      for (int modulus : new int[] {19, 103, 1019}) {
        Hasher dataHasher = Hashing.sha512().newHasher();
        List<Entry<Key,Value>> sampleData = new ArrayList<>();

        ConfigurationCopy sampleConf =
            new ConfigurationCopy(conf == null ? DefaultConfiguration.getInstance() : conf);
        sampleConf.set(Property.TABLE_SAMPLER, RowSampler.class.getName());
        sampleConf.set(Property.TABLE_SAMPLER_OPTS + "hasher", "murmur3_32");
        sampleConf.set(Property.TABLE_SAMPLER_OPTS + "modulus", modulus + "");

        Sampler sampler = SamplerFactory
            .newSampler(SamplerConfigurationImpl.newSamplerConfig(sampleConf), sampleConf);

        TestRFile trf = new TestRFile(sampleConf);

        trf.openWriter();

        for (int i = 0; i < num; i++) {
          add(trf, newKey(i, 0), newValue(i, 0), dataHasher, sampleData, sampler);
          add(trf, newKey(i, 1), newValue(i, 1), dataHasher, sampleData, sampler);
        }

        HashCode expectedDataHash = dataHasher.hash();

        trf.closeWriter();

        trf.openReader();

        FileSKVIterator sample =
            trf.reader.getSample(SamplerConfigurationImpl.newSamplerConfig(sampleConf));

        checkSample(sample, sampleData);

        assertEquals(expectedDataHash, hash(trf.reader));

        SampleIE ie = new SampleIE(
            SamplerConfigurationImpl.newSamplerConfig(sampleConf).toSamplerConfiguration());

        for (int i = 0; i < 3; i++) {
          // test opening and closing deep copies a few times.
          trf.reader.closeDeepCopies();

          sample = trf.reader.getSample(SamplerConfigurationImpl.newSamplerConfig(sampleConf));
          SortedKeyValueIterator<Key,Value> sampleDC1 = sample.deepCopy(ie);
          SortedKeyValueIterator<Key,Value> sampleDC2 = sample.deepCopy(ie);
          SortedKeyValueIterator<Key,Value> sampleDC3 = trf.reader.deepCopy(ie);
          SortedKeyValueIterator<Key,Value> allDC1 = sampleDC1.deepCopy(new SampleIE(null));
          SortedKeyValueIterator<Key,Value> allDC2 = sample.deepCopy(new SampleIE(null));

          assertEquals(expectedDataHash, hash(allDC1));
          assertEquals(expectedDataHash, hash(allDC2));

          checkSample(sample, sampleData);
          checkSample(sampleDC1, sampleData);
          checkSample(sampleDC2, sampleData);
          checkSample(sampleDC3, sampleData);
        }

        trf.reader.closeDeepCopies();

        trf.closeReader();
      }
    }
  }

  private HashCode hash(SortedKeyValueIterator<Key,Value> iter) throws IOException {
    Hasher dataHasher = Hashing.sha512().newHasher();
    iter.seek(new Range(), EMPTY_COL_FAMS, false);
    while (iter.hasTop()) {
      hash(dataHasher, iter.getTopKey(), iter.getTopValue());
      iter.next();
    }

    return dataHasher.hash();
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\file\rfile\RFileTest.java
  public void testSampleLG() throws IOException {

    int num = 5000;

    for (int sampleBufferSize : new int[] {1 << 10, 1 << 20}) {
      // force sample buffer to flush for smaller data
      RFile.setSampleBufferSize(sampleBufferSize);

      for (int modulus : new int[] {19, 103, 1019}) {
        List<Entry<Key,Value>> sampleDataLG1 = new ArrayList<>();
        List<Entry<Key,Value>> sampleDataLG2 = new ArrayList<>();

        ConfigurationCopy sampleConf =
            new ConfigurationCopy(conf == null ? DefaultConfiguration.getInstance() : conf);
        sampleConf.set(Property.TABLE_SAMPLER, RowSampler.class.getName());
        sampleConf.set(Property.TABLE_SAMPLER_OPTS + "hasher", "murmur3_32");
        sampleConf.set(Property.TABLE_SAMPLER_OPTS + "modulus", modulus + "");

        Sampler sampler = SamplerFactory
            .newSampler(SamplerConfigurationImpl.newSamplerConfig(sampleConf), sampleConf);

        TestRFile trf = new TestRFile(sampleConf);

        trf.openWriter(false, 1000);

        trf.writer.startNewLocalityGroup("meta-lg", newColFamByteSequence("metaA", "metaB"));
        for (int r = 0; r < num; r++) {
          String row = String.format("r%06d", r);
          Key k1 = new Key(row, "metaA", "q9", 7);
          Key k2 = new Key(row, "metaB", "q8", 7);
          Key k3 = new Key(row, "metaB", "qA", 7);

          Value v1 = new Value("" + r);
          Value v2 = new Value("" + r * 93);
          Value v3 = new Value("" + r * 113);

          if (sampler.accept(k1)) {
            sampleDataLG1.add(new AbstractMap.SimpleImmutableEntry<>(k1, v1));
            sampleDataLG1.add(new AbstractMap.SimpleImmutableEntry<>(k2, v2));
            sampleDataLG1.add(new AbstractMap.SimpleImmutableEntry<>(k3, v3));
          }

          trf.writer.append(k1, v1);
          trf.writer.append(k2, v2);
          trf.writer.append(k3, v3);
        }

        trf.writer.startDefaultLocalityGroup();

        for (int r = 0; r < num; r++) {
          String row = String.format("r%06d", r);
          Key k1 = new Key(row, "dataA", "q9", 7);

          Value v1 = new Value("" + r);

          if (sampler.accept(k1)) {
            sampleDataLG2.add(new AbstractMap.SimpleImmutableEntry<>(k1, v1));
          }

          trf.writer.append(k1, v1);
        }

        trf.closeWriter();

        assertTrue(!sampleDataLG1.isEmpty());
        assertTrue(!sampleDataLG2.isEmpty());

        trf.openReader(false);
        FileSKVIterator sample =
            trf.reader.getSample(SamplerConfigurationImpl.newSamplerConfig(sampleConf));

        checkSample(sample, sampleDataLG1, newColFamByteSequence("metaA", "metaB"), true);
        checkSample(sample, sampleDataLG1, newColFamByteSequence("metaA"), true);
        checkSample(sample, sampleDataLG1, newColFamByteSequence("metaB"), true);
        checkSample(sample, sampleDataLG1, newColFamByteSequence("dataA"), false);

        checkSample(sample, sampleDataLG2, newColFamByteSequence("metaA", "metaB"), false);
        checkSample(sample, sampleDataLG2, newColFamByteSequence("dataA"), true);

        ArrayList<Entry<Key,Value>> allSampleData = new ArrayList<>();
        allSampleData.addAll(sampleDataLG1);
        allSampleData.addAll(sampleDataLG2);

        allSampleData.sort(Comparator.comparing(Entry::getKey));

        checkSample(sample, allSampleData, newColFamByteSequence("dataA", "metaA"), true);
        checkSample(sample, allSampleData, EMPTY_COL_FAMS, false);

        trf.closeReader();
      }
    }
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\file\rfile\RFileTest.java
  public void testEncSample() throws IOException {
    conf = getAccumuloConfig(CryptoTest.CRYPTO_ON_CONF);
    testSample();
    testSampleLG();
    conf = null;
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\file\rfile\RFileTest.java
  public void testBigKeys() throws IOException {
    // this test ensures that big keys do not end up index
    ArrayList<Key> keys = new ArrayList<>();

    for (int i = 0; i < 1000; i++) {
      String row = String.format("r%06d", i);
      keys.add(new Key(row, "cf1", "cq1", 42));
    }

    // add a few keys with long rows
    for (int i = 0; i < 1000; i += 100) {
      String row = String.format("r%06d", i);
      char[] ca = new char[1000];
      Arrays.fill(ca, 'b');
      row = row + new String(ca);
      keys.add(new Key(row, "cf1", "cq1", 42));
    }

    Collections.sort(keys);

    TestRFile trf = new TestRFile(conf);

    trf.openWriter();

    for (Key k : keys) {
      trf.writer.append(k, new Value(k.hashCode() + ""));
    }

    trf.writer.close();

    trf.openReader();

    FileSKVIterator iiter = trf.reader.getIndex();
    while (iiter.hasTop()) {
      Key k = iiter.getTopKey();
      assertTrue(k + " " + k.getSize() + " >= 20", k.getSize() < 20);
      iiter.next();
    }

    Collections.shuffle(keys);

    for (Key key : keys) {
      trf.reader.seek(new Range(key, null), EMPTY_COL_FAMS, false);
      assertTrue(trf.reader.hasTop());
      assertEquals(key, trf.reader.getTopKey());
      assertEquals(new Value(key.hashCode() + ""), trf.reader.getTopValue());
    }
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\file\rfile\RFileTest.java
  public void testCryptoDoesntLeakSensitive() throws IOException {
    conf = getAccumuloConfig(CryptoTest.CRYPTO_ON_CONF);
    // test an empty file

    TestRFile trf = new TestRFile(conf);

    trf.openWriter();
    trf.closeWriter();

    byte[] rfBytes = trf.baos.toByteArray();

    // If we get here, we have encrypted bytes
    for (Property prop : Property.values()) {
      if (prop.isSensitive()) {
        byte[] toCheck = prop.getKey().getBytes();
        assertEquals(-1, Bytes.indexOf(rfBytes, toCheck));
      }
    }
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\file\rfile\RFileTest.java
  public void testRootTabletEncryption() throws Exception {

    // This tests that the normal set of operations used to populate a root tablet
    conf = getAccumuloConfig(CryptoTest.CRYPTO_ON_CONF);

    // populate the root tablet with info about the default tablet
    // the root tablet contains the key extent and locations of all the
    // metadata tablets
    // String initRootTabFile = ServerConstants.getMetadataTableDir() + "/root_tablet/00000_00000."
    // + FileOperations.getNewFileExtension(AccumuloConfiguration.getDefaultConfiguration());
    // FileSKVWriter mfw = FileOperations.getInstance().openWriter(initRootTabFile, fs, conf,
    // AccumuloConfiguration.getDefaultConfiguration());

    TestRFile testRfile = new TestRFile(conf);
    testRfile.openWriter();

    RFile.Writer mfw = testRfile.writer;

    // mfw.startDefaultLocalityGroup();

    // mfw.startDefaultLocalityGroup();

    Text tableExtent = new Text(
        TabletsSection.encodeRow(MetadataTable.ID, TabletsSection.getRange().getEndKey().getRow()));

    // table tablet's directory
    Key tableDirKey = new Key(tableExtent, ServerColumnFamily.DIRECTORY_COLUMN.getColumnFamily(),
        ServerColumnFamily.DIRECTORY_COLUMN.getColumnQualifier(), 0);
    mfw.append(tableDirKey, new Value(/* TABLE_TABLETS_TABLET_DIR */"/table_info"));

    // table tablet time
    Key tableTimeKey = new Key(tableExtent, ServerColumnFamily.TIME_COLUMN.getColumnFamily(),
        ServerColumnFamily.TIME_COLUMN.getColumnQualifier(), 0);
    mfw.append(tableTimeKey, new Value(/* TabletTime.LOGICAL_TIME_ID */'L' + "0"));

    // table tablet's prevRow
    Key tablePrevRowKey = new Key(tableExtent, TabletColumnFamily.PREV_ROW_COLUMN.getColumnFamily(),
        TabletColumnFamily.PREV_ROW_COLUMN.getColumnQualifier(), 0);
    mfw.append(tablePrevRowKey, TabletColumnFamily.encodePrevEndRow(null));

    // ----------] default tablet info
    Text defaultExtent = new Text(TabletsSection.encodeRow(MetadataTable.ID, null));

    // default's directory
    Key defaultDirKey =
        new Key(defaultExtent, ServerColumnFamily.DIRECTORY_COLUMN.getColumnFamily(),
            ServerColumnFamily.DIRECTORY_COLUMN.getColumnQualifier(), 0);
    mfw.append(defaultDirKey, new Value(ServerColumnFamily.DEFAULT_TABLET_DIR_NAME));

    // default's time
    Key defaultTimeKey = new Key(defaultExtent, ServerColumnFamily.TIME_COLUMN.getColumnFamily(),
        ServerColumnFamily.TIME_COLUMN.getColumnQualifier(), 0);
    mfw.append(defaultTimeKey, new Value(/* TabletTime.LOGICAL_TIME_ID */'L' + "0"));

    // default's prevRow
    Key defaultPrevRowKey =
        new Key(defaultExtent, TabletColumnFamily.PREV_ROW_COLUMN.getColumnFamily(),
            TabletColumnFamily.PREV_ROW_COLUMN.getColumnQualifier(), 0);
    mfw.append(defaultPrevRowKey,
        TabletColumnFamily.encodePrevEndRow(TabletsSection.getRange().getEndKey().getRow()));

    testRfile.closeWriter();

    if (true) {
      FileOutputStream fileOutputStream =
          new FileOutputStream(tempFolder.newFile("testEncryptedRootFile.rf"));
      fileOutputStream.write(testRfile.baos.toByteArray());
      fileOutputStream.flush();
      fileOutputStream.close();
    }

    testRfile.openReader();
    testRfile.iter.seek(new Range((Key) null, null), EMPTY_COL_FAMS, false);
    assertTrue(testRfile.iter.hasTop());

    assertNotNull(testRfile.reader.getLastKey());

    testRfile.closeReader();

    conf = null;
  }
}
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\file\rfile\RolllingStatsTest.java
  public void testFewSizes() {
    StatTester st = new StatTester(1019);
    int[] keySizes = {103, 113, 123, 2345};
    Random rand = new SecureRandom();
    for (int i = 0; i < 10000; i++) {
      st.addValue(keySizes[rand.nextInt(keySizes.length)]);
    }
    st.check();
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\file\rfile\RolllingStatsTest.java
  public void testConstant() {

    StatTester st = new StatTester(1019);

    for (int i = 0; i < 10000; i++) {
      st.addValue(111);
    }

    st.check();
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\file\rfile\RolllingStatsTest.java
  public void testUniformIncreasing() {

    for (int windowSize : new int[] {10, 13, 20, 100, 500}) {

      StatTester st = new StatTester(windowSize);

      Random rand = new SecureRandom();

      for (int i = 0; i < 1000; i++) {
        int v = 200 + rand.nextInt(50);

        st.addValue(v);
      }

      st.check();
    }
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\file\rfile\RolllingStatsTest.java
  public void testSlowIncreases() {
    // number of keys with the same len
    int len = 100;

    StatTester st = new StatTester(1019);

    for (int i = 0; i < 50; i++) {
      for (int j = 0; j < 3000; j++) {
        st.addValue(len);
      }

      len = (int) (len * 1.1);
    }

    st.check();
  }

  private void testDistribrution(IntSupplier d) {
    StatTester st = new StatTester(2017);

    for (int i = 0; i < 7000; i++) {
      st.addValue(d.getAsInt());
    }

    st.check();
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\file\rfile\RolllingStatsTest.java
  public void testZipf() {
    ZipfDistribution zd = new ZipfDistribution(new Well19937c(42), 1000, 2);
    testDistribrution(() -> zd.sample() * 100);
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\file\rfile\RolllingStatsTest.java
  public void testNormal() {
    NormalDistribution nd = new NormalDistribution(new Well19937c(42), 200, 20);
    testDistribrution(() -> (int) nd.sample());
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\file\rfile\RolllingStatsTest.java
  public void testSpikes() {

    Random rand = new SecureRandom();

    StatTester st = new StatTester(3017);

    for (int i = 0; i < 13; i++) {

      // write small keys
      int numSmall = 1000 + rand.nextInt(1000);
      for (int s = 0; s < numSmall; s++) {
        int sks = 50 + rand.nextInt(100);
        // simulate row with multiple cols
        for (int c = 0; c < 3; c++) {
          st.addValue(sks);
        }
      }

      // write a few large keys
      int numLarge = 1 + rand.nextInt(1);
      for (int l = 0; l < numLarge; l++) {
        int lks = 500000 + rand.nextInt(1000000);
        for (int c = 0; c < 3; c++) {
          st.addValue(lks);
        }
      }
    }

    st.check();
  }
}
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\file\rfile\bcfile\CompressionTest.java
  public void testSingle() {

    for (final Algorithm al : Algorithm.values()) {
      if (isSupported.get(al) != null && isSupported.get(al)) {

        // first call to isSupported should be true
        assertTrue(al + " is not supported, but should be", al.isSupported());

        assertNotNull(al + " should have a non-null codec", al.getCodec());

        assertNotNull(al + " should have a non-null codec", al.getCodec());
      }
    }
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\file\rfile\bcfile\CompressionTest.java
  public void testSingleNoSideEffect() {

    for (final Algorithm al : Algorithm.values()) {
      if (isSupported.get(al) != null && isSupported.get(al)) {

        assertTrue(al + " is not supported, but should be", al.isSupported());

        assertNotNull(al + " should have a non-null codec", al.getCodec());

        // assert that additional calls to create will not create
        // additional codecs

        assertNotEquals(al + " should have created a new codec, but did not",
            System.identityHashCode(al.getCodec()), al.createNewCodec(88 * 1024));
      }
    }
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\file\rfile\bcfile\CompressionTest.java
  public void testManyStartNotNull() throws InterruptedException, ExecutionException {

    for (final Algorithm al : Algorithm.values()) {
      if (isSupported.get(al) != null && isSupported.get(al)) {

        // first call to isSupported should be true
        assertTrue(al + " is not supported, but should be", al.isSupported());

        final CompressionCodec codec = al.getCodec();

        assertNotNull(al + " should not be null", codec);

        ExecutorService service = Executors.newFixedThreadPool(10);

        ArrayList<Future<Boolean>> results = new ArrayList<>();

        for (int i = 0; i < 30; i++) {
          results.add(service.submit(() -> {
            assertNotNull(al + " should not be null", al.getCodec());
            return true;
          }));
        }

        service.shutdown();

        assertNotNull(al + " should not be null", codec);

        while (!service.awaitTermination(1, TimeUnit.SECONDS)) {
          // wait
        }

        for (Future<Boolean> result : results) {
          assertTrue(al + " resulted in a failed call to getcodec within the thread pool",
              result.get());
        }
      }
    }

  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\file\rfile\bcfile\CompressionTest.java
  public void testManyDontStartUntilThread() throws InterruptedException, ExecutionException {

    for (final Algorithm al : Algorithm.values()) {
      if (isSupported.get(al) != null && isSupported.get(al)) {

        // first call to isSupported should be true
        assertTrue(al + " is not supported, but should be", al.isSupported());

        ExecutorService service = Executors.newFixedThreadPool(10);

        ArrayList<Future<Boolean>> results = new ArrayList<>();

        for (int i = 0; i < 30; i++) {

          results.add(service.submit(() -> {
            assertNotNull(al + " should have a non-null codec", al.getCodec());
            return true;
          }));
        }

        service.shutdown();

        while (!service.awaitTermination(1, TimeUnit.SECONDS)) {
          // wait
        }

        for (Future<Boolean> result : results) {
          assertTrue(al + " resulted in a failed call to getcodec within the thread pool",
              result.get());
        }
      }
    }

  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\file\rfile\bcfile\CompressionTest.java
  public void testThereCanBeOnlyOne() throws InterruptedException, ExecutionException {

    for (final Algorithm al : Algorithm.values()) {
      if (isSupported.get(al) != null && isSupported.get(al)) {

        // first call to isSupported should be true
        assertTrue(al + " is not supported, but should be", al.isSupported());

        ExecutorService service = Executors.newFixedThreadPool(20);

        ArrayList<Callable<Boolean>> list = new ArrayList<>();

        ArrayList<Future<Boolean>> results = new ArrayList<>();

        // keep track of the system's identity hashcodes.
        final HashSet<Integer> testSet = new HashSet<>();

        for (int i = 0; i < 40; i++) {
          list.add(() -> {
            CompressionCodec codec = al.getCodec();
            assertNotNull(al + " resulted in a non-null codec", codec);
            // add the identity hashcode to the set.
            synchronized (testSet) {
              testSet.add(System.identityHashCode(codec));
            }
            return true;
          });
        }

        results.addAll(service.invokeAll(list));
        // ensure that we
        assertEquals(al + " created too many codecs", 1, testSet.size());
        service.shutdown();

        while (!service.awaitTermination(1, TimeUnit.SECONDS)) {
          // wait
        }

        for (Future<Boolean> result : results) {
          assertTrue(al + " resulted in a failed call to getcodec within the thread pool",
              result.get());
        }
      }
    }
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\file\streams\RateLimitedInputStreamTest.java
  public void permitsAreProperlyAcquired() throws Exception {
    Random randGen = new SecureRandom();
    MockRateLimiter rateLimiter = new MockRateLimiter();
    long bytesRetrieved = 0;
    try (InputStream is = new RateLimitedInputStream(new RandomInputStream(), rateLimiter)) {
      for (int i = 0; i < 100; ++i) {
        int count = Math.abs(randGen.nextInt()) % 65536;
        int countRead = is.read(new byte[count]);
        assertEquals(count, countRead);
        bytesRetrieved += count;
      }
    }
    assertEquals(bytesRetrieved, rateLimiter.getPermitsAcquired());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\file\streams\RateLimitedOutputStreamTest.java
  public void permitsAreProperlyAcquired() throws Exception {
    Random randGen = new SecureRandom();
    MockRateLimiter rateLimiter = new MockRateLimiter();
    long bytesWritten = 0;
    try (RateLimitedOutputStream os =
        new RateLimitedOutputStream(new NullOutputStream(), rateLimiter)) {
      for (int i = 0; i < 100; ++i) {
        byte[] bytes = new byte[Math.abs(randGen.nextInt() % 65536)];
        os.write(bytes);
        bytesWritten += bytes.length;
      }
      assertEquals(bytesWritten, os.position());
    }
    assertEquals(bytesWritten, rateLimiter.getPermitsAcquired());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\FirstEntryInRowIteratorTest.java
  public void test() throws IOException {
    TreeMap<Key,Value> sourceMap = new TreeMap<>();
    Value emptyValue = new Value("");
    IteratorSetting iteratorSetting = new IteratorSetting(1, FirstEntryInRowIterator.class);
    FirstEntryInRowIterator.setNumScansBeforeSeek(iteratorSetting, 10);
    assertTrue(
        iteratorSetting.getOptions().containsKey(FirstEntryInRowIterator.NUM_SCANS_STRING_NAME));
    sourceMap.put(new Key("r1", "cf", "cq"), emptyValue);
    sourceMap.put(new Key("r2", "cf", "cq"), emptyValue);
    sourceMap.put(new Key("r3", "cf", "cq"), emptyValue);
    TreeMap<Key,Value> resultMap = new TreeMap<>();
    long numSourceEntries = sourceMap.size();
    long numNexts = process(sourceMap, resultMap, new Range(), iteratorSetting);
    assertEquals(numNexts, numSourceEntries);
    assertEquals(sourceMap.size(), resultMap.size());

    for (int i = 0; i < 20; i++) {
      sourceMap.put(new Key("r2", "cf", "cq" + i), emptyValue);
    }
    resultMap.clear();

    numNexts = process(sourceMap, resultMap,
        new Range(new Key("r1"), (new Key("r2")).followingKey(PartialKey.ROW)), iteratorSetting);
    assertEquals(numNexts, resultMap.size() + 10);
    assertEquals(resultMap.size(), 2);

    resultMap.clear();
    numNexts = process(sourceMap, resultMap, new Range(new Key("r1"), new Key("r2", "cf2")),
        iteratorSetting);
    assertEquals(numNexts, resultMap.size() + 10);
    assertEquals(resultMap.size(), 2);

    resultMap.clear();
    numNexts =
        process(sourceMap, resultMap, new Range(new Key("r1"), new Key("r4")), iteratorSetting);
    assertEquals(numNexts, resultMap.size() + 10);
    assertEquals(resultMap.size(), 3);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\FirstEntryInRowTest.java
  public void test1() throws Exception {
    TreeMap<Key,Value> tm1 = new TreeMap<>();
    put(tm1, "r1", "cf1", "cq1", 5, "v1");
    put(tm1, "r1", "cf1", "cq3", 5, "v2");
    put(tm1, "r2", "cf1", "cq1", 5, "v3");
    put(tm1, "r2", "cf2", "cq4", 5, "v4");
    put(tm1, "r2", "cf2", "cq5", 5, "v5");
    put(tm1, "r3", "cf3", "cq6", 5, "v6");

    FirstEntryInRowIterator fei = new FirstEntryInRowIterator();
    fei.init(new SortedMapIterator(tm1), EMPTY_MAP, null);

    fei.seek(new Range(), EMPTY_SET, false);
    testAndCallNext(fei, "r1", "cf1", "cq1", 5, "v1");
    testAndCallNext(fei, "r2", "cf1", "cq1", 5, "v3");
    testAndCallNext(fei, "r3", "cf3", "cq6", 5, "v6");
    assertFalse(fei.hasTop());

  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\FirstEntryInRowTest.java
  public void test2() throws Exception {
    TreeMap<Key,Value> tm1 = new TreeMap<>();

    for (int r = 0; r < 5; r++) {
      for (int cf = r; cf < 100; cf++) {
        for (int cq = 3; cq < 6; cq++) {
          put(tm1, r, cf, cq, 6, r * cf * cq);
        }
      }
    }

    FirstEntryInRowIterator fei = new FirstEntryInRowIterator();
    fei.init(new SortedMapIterator(tm1), EMPTY_MAP, null);
    fei.seek(new Range(newKey(0, 10, 0, 0), null), EMPTY_SET, false);
    testAndCallNext(fei, 1, 1, 3, 6, 1 * 1 * 3);
    testAndCallNext(fei, 2, 2, 3, 6, 2 * 2 * 3);
    testAndCallNext(fei, 3, 3, 3, 6, 3 * 3 * 3);
    testAndCallNext(fei, 4, 4, 3, 6, 4 * 4 * 3);
    assertFalse(fei.hasTop());

    fei.seek(new Range(newKey(1, 1, 3, 6), newKey(3, 3, 3, 6)), EMPTY_SET, false);
    testAndCallNext(fei, 1, 1, 3, 6, 1 * 1 * 3);
    testAndCallNext(fei, 2, 2, 3, 6, 2 * 2 * 3);
    testAndCallNext(fei, 3, 3, 3, 6, 3 * 3 * 3);
    assertFalse(fei.hasTop());

    fei.seek(new Range(newKey(1, 1, 3, 6), false, newKey(3, 3, 3, 6), false), EMPTY_SET, false);
    testAndCallNext(fei, 2, 2, 3, 6, 2 * 2 * 3);
    assertFalse(fei.hasTop());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\SortedMapIteratorTest.java
  public void testSampleNotPresent() {
    SortedMapIterator smi = new SortedMapIterator(new TreeMap<>());
    smi.deepCopy(new IteratorEnvironment() {
      @Override
      public boolean isSamplingEnabled() {
        return true;
      }

      @Override
      public SamplerConfiguration getSamplerConfiguration() {
        return new SamplerConfiguration(RowSampler.class.getName());
      }
    });
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\system\ColumnFamilySkippingIteratorTest.java
  public void test1() throws Exception {
    TreeMap<Key,Value> tm1 = new TreeMap<>();
    put(tm1, "r1", "cf1", "cq1", 5, "v1");
    put(tm1, "r1", "cf1", "cq3", 5, "v2");
    put(tm1, "r2", "cf1", "cq1", 5, "v3");
    put(tm1, "r2", "cf2", "cq4", 5, "v4");
    put(tm1, "r2", "cf2", "cq5", 5, "v5");
    put(tm1, "r3", "cf3", "cq6", 5, "v6");

    ColumnFamilySkippingIterator cfi = new ColumnFamilySkippingIterator(new SortedMapIterator(tm1));

    cfi.seek(new Range(), EMPTY_SET, true);
    assertFalse(cfi.hasTop());

    cfi.seek(new Range(), EMPTY_SET, false);
    assertTrue(cfi.hasTop());
    TreeMap<Key,Value> tm2 = new TreeMap<>();
    while (cfi.hasTop()) {
      tm2.put(cfi.getTopKey(), cfi.getTopValue());
      cfi.next();
    }
    assertEquals(tm1, tm2);

    HashSet<ByteSequence> colfams = new HashSet<>();
    colfams.add(new ArrayByteSequence("cf2"));
    cfi.seek(new Range(), colfams, true);
    testAndCallnext(cfi, "r2", "cf2", "cq4", 5, "v4");
    testAndCallnext(cfi, "r2", "cf2", "cq5", 5, "v5");
    assertFalse(cfi.hasTop());

    colfams.add(new ArrayByteSequence("cf3"));
    colfams.add(new ArrayByteSequence("cf4"));
    cfi.seek(new Range(), colfams, true);
    testAndCallnext(cfi, "r2", "cf2", "cq4", 5, "v4");
    testAndCallnext(cfi, "r2", "cf2", "cq5", 5, "v5");
    testAndCallnext(cfi, "r3", "cf3", "cq6", 5, "v6");
    assertFalse(cfi.hasTop());

    cfi.seek(new Range(), colfams, false);
    testAndCallnext(cfi, "r1", "cf1", "cq1", 5, "v1");
    testAndCallnext(cfi, "r1", "cf1", "cq3", 5, "v2");
    testAndCallnext(cfi, "r2", "cf1", "cq1", 5, "v3");
    assertFalse(cfi.hasTop());

  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\system\ColumnFamilySkippingIteratorTest.java
  public void test2() throws Exception {
    TreeMap<Key,Value> tm1 = new TreeMap<>();

    for (int r = 0; r < 10; r++) {
      for (int cf = 0; cf < 1000; cf++) {
        for (int cq = 0; cq < 3; cq++) {
          put(tm1, r, cf, cq, 6, r * cf * cq);
        }
      }
    }

    HashSet<ByteSequence> allColfams = new HashSet<>();
    for (int cf = 0; cf < 1000; cf++) {
      allColfams.add(new ArrayByteSequence(String.format("%06d", cf)));
    }

    ColumnFamilySkippingIterator cfi = new ColumnFamilySkippingIterator(new SortedMapIterator(tm1));
    HashSet<ByteSequence> colfams = new HashSet<>();

    runTest(cfi, 30000, 0, allColfams, colfams);

    colfams.add(new ArrayByteSequence(String.format("%06d", 60)));
    runTest(cfi, 30000, 30, allColfams, colfams);

    colfams.add(new ArrayByteSequence(String.format("%06d", 602)));
    runTest(cfi, 30000, 60, allColfams, colfams);

    colfams.add(new ArrayByteSequence(String.format("%06d", 0)));
    runTest(cfi, 30000, 90, allColfams, colfams);

    colfams.add(new ArrayByteSequence(String.format("%06d", 999)));
    runTest(cfi, 30000, 120, allColfams, colfams);

    colfams.remove(new ArrayByteSequence(String.format("%06d", 0)));
    runTest(cfi, 30000, 90, allColfams, colfams);

    colfams.add(new ArrayByteSequence(String.format("%06d", 1000)));
    runTest(cfi, 30000, 90, allColfams, colfams);

    colfams.remove(new ArrayByteSequence(String.format("%06d", 999)));
    runTest(cfi, 30000, 60, allColfams, colfams);

    colfams.add(new ArrayByteSequence(String.format("%06d", 61)));
    runTest(cfi, 30000, 90, allColfams, colfams);

    for (int i = 62; i < 100; i++)
      colfams.add(new ArrayByteSequence(String.format("%06d", i)));

    runTest(cfi, 30000, 1230, allColfams, colfams);

  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\system\ColumnFamilySkippingIteratorTest.java
  public void test3() throws Exception {
    // construct test where ColumnFamilySkippingIterator might try to seek past the end of the user
    // supplied range
    TreeMap<Key,Value> tm1 = new TreeMap<>();

    for (int r = 0; r < 3; r++) {
      for (int cf = 4; cf < 1000; cf++) {
        for (int cq = 0; cq < 1; cq++) {
          put(tm1, r, cf, cq, 6, r * cf * cq);
        }
      }
    }

    CountingIterator ci = new CountingIterator(new SortedMapIterator(tm1));
    ColumnFamilySkippingIterator cfi = new ColumnFamilySkippingIterator(ci);
    HashSet<ByteSequence> colfams = new HashSet<>();
    colfams.add(new ArrayByteSequence(String.format("%06d", 4)));

    Range range = new Range(newKey(0, 4, 0, 6), true, newKey(0, 400, 0, 6), true);
    cfi.seek(range, colfams, true);

    assertTrue(cfi.hasTop());
    assertEquals(newKey(0, 4, 0, 6), cfi.getTopKey());
    cfi.next();
    assertFalse(cfi.hasTop());

    colfams.add(new ArrayByteSequence(String.format("%06d", 500)));
    cfi.seek(range, colfams, true);

    assertTrue(cfi.hasTop());
    assertEquals(newKey(0, 4, 0, 6), cfi.getTopKey());
    cfi.next();
    assertFalse(cfi.hasTop());

    range = new Range(newKey(0, 4, 0, 6), true, newKey(1, 400, 0, 6), true);
    cfi.seek(range, colfams, true);

    assertTrue(cfi.hasTop());
    assertEquals(newKey(0, 4, 0, 6), cfi.getTopKey());
    cfi.next();
    assertTrue(cfi.hasTop());
    assertEquals(newKey(0, 500, 0, 6), cfi.getTopKey());
    cfi.next();
    assertTrue(cfi.hasTop());
    assertEquals(newKey(1, 4, 0, 6), cfi.getTopKey());
    cfi.next();
    assertFalse(cfi.hasTop());

    // System.out.println(ci.getCount());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\system\ColumnFilterTest.java
  public void test1() {
    TreeMap<Key,Value> data = new TreeMap<>();
    data.put(newKey("r1", "cf1", "cq1"), new Value(""));
    data.put(newKey("r1", "cf2", "cq1"), new Value(""));

    HashSet<Column> columns = new HashSet<>();
    columns.add(newColumn("cf1"));

    SortedMapIterator smi = new SortedMapIterator(data);
    SortedKeyValueIterator<Key,Value> cf = ColumnQualifierFilter.wrap(smi, columns);

    assertSame(smi, cf);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\system\ColumnFilterTest.java
  public void test2() throws Exception {

    TreeMap<Key,Value> data = new TreeMap<>();
    data.put(newKey("r1", "cf1", "cq1"), new Value(""));
    data.put(newKey("r1", "cf2", "cq1"), new Value(""));
    data.put(newKey("r1", "cf2", "cq2"), new Value(""));

    HashSet<Column> columns = new HashSet<>();

    columns.add(newColumn("cf1"));
    columns.add(newColumn("cf2", "cq1"));

    SortedKeyValueIterator<Key,Value> cf =
        ColumnQualifierFilter.wrap(new SortedMapIterator(data), columns);
    cf.seek(new Range(), Collections.emptySet(), false);

    assertTrue(cf.hasTop());
    assertEquals(newKey("r1", "cf1", "cq1"), cf.getTopKey());
    cf.next();
    assertTrue(cf.hasTop());
    assertEquals(newKey("r1", "cf2", "cq1"), cf.getTopKey());
    cf.next();
    assertFalse(cf.hasTop());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\system\ColumnFilterTest.java
  public void test3() throws Exception {

    TreeMap<Key,Value> data = new TreeMap<>();
    data.put(newKey("r1", "cf1", "cq1"), new Value(""));
    data.put(newKey("r1", "cf2", "cq1"), new Value(""));
    data.put(newKey("r1", "cf2", "cq2"), new Value(""));

    HashSet<Column> columns = new HashSet<>();

    columns.add(newColumn("cf2", "cq1"));

    SortedKeyValueIterator<Key,Value> cf =
        ColumnQualifierFilter.wrap(new SortedMapIterator(data), columns);
    cf.seek(new Range(), Collections.emptySet(), false);

    assertTrue(cf.hasTop());
    assertEquals(newKey("r1", "cf2", "cq1"), cf.getTopKey());
    cf.next();
    assertFalse(cf.hasTop());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\system\DeletingIteratorTest.java
  public void test1() {
    Text colf = new Text("a");
    Text colq = new Text("b");
    Value dvOld = new Value("old");
    Value dvDel = new Value("old");
    Value dvNew = new Value("new");

    TreeMap<Key,Value> tm = new TreeMap<>();
    Key k;

    for (int i = 0; i < 2; i++) {
      for (long j = 0; j < 5; j++) {
        k = new Key(new Text(String.format("%03d", i)), colf, colq, j);
        tm.put(k, dvOld);
      }
    }
    k = new Key(new Text(String.format("%03d", 0)), colf, colq, 5);
    k.setDeleted(true);
    tm.put(k, dvDel);
    for (int i = 0; i < 2; i++) {
      for (long j = 6; j < 11; j++) {
        k = new Key(new Text(String.format("%03d", i)), colf, colq, j);
        tm.put(k, dvNew);
      }
    }
    assertEquals("Initial size was " + tm.size(), 21, tm.size());

    Text checkRow = new Text("000");
    try {
      SortedKeyValueIterator<Key,Value> it =
          DeletingIterator.wrap(new SortedMapIterator(tm), false, Behavior.PROCESS);
      it.seek(new Range(), EMPTY_COL_FAMS, false);

      TreeMap<Key,Value> tmOut = new TreeMap<>();
      while (it.hasTop()) {
        tmOut.put(it.getTopKey(), it.getTopValue());
        it.next();
      }
      assertEquals("size after no propagation was " + tmOut.size(), 15, tmOut.size());
      for (Entry<Key,Value> e : tmOut.entrySet()) {
        if (e.getKey().getRow().equals(checkRow)) {
          byte[] b = e.getValue().get();
          assertEquals('n', b[0]);
          assertEquals('e', b[1]);
          assertEquals('w', b[2]);
        }
      }
    } catch (IOException e) {
      fail();
    }

    try {
      SortedKeyValueIterator<Key,Value> it =
          DeletingIterator.wrap(new SortedMapIterator(tm), true, Behavior.PROCESS);
      it.seek(new Range(), EMPTY_COL_FAMS, false);
      TreeMap<Key,Value> tmOut = new TreeMap<>();
      while (it.hasTop()) {
        tmOut.put(it.getTopKey(), it.getTopValue());
        it.next();
      }
      assertEquals("size after propagation was " + tmOut.size(), 16, tmOut.size());
      for (Entry<Key,Value> e : tmOut.entrySet()) {
        if (e.getKey().getRow().equals(checkRow)) {
          byte[] b = e.getValue().get();
          if (e.getKey().isDeleted()) {
            assertEquals('o', b[0]);
            assertEquals('l', b[1]);
            assertEquals('d', b[2]);
          } else {
            assertEquals('n', b[0]);
            assertEquals('e', b[1]);
            assertEquals('w', b[2]);
          }
        }
      }
    } catch (IOException e) {
      fail();
    }
  }

  // seek test
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\system\DeletingIteratorTest.java
  public void test2() throws IOException {
    TreeMap<Key,Value> tm = new TreeMap<>();

    newKeyValue(tm, "r000", 4, false, "v4");
    newKeyValue(tm, "r000", 3, false, "v3");
    newKeyValue(tm, "r000", 2, true, "v2");
    newKeyValue(tm, "r000", 1, false, "v1");

    SortedKeyValueIterator<Key,Value> it =
        DeletingIterator.wrap(new SortedMapIterator(tm), false, Behavior.PROCESS);

    // SEEK two keys before delete
    it.seek(newRange("r000", 4), EMPTY_COL_FAMS, false);

    assertTrue(it.hasTop());
    assertEquals(newKey("r000", 4), it.getTopKey());
    assertEquals("v4", it.getTopValue().toString());

    it.next();

    assertTrue(it.hasTop());
    assertEquals(newKey("r000", 3), it.getTopKey());
    assertEquals("v3", it.getTopValue().toString());

    it.next();

    assertFalse(it.hasTop());

    // SEEK passed delete
    it.seek(newRange("r000", 1), EMPTY_COL_FAMS, false);

    assertFalse(it.hasTop());

    // SEEK to delete
    it.seek(newRange("r000", 2), EMPTY_COL_FAMS, false);

    assertFalse(it.hasTop());

    // SEEK right before delete
    it.seek(newRange("r000", 3), EMPTY_COL_FAMS, false);

    assertTrue(it.hasTop());
    assertEquals(newKey("r000", 3), it.getTopKey());
    assertEquals("v3", it.getTopValue().toString());

    it.next();

    assertFalse(it.hasTop());
  }

  // test delete with same timestamp as existing key
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\system\DeletingIteratorTest.java
  public void test3() throws IOException {
    TreeMap<Key,Value> tm = new TreeMap<>();

    newKeyValue(tm, "r000", 3, false, "v3");
    newKeyValue(tm, "r000", 2, false, "v2");
    newKeyValue(tm, "r000", 2, true, "");
    newKeyValue(tm, "r000", 1, false, "v1");

    SortedKeyValueIterator<Key,Value> it =
        DeletingIterator.wrap(new SortedMapIterator(tm), false, Behavior.PROCESS);
    it.seek(new Range(), EMPTY_COL_FAMS, false);

    assertTrue(it.hasTop());
    assertEquals(newKey("r000", 3), it.getTopKey());
    assertEquals("v3", it.getTopValue().toString());

    it.next();

    assertFalse(it.hasTop());

    it.seek(newRange("r000", 2), EMPTY_COL_FAMS, false);

    assertFalse(it.hasTop());
  }

  // test range inclusiveness
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\system\DeletingIteratorTest.java
  public void test4() throws IOException {
    TreeMap<Key,Value> tm = new TreeMap<>();

    newKeyValue(tm, "r000", 3, false, "v3");
    newKeyValue(tm, "r000", 2, false, "v2");
    newKeyValue(tm, "r000", 2, true, "");
    newKeyValue(tm, "r000", 1, false, "v1");

    SortedKeyValueIterator<Key,Value> it =
        DeletingIterator.wrap(new SortedMapIterator(tm), false, Behavior.PROCESS);

    it.seek(newRange("r000", 3), EMPTY_COL_FAMS, false);

    assertTrue(it.hasTop());
    assertEquals(newKey("r000", 3), it.getTopKey());
    assertEquals("v3", it.getTopValue().toString());

    it.next();

    assertFalse(it.hasTop());

    it.seek(newRange("r000", 3, false), EMPTY_COL_FAMS, false);

    assertFalse(it.hasTop());
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\system\DeletingIteratorTest.java
  public void testFail() throws IOException {
    TreeMap<Key,Value> tm = new TreeMap<>();

    newKeyValue(tm, "r000", 3, false, "v3");
    newKeyValue(tm, "r000", 2, false, "v2");
    newKeyValue(tm, "r000", 2, true, "");
    newKeyValue(tm, "r000", 1, false, "v1");

    SortedKeyValueIterator<Key,Value> it =
        DeletingIterator.wrap(new SortedMapIterator(tm), false, Behavior.FAIL);
    it.seek(new Range(), EMPTY_COL_FAMS, false);
    try {
      while (it.hasTop()) {
        it.getTopKey();
        it.next();
      }
      fail();
    } catch (IllegalStateException e) {}
  }

  private Range newRange(String row, long ts, boolean inclusive) {
    return new Range(newKey(row, ts), inclusive, null, true);
  }

  private Range newRange(String row, long ts) {
    return newRange(row, ts, true);
  }

  private Key newKey(String row, long ts) {
    return new Key(new Text(row), ts);
  }

  private void newKeyValue(TreeMap<Key,Value> tm, String row, long ts, boolean deleted,
      String val) {
    Key k = newKey(row, ts);
    k.setDeleted(deleted);
    tm.put(k, new Value(val));
  }
}
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\system\MultiIteratorTest.java
  public void test1() throws IOException {
    // TEST non overlapping inputs

    TreeMap<Key,Value> tm1 = new TreeMap<>();
    List<TreeMap<Key,Value>> tmpList = new ArrayList<>(2);

    for (int i = 0; i < 4; i++) {
      newKeyValue(tm1, 0, i, false, "v" + i);
    }
    tmpList.add(tm1);
    tm1 = new TreeMap<>();
    for (int i = 4; i < 8; i++) {
      newKeyValue(tm1, 0, i, false, "v" + i);
    }
    tmpList.add(tm1);
    for (int seek = -1; seek < 8; seek++) {
      if (seek == 7) {
        verify(seek, null, tmpList);
      }
      verify(seek, newKey(0, seek), tmpList);
    }
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\system\MultiIteratorTest.java
  public void test2() throws IOException {
    // TEST overlapping inputs

    TreeMap<Key,Value> tm1 = new TreeMap<>();
    TreeMap<Key,Value> tm2 = new TreeMap<>();
    List<TreeMap<Key,Value>> tmpList = new ArrayList<>(2);

    for (int i = 0; i < 8; i++) {
      if (i % 2 == 0)
        newKeyValue(tm1, 0, i, false, "v" + i);
      else
        newKeyValue(tm2, 0, i, false, "v" + i);
    }
    tmpList.add(tm1);
    tmpList.add(tm2);
    for (int seek = -1; seek < 8; seek++) {
      if (seek == 7) {
        verify(seek, null, tmpList);
      }
      verify(seek, newKey(0, seek), tmpList);
    }
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\system\MultiIteratorTest.java
  public void test3() throws IOException {
    // TEST single input

    TreeMap<Key,Value> tm1 = new TreeMap<>();
    List<TreeMap<Key,Value>> tmpList = new ArrayList<>(2);

    for (int i = 0; i < 8; i++) {
      newKeyValue(tm1, 0, i, false, "v" + i);
    }
    tmpList.add(tm1);

    for (int seek = -1; seek < 8; seek++) {
      if (seek == 7) {
        verify(seek, null, tmpList);
      }
      verify(seek, newKey(0, seek), tmpList);
    }
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\system\MultiIteratorTest.java
  public void test4() throws IOException {
    // TEST empty input

    TreeMap<Key,Value> tm1 = new TreeMap<>();

    List<SortedKeyValueIterator<Key,Value>> skvil = new ArrayList<>(1);
    skvil.add(new SortedMapIterator(tm1));
    MultiIterator mi = new MultiIterator(skvil, true);

    assertFalse(mi.hasTop());

    mi.seek(newRange(0, 6), EMPTY_COL_FAMS, false);
    assertFalse(mi.hasTop());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\system\MultiIteratorTest.java
  public void test5() throws IOException {
    // TEST overlapping inputs AND prevRow AND endRow AND seek

    TreeMap<Key,Value> tm1 = new TreeMap<>();
    TreeMap<Key,Value> tm2 = new TreeMap<>();
    List<TreeMap<Key,Value>> tmpList = new ArrayList<>(2);

    for (int i = 0; i < 8; i++) {
      if (i % 2 == 0)
        newKeyValue(tm1, i, 0, false, "v" + i);
      else
        newKeyValue(tm2, i, 0, false, "v" + i);
    }

    tmpList.add(tm1);
    tmpList.add(tm2);
    for (int seek = -1; seek < 9; seek++) {
      verify(Math.max(0, seek), 8, newKey(seek, 0), null, null, true, true, tmpList);
      verify(Math.max(0, seek), 8, newKey(seek, 0), null, null, false, true, tmpList);

      for (int er = seek; er < 10; er++) {

        int end = seek > er ? seek : Math.min(er + 1, 8);

        int noSeekEnd = Math.min(er + 1, 8);
        if (er < 0) {
          noSeekEnd = 0;
        }

        verify(0, noSeekEnd, null, newRow(er), null, true, true, tmpList);
        verify(Math.max(0, seek), end, newKey(seek, 0), newRow(er), null, true, true, tmpList);
        verify(Math.max(0, seek), end, newKey(seek, 0), newRow(er), null, false, true, tmpList);

        for (int per = -1; per < er; per++) {

          int start = Math.max(per + 1, seek);

          if (start > er)
            end = start;

          if (per >= 8)
            end = start;

          int noSeekStart = Math.max(0, per + 1);

          if (er < 0 || per >= 7) {
            noSeekEnd = noSeekStart;
          }

          verify(noSeekStart, noSeekEnd, null, newRow(er), newRow(per), true, true, tmpList);
          verify(Math.max(0, start), end, newKey(seek, 0), newRow(er), newRow(per), true, true,
              tmpList);
          verify(Math.max(0, start), end, newKey(seek, 0), newRow(er), newRow(per), false, true,
              tmpList);
        }
      }
    }
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\system\MultiIteratorTest.java
  public void test6() throws IOException {
    // TEst setting an endKey
    TreeMap<Key,Value> tm1 = new TreeMap<>();
    newKeyValue(tm1, 3, 0, false, "1");
    newKeyValue(tm1, 4, 0, false, "2");
    newKeyValue(tm1, 6, 0, false, "3");

    List<SortedKeyValueIterator<Key,Value>> skvil = new ArrayList<>(1);
    skvil.add(new SortedMapIterator(tm1));
    MultiIterator mi = new MultiIterator(skvil, true);
    mi.seek(new Range(null, true, newKey(5, 9), false), EMPTY_COL_FAMS, false);

    assertTrue(mi.hasTop());
    assertEquals(mi.getTopKey(), newKey(3, 0));
    assertEquals("1", mi.getTopValue().toString());
    mi.next();

    assertTrue(mi.hasTop());
    assertEquals(mi.getTopKey(), newKey(4, 0));
    assertEquals("2", mi.getTopValue().toString());
    mi.next();

    assertFalse(mi.hasTop());

    mi.seek(new Range(newKey(4, 10), true, newKey(5, 9), false), EMPTY_COL_FAMS, false);
    assertTrue(mi.hasTop());
    assertEquals(mi.getTopKey(), newKey(4, 0));
    assertEquals("2", mi.getTopValue().toString());
    mi.next();

    assertFalse(mi.hasTop());

    mi.seek(new Range(newKey(4, 10), true, newKey(6, 0), false), EMPTY_COL_FAMS, false);
    assertTrue(mi.hasTop());
    assertEquals(mi.getTopKey(), newKey(4, 0));
    assertEquals("2", mi.getTopValue().toString());
    mi.next();

    assertFalse(mi.hasTop());

    mi.seek(new Range(newKey(4, 10), true, newKey(6, 0), true), EMPTY_COL_FAMS, false);
    assertTrue(mi.hasTop());
    assertEquals(mi.getTopKey(), newKey(4, 0));
    assertEquals("2", mi.getTopValue().toString());
    mi.next();

    assertTrue(mi.hasTop());
    assertEquals(mi.getTopKey(), newKey(6, 0));
    assertEquals("3", mi.getTopValue().toString());
    mi.next();

    assertFalse(mi.hasTop());

    mi.seek(new Range(newKey(4, 0), true, newKey(6, 0), false), EMPTY_COL_FAMS, false);
    assertTrue(mi.hasTop());
    assertEquals(mi.getTopKey(), newKey(4, 0));
    assertEquals("2", mi.getTopValue().toString());
    mi.next();

    assertFalse(mi.hasTop());

    mi.seek(new Range(newKey(4, 0), false, newKey(6, 0), false), EMPTY_COL_FAMS, false);
    assertFalse(mi.hasTop());

    mi.seek(new Range(newKey(4, 0), false, newKey(6, 0), true), EMPTY_COL_FAMS, false);
    assertTrue(mi.hasTop());
    assertEquals(mi.getTopKey(), newKey(6, 0));
    assertEquals("3", mi.getTopValue().toString());
    mi.next();
    assertFalse(mi.hasTop());

  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\system\MultiIteratorTest.java
  public void test7() throws IOException {
    // TEst setting an endKey
    TreeMap<Key,Value> tm1 = new TreeMap<>();
    newKeyValue(tm1, 0, 3, false, "1");
    newKeyValue(tm1, 0, 2, false, "2");
    newKeyValue(tm1, 0, 1, false, "3");
    newKeyValue(tm1, 0, 0, false, "4");
    newKeyValue(tm1, 1, 2, false, "5");
    newKeyValue(tm1, 1, 1, false, "6");
    newKeyValue(tm1, 1, 0, false, "7");
    newKeyValue(tm1, 2, 1, false, "8");
    newKeyValue(tm1, 2, 0, false, "9");

    List<SortedKeyValueIterator<Key,Value>> skvil = new ArrayList<>(1);
    skvil.add(new SortedMapIterator(tm1));

    KeyExtent extent = new KeyExtent(TableId.of("tablename"), newRow(1), newRow(0));

    MultiIterator mi = new MultiIterator(skvil, extent);

    Range r1 = new Range((Text) null, (Text) null);
    mi.seek(r1, EMPTY_COL_FAMS, false);
    assertTrue(mi.hasTop());
    assertEquals("5", mi.getTopValue().toString());
    mi.next();
    assertTrue(mi.hasTop());
    assertEquals("6", mi.getTopValue().toString());
    mi.next();
    assertTrue(mi.hasTop());
    assertEquals("7", mi.getTopValue().toString());
    mi.next();
    assertFalse(mi.hasTop());

    Range r2 = new Range(newKey(0, 0), true, newKey(1, 1), true);
    mi.seek(r2, EMPTY_COL_FAMS, false);
    assertTrue(mi.hasTop());
    assertEquals("5", mi.getTopValue().toString());
    mi.next();
    assertTrue(mi.hasTop());
    assertEquals("6", mi.getTopValue().toString());
    mi.next();
    assertFalse(mi.hasTop());

    Range r3 = new Range(newKey(0, 0), false, newKey(1, 1), false);
    mi.seek(r3, EMPTY_COL_FAMS, false);
    assertTrue(mi.hasTop());
    assertEquals("5", mi.getTopValue().toString());
    mi.next();
    assertFalse(mi.hasTop());

    Range r4 = new Range(newKey(1, 2), true, newKey(1, 1), false);
    mi.seek(r4, EMPTY_COL_FAMS, false);
    assertTrue(mi.hasTop());
    assertEquals("5", mi.getTopValue().toString());
    mi.next();
    assertFalse(mi.hasTop());

    Range r5 = new Range(newKey(1, 2), false, newKey(1, 1), true);
    mi.seek(r5, EMPTY_COL_FAMS, false);
    assertTrue(mi.hasTop());
    assertEquals("6", mi.getTopValue().toString());
    mi.next();
    assertFalse(mi.hasTop());

    Range r6 = new Range(newKey(2, 1), true, newKey(2, 0), true);
    mi.seek(r6, EMPTY_COL_FAMS, false);
    assertFalse(mi.hasTop());

    Range r7 = new Range(newKey(0, 3), true, newKey(0, 1), true);
    mi.seek(r7, EMPTY_COL_FAMS, false);
    assertFalse(mi.hasTop());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\system\SourceSwitchingIteratorTest.java
  public void test1() throws Exception {
    TreeMap<Key,Value> tm1 = new TreeMap<>();
    put(tm1, "r1", "cf1", "cq1", 5, "v1");
    put(tm1, "r1", "cf1", "cq3", 5, "v2");
    put(tm1, "r2", "cf1", "cq1", 5, "v3");

    SortedMapIterator smi = new SortedMapIterator(tm1);
    TestDataSource tds = new TestDataSource(smi);
    SourceSwitchingIterator ssi = new SourceSwitchingIterator(tds);

    ssi.seek(new Range(), new ArrayList<>(), false);
    testAndCallNext(ssi, "r1", "cf1", "cq1", 5, "v1", true);
    testAndCallNext(ssi, "r1", "cf1", "cq3", 5, "v2", true);
    testAndCallNext(ssi, "r2", "cf1", "cq1", 5, "v3", true);
    assertFalse(ssi.hasTop());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\system\SourceSwitchingIteratorTest.java
  public void test2() throws Exception {
    TreeMap<Key,Value> tm1 = new TreeMap<>();
    put(tm1, "r1", "cf1", "cq1", 5, "v1");
    put(tm1, "r1", "cf1", "cq3", 5, "v2");
    put(tm1, "r2", "cf1", "cq1", 5, "v3");

    SortedMapIterator smi = new SortedMapIterator(tm1);
    TestDataSource tds = new TestDataSource(smi);
    SourceSwitchingIterator ssi = new SourceSwitchingIterator(tds);

    ssi.seek(new Range(), new ArrayList<>(), false);
    testAndCallNext(ssi, "r1", "cf1", "cq1", 5, "v1", true);

    TreeMap<Key,Value> tm2 = new TreeMap<>();
    put(tm2, "r1", "cf1", "cq1", 5, "v4");
    put(tm2, "r1", "cf1", "cq3", 5, "v5");
    put(tm2, "r2", "cf1", "cq1", 5, "v6");

    SortedMapIterator smi2 = new SortedMapIterator(tm2);
    tds.next = new TestDataSource(smi2);

    testAndCallNext(ssi, "r1", "cf1", "cq3", 5, "v2", true);
    testAndCallNext(ssi, "r2", "cf1", "cq1", 5, "v6", true);
    assertFalse(ssi.hasTop());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\system\SourceSwitchingIteratorTest.java
  public void test3() throws Exception {
    // test switching after a row

    TreeMap<Key,Value> tm1 = new TreeMap<>();
    put(tm1, "r1", "cf1", "cq1", 5, "v1");
    put(tm1, "r1", "cf1", "cq2", 5, "v2");
    put(tm1, "r1", "cf1", "cq3", 5, "v3");
    put(tm1, "r1", "cf1", "cq4", 5, "v4");
    put(tm1, "r3", "cf1", "cq1", 5, "v5");
    put(tm1, "r3", "cf1", "cq2", 5, "v6");

    SortedMapIterator smi = new SortedMapIterator(tm1);
    TestDataSource tds = new TestDataSource(smi);
    SourceSwitchingIterator ssi = new SourceSwitchingIterator(tds, true);

    ssi.seek(new Range(), new ArrayList<>(), false);
    testAndCallNext(ssi, "r1", "cf1", "cq1", 5, "v1", true);

    TreeMap<Key,Value> tm2 = new TreeMap<>(tm1);
    put(tm2, "r1", "cf1", "cq5", 5, "v7"); // should not see this because it should not switch until
                                           // the row is finished
    put(tm2, "r2", "cf1", "cq1", 5, "v8"); // should see this new row after it switches

    // setup a new data source, but it should not switch until the current row is finished
    SortedMapIterator smi2 = new SortedMapIterator(tm2);
    tds.next = new TestDataSource(smi2);

    testAndCallNext(ssi, "r1", "cf1", "cq2", 5, "v2", true);
    testAndCallNext(ssi, "r1", "cf1", "cq3", 5, "v3", true);
    testAndCallNext(ssi, "r1", "cf1", "cq4", 5, "v4", true);
    testAndCallNext(ssi, "r2", "cf1", "cq1", 5, "v8", true);
    testAndCallNext(ssi, "r3", "cf1", "cq1", 5, "v5", true);
    testAndCallNext(ssi, "r3", "cf1", "cq2", 5, "v6", true);

  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\system\SourceSwitchingIteratorTest.java
  public void test4() throws Exception {
    // ensure switch is done on initial seek
    TreeMap<Key,Value> tm1 = new TreeMap<>();
    put(tm1, "r1", "cf1", "cq1", 5, "v1");
    put(tm1, "r1", "cf1", "cq2", 5, "v2");

    SortedMapIterator smi = new SortedMapIterator(tm1);
    TestDataSource tds = new TestDataSource(smi);
    SourceSwitchingIterator ssi = new SourceSwitchingIterator(tds, false);

    TreeMap<Key,Value> tm2 = new TreeMap<>();
    put(tm2, "r1", "cf1", "cq1", 6, "v3");
    put(tm2, "r1", "cf1", "cq2", 6, "v4");

    SortedMapIterator smi2 = new SortedMapIterator(tm2);
    tds.next = new TestDataSource(smi2);

    ssi.seek(new Range(), new ArrayList<>(), false);

    testAndCallNext(ssi, "r1", "cf1", "cq1", 6, "v3", true);
    testAndCallNext(ssi, "r1", "cf1", "cq2", 6, "v4", true);

  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\system\SourceSwitchingIteratorTest.java
  public void test5() throws Exception {
    // ensure switchNow() works w/ deepCopy()
    TreeMap<Key,Value> tm1 = new TreeMap<>();
    put(tm1, "r1", "cf1", "cq1", 5, "v1");
    put(tm1, "r1", "cf1", "cq2", 5, "v2");

    SortedMapIterator smi = new SortedMapIterator(tm1);
    TestDataSource tds = new TestDataSource(smi);
    SourceSwitchingIterator ssi = new SourceSwitchingIterator(tds, false);

    SortedKeyValueIterator<Key,Value> dc1 = ssi.deepCopy(null);

    TreeMap<Key,Value> tm2 = new TreeMap<>();
    put(tm2, "r1", "cf1", "cq1", 6, "v3");
    put(tm2, "r2", "cf1", "cq2", 6, "v4");

    SortedMapIterator smi2 = new SortedMapIterator(tm2);
    TestDataSource tds2 = new TestDataSource(smi2);
    tds.setNext(tds2);

    ssi.switchNow();

    ssi.seek(new Range("r1"), new ArrayList<>(), false);
    dc1.seek(new Range("r2"), new ArrayList<>(), false);

    testAndCallNext(ssi, "r1", "cf1", "cq1", 6, "v3", true);
    assertFalse(ssi.hasTop());
    testAndCallNext(dc1, "r2", "cf1", "cq2", 6, "v4", true);
    assertFalse(dc1.hasTop());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\system\SourceSwitchingIteratorTest.java
  public void testSetInterrupt() throws Exception {

    TreeMap<Key,Value> tm1 = new TreeMap<>();
    put(tm1, "r1", "cf1", "cq1", 5, "v1");

    InterruptibleMapIterator smi = new InterruptibleMapIterator(tm1, null);
    TestDataSource tds = new TestDataSource(smi);
    SourceSwitchingIterator ssi = new SourceSwitchingIterator(tds, false);

    AtomicBoolean flag = new AtomicBoolean();
    ssi.setInterruptFlag(flag);

    assertSame(flag, tds.iflag);

    ssi.seek(new Range("r1"), new ArrayList<>(), false);
    testAndCallNext(ssi, "r1", "cf1", "cq1", 5, "v1", true);
    assertFalse(ssi.hasTop());

    flag.set(true);

    try {
      ssi.seek(new Range("r1"), new ArrayList<>(), false);
      fail("expected to see IterationInterruptedException");
    } catch (IterationInterruptedException iie) {}

  }

  private Range doYield(Range r, SourceSwitchingIterator ssi, YieldCallback<Key> yield)
      throws IOException {
    while (yield.hasYielded()) {
      Key yieldPosition = yield.getPositionAndReset();
      if (!r.contains(yieldPosition)) {
        throw new IOException("Underlying iterator yielded to a position outside of its range: "
            + yieldPosition + " not in " + r);
      }
      r = new Range(yieldPosition, false, null, r.isEndKeyInclusive());
      ssi.seek(r, new ArrayList<>(), false);
    }
    return r;
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\system\SourceSwitchingIteratorTest.java
  public void testYield() throws Exception {
    TreeMap<Key,Value> tm1 = new TreeMap<>();
    put(tm1, "r1", "cf1", "cq1", 5, "v1");
    put(tm1, "r1", "cf1", "cq3", 5, "v2");
    put(tm1, "r2", "cf1", "cq1", 5, "v3");

    SortedMapIterator smi = new SortedMapIterator(tm1);
    YieldingIterator ymi = new YieldingIterator(smi);
    TestDataSource tds = new TestDataSource(ymi);
    SourceSwitchingIterator ssi = new SourceSwitchingIterator(tds);

    YieldCallback<Key> yield = new YieldCallback<>();
    ssi.enableYielding(yield);

    Range r = new Range();
    ssi.seek(r, new ArrayList<>(), false);
    r = doYield(r, ssi, yield);
    testAndCallNext(ssi, "r1", "cf1", "cq1", 5, "v1", true);
    r = doYield(r, ssi, yield);
    testAndCallNext(ssi, "r1", "cf1", "cq3", 5, "v2", true);
    r = doYield(r, ssi, yield);
    testAndCallNext(ssi, "r2", "cf1", "cq1", 5, "v3", true);
    r = doYield(r, ssi, yield);
    assertFalse(ssi.hasTop());
  }

  /**
   * This iterator which implements yielding will yield after every other next and every other seek
   * call.
   */
  private final AtomicBoolean yieldNextKey = new AtomicBoolean(false);
  private final AtomicBoolean yieldSeekKey = new AtomicBoolean(false);

  public class YieldingIterator extends WrappingIterator {
    private Optional<YieldCallback<Key>> yield = Optional.empty();

    public YieldingIterator(SortedKeyValueIterator<Key,Value> source) {
      setSource(source);
    }

    @Override
    public SortedKeyValueIterator<Key,Value> deepCopy(IteratorEnvironment env) {
      return new YieldingIterator(getSource().deepCopy(env));
    }

    @Override
    public boolean hasTop() {
      return (!(yield.isPresent() && yield.get().hasYielded()) && super.hasTop());
    }

    @Override
    public void next() throws IOException {
      boolean yielded = false;

      // yield on every other next call.
      yieldNextKey.set(!yieldNextKey.get());
      if (yield.isPresent() && yieldNextKey.get()) {
        yielded = true;
        // since we are not actually skipping keys underneath, simply use the key following the top
        // key as the yield key
        yield.get().yield(getTopKey().followingKey(PartialKey.ROW_COLFAM_COLQUAL_COLVIS_TIME));
      }

      // if not yielding, then simply pass on the next call
      if (!yielded) {
        super.next();
      }
    }

    @Override
    public void seek(Range range, Collection<ByteSequence> columnFamilies, boolean inclusive)
        throws IOException {
      boolean yielded = false;

      if (!range.isStartKeyInclusive()) {
        // yield on every other seek call.
        yieldSeekKey.set(!yieldSeekKey.get());
        if (yield.isPresent() && yieldSeekKey.get()) {
          yielded = true;
          // since we are not actually skipping keys underneath, simply use the key following the
          // range start key
          yield.get()
              .yield(range.getStartKey().followingKey(PartialKey.ROW_COLFAM_COLQUAL_COLVIS_TIME));
        }
      }

      // if not yielding, then simply pass on the call to the source
      if (!yielded) {
        super.seek(range, columnFamilies, inclusive);
      }
    }

    @Override
    public void enableYielding(YieldCallback<Key> yield) {
      this.yield = Optional.of(yield);
    }
  }
}
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\system\TimeSettingIteratorTest.java
  public void test1() throws Exception {
    TreeMap<Key,Value> tm1 = new TreeMap<>();

    tm1.put(new Key("r0", "cf1", "cq1", 9L), new Value("v0"));
    tm1.put(new Key("r1", "cf1", "cq1", Long.MAX_VALUE), new Value("v1"));
    tm1.put(new Key("r1", "cf1", "cq1", 90L), new Value("v2"));
    tm1.put(new Key("r1", "cf1", "cq1", 0L), new Value("v3"));
    tm1.put(new Key("r2", "cf1", "cq1", 6L), new Value("v4"));

    TimeSettingIterator tsi = new TimeSettingIterator(new SortedMapIterator(tm1), 50);

    tsi.seek(
        new Range(new Key("r1", "cf1", "cq1", 50L), true, new Key("r1", "cf1", "cq1", 50L), true),
        new HashSet<>(), false);

    assertTrue(tsi.hasTop());
    assertEquals(new Key("r1", "cf1", "cq1", 50L), tsi.getTopKey());
    assertEquals("v1", tsi.getTopValue().toString());
    tsi.next();

    assertTrue(tsi.hasTop());
    assertEquals(new Key("r1", "cf1", "cq1", 50L), tsi.getTopKey());
    assertEquals("v2", tsi.getTopValue().toString());
    tsi.next();

    assertTrue(tsi.hasTop());
    assertEquals(new Key("r1", "cf1", "cq1", 50L), tsi.getTopKey());
    assertEquals("v3", tsi.getTopValue().toString());
    tsi.next();

    assertFalse(tsi.hasTop());

    tsi.seek(new Range(new Key("r1", "cf1", "cq1", 50L), false, null, true), new HashSet<>(),
        false);

    assertTrue(tsi.hasTop());
    assertEquals(new Key("r2", "cf1", "cq1", 50L), tsi.getTopKey());
    assertEquals("v4", tsi.getTopValue().toString());
    tsi.next();

    assertFalse(tsi.hasTop());

    tsi.seek(new Range(null, true, new Key("r1", "cf1", "cq1", 50L), false), new HashSet<>(),
        false);

    assertTrue(tsi.hasTop());
    assertEquals(new Key("r0", "cf1", "cq1", 50L), tsi.getTopKey());
    assertEquals("v0", tsi.getTopValue().toString());
    tsi.next();

    assertFalse(tsi.hasTop());

    tsi.seek(
        new Range(new Key("r1", "cf1", "cq1", 51L), true, new Key("r1", "cf1", "cq1", 50L), false),
        new HashSet<>(), false);
    assertFalse(tsi.hasTop());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\system\TimeSettingIteratorTest.java
  public void testAvoidKeyCopy() throws Exception {
    TreeMap<Key,Value> tm1 = new TreeMap<>();
    final Key k = new Key("r0", "cf1", "cq1", 9L);

    tm1.put(k, new Value("v0"));

    TimeSettingIterator tsi = new TimeSettingIterator(new SortedMapIterator(tm1), 50);

    tsi.seek(new Range(), new HashSet<>(), false);

    assertTrue(tsi.hasTop());
    final Key topKey = tsi.getTopKey();
    assertSame("Expected the topKey to be the same object", k, topKey);
    assertEquals(new Key("r0", "cf1", "cq1", 50L), topKey);
    assertEquals("v0", tsi.getTopValue().toString());
    tsi.next();

    assertFalse(tsi.hasTop());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\system\TimeSettingIteratorTest.java
  public void testEndKeyRangeAtMinLongValue() throws IOException {
    Text row = new Text("a");
    Text colf = new Text("b");
    Text colq = new Text("c");
    Text cv = new Text();

    for (boolean inclusiveEndRange : new boolean[] {true, false}) {
      TreeMap<Key,Value> sources = new TreeMap<>();
      sources.put(new Key(row.getBytes(), colf.getBytes(), colq.getBytes(), cv.getBytes(),
          Long.MIN_VALUE, true), new Value("00"));
      sources.put(
          new Key(row.getBytes(), colf.getBytes(), colq.getBytes(), cv.getBytes(), Long.MIN_VALUE),
          new Value("11"));

      TimeSettingIterator it = new TimeSettingIterator(new SortedMapIterator(sources), 111L);
      IteratorSetting is = new IteratorSetting(1, TimeSettingIterator.class);
      it.init(null, is.getOptions(), null);

      Key startKey = new Key();
      Key endKey = new Key(row, colf, colq, cv, Long.MIN_VALUE);
      Range testRange = new Range(startKey, false, endKey, inclusiveEndRange);
      it.seek(testRange, new HashSet<>(), false);

      assertTrue(it.hasTop());
      assertEquals(it.getTopValue(), new Value("00"));
      assertEquals(111L, it.getTopKey().getTimestamp());
      it.next();
      assertTrue(it.hasTop());
      assertEquals(it.getTopValue(), new Value("11"));
      assertEquals(111L, it.getTopKey().getTimestamp());
      it.next();
      assertFalse(it.hasTop());
    }
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\system\VisibilityFilterTest.java
  public void testBadVisibility() throws IOException {
    TreeMap<Key,Value> tm = new TreeMap<>();

    tm.put(new Key("r1", "cf1", "cq1", "A&"), new Value(new byte[0]));
    SortedKeyValueIterator<Key,Value> filter =
        VisibilityFilter.wrap(new SortedMapIterator(tm), new Authorizations("A"), "".getBytes());

    filter.seek(new Range(), new HashSet<>(), false);
    assertFalse(filter.hasTop());

  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\system\VisibilityFilterTest.java
  public void testEmptyAuths() throws IOException {
    TreeMap<Key,Value> tm = new TreeMap<>();

    tm.put(new Key("r1", "cf1", "cq1", ""), new Value(new byte[0]));
    tm.put(new Key("r1", "cf1", "cq2", "C"), new Value(new byte[0]));
    tm.put(new Key("r1", "cf1", "cq3", ""), new Value(new byte[0]));
    SortedKeyValueIterator<Key,Value> filter =
        VisibilityFilter.wrap(new SortedMapIterator(tm), Authorizations.EMPTY, "".getBytes());

    filter.seek(new Range(), new HashSet<>(), false);
    assertTrue(filter.hasTop());
    assertEquals(new Key("r1", "cf1", "cq1", ""), filter.getTopKey());
    filter.next();
    assertTrue(filter.hasTop());
    assertEquals(new Key("r1", "cf1", "cq3", ""), filter.getTopKey());
    filter.next();
    assertFalse(filter.hasTop());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\user\BigDecimalCombinerTest.java
  public void testSums() throws IOException {
    ai = new BigDecimalCombiner.BigDecimalSummingCombiner();
    IteratorSetting is = new IteratorSetting(1, BigDecimalCombiner.BigDecimalSummingCombiner.class);
    Combiner.setColumns(is, columns);

    ai.init(new SortedMapIterator(tm1), is.getOptions(), CombinerTest.SCAN_IE);
    ai.seek(new Range(), EMPTY_COL_FAMS, false);

    assertTrue(ai.hasTop());
    assertEquals(CombinerTest.newKey(1, 1, 1, 3), ai.getTopKey());
    assertEquals(-9.7, encoder.decode(ai.getTopValue().get()).doubleValue(), delta);

    verify();
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\user\BigDecimalCombinerTest.java
  public void testMin() throws IOException {
    ai = new BigDecimalCombiner.BigDecimalMinCombiner();
    IteratorSetting is = new IteratorSetting(1, BigDecimalCombiner.BigDecimalMinCombiner.class);
    Combiner.setColumns(is, columns);

    ai.init(new SortedMapIterator(tm1), is.getOptions(), CombinerTest.SCAN_IE);
    ai.seek(new Range(), EMPTY_COL_FAMS, false);

    assertTrue(ai.hasTop());
    assertEquals(CombinerTest.newKey(1, 1, 1, 3), ai.getTopKey());
    assertEquals(-14.0, encoder.decode(ai.getTopValue().get()).doubleValue(), delta);

    verify();
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\user\BigDecimalCombinerTest.java
  public void testMax() throws IOException {
    ai = new BigDecimalCombiner.BigDecimalMaxCombiner();
    IteratorSetting is = new IteratorSetting(1, BigDecimalCombiner.BigDecimalMaxCombiner.class);
    Combiner.setColumns(is, columns);

    ai.init(new SortedMapIterator(tm1), is.getOptions(), CombinerTest.SCAN_IE);
    ai.seek(new Range(), EMPTY_COL_FAMS, false);

    assertTrue(ai.hasTop());
    assertEquals(CombinerTest.newKey(1, 1, 1, 3), ai.getTopKey());
    assertEquals(2.3, encoder.decode(ai.getTopValue().get()).doubleValue(), delta);

    verify();
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\user\ColumnSliceFilterTest.java
  public void testBasic() throws IOException {
    ColumnSliceFilter.setSlice(is, "20080202", "20080204");

    assertTrue(columnSliceFilter.validateOptions(is.getOptions()));
    columnSliceFilter.init(new SortedMapIterator(TEST_DATA), is.getOptions(), iteratorEnvironment);
    columnSliceFilter.seek(new Range(), EMPTY_COL_FAMS, true);

    assertTrue(columnSliceFilter.hasTop());
    assertEquals(columnSliceFilter.getTopKey(), KEY_2);
    columnSliceFilter.next();
    assertTrue(columnSliceFilter.hasTop());
    assertEquals(columnSliceFilter.getTopKey(), KEY_3);
    columnSliceFilter.next();
    assertTrue(columnSliceFilter.hasTop());
    assertEquals(columnSliceFilter.getTopKey(), KEY_6);
    columnSliceFilter.next();
    assertFalse(columnSliceFilter.hasTop());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\user\ColumnSliceFilterTest.java
  public void testBothInclusive() throws IOException {
    ColumnSliceFilter.setSlice(is, "20080202", true, "20080204", true);

    columnSliceFilter.validateOptions(is.getOptions());
    columnSliceFilter.init(new SortedMapIterator(TEST_DATA), is.getOptions(), iteratorEnvironment);
    columnSliceFilter.seek(new Range(), EMPTY_COL_FAMS, false);

    assertTrue(columnSliceFilter.hasTop());
    assertEquals(columnSliceFilter.getTopKey(), KEY_2);
    columnSliceFilter.next();
    assertTrue(columnSliceFilter.hasTop());
    assertEquals(columnSliceFilter.getTopKey(), KEY_3);
    columnSliceFilter.next();
    assertTrue(columnSliceFilter.hasTop());
    assertEquals(columnSliceFilter.getTopKey(), KEY_6);
    columnSliceFilter.next();
    assertTrue(columnSliceFilter.hasTop());
    assertEquals(columnSliceFilter.getTopKey(), KEY_4);
    columnSliceFilter.next();
    assertFalse(columnSliceFilter.hasTop());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\user\ColumnSliceFilterTest.java
  public void testBothExclusive() throws IOException {
    ColumnSliceFilter.setSlice(is, "20080202", false, "20080204", false);

    columnSliceFilter.validateOptions(is.getOptions());
    columnSliceFilter.init(new SortedMapIterator(TEST_DATA), is.getOptions(), iteratorEnvironment);
    columnSliceFilter.seek(new Range(), EMPTY_COL_FAMS, false);

    assertTrue(columnSliceFilter.hasTop());
    assertEquals(columnSliceFilter.getTopKey(), KEY_3);
    columnSliceFilter.next();
    assertTrue(columnSliceFilter.hasTop());
    assertEquals(columnSliceFilter.getTopKey(), KEY_6);
    columnSliceFilter.next();
    assertFalse(columnSliceFilter.hasTop());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\user\ColumnSliceFilterTest.java
  public void testStartExclusiveEndInclusive() throws IOException {
    ColumnSliceFilter.setSlice(is, "20080202", false, "20080204", true);

    columnSliceFilter.validateOptions(is.getOptions());
    columnSliceFilter.init(new SortedMapIterator(TEST_DATA), is.getOptions(), iteratorEnvironment);
    columnSliceFilter.seek(new Range(), EMPTY_COL_FAMS, false);

    assertTrue(columnSliceFilter.hasTop());
    assertEquals(columnSliceFilter.getTopKey(), KEY_3);
    columnSliceFilter.next();
    assertTrue(columnSliceFilter.hasTop());
    assertEquals(columnSliceFilter.getTopKey(), KEY_6);
    columnSliceFilter.next();
    assertTrue(columnSliceFilter.hasTop());
    assertEquals(columnSliceFilter.getTopKey(), KEY_4);
    columnSliceFilter.next();
    assertFalse(columnSliceFilter.hasTop());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\user\ColumnSliceFilterTest.java
  public void testNullStart() throws IOException {
    ColumnSliceFilter.setSlice(is, null, "20080204");

    columnSliceFilter.validateOptions(is.getOptions());
    columnSliceFilter.init(new SortedMapIterator(TEST_DATA), is.getOptions(), iteratorEnvironment);
    columnSliceFilter.seek(new Range(), EMPTY_COL_FAMS, false);

    assertTrue(columnSliceFilter.hasTop());
    assertEquals(columnSliceFilter.getTopKey(), KEY_2);
    columnSliceFilter.next();
    assertTrue(columnSliceFilter.hasTop());
    assertEquals(columnSliceFilter.getTopKey(), KEY_1);
    columnSliceFilter.next();
    assertTrue(columnSliceFilter.hasTop());
    assertEquals(columnSliceFilter.getTopKey(), KEY_3);
    columnSliceFilter.next();
    assertTrue(columnSliceFilter.hasTop());
    assertEquals(columnSliceFilter.getTopKey(), KEY_6);
    columnSliceFilter.next();
    assertFalse(columnSliceFilter.hasTop());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\user\ColumnSliceFilterTest.java
  public void testNullEnd() throws IOException {
    ColumnSliceFilter.setSlice(is, "20080202", null);

    columnSliceFilter.validateOptions(is.getOptions());
    columnSliceFilter.init(new SortedMapIterator(TEST_DATA), is.getOptions(), iteratorEnvironment);
    columnSliceFilter.seek(new Range(), EMPTY_COL_FAMS, false);

    assertTrue(columnSliceFilter.hasTop());
    assertEquals(columnSliceFilter.getTopKey(), KEY_2);
    columnSliceFilter.next();
    assertTrue(columnSliceFilter.hasTop());
    assertEquals(columnSliceFilter.getTopKey(), KEY_3);
    columnSliceFilter.next();
    assertTrue(columnSliceFilter.hasTop());
    assertEquals(columnSliceFilter.getTopKey(), KEY_6);
    columnSliceFilter.next();
    assertTrue(columnSliceFilter.hasTop());
    assertEquals(columnSliceFilter.getTopKey(), KEY_4);
    columnSliceFilter.next();
    assertTrue(columnSliceFilter.hasTop());
    assertEquals(columnSliceFilter.getTopKey(), KEY_5);
    columnSliceFilter.next();
    assertFalse(columnSliceFilter.hasTop());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\user\ColumnSliceFilterTest.java
  public void testBothNull() throws IOException {
    ColumnSliceFilter.setSlice(is, null, null);

    columnSliceFilter.validateOptions(is.getOptions());
    columnSliceFilter.init(new SortedMapIterator(TEST_DATA), is.getOptions(), iteratorEnvironment);
    columnSliceFilter.seek(new Range(), EMPTY_COL_FAMS, false);

    assertTrue(columnSliceFilter.hasTop());
    assertEquals(columnSliceFilter.getTopKey(), KEY_2);
    columnSliceFilter.next();
    assertTrue(columnSliceFilter.hasTop());
    assertEquals(columnSliceFilter.getTopKey(), KEY_1);
    columnSliceFilter.next();
    assertTrue(columnSliceFilter.hasTop());
    assertEquals(columnSliceFilter.getTopKey(), KEY_3);
    columnSliceFilter.next();
    assertTrue(columnSliceFilter.hasTop());
    assertEquals(columnSliceFilter.getTopKey(), KEY_6);
    columnSliceFilter.next();
    assertTrue(columnSliceFilter.hasTop());
    assertEquals(columnSliceFilter.getTopKey(), KEY_4);
    columnSliceFilter.next();
    assertTrue(columnSliceFilter.hasTop());
    assertEquals(columnSliceFilter.getTopKey(), KEY_5);
    columnSliceFilter.next();
    assertFalse(columnSliceFilter.hasTop());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\user\ColumnSliceFilterTest.java
  public void testStartAfterEnd() {
    try {
      ColumnSliceFilter.setSlice(is, "20080204", "20080202");
      fail("IllegalArgumentException expected but not thrown");
    } catch (IllegalArgumentException expectedException) {
      // Exception successfully thrown
    }
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\user\ColumnSliceFilterTest.java
  public void testStartEqualToEndStartInclusiveEndExclusive() {
    try {
      ColumnSliceFilter.setSlice(is, "20080202", "20080202");
      fail("IllegalArgumentException expected but not thrown");
    } catch (IllegalArgumentException expectedException) {
      // Exception successfully thrown
    }
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\user\ColumnSliceFilterTest.java
  public void testStartEqualToEndStartExclusiveEndInclusive() {
    try {
      ColumnSliceFilter.setSlice(is, "20080202", false, "20080202", true);
      fail("IllegalArgumentException expected but not thrown");
    } catch (IllegalArgumentException expectedException) {
      // Exception successfully thrown
    }
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\user\ColumnSliceFilterTest.java
  public void testStartEqualToEndBothInclusive() throws IOException {
    ColumnSliceFilter.setSlice(is, "20080202", true, "20080202", true);

    columnSliceFilter.validateOptions(is.getOptions());
    columnSliceFilter.init(new SortedMapIterator(TEST_DATA), is.getOptions(), iteratorEnvironment);
    columnSliceFilter.seek(new Range(), EMPTY_COL_FAMS, false);

    assertTrue(columnSliceFilter.hasTop());
    assertEquals(columnSliceFilter.getTopKey(), KEY_2);
    columnSliceFilter.next();
    assertFalse(columnSliceFilter.hasTop());
  }
}
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\user\CombinerTest.java
  public void test1() throws IOException {
    Encoder<Long> encoder = LongCombiner.VAR_LEN_ENCODER;

    TreeMap<Key,Value> tm1 = new TreeMap<>();

    // keys that do not aggregate
    newKeyValue(tm1, 1, 1, 1, 1, false, 2L, encoder);
    newKeyValue(tm1, 1, 1, 1, 2, false, 3L, encoder);
    newKeyValue(tm1, 1, 1, 1, 3, false, 4L, encoder);

    Combiner ai = new SummingCombiner();

    IteratorSetting is = new IteratorSetting(1, SummingCombiner.class);
    LongCombiner.setEncodingType(is, SummingCombiner.Type.VARLEN);
    Combiner.setColumns(is, Collections.singletonList(new IteratorSetting.Column("2")));

    ai.init(new SortedMapIterator(tm1), is.getOptions(), SCAN_IE);
    ai.seek(new Range(), EMPTY_COL_FAMS, false);

    assertTrue(ai.hasTop());
    assertEquals(newKey(1, 1, 1, 3), ai.getTopKey());
    assertEquals("4", encoder.decode(ai.getTopValue().get()).toString());

    ai.next();

    assertTrue(ai.hasTop());
    assertEquals(newKey(1, 1, 1, 2), ai.getTopKey());
    assertEquals("3", encoder.decode(ai.getTopValue().get()).toString());

    ai.next();

    assertTrue(ai.hasTop());
    assertEquals(newKey(1, 1, 1, 1), ai.getTopKey());
    assertEquals("2", encoder.decode(ai.getTopValue().get()).toString());

    ai.next();

    assertFalse(ai.hasTop());

    // try seeking

    ai.seek(newRow(1, 1, 1, 2), EMPTY_COL_FAMS, false);

    assertTrue(ai.hasTop());
    assertEquals(newKey(1, 1, 1, 2), ai.getTopKey());
    assertEquals("3", encoder.decode(ai.getTopValue().get()).toString());

    ai.next();

    assertTrue(ai.hasTop());
    assertEquals(newKey(1, 1, 1, 1), ai.getTopKey());
    assertEquals("2", encoder.decode(ai.getTopValue().get()).toString());

    ai.next();

    assertFalse(ai.hasTop());

    // seek after everything
    ai.seek(newRow(1, 1, 1, 0), EMPTY_COL_FAMS, false);

    assertFalse(ai.hasTop());

  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\user\CombinerTest.java
  public void test2() throws IOException {
    Encoder<Long> encoder = LongCombiner.VAR_LEN_ENCODER;

    TreeMap<Key,Value> tm1 = new TreeMap<>();

    // keys that aggregate
    newKeyValue(tm1, 1, 1, 1, 1, false, 2L, encoder);
    newKeyValue(tm1, 1, 1, 1, 2, false, 3L, encoder);
    newKeyValue(tm1, 1, 1, 1, 3, false, 4L, encoder);

    Combiner ai = new SummingCombiner();

    IteratorSetting is = new IteratorSetting(1, SummingCombiner.class);
    LongCombiner.setEncodingType(is, VarLenEncoder.class);
    Combiner.setColumns(is, Collections.singletonList(new IteratorSetting.Column("cf001")));

    ai.init(new SortedMapIterator(tm1), is.getOptions(), SCAN_IE);
    ai.seek(new Range(), EMPTY_COL_FAMS, false);

    assertTrue(ai.hasTop());
    assertEquals(newKey(1, 1, 1, 3), ai.getTopKey());
    assertEquals("9", encoder.decode(ai.getTopValue().get()).toString());

    ai.next();

    assertFalse(ai.hasTop());

    // try seeking to the beginning of a key that aggregates

    ai.seek(newRow(1, 1, 1, 3), EMPTY_COL_FAMS, false);

    assertTrue(ai.hasTop());
    assertEquals(newKey(1, 1, 1, 3), ai.getTopKey());
    assertEquals("9", encoder.decode(ai.getTopValue().get()).toString());

    ai.next();

    assertFalse(ai.hasTop());

    // try seeking the middle of a key the aggregates
    ai.seek(newRow(1, 1, 1, 2), EMPTY_COL_FAMS, false);

    assertFalse(ai.hasTop());

    // try seeking to the end of a key the aggregates
    ai.seek(newRow(1, 1, 1, 1), EMPTY_COL_FAMS, false);

    assertFalse(ai.hasTop());

    // try seeking before a key the aggregates
    ai.seek(newRow(1, 1, 1, 4), EMPTY_COL_FAMS, false);

    assertTrue(ai.hasTop());
    assertEquals(newKey(1, 1, 1, 3), ai.getTopKey());
    assertEquals("9", encoder.decode(ai.getTopValue().get()).toString());

    ai.next();

    assertFalse(ai.hasTop());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\user\CombinerTest.java
  public void test3() throws IOException {
    Encoder<Long> encoder = LongCombiner.FIXED_LEN_ENCODER;

    TreeMap<Key,Value> tm1 = new TreeMap<>();

    // keys that aggregate
    newKeyValue(tm1, 1, 1, 1, 1, false, 2L, encoder);
    newKeyValue(tm1, 1, 1, 1, 2, false, 3L, encoder);
    newKeyValue(tm1, 1, 1, 1, 3, false, 4L, encoder);

    // keys that do not aggregate
    newKeyValue(tm1, 2, 2, 1, 1, false, 2L, encoder);
    newKeyValue(tm1, 2, 2, 1, 2, false, 3L, encoder);

    Combiner ai = new SummingCombiner();

    IteratorSetting is = new IteratorSetting(1, SummingCombiner.class);
    LongCombiner.setEncodingType(is, FixedLenEncoder.class.getName());
    Combiner.setColumns(is, Collections.singletonList(new IteratorSetting.Column("cf001")));

    ai.init(new SortedMapIterator(tm1), is.getOptions(), SCAN_IE);
    ai.seek(new Range(), EMPTY_COL_FAMS, false);

    assertTrue(ai.hasTop());
    assertEquals(newKey(1, 1, 1, 3), ai.getTopKey());
    assertEquals("9", encoder.decode(ai.getTopValue().get()).toString());

    ai.next();

    assertTrue(ai.hasTop());
    assertEquals(newKey(2, 2, 1, 2), ai.getTopKey());
    assertEquals("3", encoder.decode(ai.getTopValue().get()).toString());

    ai.next();

    assertTrue(ai.hasTop());
    assertEquals(newKey(2, 2, 1, 1), ai.getTopKey());
    assertEquals("2", encoder.decode(ai.getTopValue().get()).toString());

    ai.next();

    assertFalse(ai.hasTop());

    // seek after key that aggregates
    ai.seek(newRow(1, 1, 1, 2), EMPTY_COL_FAMS, false);

    assertTrue(ai.hasTop());
    assertEquals(newKey(2, 2, 1, 2), ai.getTopKey());
    assertEquals("3", encoder.decode(ai.getTopValue().get()).toString());

    // seek before key that aggregates
    ai.seek(newRow(1, 1, 1, 4), EMPTY_COL_FAMS, false);

    assertTrue(ai.hasTop());
    assertEquals(newKey(1, 1, 1, 3), ai.getTopKey());
    assertEquals("9", encoder.decode(ai.getTopValue().get()).toString());

    ai.next();

    assertTrue(ai.hasTop());
    assertEquals(newKey(2, 2, 1, 2), ai.getTopKey());
    assertEquals("3", encoder.decode(ai.getTopValue().get()).toString());

  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\user\CombinerTest.java
  public void testDeepCopy() throws IOException {
    Encoder<Long> encoder = LongCombiner.FIXED_LEN_ENCODER;

    TreeMap<Key,Value> tm1 = new TreeMap<>();

    // keys that aggregate
    newKeyValue(tm1, 1, 1, 1, 1, false, 2L, encoder);
    newKeyValue(tm1, 1, 1, 1, 2, false, 3L, encoder);
    newKeyValue(tm1, 1, 1, 1, 3, false, 4L, encoder);

    // keys that do not aggregate
    newKeyValue(tm1, 2, 2, 1, 1, false, 2L, encoder);
    newKeyValue(tm1, 2, 2, 1, 2, false, 3L, encoder);

    Combiner ai = new SummingCombiner();

    IteratorSetting is = new IteratorSetting(1, SummingCombiner.class);
    LongCombiner.setEncodingType(is, FixedLenEncoder.class.getName());
    Combiner.setColumns(is, Collections.singletonList(new IteratorSetting.Column("cf001")));

    ai.init(new SortedMapIterator(tm1), is.getOptions(), SCAN_IE);

    SortedKeyValueIterator<Key,Value> ai2 = ai.deepCopy(null);
    SortedKeyValueIterator<Key,Value> ai3 = ai.deepCopy(null);
    ai.seek(new Range(), EMPTY_COL_FAMS, false);

    assertTrue(ai.hasTop());
    assertEquals(newKey(1, 1, 1, 3), ai.getTopKey());
    assertEquals("9", encoder.decode(ai.getTopValue().get()).toString());

    ai.next();

    assertTrue(ai.hasTop());
    assertEquals(newKey(2, 2, 1, 2), ai.getTopKey());
    assertEquals("3", encoder.decode(ai.getTopValue().get()).toString());

    ai.next();

    assertTrue(ai.hasTop());
    assertEquals(newKey(2, 2, 1, 1), ai.getTopKey());
    assertEquals("2", encoder.decode(ai.getTopValue().get()).toString());

    ai.next();

    assertFalse(ai.hasTop());

    // seek after key that aggregates
    ai2.seek(newRow(1, 1, 1, 2), EMPTY_COL_FAMS, false);

    assertTrue(ai2.hasTop());
    assertEquals(newKey(2, 2, 1, 2), ai2.getTopKey());
    assertEquals("3", encoder.decode(ai2.getTopValue().get()).toString());

    // seek before key that aggregates
    ai3.seek(newRow(1, 1, 1, 4), EMPTY_COL_FAMS, false);

    assertTrue(ai3.hasTop());
    assertEquals(newKey(1, 1, 1, 3), ai3.getTopKey());
    assertEquals("9", encoder.decode(ai3.getTopValue().get()).toString());

    ai3.next();

    assertTrue(ai3.hasTop());
    assertEquals(newKey(2, 2, 1, 2), ai3.getTopKey());
    assertEquals("3", encoder.decode(ai3.getTopValue().get()).toString());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\user\CombinerTest.java
  public void test4() throws IOException {
    Encoder<Long> encoder = LongCombiner.STRING_ENCODER;

    TreeMap<Key,Value> tm1 = new TreeMap<>();

    // keys that do not aggregate
    newKeyValue(tm1, 0, 0, 1, 1, false, 7L, encoder);

    // keys that aggregate
    newKeyValue(tm1, 1, 1, 1, 1, false, 2L, encoder);
    newKeyValue(tm1, 1, 1, 1, 2, false, 3L, encoder);
    newKeyValue(tm1, 1, 1, 1, 3, false, 4L, encoder);

    // keys that do not aggregate
    newKeyValue(tm1, 2, 2, 1, 1, false, 2L, encoder);
    newKeyValue(tm1, 2, 2, 1, 2, false, 3L, encoder);

    Combiner ai = new SummingCombiner();

    IteratorSetting is = new IteratorSetting(1, SummingCombiner.class);
    LongCombiner.setEncodingType(is, SummingCombiner.Type.STRING);
    Combiner.setColumns(is, Collections.singletonList(new IteratorSetting.Column("cf001")));

    ai.init(new SortedMapIterator(tm1), is.getOptions(), SCAN_IE);
    ai.seek(new Range(), EMPTY_COL_FAMS, false);

    assertTrue(ai.hasTop());
    assertEquals(newKey(0, 0, 1, 1), ai.getTopKey());
    assertEquals("7", encoder.decode(ai.getTopValue().get()).toString());

    ai.next();

    assertTrue(ai.hasTop());
    assertEquals(newKey(1, 1, 1, 3), ai.getTopKey());
    assertEquals("9", encoder.decode(ai.getTopValue().get()).toString());

    ai.next();

    assertTrue(ai.hasTop());
    assertEquals(newKey(2, 2, 1, 2), ai.getTopKey());
    assertEquals("3", encoder.decode(ai.getTopValue().get()).toString());

    ai.next();

    assertTrue(ai.hasTop());
    assertEquals(newKey(2, 2, 1, 1), ai.getTopKey());
    assertEquals("2", encoder.decode(ai.getTopValue().get()).toString());

    ai.next();

    assertFalse(ai.hasTop());

    // seek test
    ai.seek(newRow(0, 0, 1, 0), EMPTY_COL_FAMS, false);

    assertTrue(ai.hasTop());
    assertEquals(newKey(1, 1, 1, 3), ai.getTopKey());
    assertEquals("9", encoder.decode(ai.getTopValue().get()).toString());

    ai.next();

    assertTrue(ai.hasTop());
    assertEquals(newKey(2, 2, 1, 2), ai.getTopKey());
    assertEquals("3", encoder.decode(ai.getTopValue().get()).toString());

    // seek after key that aggregates
    ai.seek(newRow(1, 1, 1, 2), EMPTY_COL_FAMS, false);

    assertTrue(ai.hasTop());
    assertEquals(newKey(2, 2, 1, 2), ai.getTopKey());
    assertEquals("3", encoder.decode(ai.getTopValue().get()).toString());

    // combine all columns

    is = new IteratorSetting(1, SummingCombiner.class);
    LongCombiner.setEncodingType(is, SummingCombiner.Type.STRING);
    Combiner.setCombineAllColumns(is, true);

    ai.init(new SortedMapIterator(tm1), is.getOptions(), SCAN_IE);
    ai.seek(new Range(), EMPTY_COL_FAMS, false);

    assertTrue(ai.hasTop());
    assertEquals(newKey(0, 0, 1, 1), ai.getTopKey());
    assertEquals("7", encoder.decode(ai.getTopValue().get()).toString());

    ai.next();

    assertTrue(ai.hasTop());
    assertEquals(newKey(1, 1, 1, 3), ai.getTopKey());
    assertEquals("9", encoder.decode(ai.getTopValue().get()).toString());

    ai.next();

    assertTrue(ai.hasTop());
    assertEquals(newKey(2, 2, 1, 2), ai.getTopKey());
    assertEquals("5", encoder.decode(ai.getTopValue().get()).toString());

    ai.next();

    assertFalse(ai.hasTop());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\user\CombinerTest.java
  public void test5() throws IOException {
    Encoder<Long> encoder = LongCombiner.STRING_ENCODER;
    // try aggregating across multiple data sets that contain
    // the exact same keys w/ different values

    TreeMap<Key,Value> tm1 = new TreeMap<>();
    newKeyValue(tm1, 1, 1, 1, 1, false, 2L, encoder);

    TreeMap<Key,Value> tm2 = new TreeMap<>();
    newKeyValue(tm2, 1, 1, 1, 1, false, 3L, encoder);

    TreeMap<Key,Value> tm3 = new TreeMap<>();
    newKeyValue(tm3, 1, 1, 1, 1, false, 4L, encoder);

    Combiner ai = new SummingCombiner();

    IteratorSetting is = new IteratorSetting(1, SummingCombiner.class);
    LongCombiner.setEncodingType(is, StringEncoder.class);
    Combiner.setColumns(is, Collections.singletonList(new IteratorSetting.Column("cf001")));

    List<SortedKeyValueIterator<Key,Value>> sources = new ArrayList<>(3);
    sources.add(new SortedMapIterator(tm1));
    sources.add(new SortedMapIterator(tm2));
    sources.add(new SortedMapIterator(tm3));

    MultiIterator mi = new MultiIterator(sources, true);
    ai.init(mi, is.getOptions(), SCAN_IE);
    ai.seek(new Range(), EMPTY_COL_FAMS, false);

    assertTrue(ai.hasTop());
    assertEquals(newKey(1, 1, 1, 1), ai.getTopKey());
    assertEquals("9", encoder.decode(ai.getTopValue().get()).toString());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\user\CombinerTest.java
  public void test6() throws IOException {
    Encoder<Long> encoder = LongCombiner.VAR_LEN_ENCODER;
    TreeMap<Key,Value> tm1 = new TreeMap<>();

    // keys that aggregate
    newKeyValue(tm1, 1, 1, 1, 1, false, 2L, encoder);
    newKeyValue(tm1, 1, 1, 1, 2, false, 3L, encoder);
    newKeyValue(tm1, 1, 1, 1, 3, false, 4L, encoder);

    Combiner ai = new SummingCombiner();

    IteratorSetting is = new IteratorSetting(1, SummingCombiner.class);
    LongCombiner.setEncodingType(is, VarLenEncoder.class.getName());
    Combiner.setColumns(is, Collections.singletonList(new IteratorSetting.Column("cf001")));

    ai.init(new SortedMapIterator(tm1), is.getOptions(), SCAN_IE);

    // try seeking to the beginning of a key that aggregates

    ai.seek(newRow(1, 1, 1, 3, false), EMPTY_COL_FAMS, false);

    assertFalse(ai.hasTop());

  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\user\CombinerTest.java
  public void test7() throws IOException {
    Encoder<Long> encoder = LongCombiner.FIXED_LEN_ENCODER;

    // test that delete is not aggregated

    TreeMap<Key,Value> tm1 = new TreeMap<>();

    newKeyValue(tm1, 1, 1, 1, 2, true, 0L, encoder);
    newKeyValue(tm1, 1, 1, 1, 3, false, 4L, encoder);
    newKeyValue(tm1, 1, 1, 1, 4, false, 3L, encoder);

    Combiner ai = new SummingCombiner();

    IteratorSetting is = new IteratorSetting(1, SummingCombiner.class);
    LongCombiner.setEncodingType(is, SummingCombiner.Type.FIXEDLEN);
    Combiner.setColumns(is, Collections.singletonList(new IteratorSetting.Column("cf001")));

    ai.init(new SortedMapIterator(tm1), is.getOptions(), SCAN_IE);

    ai.seek(newRow(1, 1, 1, 4, true), EMPTY_COL_FAMS, false);

    assertTrue(ai.hasTop());
    assertEquals(newKey(1, 1, 1, 4), ai.getTopKey());
    assertEquals("7", encoder.decode(ai.getTopValue().get()).toString());

    ai.next();
    assertTrue(ai.hasTop());
    assertEquals(newKey(1, 1, 1, 2, true), ai.getTopKey());
    assertEquals("0", encoder.decode(ai.getTopValue().get()).toString());

    ai.next();
    assertFalse(ai.hasTop());

    tm1 = new TreeMap<>();
    newKeyValue(tm1, 1, 1, 1, 2, true, 0L, encoder);
    ai = new SummingCombiner();
    ai.init(new SortedMapIterator(tm1), is.getOptions(), SCAN_IE);

    ai.seek(newRow(1, 1, 1, 4, true), EMPTY_COL_FAMS, false);

    assertTrue(ai.hasTop());
    assertEquals(newKey(1, 1, 1, 2, true), ai.getTopKey());
    assertEquals("0", encoder.decode(ai.getTopValue().get()).toString());

    ai.next();
    assertFalse(ai.hasTop());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\user\CombinerTest.java
  public void valueIteratorTest() throws IOException {
    TreeMap<Key,Value> tm = new TreeMap<>();
    tm.put(new Key("r", "f", "q", 1), new Value("1"));
    tm.put(new Key("r", "f", "q", 2), new Value("2"));
    SortedMapIterator smi = new SortedMapIterator(tm);
    smi.seek(new Range(), EMPTY_COL_FAMS, false);
    ValueIterator iter = new ValueIterator(smi);
    assertEquals(iter.next().toString(), "2");
    assertEquals(iter.next().toString(), "1");
    assertFalse(iter.hasNext());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\user\CombinerTest.java
  public void sumAllColumns() throws IOException {
    TreeMap<Key,Value> tm = new TreeMap<>();
    tm.put(new Key("r", "count", "a", 1), new Value("1"));
    tm.put(new Key("r", "count", "a", 2), new Value("1"));
    tm.put(new Key("r", "count", "b", 3), new Value("1"));
    tm.put(new Key("r", "count", "b", 4), new Value("1"));
    tm.put(new Key("r", "count", "b", 5), new Value("1"));
    tm.put(new Key("r", "count", "c", 6), new Value("1"));
    SortedMapIterator smi = new SortedMapIterator(tm);
    Combiner iter = new SummingCombiner();
    IteratorSetting s = new IteratorSetting(10, "s", SummingCombiner.class);
    SummingCombiner.setColumns(s, Collections.singletonList(new IteratorSetting.Column("count")));
    SummingCombiner.setEncodingType(s, LongCombiner.StringEncoder.class);
    iter.init(smi, s.getOptions(), SCAN_IE);
    Combiner iter2 = new SummingCombiner();
    IteratorSetting s2 = new IteratorSetting(10, "s2", SummingCombiner.class);
    SummingCombiner.setColumns(s2,
        Collections.singletonList(new IteratorSetting.Column("count", "a")));
    SummingCombiner.setEncodingType(s2, LongCombiner.StringEncoder.class);
    iter2.init(iter, s.getOptions(), SCAN_IE);
    iter2.seek(new Range(), EMPTY_COL_FAMS, false);

    assertTrue(iter2.hasTop());
    assertEquals("2", iter2.getTopValue().toString());
    iter2.next();
    assertTrue(iter2.hasTop());
    assertEquals("3", iter2.getTopValue().toString());
    iter2.next();
    assertTrue(iter2.hasTop());
    assertEquals("1", iter2.getTopValue().toString());
    iter2.next();
    assertFalse(iter2.hasTop());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\user\CombinerTest.java
  public void maxMinTest() throws IOException {
    Encoder<Long> encoder = LongCombiner.VAR_LEN_ENCODER;

    TreeMap<Key,Value> tm1 = new TreeMap<>();

    // keys that aggregate
    newKeyValue(tm1, 1, 1, 1, 1, false, 4L, encoder);
    newKeyValue(tm1, 1, 1, 1, 2, false, 3L, encoder);
    newKeyValue(tm1, 1, 1, 1, 3, false, 2L, encoder);

    Combiner ai = new MaxCombiner();

    IteratorSetting is = new IteratorSetting(1, SummingCombiner.class);
    LongCombiner.setEncodingType(is, SummingCombiner.Type.VARLEN);
    Combiner.setColumns(is, Collections.singletonList(new IteratorSetting.Column("cf001")));

    ai.init(new SortedMapIterator(tm1), is.getOptions(), SCAN_IE);
    ai.seek(new Range(), EMPTY_COL_FAMS, false);

    assertTrue(ai.hasTop());
    assertEquals(newKey(1, 1, 1, 3), ai.getTopKey());
    assertEquals("4", encoder.decode(ai.getTopValue().get()).toString());

    ai.next();

    assertFalse(ai.hasTop());

    ai = new MinCombiner();

    ai.init(new SortedMapIterator(tm1), is.getOptions(), SCAN_IE);
    ai.seek(new Range(), EMPTY_COL_FAMS, false);

    assertTrue(ai.hasTop());
    assertEquals(newKey(1, 1, 1, 3), ai.getTopKey());
    assertEquals("2", encoder.decode(ai.getTopValue().get()).toString());

    ai.next();

    assertFalse(ai.hasTop());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\user\CombinerTest.java
  public void sumArrayTest() throws IOException, ReflectiveOperationException {
    sumArray(SummingArrayCombiner.VarLongArrayEncoder.class, SummingArrayCombiner.Type.VARLEN);
    sumArray(SummingArrayCombiner.FixedLongArrayEncoder.class, SummingArrayCombiner.Type.FIXEDLEN);
    sumArray(SummingArrayCombiner.StringArrayEncoder.class, SummingArrayCombiner.Type.STRING);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\user\CombinerTest.java
  public void testEncoders() {
    TypedValueCombiner.testEncoder(SummingCombiner.FIXED_LEN_ENCODER, Long.MAX_VALUE);
    TypedValueCombiner.testEncoder(SummingCombiner.FIXED_LEN_ENCODER, Long.MIN_VALUE);
    TypedValueCombiner.testEncoder(SummingCombiner.FIXED_LEN_ENCODER, 42L);
    TypedValueCombiner.testEncoder(SummingCombiner.FIXED_LEN_ENCODER, -42L);
    TypedValueCombiner.testEncoder(SummingCombiner.FIXED_LEN_ENCODER, 0L);
    TypedValueCombiner.testEncoder(SummingCombiner.VAR_LEN_ENCODER, Long.MAX_VALUE);
    TypedValueCombiner.testEncoder(SummingCombiner.VAR_LEN_ENCODER, Long.MIN_VALUE);
    TypedValueCombiner.testEncoder(SummingCombiner.VAR_LEN_ENCODER, 42L);
    TypedValueCombiner.testEncoder(SummingCombiner.VAR_LEN_ENCODER, -42L);
    TypedValueCombiner.testEncoder(SummingCombiner.VAR_LEN_ENCODER, 0L);
    TypedValueCombiner.testEncoder(SummingCombiner.STRING_ENCODER, Long.MAX_VALUE);
    TypedValueCombiner.testEncoder(SummingCombiner.STRING_ENCODER, Long.MIN_VALUE);
    TypedValueCombiner.testEncoder(SummingCombiner.STRING_ENCODER, 42L);
    TypedValueCombiner.testEncoder(SummingCombiner.STRING_ENCODER, -42L);
    TypedValueCombiner.testEncoder(SummingCombiner.STRING_ENCODER, 0L);

    TypedValueCombiner.testEncoder(SummingArrayCombiner.FIXED_LONG_ARRAY_ENCODER,
        Arrays.asList(0L, -1L, 10L, Long.MAX_VALUE, Long.MIN_VALUE));
    TypedValueCombiner.testEncoder(SummingArrayCombiner.VAR_LONG_ARRAY_ENCODER,
        Arrays.asList(0L, -1L, 10L, Long.MAX_VALUE, Long.MIN_VALUE));
    TypedValueCombiner.testEncoder(SummingArrayCombiner.STRING_ARRAY_ENCODER,
        Arrays.asList(0L, -1L, 10L, Long.MAX_VALUE, Long.MIN_VALUE));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\user\CombinerTest.java
  public void testAdds() {
    assertEquals(LongCombiner.safeAdd(Long.MIN_VALUE + 5, -10), Long.MIN_VALUE);
    assertEquals(LongCombiner.safeAdd(Long.MAX_VALUE - 5, 10), Long.MAX_VALUE);
    assertEquals(LongCombiner.safeAdd(Long.MIN_VALUE + 5, -5), Long.MIN_VALUE);
    assertEquals(LongCombiner.safeAdd(Long.MAX_VALUE - 5, 5), Long.MAX_VALUE);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\user\CombinerTest.java
  public void testDeleteHandling() throws Exception {
    Encoder<Long> encoder = LongCombiner.STRING_ENCODER;

    TreeMap<Key,Value> input = new TreeMap<>();

    IteratorEnvironment paritalMajcIe = new CombinerIteratorEnvironment(IteratorScope.majc, false);
    IteratorEnvironment fullMajcIe = new CombinerIteratorEnvironment(IteratorScope.majc, true);

    // keys that aggregate
    newKeyValue(input, 1, 1, 1, 1, false, 4L, encoder);
    newKeyValue(input, 1, 1, 1, 2, true, 0L, encoder);
    newKeyValue(input, 1, 1, 1, 3, false, 2L, encoder);
    newKeyValue(input, 1, 1, 1, 4, false, 9L, encoder);

    TreeMap<Key,Value> expected = new TreeMap<>();
    newKeyValue(expected, 1, 1, 1, 1, false, 4L, encoder);
    newKeyValue(expected, 1, 1, 1, 2, true, 0L, encoder);
    newKeyValue(expected, 1, 1, 1, 4, false, 11L, encoder);

    runDeleteHandlingTest(input, input, true, paritalMajcIe);
    runDeleteHandlingTest(input, expected, true, fullMajcIe);
    runDeleteHandlingTest(input, expected, true, SCAN_IE);

    runDeleteHandlingTest(input, expected, false, fullMajcIe, true);
    runDeleteHandlingTest(input, expected, false, SCAN_IE);

    runDeleteHandlingTest(input, expected, false, paritalMajcIe, true);
    runDeleteHandlingTest(input, expected, null, paritalMajcIe, true);
    runDeleteHandlingTest(input, expected, null, fullMajcIe, true);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\user\CombinerTest.java
  public void testLossyOption() throws IOException {
    Encoder<List<Long>> encoder = new SummingArrayCombiner.VarLongArrayEncoder();

    TreeMap<Key,Value> tm1 = new TreeMap<>();

    // keys that aggregate
    tm1.put(newKey(1, 1, 1, 1, false), new Value("badValue"));
    newKeyValue(tm1, 1, 1, 1, 2, false, nal(3L, 4L, 5L), encoder);
    newKeyValue(tm1, 1, 1, 1, 3, false, nal(), encoder);

    SummingArrayCombiner summingArrayCombiner = new SummingArrayCombiner();
    IteratorSetting iteratorSetting = new IteratorSetting(1, SummingArrayCombiner.class);
    SummingArrayCombiner.setEncodingType(iteratorSetting, SummingArrayCombiner.Type.VARLEN);
    Combiner.setColumns(iteratorSetting,
        Collections.singletonList(new IteratorSetting.Column("cf001")));

    // lossy = true so ignore bad value
    TypedValueCombiner.setLossyness(iteratorSetting, true);
    assertTrue(summingArrayCombiner.validateOptions(iteratorSetting.getOptions()));

    summingArrayCombiner.init(new SortedMapIterator(tm1), iteratorSetting.getOptions(), SCAN_IE);
    summingArrayCombiner.seek(new Range(), EMPTY_COL_FAMS, false);

    assertTrue(summingArrayCombiner.hasTop());
    assertEquals(newKey(1, 1, 1, 3), summingArrayCombiner.getTopKey());
    assertBytesEqual(encoder.encode(nal(3L, 4L, 5L)), summingArrayCombiner.getTopValue().get());

    summingArrayCombiner.next();

    assertFalse(summingArrayCombiner.hasTop());

    // lossy = false throw error for bad value
    TypedValueCombiner.setLossyness(iteratorSetting, false);
    assertTrue(summingArrayCombiner.validateOptions(iteratorSetting.getOptions()));

    summingArrayCombiner.init(new SortedMapIterator(tm1), iteratorSetting.getOptions(), SCAN_IE);
    try {
      summingArrayCombiner.seek(new Range(), EMPTY_COL_FAMS, false);
      fail("ValueFormatException should have been thrown");
    } catch (ValueFormatException e) {}
  }
}
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\user\FilterTest.java
  public void test1() throws IOException {
    Text colf = new Text("a");
    Text colq = new Text("b");
    Value dv = new Value();
    TreeMap<Key,Value> tm = new TreeMap<>();

    for (int i = 0; i < 1000; i++) {
      Key k = new Key(new Text(String.format("%03d", i)), colf, colq);
      tm.put(k, dv);
    }
    assertEquals(1000, tm.size());

    Filter filter1 = new SimpleFilter();
    filter1.init(new SortedMapIterator(tm), EMPTY_OPTS, null);
    filter1.seek(new Range(), EMPTY_COL_FAMS, false);
    int size = size(filter1);
    assertEquals(100, size);

    Filter fi = new SimpleFilter();
    fi.init(new SortedMapIterator(tm), EMPTY_OPTS, null);
    Key k = new Key(new Text("500"));
    fi.seek(new Range(k, null), EMPTY_COL_FAMS, false);
    size = size(fi);
    assertEquals(50, size);

    filter1 = new SimpleFilter();
    filter1.init(new SortedMapIterator(tm), EMPTY_OPTS, null);
    Filter filter2 = new SimpleFilter2();
    filter2.init(filter1, EMPTY_OPTS, null);
    filter2.seek(new Range(), EMPTY_COL_FAMS, false);
    size = size(filter2);
    assertEquals(0, size);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\user\FilterTest.java
  public void test1neg() throws IOException {
    Text colf = new Text("a");
    Text colq = new Text("b");
    Value dv = new Value();
    TreeMap<Key,Value> tm = new TreeMap<>();

    for (int i = 0; i < 1000; i++) {
      Key k = new Key(new Text(String.format("%03d", i)), colf, colq);
      tm.put(k, dv);
    }
    assertEquals(1000, tm.size());

    Filter filter = new SimpleFilter();

    IteratorSetting is = new IteratorSetting(1, SimpleFilter.class);
    Filter.setNegate(is, true);

    filter.init(new SortedMapIterator(tm), is.getOptions(), null);
    filter.seek(new Range(), EMPTY_COL_FAMS, false);
    int size = size(filter);
    assertEquals(900, size);

    filter.init(new SortedMapIterator(tm), is.getOptions(), null);
    Key k = new Key(new Text("500"));
    filter.seek(new Range(k, null), EMPTY_COL_FAMS, false);
    size = size(filter);
    assertEquals(450, size);

    filter.init(new SortedMapIterator(tm), EMPTY_OPTS, null);
    Filter filter2 = new SimpleFilter2();
    filter2.init(filter, is.getOptions(), null);
    filter2.seek(new Range(), EMPTY_COL_FAMS, false);
    size = size(filter2);
    assertEquals(100, size);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\user\FilterTest.java
  public void testDeepCopy() throws IOException {
    Text colf = new Text("a");
    Text colq = new Text("b");
    Value dv = new Value();
    TreeMap<Key,Value> tm = new TreeMap<>();

    for (int i = 0; i < 1000; i++) {
      Key k = new Key(new Text(String.format("%03d", i)), colf, colq);
      tm.put(k, dv);
    }
    assertEquals(1000, tm.size());

    SimpleFilter filter = new SimpleFilter();

    IteratorSetting is = new IteratorSetting(1, SimpleFilter.class);
    Filter.setNegate(is, true);

    filter.init(new SortedMapIterator(tm), is.getOptions(), null);
    SortedKeyValueIterator<Key,Value> copy = filter.deepCopy(null);
    filter.seek(new Range(), EMPTY_COL_FAMS, false);
    int size = size(filter);
    assertEquals(900, size);
    copy.seek(new Range(), EMPTY_COL_FAMS, false);
    size = size(copy);
    assertEquals(900, size);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\user\FilterTest.java
  public void test2() throws IOException {
    Text colf = new Text("a");
    Text colq = new Text("b");
    Value dv = new Value();
    TreeMap<Key,Value> tm = new TreeMap<>();

    for (int i = 0; i < 1000; i++) {
      Key k = new Key(new Text(String.format("%03d", i)), colf, colq);
      k.setTimestamp(i);
      tm.put(k, dv);
    }
    assertEquals(1000, tm.size());

    SortedKeyValueIterator<Key,Value> a = new AgeOffFilter();
    IteratorSetting is = new IteratorSetting(1, AgeOffFilter.class);
    AgeOffFilter.setTTL(is, 101L);
    AgeOffFilter.setCurrentTime(is, 1001L);
    AgeOffFilter.setNegate(is, true);
    assertTrue(((AgeOffFilter) a).validateOptions(is.getOptions()));
    try {
      ((AgeOffFilter) a).validateOptions(EMPTY_OPTS);
      fail();
    } catch (IllegalArgumentException e) {}
    a.init(new SortedMapIterator(tm), is.getOptions(), null);
    a = a.deepCopy(null);
    SortedKeyValueIterator<Key,Value> copy = a.deepCopy(null);
    a.seek(new Range(), EMPTY_COL_FAMS, false);
    assertEquals(900, size(a));
    copy.seek(new Range(), EMPTY_COL_FAMS, false);
    assertEquals(900, size(copy));
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\user\FilterTest.java
  public void test2a() throws IOException {
    Text colf = new Text("a");
    Text colq = new Text("b");
    Value dv = new Value();
    TreeMap<Key,Value> tm = new TreeMap<>();
    IteratorSetting is = new IteratorSetting(1, ColumnAgeOffFilter.class);
    ColumnAgeOffFilter.addTTL(is, new IteratorSetting.Column("a"), 901L);
    long ts = System.currentTimeMillis();

    for (long i = 0; i < 1000; i++) {
      Key k = new Key(new Text(String.format("%03d", i)), colf, colq, ts - i);
      tm.put(k, dv);
    }
    assertEquals(1000, tm.size());

    ColumnAgeOffFilter a = new ColumnAgeOffFilter();
    assertTrue(a.validateOptions(is.getOptions()));
    a.init(new SortedMapIterator(tm), is.getOptions(), new DefaultIteratorEnvironment());
    a.overrideCurrentTime(ts);
    a.seek(new Range(), EMPTY_COL_FAMS, false);
    assertEquals(902, size(a));

    ColumnAgeOffFilter.addTTL(is, new IteratorSetting.Column("a", "b"), 101L);
    a.init(new SortedMapIterator(tm), is.getOptions(), new DefaultIteratorEnvironment());
    a.overrideCurrentTime(ts);
    a.seek(new Range(), EMPTY_COL_FAMS, false);
    assertEquals(102, size(a));

    ColumnAgeOffFilter.removeTTL(is, new IteratorSetting.Column("a", "b"));
    a.init(new SortedMapIterator(tm), is.getOptions(), new DefaultIteratorEnvironment());
    a = (ColumnAgeOffFilter) a.deepCopy(null);
    a.overrideCurrentTime(ts);
    a.seek(new Range(), EMPTY_COL_FAMS, false);
    assertEquals(902, size(a));
  }

  /**
   * Test for fix to ACCUMULO-1604: ColumnAgeOffFilter was throwing an error when using negate
   */
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\user\FilterTest.java
  public void test2aNegate() throws IOException {
    Text colf = new Text("a");
    Text colq = new Text("b");
    Value dv = new Value();
    TreeMap<Key,Value> tm = new TreeMap<>();
    IteratorSetting is = new IteratorSetting(1, ColumnAgeOffFilter.class);
    ColumnAgeOffFilter.addTTL(is, new IteratorSetting.Column("a"), 901L);
    ColumnAgeOffFilter.setNegate(is, true);
    long ts = System.currentTimeMillis();

    for (long i = 0; i < 1000; i++) {
      Key k = new Key(new Text(String.format("%03d", i)), colf, colq, ts - i);
      tm.put(k, dv);
    }
    assertEquals(1000, tm.size());

    ColumnAgeOffFilter a = new ColumnAgeOffFilter();
    assertTrue(a.validateOptions(is.getOptions()));
    a.init(new SortedMapIterator(tm), is.getOptions(), new DefaultIteratorEnvironment());
    a.overrideCurrentTime(ts);
    a.seek(new Range(), EMPTY_COL_FAMS, false);
    assertEquals(98, size(a));

    ColumnAgeOffFilter.addTTL(is, new IteratorSetting.Column("a", "b"), 101L);
    a.init(new SortedMapIterator(tm), is.getOptions(), new DefaultIteratorEnvironment());
    a.overrideCurrentTime(ts);
    a.seek(new Range(), EMPTY_COL_FAMS, false);
    assertEquals(898, size(a));

    ColumnAgeOffFilter.removeTTL(is, new IteratorSetting.Column("a", "b"));
    a.init(new SortedMapIterator(tm), is.getOptions(), new DefaultIteratorEnvironment());
    a = (ColumnAgeOffFilter) a.deepCopy(null);
    a.overrideCurrentTime(ts);
    a.seek(new Range(), EMPTY_COL_FAMS, false);
    assertEquals(98, size(a));
  }

  /**
   * Test for fix to ACCUMULO-1604: ColumnAgeOffFilter was throwing an error when using negate Test
   * case for when "negate" is an actual column name
   */
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\user\FilterTest.java
  public void test2b() throws IOException {
    Text colf = new Text("negate");
    Text colq = new Text("b");
    Value dv = new Value();
    TreeMap<Key,Value> tm = new TreeMap<>();
    IteratorSetting is = new IteratorSetting(1, ColumnAgeOffFilter.class);
    ColumnAgeOffFilter.addTTL(is, new IteratorSetting.Column("negate"), 901L);
    long ts = System.currentTimeMillis();

    for (long i = 0; i < 1000; i++) {
      Key k = new Key(new Text(String.format("%03d", i)), colf, colq, ts - i);
      tm.put(k, dv);
    }
    assertEquals(1000, tm.size());

    ColumnAgeOffFilter a = new ColumnAgeOffFilter();
    assertTrue(a.validateOptions(is.getOptions()));
    a.init(new SortedMapIterator(tm), is.getOptions(), new DefaultIteratorEnvironment());
    a.overrideCurrentTime(ts);
    a.seek(new Range(), EMPTY_COL_FAMS, false);
    assertEquals(902, size(a));

    ColumnAgeOffFilter.addTTL(is, new IteratorSetting.Column("negate", "b"), 101L);
    a.init(new SortedMapIterator(tm), is.getOptions(), new DefaultIteratorEnvironment());
    a.overrideCurrentTime(ts);
    a.seek(new Range(), EMPTY_COL_FAMS, false);
    assertEquals(102, size(a));

    ColumnAgeOffFilter.removeTTL(is, new IteratorSetting.Column("negate", "b"));
    a.init(new SortedMapIterator(tm), is.getOptions(), new DefaultIteratorEnvironment());
    a = (ColumnAgeOffFilter) a.deepCopy(null);
    a.overrideCurrentTime(ts);
    a.seek(new Range(), EMPTY_COL_FAMS, false);
    assertEquals(902, size(a));
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\user\FilterTest.java
  public void test3() throws IOException {
    Value dv = new Value();
    TreeMap<Key,Value> tm = new TreeMap<>();
    HashSet<Column> hsc = new HashSet<>();
    hsc.add(new Column("c".getBytes(), null, null));

    Text colf1 = new Text("a");
    Text colq1 = new Text("b");
    Text colf2 = new Text("c");
    Text colq2 = new Text("d");
    Text colf;
    Text colq;
    for (int i = 0; i < 1000; i++) {
      if (Math.abs(Math.ceil(i / 2.0) - i / 2.0) < .001) {
        colf = colf1;
        colq = colq1;
      } else {
        colf = colf2;
        colq = colq2;
      }
      Key k = new Key(new Text(String.format("%03d", i)), colf, colq);
      k.setTimestamp(157L);
      tm.put(k, dv);
    }
    assertEquals(1000, tm.size());

    SortedKeyValueIterator<Key,Value> a =
        ColumnQualifierFilter.wrap(new SortedMapIterator(tm), hsc);
    a.seek(new Range(), EMPTY_COL_FAMS, false);
    assertEquals(1000, size(a));

    hsc = new HashSet<>();
    hsc.add(new Column("a".getBytes(), "b".getBytes(), null));
    a = ColumnQualifierFilter.wrap(new SortedMapIterator(tm), hsc);
    a.seek(new Range(), EMPTY_COL_FAMS, false);
    int size = size(a);
    assertEquals(500, size);

    hsc = new HashSet<>();
    a = ColumnQualifierFilter.wrap(new SortedMapIterator(tm), hsc);
    a.seek(new Range(), EMPTY_COL_FAMS, false);
    size = size(a);
    assertEquals(1000, size);
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\user\FilterTest.java
  public void test4() throws IOException {
    Value dv = new Value();
    TreeMap<Key,Value> tm = new TreeMap<>();

    ColumnVisibility le1 = new ColumnVisibility("L1");
    ColumnVisibility le2 = new ColumnVisibility("L0&OFFICIAL");
    ColumnVisibility le3 = new ColumnVisibility("L1&L2");
    ColumnVisibility le4 = new ColumnVisibility("L1&L2&G1");
    ColumnVisibility[] lea = {le1, le2, le3, le4};
    Authorizations auths = new Authorizations("L1", "L2", "L0", "OFFICIAL");

    for (int i = 0; i < 1000; i++) {
      Key k = new Key(new Text(String.format("%03d", i)), new Text("a"), new Text("b"),
          new Text(lea[i % 4].getExpression()));
      tm.put(k, dv);
    }
    assertEquals(1000, tm.size());

    SortedKeyValueIterator<Key,Value> a =
        VisibilityFilter.wrap(new SortedMapIterator(tm), auths, le2.getExpression());
    a.seek(new Range(), EMPTY_COL_FAMS, false);
    int size = size(a);
    assertEquals(750, size);
  }

  private SortedKeyValueIterator<Key,Value> ncqf(TreeMap<Key,Value> tm, Column... columns)
      throws IOException {
    HashSet<Column> hsc = new HashSet<>();

    Collections.addAll(hsc, columns);

    SortedKeyValueIterator<Key,Value> a =
        ColumnQualifierFilter.wrap(new SortedMapIterator(tm), hsc);
    a.seek(new Range(), EMPTY_COL_FAMS, false);
    return a;
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\user\FilterTest.java
  public void test5() throws IOException {
    Value dv = new Value();
    TreeMap<Key,Value> tm = new TreeMap<>();

    tm.put(new Key(new Text(String.format("%03d", 1)), new Text("a"), new Text("x")), dv);
    tm.put(new Key(new Text(String.format("%03d", 2)), new Text("a"), new Text("y")), dv);
    tm.put(new Key(new Text(String.format("%03d", 3)), new Text("a"), new Text("z")), dv);
    tm.put(new Key(new Text(String.format("%03d", 4)), new Text("b"), new Text("x")), dv);
    tm.put(new Key(new Text(String.format("%03d", 5)), new Text("b"), new Text("y")), dv);

    assertEquals(5, tm.size());

    int size = size(ncqf(tm, new Column("c".getBytes(), null, null)));
    assertEquals(5, size);

    size = size(ncqf(tm, new Column("a".getBytes(), null, null)));
    assertEquals(5, size);

    size = size(ncqf(tm, new Column("a".getBytes(), "x".getBytes(), null)));
    assertEquals(1, size);

    size = size(ncqf(tm, new Column("a".getBytes(), "x".getBytes(), null),
        new Column("b".getBytes(), "x".getBytes(), null)));
    assertEquals(2, size);

    size = size(ncqf(tm, new Column("a".getBytes(), "x".getBytes(), null),
        new Column("b".getBytes(), "y".getBytes(), null)));
    assertEquals(2, size);

    size = size(ncqf(tm, new Column("a".getBytes(), "x".getBytes(), null),
        new Column("b".getBytes(), null, null)));
    assertEquals(3, size);
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\user\FilterTest.java
  public void testNoVisFilter() throws IOException {
    TreeMap<Key,Value> tm = new TreeMap<>();
    Value v = new Value();
    for (int i = 0; i < 1000; i++) {
      Key k = new Key(String.format("%03d", i), "a", "b", i % 10 == 0 ? "vis" : "");
      tm.put(k, v);
    }
    assertEquals(1000, tm.size());

    Filter filter = new ReqVisFilter();
    filter.init(new SortedMapIterator(tm), EMPTY_OPTS, null);
    filter.seek(new Range(), EMPTY_COL_FAMS, false);
    int size = size(filter);
    assertEquals(100, size);
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\user\FilterTest.java
  public void testTimestampFilter() throws IOException, ParseException {
    Text colf = new Text("a");
    Text colq = new Text("b");
    Value dv = new Value();
    TreeMap<Key,Value> tm = new TreeMap<>();

    for (int i = 0; i < 100; i++) {
      Key k = new Key(new Text(String.format("%02d", i)), colf, colq);
      k.setTimestamp(i);
      tm.put(k, dv);
    }
    assertEquals(100, tm.size());

    SimpleDateFormat dateParser = new SimpleDateFormat("yyyyMMddHHmmssz");
    long baseTime = dateParser.parse("19990101000000GMT").getTime();
    tm.clear();
    for (int i = 0; i < 100; i++) {
      Key k = new Key(new Text(String.format("%02d", i)), colf, colq);
      k.setTimestamp(baseTime + (i * 1000));
      tm.put(k, dv);
    }
    assertEquals(100, tm.size());
    TimestampFilter a = new TimestampFilter();
    IteratorSetting is = new IteratorSetting(1, TimestampFilter.class);
    TimestampFilter.setRange(is, "19990101010011GMT+01:00", "19990101010031GMT+01:00");
    a.init(new SortedMapIterator(tm), is.getOptions(), null);
    a = (TimestampFilter) a.deepCopy(null);
    a.seek(new Range(), EMPTY_COL_FAMS, false);
    assertEquals(21, size(a));
    TimestampFilter.setRange(is, baseTime + 11000, baseTime + 31000);
    a.init(new SortedMapIterator(tm), is.getOptions(), null);
    a.seek(new Range(), EMPTY_COL_FAMS, false);
    assertEquals(21, size(a));

    TimestampFilter.setEnd(is, "19990101000031GMT", false);
    a.init(new SortedMapIterator(tm), is.getOptions(), null);
    a.seek(new Range(), EMPTY_COL_FAMS, false);
    assertEquals(20, size(a));

    TimestampFilter.setStart(is, "19990101000011GMT", false);
    a.init(new SortedMapIterator(tm), is.getOptions(), null);
    a.seek(new Range(), EMPTY_COL_FAMS, false);
    assertEquals(19, size(a));

    TimestampFilter.setEnd(is, "19990101000031GMT", true);
    a.init(new SortedMapIterator(tm), is.getOptions(), null);
    a.seek(new Range(), EMPTY_COL_FAMS, false);
    assertEquals(20, size(a));

    is.clearOptions();
    TimestampFilter.setStart(is, "19990101000011GMT", true);
    a.init(new SortedMapIterator(tm), is.getOptions(), null);
    a.seek(new Range(), EMPTY_COL_FAMS, false);
    assertEquals(89, size(a));

    TimestampFilter.setStart(is, "19990101000011GMT", false);
    assertTrue(a.validateOptions(is.getOptions()));
    a.init(new SortedMapIterator(tm), is.getOptions(), null);
    a.seek(new Range(), EMPTY_COL_FAMS, false);
    assertEquals(88, size(a));

    is.clearOptions();
    TimestampFilter.setEnd(is, "19990101000031GMT", true);
    a.init(new SortedMapIterator(tm), is.getOptions(), null);
    a.seek(new Range(), EMPTY_COL_FAMS, false);
    assertEquals(32, size(a));

    TimestampFilter.setEnd(is, "19990101000031GMT", false);
    assertTrue(a.validateOptions(is.getOptions()));
    a.init(new SortedMapIterator(tm), is.getOptions(), null);
    a.seek(new Range(), EMPTY_COL_FAMS, false);
    assertEquals(31, size(a));

    TimestampFilter.setEnd(is, 253402300800001L, true);
    a.init(new SortedMapIterator(tm), is.getOptions(), null);

    is.clearOptions();
    is.addOption(TimestampFilter.START, "19990101000011GMT");
    assertTrue(a.validateOptions(is.getOptions()));
    a.init(new SortedMapIterator(tm), is.getOptions(), null);
    a.seek(new Range(), EMPTY_COL_FAMS, false);
    assertEquals(89, size(a));

    is.clearOptions();
    is.addOption(TimestampFilter.END, "19990101000031GMT");
    assertTrue(a.validateOptions(is.getOptions()));
    a.init(new SortedMapIterator(tm), is.getOptions(), null);
    a.seek(new Range(), EMPTY_COL_FAMS, false);
    assertEquals(32, size(a));

    try {
      a.validateOptions(EMPTY_OPTS);
      fail();
    } catch (IllegalArgumentException e) {}
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\user\FilterTest.java
  public void testDeletes() throws IOException {
    Text colf = new Text("a");
    Text colq = new Text("b");
    Value dv = new Value();
    TreeMap<Key,Value> tm = new TreeMap<>();

    Key k = new Key(new Text("0"), colf, colq);
    tm.put(k, dv);
    k = new Key(new Text("1"), colf, colq, 10);
    k.setDeleted(true);
    tm.put(k, dv);
    k = new Key(new Text("1"), colf, colq, 5);
    tm.put(k, dv);
    k = new Key(new Text("10"), colf, colq);
    tm.put(k, dv);

    assertEquals(4, tm.size());

    Filter filter = new SimpleFilter();
    filter.init(new SortedMapIterator(tm), EMPTY_OPTS, null);
    filter.seek(new Range(), EMPTY_COL_FAMS, false);
    int size = size(filter);
    assertEquals(3, size);

  }
}
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\user\GrepIteratorTest.java
  public void test() throws IOException {
    GrepIterator gi = new GrepIterator();
    IteratorSetting is = new IteratorSetting(1, GrepIterator.class);
    GrepIterator.setTerm(is, "ab");
    gi.init(new SortedMapIterator(input), is.getOptions(), null);
    gi.seek(new Range(), EMPTY_COL_FAMS, false);
    checkEntries(gi, output);
    GrepIterator.setTerm(is, "cde");
    gi.init(new SortedMapIterator(input), is.getOptions(), null);
    gi.deepCopy(null);
    gi.seek(new Range(), EMPTY_COL_FAMS, false);
    checkEntries(gi, output);
    GrepIterator.setTerm(is, "def");
    gi.init(new SortedMapIterator(input), is.getOptions(), null);
    gi.seek(new Range(), EMPTY_COL_FAMS, false);
    checkEntries(gi, output);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\user\IndexedDocIteratorTest.java
  public void test1() throws IOException {
    columnFamilies = new Text[2];
    columnFamilies[0] = new Text("CC");
    columnFamilies[1] = new Text("EEE");
    otherColumnFamilies = new Text[4];
    otherColumnFamilies[0] = new Text("A");
    otherColumnFamilies[1] = new Text("B");
    otherColumnFamilies[2] = new Text("D");
    otherColumnFamilies[3] = new Text("F");

    float hitRatio = 0.5f;
    HashSet<Text> docs = new HashSet<>();
    SortedKeyValueIterator<Key,Value> source = createIteratorStack(hitRatio, NUM_ROWS, NUM_DOCIDS,
        columnFamilies, otherColumnFamilies, docs);
    IteratorSetting is = new IteratorSetting(1, IndexedDocIterator.class);
    IndexedDocIterator.setColumnFamilies(is, columnFamilies);
    IndexedDocIterator.setColfs(is, indexColf.toString(), docColfPrefix);
    IndexedDocIterator iter = new IndexedDocIterator();
    iter.init(source, is.getOptions(), env);
    iter.seek(new Range(), EMPTY_COL_FAMS, false);
    int hitCount = 0;
    while (iter.hasTop()) {
      hitCount++;
      Key k = iter.getTopKey();
      Value v = iter.getTopValue();
      // System.out.println(k.toString());
      // System.out.println(iter.getDocID(k));

      Text d = IndexedDocIterator.parseDocID(k);
      assertTrue(docs.contains(d));
      assertTrue(new String(v.get()).endsWith(" docID=" + d));

      iter.next();
    }
    assertEquals(hitCount, docs.size());
    cleanup();
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\user\IndexedDocIteratorTest.java
  public void test2() throws IOException {
    columnFamilies = new Text[3];
    columnFamilies[0] = new Text("A");
    columnFamilies[1] = new Text("E");
    columnFamilies[2] = new Text("G");
    otherColumnFamilies = new Text[4];
    otherColumnFamilies[0] = new Text("B");
    otherColumnFamilies[1] = new Text("C");
    otherColumnFamilies[2] = new Text("D");
    otherColumnFamilies[3] = new Text("F");

    float hitRatio = 0.5f;
    HashSet<Text> docs = new HashSet<>();
    SortedKeyValueIterator<Key,Value> source = createIteratorStack(hitRatio, NUM_ROWS, NUM_DOCIDS,
        columnFamilies, otherColumnFamilies, docs);
    IteratorSetting is = new IteratorSetting(1, IndexedDocIterator.class);
    IndexedDocIterator.setColumnFamilies(is, columnFamilies);
    IndexedDocIterator.setColfs(is, indexColf.toString(), docColfPrefix);
    IndexedDocIterator iter = new IndexedDocIterator();
    iter.init(source, is.getOptions(), env);
    iter.seek(new Range(), EMPTY_COL_FAMS, false);
    int hitCount = 0;
    while (iter.hasTop()) {
      hitCount++;
      Key k = iter.getTopKey();
      Value v = iter.getTopValue();
      Text d = IndexedDocIterator.parseDocID(k);
      assertTrue(docs.contains(d));
      assertTrue(new String(v.get()).endsWith(" docID=" + d));
      iter.next();
    }
    assertEquals(hitCount, docs.size());
    cleanup();
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\user\IndexedDocIteratorTest.java
  public void test3() throws IOException {
    columnFamilies = new Text[6];
    columnFamilies[0] = new Text("C");
    columnFamilies[1] = new Text("E");
    columnFamilies[2] = new Text("G");
    columnFamilies[3] = new Text("H");
    columnFamilies[4] = new Text("I");
    columnFamilies[5] = new Text("J");
    otherColumnFamilies = new Text[4];
    otherColumnFamilies[0] = new Text("A");
    otherColumnFamilies[1] = new Text("B");
    otherColumnFamilies[2] = new Text("D");
    otherColumnFamilies[3] = new Text("F");

    float hitRatio = 0.5f;
    HashSet<Text> docs = new HashSet<>();
    SortedKeyValueIterator<Key,Value> source = createIteratorStack(hitRatio, NUM_ROWS, NUM_DOCIDS,
        columnFamilies, otherColumnFamilies, docs);
    SortedKeyValueIterator<Key,Value> source2 = createIteratorStack(hitRatio, NUM_ROWS, NUM_DOCIDS,
        columnFamilies, otherColumnFamilies, docs);
    ArrayList<SortedKeyValueIterator<Key,Value>> sourceIters = new ArrayList<>();
    sourceIters.add(source);
    sourceIters.add(source2);
    MultiIterator mi = new MultiIterator(sourceIters, false);
    IteratorSetting is = new IteratorSetting(1, IndexedDocIterator.class);
    IndexedDocIterator.setColumnFamilies(is, columnFamilies);
    IndexedDocIterator.setColfs(is, indexColf.toString(), docColfPrefix);
    IndexedDocIterator iter = new IndexedDocIterator();
    iter.init(mi, is.getOptions(), env);
    iter.seek(new Range(), EMPTY_COL_FAMS, false);
    int hitCount = 0;
    while (iter.hasTop()) {
      hitCount++;
      Key k = iter.getTopKey();
      Value v = iter.getTopValue();
      Text d = IndexedDocIterator.parseDocID(k);
      assertTrue(docs.contains(d));
      assertTrue(new String(v.get()).endsWith(" docID=" + d));
      iter.next();
    }
    assertEquals(hitCount, docs.size());
    cleanup();
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\user\IndexedDocIteratorTest.java
  public void test4() throws IOException {
    columnFamilies = new Text[3];
    boolean[] notFlags = new boolean[3];
    columnFamilies[0] = new Text("A");
    notFlags[0] = true;
    columnFamilies[1] = new Text("E");
    notFlags[1] = false;
    columnFamilies[2] = new Text("G");
    notFlags[2] = true;
    Text[] negatedColumns = new Text[2];
    negatedColumns[0] = new Text("A");
    negatedColumns[1] = new Text("G");
    otherColumnFamilies = new Text[4];
    otherColumnFamilies[0] = new Text("B");
    otherColumnFamilies[1] = new Text("C");
    otherColumnFamilies[2] = new Text("D");
    otherColumnFamilies[3] = new Text("F");

    float hitRatio = 0.5f;
    HashSet<Text> docs = new HashSet<>();
    SortedKeyValueIterator<Key,Value> source = createIteratorStack(hitRatio, NUM_ROWS, NUM_DOCIDS,
        columnFamilies, otherColumnFamilies, docs, negatedColumns);
    IteratorSetting is = new IteratorSetting(1, IndexedDocIterator.class);
    IndexedDocIterator.setColumnFamilies(is, columnFamilies, notFlags);
    IndexedDocIterator.setColfs(is, indexColf.toString(), docColfPrefix);
    IndexedDocIterator iter = new IndexedDocIterator();
    iter.init(source, is.getOptions(), env);
    iter.seek(new Range(), EMPTY_COL_FAMS, false);
    int hitCount = 0;
    while (iter.hasTop()) {
      hitCount++;
      Key k = iter.getTopKey();
      Value v = iter.getTopValue();
      Text d = IndexedDocIterator.parseDocID(k);
      assertTrue(docs.contains(d));
      assertTrue(new String(v.get()).endsWith(" docID=" + d));
      iter.next();
    }
    assertEquals(hitCount, docs.size());
    cleanup();
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\user\IntersectingIteratorTest.java
  public void test1() throws IOException {
    columnFamilies = new Text[2];
    columnFamilies[0] = new Text("C");
    columnFamilies[1] = new Text("E");
    otherColumnFamilies = new Text[4];
    otherColumnFamilies[0] = new Text("A");
    otherColumnFamilies[1] = new Text("B");
    otherColumnFamilies[2] = new Text("D");
    otherColumnFamilies[3] = new Text("F");

    float hitRatio = 0.5f;
    SortedKeyValueIterator<Key,Value> source = createIteratorStack(hitRatio, NUM_ROWS, NUM_DOCIDS,
        columnFamilies, otherColumnFamilies, docs);
    IteratorSetting is = new IteratorSetting(1, IntersectingIterator.class);
    IntersectingIterator.setColumnFamilies(is, columnFamilies);
    IntersectingIterator iter = new IntersectingIterator();
    iter.init(source, is.getOptions(), env);
    iter.seek(new Range(), EMPTY_COL_FAMS, false);
    int hitCount = 0;
    while (iter.hasTop()) {
      hitCount++;
      Key k = iter.getTopKey();
      assertTrue(docs.contains(k.getColumnQualifier()));
      iter.next();
    }
    assertEquals(hitCount, docs.size());
    cleanup();
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\user\IntersectingIteratorTest.java
  public void test2() throws IOException {
    columnFamilies = new Text[3];
    columnFamilies[0] = new Text("A");
    columnFamilies[1] = new Text("E");
    columnFamilies[2] = new Text("G");
    otherColumnFamilies = new Text[4];
    otherColumnFamilies[0] = new Text("B");
    otherColumnFamilies[1] = new Text("C");
    otherColumnFamilies[2] = new Text("D");
    otherColumnFamilies[3] = new Text("F");

    float hitRatio = 0.5f;
    SortedKeyValueIterator<Key,Value> source = createIteratorStack(hitRatio, NUM_ROWS, NUM_DOCIDS,
        columnFamilies, otherColumnFamilies, docs);
    IteratorSetting is = new IteratorSetting(1, IntersectingIterator.class);
    IntersectingIterator.setColumnFamilies(is, columnFamilies);
    IntersectingIterator iter = new IntersectingIterator();
    iter.init(source, is.getOptions(), env);
    iter.seek(new Range(), EMPTY_COL_FAMS, false);
    int hitCount = 0;
    while (iter.hasTop()) {
      hitCount++;
      Key k = iter.getTopKey();
      assertTrue(docs.contains(k.getColumnQualifier()));
      iter.next();
    }
    assertEquals(hitCount, docs.size());
    cleanup();
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\user\IntersectingIteratorTest.java
  public void test3() throws IOException {
    columnFamilies = new Text[6];
    columnFamilies[0] = new Text("C");
    columnFamilies[1] = new Text("E");
    columnFamilies[2] = new Text("G");
    columnFamilies[3] = new Text("H");
    columnFamilies[4] = new Text("I");
    columnFamilies[5] = new Text("J");
    otherColumnFamilies = new Text[4];
    otherColumnFamilies[0] = new Text("A");
    otherColumnFamilies[1] = new Text("B");
    otherColumnFamilies[2] = new Text("D");
    otherColumnFamilies[3] = new Text("F");

    float hitRatio = 0.5f;
    SortedKeyValueIterator<Key,Value> source = createIteratorStack(hitRatio, NUM_ROWS, NUM_DOCIDS,
        columnFamilies, otherColumnFamilies, docs);
    SortedKeyValueIterator<Key,Value> source2 = createIteratorStack(hitRatio, NUM_ROWS, NUM_DOCIDS,
        columnFamilies, otherColumnFamilies, docs);
    ArrayList<SortedKeyValueIterator<Key,Value>> sourceIters = new ArrayList<>();
    sourceIters.add(source);
    sourceIters.add(source2);
    MultiIterator mi = new MultiIterator(sourceIters, false);
    IteratorSetting is = new IteratorSetting(1, IntersectingIterator.class);
    IntersectingIterator.setColumnFamilies(is, columnFamilies);
    IntersectingIterator iter = new IntersectingIterator();
    iter.init(mi, is.getOptions(), env);
    iter.seek(new Range(), EMPTY_COL_FAMS, false);
    int hitCount = 0;
    while (iter.hasTop()) {
      hitCount++;
      Key k = iter.getTopKey();
      assertTrue(docs.contains(k.getColumnQualifier()));
      iter.next();
    }
    assertEquals(hitCount, docs.size());
    cleanup();
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\user\IntersectingIteratorTest.java
  public void test4() throws IOException {
    columnFamilies = new Text[3];
    notFlags = new boolean[3];
    columnFamilies[0] = new Text("A");
    notFlags[0] = true;
    columnFamilies[1] = new Text("E");
    notFlags[1] = false;
    columnFamilies[2] = new Text("G");
    notFlags[2] = true;
    negatedColumns = new Text[2];
    negatedColumns[0] = new Text("A");
    negatedColumns[1] = new Text("G");
    otherColumnFamilies = new Text[4];
    otherColumnFamilies[0] = new Text("B");
    otherColumnFamilies[1] = new Text("C");
    otherColumnFamilies[2] = new Text("D");
    otherColumnFamilies[3] = new Text("F");

    float hitRatio = 0.5f;
    SortedKeyValueIterator<Key,Value> source = createIteratorStack(hitRatio, NUM_ROWS, NUM_DOCIDS,
        columnFamilies, otherColumnFamilies, docs, negatedColumns);
    IteratorSetting is = new IteratorSetting(1, IntersectingIterator.class);
    IntersectingIterator.setColumnFamilies(is, columnFamilies, notFlags);
    IntersectingIterator iter = new IntersectingIterator();
    iter.init(source, is.getOptions(), env);
    iter.seek(new Range(), EMPTY_COL_FAMS, false);
    int hitCount = 0;
    while (iter.hasTop()) {
      hitCount++;
      Key k = iter.getTopKey();
      assertTrue(docs.contains(k.getColumnQualifier()));
      iter.next();
    }
    assertEquals(hitCount, docs.size());
    cleanup();
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\user\IntersectingIteratorTest.java
  public void test6() throws IOException {
    columnFamilies = new Text[1];
    columnFamilies[0] = new Text("C");
    otherColumnFamilies = new Text[4];
    otherColumnFamilies[0] = new Text("A");
    otherColumnFamilies[1] = new Text("B");
    otherColumnFamilies[2] = new Text("D");
    otherColumnFamilies[3] = new Text("F");

    float hitRatio = 0.5f;
    SortedKeyValueIterator<Key,Value> source = createIteratorStack(hitRatio, NUM_ROWS, NUM_DOCIDS,
        columnFamilies, otherColumnFamilies, docs);
    IteratorSetting is = new IteratorSetting(1, IntersectingIterator.class);
    IntersectingIterator.setColumnFamilies(is, columnFamilies);
    IntersectingIterator iter = new IntersectingIterator();
    iter.init(source, is.getOptions(), env);
    iter.seek(new Range(), EMPTY_COL_FAMS, false);
    int hitCount = 0;
    while (iter.hasTop()) {
      hitCount++;
      Key k = iter.getTopKey();
      assertTrue(docs.contains(k.getColumnQualifier()));
      iter.next();
    }
    assertEquals(hitCount, docs.size());
    cleanup();
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\user\LargeRowFilterTest.java
  public void testBasic() throws Exception {
    TreeMap<Key,Value> testData = new TreeMap<>();

    genTestData(testData, 20);

    for (int i = 1; i <= 20; i++) {
      TreeMap<Key,Value> expectedData = new TreeMap<>();
      genTestData(expectedData, i);

      LargeRowFilter lrfi = setupIterator(testData, i, IteratorScope.scan);
      lrfi.seek(new Range(), LocalityGroupUtil.EMPTY_CF_SET, false);

      TreeMap<Key,Value> filteredData = new TreeMap<>();

      while (lrfi.hasTop()) {
        filteredData.put(lrfi.getTopKey(), lrfi.getTopValue());
        lrfi.next();
      }

      assertEquals(expectedData, filteredData);
    }
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\user\LargeRowFilterTest.java
  public void testSeek() throws Exception {
    TreeMap<Key,Value> testData = new TreeMap<>();

    genTestData(testData, 20);

    for (int i = 1; i <= 20; i++) {
      TreeMap<Key,Value> expectedData = new TreeMap<>();
      genTestData(expectedData, i);

      LargeRowFilter lrfi = setupIterator(testData, i, IteratorScope.scan);

      TreeMap<Key,Value> filteredData = new TreeMap<>();

      // seek to each row... rows that exceed max columns should be filtered
      for (int j = 1; j <= i; j++) {
        lrfi.seek(new Range(genRow(j), genRow(j)), LocalityGroupUtil.EMPTY_CF_SET, false);

        while (lrfi.hasTop()) {
          assertEquals(genRow(j), lrfi.getTopKey().getRow().toString());
          filteredData.put(lrfi.getTopKey(), lrfi.getTopValue());
          lrfi.next();
        }
      }

      assertEquals(expectedData, filteredData);
    }
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\user\LargeRowFilterTest.java
  public void testSeek2() throws Exception {
    TreeMap<Key,Value> testData = new TreeMap<>();

    genTestData(testData, 20);

    LargeRowFilter lrfi = setupIterator(testData, 13, IteratorScope.scan);

    // test seeking to the middle of a row
    lrfi.seek(
        new Range(new Key(genRow(15), "cf001", genCQ(4), 5), true,
            new Key(genRow(15)).followingKey(PartialKey.ROW), false),
        LocalityGroupUtil.EMPTY_CF_SET, false);
    assertFalse(lrfi.hasTop());

    lrfi.seek(
        new Range(new Key(genRow(10), "cf001", genCQ(4), 5), true,
            new Key(genRow(10)).followingKey(PartialKey.ROW), false),
        LocalityGroupUtil.EMPTY_CF_SET, false);
    TreeMap<Key,Value> expectedData = new TreeMap<>();
    genRow(expectedData, 10, 4, 10);

    TreeMap<Key,Value> filteredData = new TreeMap<>();
    while (lrfi.hasTop()) {
      filteredData.put(lrfi.getTopKey(), lrfi.getTopValue());
      lrfi.next();
    }

    assertEquals(expectedData, filteredData);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\user\LargeRowFilterTest.java
  public void testCompaction() throws Exception {
    TreeMap<Key,Value> testData = new TreeMap<>();

    genTestData(testData, 20);

    LargeRowFilter lrfi = setupIterator(testData, 13, IteratorScope.majc);
    lrfi.seek(new Range(), LocalityGroupUtil.EMPTY_CF_SET, false);

    TreeMap<Key,Value> compactedData = new TreeMap<>();
    while (lrfi.hasTop()) {
      compactedData.put(lrfi.getTopKey(), lrfi.getTopValue());
      lrfi.next();
    }

    // compacted data should now contain suppression markers
    // add column to row that should be suppressed\
    genRow(compactedData, 15, 15, 16);

    // scanning over data w/ higher max columns should not change behavior
    // because there are suppression markers.. if there was a bug and data
    // was not suppressed, increasing the threshold would expose the bug
    lrfi = setupIterator(compactedData, 20, IteratorScope.scan);
    lrfi.seek(new Range(), LocalityGroupUtil.EMPTY_CF_SET, false);

    // only expect to see 13 rows
    TreeMap<Key,Value> expectedData = new TreeMap<>();
    genTestData(expectedData, 13);

    TreeMap<Key,Value> filteredData = new TreeMap<>();
    while (lrfi.hasTop()) {
      filteredData.put(lrfi.getTopKey(), lrfi.getTopValue());
      lrfi.next();
    }

    assertEquals(expectedData.size() + 8, compactedData.size());
    assertEquals(expectedData, filteredData);

    // try seeking to the middle of row 15... row has data and suppression marker... this seeks past
    // the marker but before the column
    lrfi.seek(
        new Range(new Key(genRow(15), "cf001", genCQ(4), 5), true,
            new Key(genRow(15)).followingKey(PartialKey.ROW), false),
        LocalityGroupUtil.EMPTY_CF_SET, false);
    assertFalse(lrfi.hasTop());

    // test seeking w/ column families
    HashSet<ByteSequence> colfams = new HashSet<>();
    colfams.add(new ArrayByteSequence("cf001"));
    lrfi.seek(new Range(new Key(genRow(15), "cf001", genCQ(4), 5), true,
        new Key(genRow(15)).followingKey(PartialKey.ROW), false), colfams, true);
    assertFalse(lrfi.hasTop());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\user\LargeRowFilterTest.java
  public void testSuppressInner() throws Exception {
    TreeMap<Key,Value> testData = new TreeMap<>();
    genRow(testData, 1, 0, 2);
    genRow(testData, 2, 0, 50);
    genRow(testData, 3, 0, 15);
    genRow(testData, 4, 0, 5);

    TreeMap<Key,Value> expectedData = new TreeMap<>();
    genRow(expectedData, 1, 0, 2);
    genRow(expectedData, 4, 0, 5);

    LargeRowFilter lrfi = setupIterator(testData, 13, IteratorScope.scan);
    lrfi.seek(new Range(), LocalityGroupUtil.EMPTY_CF_SET, false);

    TreeMap<Key,Value> filteredData = new TreeMap<>();
    while (lrfi.hasTop()) {
      filteredData.put(lrfi.getTopKey(), lrfi.getTopValue());
      lrfi.next();
    }

    assertEquals(expectedData, filteredData);

  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\user\RegExFilterTest.java
  public void test1() throws IOException {
    TreeMap<Key,Value> tm = new TreeMap<>();

    Key k1 = newKeyValue(tm, "boo1", "yup", "20080201", "dog");
    Key k2 = newKeyValue(tm, "boo1", "yap", "20080202", "cat");
    Key k3 = newKeyValue(tm, "boo2", "yip", "20080203", "hamster");

    RegExFilter rei = new RegExFilter();
    rei.describeOptions();

    IteratorSetting is = new IteratorSetting(1, RegExFilter.class);
    RegExFilter.setRegexs(is, ".*2", null, null, null, false);

    assertTrue(rei.validateOptions(is.getOptions()));
    rei.init(new SortedMapIterator(tm), is.getOptions(), new DefaultIteratorEnvironment());
    rei.seek(new Range(), EMPTY_COL_FAMS, false);

    assertTrue(rei.hasTop());
    assertEquals(rei.getTopKey(), k3);
    rei.next();
    assertFalse(rei.hasTop());

    // -----------------------------------------------------
    // Test substring regex
    is.clearOptions();

    RegExFilter.setRegexs(is, null, null, null, "amst", false, true); // Should only match hamster

    rei.validateOptions(is.getOptions());
    rei.init(new SortedMapIterator(tm), is.getOptions(), new DefaultIteratorEnvironment());
    rei.seek(new Range(), EMPTY_COL_FAMS, false);

    assertTrue(rei.hasTop());
    assertEquals(rei.getTopKey(), k3);
    rei.next();
    assertFalse(rei.hasTop());

    // -----------------------------------------------------
    is.clearOptions();

    RegExFilter.setRegexs(is, null, "ya.*", null, null, false);
    assertTrue(rei.validateOptions(is.getOptions()));
    rei.init(new SortedMapIterator(tm), is.getOptions(), new DefaultIteratorEnvironment());
    rei.seek(new Range(), EMPTY_COL_FAMS, false);

    assertTrue(rei.hasTop());
    assertEquals(rei.getTopKey(), k2);
    rei.next();
    assertFalse(rei.hasTop());

    // -----------------------------------------------------
    is.clearOptions();

    RegExFilter.setRegexs(is, null, null, ".*01", null, false);
    assertTrue(rei.validateOptions(is.getOptions()));
    rei.init(new SortedMapIterator(tm), is.getOptions(), new DefaultIteratorEnvironment());
    rei.seek(new Range(), EMPTY_COL_FAMS, false);

    assertTrue(rei.hasTop());
    assertEquals(rei.getTopKey(), k1);
    rei.next();
    assertFalse(rei.hasTop());

    // -----------------------------------------------------
    is.clearOptions();

    RegExFilter.setRegexs(is, null, null, null, ".*at", false);
    assertTrue(rei.validateOptions(is.getOptions()));
    rei.init(new SortedMapIterator(tm), is.getOptions(), new DefaultIteratorEnvironment());
    rei.seek(new Range(), EMPTY_COL_FAMS, false);

    assertTrue(rei.hasTop());
    assertEquals(rei.getTopKey(), k2);
    rei.next();
    assertFalse(rei.hasTop());

    // -----------------------------------------------------
    is.clearOptions();

    RegExFilter.setRegexs(is, null, null, null, ".*ap", false);
    rei.init(new SortedMapIterator(tm), is.getOptions(), new DefaultIteratorEnvironment());
    rei.seek(new Range(), EMPTY_COL_FAMS, false);

    assertFalse(rei.hasTop());

    // -----------------------------------------------------
    is.clearOptions();

    RegExFilter.setRegexs(is, null, "ya.*", null, ".*at", false);
    rei.init(new SortedMapIterator(tm), is.getOptions(), new DefaultIteratorEnvironment());
    rei.seek(new Range(), EMPTY_COL_FAMS, false);

    assertTrue(rei.hasTop());
    assertEquals(rei.getTopKey(), k2);
    rei.next();
    assertFalse(rei.hasTop());

    // -----------------------------------------------------
    is.clearOptions();

    RegExFilter.setRegexs(is, null, "ya.*", null, ".*ap", false);
    rei.init(new SortedMapIterator(tm), is.getOptions(), new DefaultIteratorEnvironment());
    rei.seek(new Range(), EMPTY_COL_FAMS, false);

    assertFalse(rei.hasTop());

    // -----------------------------------------------------
    is.clearOptions();

    RegExFilter.setRegexs(is, "boo1", null, null, null, false);
    rei.init(new SortedMapIterator(tm), is.getOptions(), new DefaultIteratorEnvironment());
    rei.seek(new Range(), EMPTY_COL_FAMS, false);

    assertTrue(rei.hasTop());
    assertEquals(rei.getTopKey(), k2);
    rei.next();
    assertTrue(rei.hasTop());
    assertEquals(rei.getTopKey(), k1);
    rei.next();
    assertFalse(rei.hasTop());

    // -----------------------------------------------------
    is.clearOptions();

    rei.init(new SortedMapIterator(tm), is.getOptions(), new DefaultIteratorEnvironment());
    rei.seek(new Range(), EMPTY_COL_FAMS, false);

    assertTrue(rei.hasTop());
    assertEquals(rei.getTopKey(), k2);
    rei.next();
    assertTrue(rei.hasTop());
    assertEquals(rei.getTopKey(), k1);
    rei.next();
    assertTrue(rei.hasTop());
    assertEquals(rei.getTopKey(), k3);
    rei.next();
    assertFalse(rei.hasTop());

    // -----------------------------------------------------
    is.clearOptions();

    RegExFilter.setRegexs(is, "hamster", null, "hamster", "hamster", true);
    rei.init(new SortedMapIterator(tm), is.getOptions(), new DefaultIteratorEnvironment());
    rei.seek(new Range(), EMPTY_COL_FAMS, false);

    assertTrue(rei.hasTop());
    assertEquals(rei.getTopKey(), k3);
    rei.next();
    assertFalse(rei.hasTop());

    // -----------------------------------------------------
    is.clearOptions();

    RegExFilter.setRegexs(is, null, "ya.*", "hamster", null, true);
    rei.init(new SortedMapIterator(tm), is.getOptions(), new DefaultIteratorEnvironment());
    rei.seek(new Range(), EMPTY_COL_FAMS, false);

    assertTrue(rei.hasTop());
    assertEquals(rei.getTopKey(), k2);
    rei.next();
    assertFalse(rei.hasTop());

    is.clearOptions();

    RegExFilter.setRegexs(is, null, "ya.*", "hamster", null, true);
    rei.init(new SortedMapIterator(tm), is.getOptions(), new DefaultIteratorEnvironment());
    rei.seek(new Range(), EMPTY_COL_FAMS, false);
    rei.deepCopy(new DefaultIteratorEnvironment());

    // -----------------------------------------------------
    String multiByteText = new String("\u6d67" + "\u6F68" + "\u7067");
    String multiByteRegex = new String(".*" + "\u6F68" + ".*");

    Key k4 = new Key("boo4".getBytes(), "hoo".getBytes(), "20080203".getBytes(), "".getBytes(), 1L);
    Value inVal = new Value(multiByteText);
    tm.put(k4, inVal);

    is.clearOptions();

    RegExFilter.setRegexs(is, null, null, null, multiByteRegex, true);
    rei.init(new SortedMapIterator(tm), is.getOptions(), new DefaultIteratorEnvironment());
    rei.seek(new Range(), EMPTY_COL_FAMS, false);

    assertTrue(rei.hasTop());
    Value outValue = rei.getTopValue();
    String outVal = new String(outValue.get(), UTF_8);
    assertEquals(outVal, multiByteText);

  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\user\RegExFilterTest.java
  public void testNullByteInKey() throws IOException {
    TreeMap<Key,Value> tm = new TreeMap<>();

    String s1 = "first", s2 = "second";
    byte[] b1 = s1.getBytes(), b2 = s2.getBytes(), ball;
    ball = new byte[b1.length + b2.length + 1];
    System.arraycopy(b1, 0, ball, 0, b1.length);
    ball[b1.length] = (byte) 0;
    System.arraycopy(b2, 0, ball, b1.length + 1, b2.length);

    Key key = new Key(ball, new byte[0], new byte[0], new byte[0], 90, false);
    Value val = new Value(new byte[0]);
    tm.put(key, val);

    IteratorSetting is = new IteratorSetting(5, RegExFilter.class);
    RegExFilter.setRegexs(is, s2, null, null, null, true, true);

    RegExFilter filter = new RegExFilter();
    filter.init(new SortedMapIterator(tm), is.getOptions(), null);
    filter.seek(new Range(), EMPTY_COL_FAMS, false);

    assertTrue("iterator couldn't find a match when it should have", filter.hasTop());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\user\RowDeletingIteratorTest.java
  public void test1() throws Exception {

    TreeMap<Key,Value> tm1 = new TreeMap<>();
    put(tm1, "r1", "", "", 10, RowDeletingIterator.DELETE_ROW_VALUE);
    put(tm1, "r1", "cf1", "cq1", 5, "v1");
    put(tm1, "r1", "cf1", "cq3", 5, "v1");
    put(tm1, "r2", "cf1", "cq1", 5, "v1");

    RowDeletingIterator rdi = new RowDeletingIterator();
    rdi.init(new SortedMapIterator(tm1), null, new TestIE(IteratorScope.scan, false));

    rdi.seek(new Range(), new ArrayList<>(), false);
    testAssertions(rdi, "r2", "cf1", "cq1", 5, "v1");

    for (int i = 0; i < 5; i++) {
      rdi.seek(new Range(newKey("r1", "cf1", "cq" + i, 5), null), new ArrayList<>(), false);
      testAssertions(rdi, "r2", "cf1", "cq1", 5, "v1");
    }

    rdi.seek(new Range(newKey("r11", "cf1", "cq1", 5), null), new ArrayList<>(), false);
    testAssertions(rdi, "r2", "cf1", "cq1", 5, "v1");

    put(tm1, "r2", "", "", 10, RowDeletingIterator.DELETE_ROW_VALUE);
    rdi.seek(new Range(), new ArrayList<>(), false);
    assertFalse(rdi.hasTop());

    for (int i = 0; i < 5; i++) {
      rdi.seek(new Range(newKey("r1", "cf1", "cq" + i, 5), null), new ArrayList<>(), false);
      assertFalse(rdi.hasTop());
    }

    put(tm1, "r0", "cf1", "cq1", 5, "v1");
    rdi.seek(new Range(), new ArrayList<>(), false);
    testAssertions(rdi, "r0", "cf1", "cq1", 5, "v1");
    rdi.next();
    assertFalse(rdi.hasTop());

  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\user\RowDeletingIteratorTest.java
  public void test2() throws Exception {

    TreeMap<Key,Value> tm1 = new TreeMap<>();
    put(tm1, "r1", "", "", 10, RowDeletingIterator.DELETE_ROW_VALUE);
    put(tm1, "r1", "cf1", "cq1", 5, "v1");
    put(tm1, "r1", "cf1", "cq3", 15, "v1");
    put(tm1, "r1", "cf1", "cq4", 5, "v1");
    put(tm1, "r1", "cf1", "cq5", 15, "v1");
    put(tm1, "r2", "cf1", "cq1", 5, "v1");

    RowDeletingIterator rdi = new RowDeletingIterator();
    rdi.init(new SortedMapIterator(tm1), null, new TestIE(IteratorScope.scan, false));

    rdi.seek(new Range(), new ArrayList<>(), false);
    testAssertions(rdi, "r1", "cf1", "cq3", 15, "v1");
    rdi.next();
    testAssertions(rdi, "r1", "cf1", "cq5", 15, "v1");
    rdi.next();
    testAssertions(rdi, "r2", "cf1", "cq1", 5, "v1");

    rdi.seek(new Range(newKey("r1", "cf1", "cq1", 5), null), new ArrayList<>(), false);
    testAssertions(rdi, "r1", "cf1", "cq3", 15, "v1");
    rdi.next();
    testAssertions(rdi, "r1", "cf1", "cq5", 15, "v1");
    rdi.next();
    testAssertions(rdi, "r2", "cf1", "cq1", 5, "v1");

    rdi.seek(new Range(newKey("r1", "cf1", "cq4", 5), null), new ArrayList<>(), false);
    testAssertions(rdi, "r1", "cf1", "cq5", 15, "v1");
    rdi.next();
    testAssertions(rdi, "r2", "cf1", "cq1", 5, "v1");

    rdi.seek(new Range(newKey("r1", "cf1", "cq5", 20), null), new ArrayList<>(), false);
    testAssertions(rdi, "r1", "cf1", "cq5", 15, "v1");
    rdi.next();
    testAssertions(rdi, "r2", "cf1", "cq1", 5, "v1");

    rdi.seek(new Range(newKey("r1", "cf1", "cq9", 20), null), new ArrayList<>(), false);
    testAssertions(rdi, "r2", "cf1", "cq1", 5, "v1");
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\user\RowDeletingIteratorTest.java
  public void test3() throws Exception {

    TreeMap<Key,Value> tm1 = new TreeMap<>();
    put(tm1, "r1", "", "", 10, RowDeletingIterator.DELETE_ROW_VALUE);
    put(tm1, "r1", "", "cq1", 5, "v1");
    put(tm1, "r1", "cf1", "cq1", 5, "v1");
    put(tm1, "r2", "", "cq1", 5, "v1");
    put(tm1, "r2", "cf1", "cq1", 5, "v1");

    RowDeletingIterator rdi = new RowDeletingIterator();
    rdi.init(new ColumnFamilySkippingIterator(new SortedMapIterator(tm1)), null,
        new TestIE(IteratorScope.scan, false));

    HashSet<ByteSequence> cols = new HashSet<>();
    cols.add(new ArrayByteSequence("cf1".getBytes()));

    rdi.seek(new Range(), cols, true);
    testAssertions(rdi, "r2", "cf1", "cq1", 5, "v1");

    cols.clear();
    cols.add(new ArrayByteSequence("".getBytes()));
    rdi.seek(new Range(), cols, false);
    testAssertions(rdi, "r2", "cf1", "cq1", 5, "v1");

    cols.clear();
    rdi.seek(new Range(), cols, false);
    testAssertions(rdi, "r2", "", "cq1", 5, "v1");
    rdi.next();
    testAssertions(rdi, "r2", "cf1", "cq1", 5, "v1");
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\user\RowDeletingIteratorTest.java
  public void test4() throws Exception {

    TreeMap<Key,Value> tm1 = new TreeMap<>();
    put(tm1, "r1", "", "", 10, RowDeletingIterator.DELETE_ROW_VALUE);
    put(tm1, "r1", "cf1", "cq1", 5, "v1");
    put(tm1, "r1", "cf1", "cq3", 15, "v1");
    put(tm1, "r1", "cf1", "cq4", 5, "v1");
    put(tm1, "r2", "cf1", "cq1", 5, "v1");

    RowDeletingIterator rdi = new RowDeletingIterator();
    rdi.init(new SortedMapIterator(tm1), null, new TestIE(IteratorScope.minc, false));

    rdi.seek(new Range(), new ArrayList<>(), false);
    testAssertions(rdi, "r1", "", "", 10, RowDeletingIterator.DELETE_ROW_VALUE.toString());
    rdi.next();
    testAssertions(rdi, "r1", "cf1", "cq3", 15, "v1");
    rdi.next();
    testAssertions(rdi, "r2", "cf1", "cq1", 5, "v1");

    rdi.seek(new Range(newKey("r1", "cf1", "cq3", 20), null), new ArrayList<>(), false);
    testAssertions(rdi, "r1", "cf1", "cq3", 15, "v1");
    rdi.next();
    testAssertions(rdi, "r2", "cf1", "cq1", 5, "v1");

    rdi.seek(new Range(newKey("r1", "", "", 42), null), new ArrayList<>(), false);
    testAssertions(rdi, "r1", "", "", 10, RowDeletingIterator.DELETE_ROW_VALUE.toString());
    rdi.next();
    testAssertions(rdi, "r1", "cf1", "cq3", 15, "v1");
    rdi.next();
    testAssertions(rdi, "r2", "cf1", "cq1", 5, "v1");

  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\user\RowEncodingIteratorTest.java
  public void testEncodeAll() throws IOException {
    byte[] kbVal = new byte[1024];
    // This code is shamelessly borrowed from the WholeRowIteratorTest.
    SortedMap<Key,Value> map1 = new TreeMap<>();
    pkv(map1, "row1", "cf1", "cq1", "cv1", 5, kbVal);
    pkv(map1, "row1", "cf1", "cq2", "cv1", 6, kbVal);

    SortedMap<Key,Value> map2 = new TreeMap<>();
    pkv(map2, "row2", "cf1", "cq1", "cv1", 5, kbVal);
    pkv(map2, "row2", "cf1", "cq2", "cv1", 6, kbVal);

    SortedMap<Key,Value> map3 = new TreeMap<>();
    pkv(map3, "row3", "cf1", "cq1", "cv1", 5, kbVal);
    pkv(map3, "row3", "cf1", "cq2", "cv1", 6, kbVal);

    SortedMap<Key,Value> map = new TreeMap<>();
    map.putAll(map1);
    map.putAll(map2);
    map.putAll(map3);
    SortedMapIterator src = new SortedMapIterator(map);
    Range range = new Range(new Text("row1"), true, new Text("row2"), true);
    RowEncodingIteratorImpl iter = new RowEncodingIteratorImpl();
    Map<String,String> bigBufferOpts = new HashMap<>();
    bigBufferOpts.put(RowEncodingIterator.MAX_BUFFER_SIZE_OPT, "3K");
    iter.init(src, bigBufferOpts, new DummyIteratorEnv());
    iter.seek(range, new ArrayList<>(), false);

    assertTrue(iter.hasTop());
    assertEquals(map1, RowEncodingIteratorImpl.decodeRow(iter.getTopValue()));

    // simulate something continuing using the last key from the iterator
    // this is what client and server code will do
    range = new Range(iter.getTopKey(), false, range.getEndKey(), range.isEndKeyInclusive());
    iter.seek(range, new ArrayList<>(), false);

    assertTrue(iter.hasTop());
    assertEquals(map2, RowEncodingIteratorImpl.decodeRow(iter.getTopValue()));

    iter.next();

    assertFalse(iter.hasTop());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\user\RowEncodingIteratorTest.java
  public void testEncodeSome() throws IOException {
    byte[] kbVal = new byte[1024];
    // This code is shamelessly borrowed from the WholeRowIteratorTest.
    SortedMap<Key,Value> map1 = new TreeMap<>();
    pkv(map1, "row1", "cf1", "cq1", "cv1", 5, kbVal);
    pkv(map1, "row1", "cf1", "cq2", "cv1", 6, kbVal);

    SortedMap<Key,Value> map = new TreeMap<>();
    map.putAll(map1);
    SortedMapIterator src = new SortedMapIterator(map);
    Range range = new Range(new Text("row1"), true, new Text("row2"), true);
    RowEncodingIteratorImpl iter = new RowEncodingIteratorImpl();
    Map<String,String> bigBufferOpts = new HashMap<>();
    bigBufferOpts.put(RowEncodingIterator.MAX_BUFFER_SIZE_OPT, "1K");
    iter.init(src, bigBufferOpts, new DummyIteratorEnv());
    iter.seek(range, new ArrayList<>(), false);
    // IllegalArgumentException should be thrown as we can't fit the whole row into its buffer
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\user\RowFilterTest.java
  public void test1() throws Exception {
    ColumnFamilySkippingIterator source =
        new ColumnFamilySkippingIterator(new SortedMapIterator(createKeyValues()));

    RowFilter filter = new SummingRowFilter();
    filter.init(source, Collections.emptyMap(), new DefaultIteratorEnvironment());

    filter.seek(new Range(), Collections.emptySet(), false);

    assertEquals(new HashSet<>(Arrays.asList("2", "3")), getRows(filter));

    ByteSequence cf = new ArrayByteSequence("cf2");

    filter.seek(new Range(), Set.of(cf), true);
    assertEquals(new HashSet<>(Arrays.asList("1", "3", "0", "4")), getRows(filter));

    filter.seek(new Range("0", "4"), Collections.emptySet(), false);
    assertEquals(new HashSet<>(Arrays.asList("2", "3")), getRows(filter));

    filter.seek(new Range("2"), Collections.emptySet(), false);
    assertEquals(new HashSet<>(Arrays.asList("2")), getRows(filter));

    filter.seek(new Range("4"), Collections.emptySet(), false);
    assertEquals(new HashSet<String>(), getRows(filter));

    filter.seek(new Range("4"), Set.of(cf), true);
    assertEquals(new HashSet<>(Arrays.asList("4")), getRows(filter));

  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\user\RowFilterTest.java
  public void testChainedRowFilters() throws Exception {
    SortedMapIterator source = new SortedMapIterator(createKeyValues());

    RowFilter filter0 = new TrueFilter();
    filter0.init(source, Collections.emptyMap(), new DefaultIteratorEnvironment());

    RowFilter filter = new TrueFilter();
    filter.init(filter0, Collections.emptyMap(), new DefaultIteratorEnvironment());

    filter.seek(new Range(), Collections.emptySet(), false);

    assertEquals(new HashSet<>(Arrays.asList("0", "1", "2", "3", "4")), getRows(filter));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\user\RowFilterTest.java
  public void testFilterConjunction() throws Exception {

    SortedMapIterator source = new SortedMapIterator(createKeyValues());

    RowFilter filter0 = new RowZeroOrOneFilter();
    filter0.init(source, Collections.emptyMap(), new DefaultIteratorEnvironment());

    RowFilter filter = new RowOneOrTwoFilter();
    filter.init(filter0, Collections.emptyMap(), new DefaultIteratorEnvironment());

    filter.seek(new Range(), Collections.emptySet(), false);

    assertEquals(new HashSet<>(Arrays.asList("1")), getRows(filter));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\user\RowFilterTest.java
  public void deepCopyCopiesTheSource() throws Exception {
    SortedMapIterator source = new SortedMapIterator(createKeyValues());

    RowFilter filter = new RowZeroOrOneFilter();
    filter.init(source, Collections.emptyMap(), new DefaultIteratorEnvironment());

    filter.seek(new Range(), Collections.emptySet(), false);

    // Save off the first key and value
    Key firstKey = filter.getTopKey();
    Value firstValue = filter.getTopValue();

    // Assert that the row is valid given our filter
    assertEquals("0", firstKey.getRow().toString());

    // Read some extra data, just making sure it's all valid
    Key lastKeyRead = null;
    for (int i = 0; i < 5; i++) {
      filter.next();
      lastKeyRead = filter.getTopKey();
      assertEquals("0", lastKeyRead.getRow().toString());
    }

    // Make a copy of the original RowFilter
    RowFilter copy = (RowFilter) filter.deepCopy(new DefaultIteratorEnvironment());

    // Because it's a copy, we should be able to safely seek this one without affecting the original
    copy.seek(new Range(), Collections.emptySet(), false);

    assertTrue("deepCopy'ed RowFilter did not have a top key", copy.hasTop());

    Key firstKeyFromCopy = copy.getTopKey();
    Value firstValueFromCopy = copy.getTopValue();

    // Verify that we got the same first k-v pair we did earlier
    assertEquals(firstKey, firstKeyFromCopy);
    assertEquals(firstValue, firstValueFromCopy);

    filter.next();
    Key finalKeyRead = filter.getTopKey();

    // Make sure we got a Key that was greater than the last Key we read from the original RowFilter
    assertTrue("Expected next key read to be greater than the previous after deepCopy",
        lastKeyRead.compareTo(finalKeyRead) < 0);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\user\TestCfCqSlice.java
  public void testAllRowsFullSlice() {
    boolean[][][] foundKvs = new boolean[LR_DIM][LR_DIM][LR_DIM];
    loadKvs(foundKvs, EMPTY_OPTS, INFINITY);
    for (int i = 0; i < LR_DIM; i++) {
      for (int j = 0; j < LR_DIM; j++) {
        for (int k = 0; k < LR_DIM; k++) {
          assertTrue("(r, cf, cq) == (" + i + ", " + j + ", " + k + ") must be found in scan",
              foundKvs[i][j][k]);
        }
      }
    }
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\user\TestCfCqSlice.java
  public void testSingleRowFullSlice() {
    boolean[][][] foundKvs = new boolean[LR_DIM][LR_DIM][LR_DIM];
    int rowId = LR_DIM / 2;
    loadKvs(foundKvs, EMPTY_OPTS, Range.exact(new Text(LONG_LEX.encode((long) rowId))));
    for (int i = 0; i < LR_DIM; i++) {
      for (int j = 0; j < LR_DIM; j++) {
        for (int k = 0; k < LR_DIM; k++) {
          if (rowId == i) {
            assertTrue("(r, cf, cq) == (" + i + ", " + j + ", " + k + ") must be found in scan",
                foundKvs[i][j][k]);
          } else {
            assertFalse(
                "(r, cf, cq) == (" + i + ", " + j + ", " + k + ") must not be found in scan",
                foundKvs[i][j][k]);
          }
        }
      }
    }
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\user\TestCfCqSlice.java
  public void testAllRowsSlice() {
    boolean[][][] foundKvs = new boolean[LR_DIM][LR_DIM][LR_DIM];
    long sliceMinCf = 20;
    long sliceMinCq = 30;
    long sliceMaxCf = 25;
    long sliceMaxCq = 35;
    assertTrue("slice param must be less than LR_DIM", sliceMinCf < LR_DIM);
    assertTrue("slice param must be less than LR_DIM", sliceMinCq < LR_DIM);
    assertTrue("slice param must be less than LR_DIM", sliceMaxCf < LR_DIM);
    assertTrue("slice param must be less than LR_DIM", sliceMaxCq < LR_DIM);
    Map<String,String> opts = new HashMap<>();
    opts.put(CfCqSliceOpts.OPT_MIN_CF, new String(LONG_LEX.encode(sliceMinCf), UTF_8));
    opts.put(CfCqSliceOpts.OPT_MIN_CQ, new String(LONG_LEX.encode(sliceMinCq), UTF_8));
    opts.put(CfCqSliceOpts.OPT_MAX_CF, new String(LONG_LEX.encode(sliceMaxCf), UTF_8));
    opts.put(CfCqSliceOpts.OPT_MAX_CQ, new String(LONG_LEX.encode(sliceMaxCq), UTF_8));
    loadKvs(foundKvs, opts, INFINITY);
    for (int i = 0; i < LR_DIM; i++) {
      for (int j = 0; j < LR_DIM; j++) {
        for (int k = 0; k < LR_DIM; k++) {
          if (j >= sliceMinCf && j <= sliceMaxCf && k >= sliceMinCq && k <= sliceMaxCq) {
            assertTrue("(r, cf, cq) == (" + i + ", " + j + ", " + k + ") must be found in scan",
                foundKvs[i][j][k]);
          } else {
            assertFalse(
                "(r, cf, cq) == (" + i + ", " + j + ", " + k + ") must not be found in scan",
                foundKvs[i][j][k]);
          }
        }
      }
    }
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\user\TestCfCqSlice.java
  public void testSingleColumnSlice() {
    boolean[][][] foundKvs = new boolean[LR_DIM][LR_DIM][LR_DIM];
    long sliceMinCf = 20;
    long sliceMinCq = 20;
    long sliceMaxCf = 20;
    long sliceMaxCq = 20;
    Map<String,String> opts = new HashMap<>();
    opts.put(CfCqSliceOpts.OPT_MIN_CF, new String(LONG_LEX.encode(sliceMinCf), UTF_8));
    opts.put(CfCqSliceOpts.OPT_MIN_CQ, new String(LONG_LEX.encode(sliceMinCq), UTF_8));
    opts.put(CfCqSliceOpts.OPT_MAX_CF, new String(LONG_LEX.encode(sliceMaxCf), UTF_8));
    opts.put(CfCqSliceOpts.OPT_MAX_CQ, new String(LONG_LEX.encode(sliceMaxCq), UTF_8));
    loadKvs(foundKvs, opts, INFINITY);
    for (int i = 0; i < LR_DIM; i++) {
      for (int j = 0; j < LR_DIM; j++) {
        for (int k = 0; k < LR_DIM; k++) {
          if (j == sliceMinCf && k == sliceMinCq) {
            assertTrue("(r, cf, cq) == (" + i + ", " + j + ", " + k + ") must be found in scan",
                foundKvs[i][j][k]);
          } else {
            assertFalse(
                "(r, cf, cq) == (" + i + ", " + j + ", " + k + ") must not be found in scan",
                foundKvs[i][j][k]);
          }
        }
      }
    }
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\user\TestCfCqSlice.java
  public void testSingleColumnSliceByExclude() {
    boolean[][][] foundKvs = new boolean[LR_DIM][LR_DIM][LR_DIM];
    long sliceMinCf = 20;
    long sliceMinCq = 20;
    long sliceMaxCf = 22;
    long sliceMaxCq = 22;
    Map<String,String> opts = new HashMap<>();
    opts.put(CfCqSliceOpts.OPT_MIN_CF, new String(LONG_LEX.encode(sliceMinCf), UTF_8));
    opts.put(CfCqSliceOpts.OPT_MIN_CQ, new String(LONG_LEX.encode(sliceMinCq), UTF_8));
    opts.put(CfCqSliceOpts.OPT_MAX_CF, new String(LONG_LEX.encode(sliceMaxCf), UTF_8));
    opts.put(CfCqSliceOpts.OPT_MAX_CQ, new String(LONG_LEX.encode(sliceMaxCq), UTF_8));
    opts.put(CfCqSliceOpts.OPT_MAX_INCLUSIVE, "false");
    opts.put(CfCqSliceOpts.OPT_MIN_INCLUSIVE, "false");
    loadKvs(foundKvs, opts, INFINITY);
    for (int i = 0; i < LR_DIM; i++) {
      for (int j = 0; j < LR_DIM; j++) {
        for (int k = 0; k < LR_DIM; k++) {
          if (j == 21 && k == 21) {
            assertTrue("(r, cf, cq) == (" + i + ", " + j + ", " + k + ") must be found in scan",
                foundKvs[i][j][k]);
          } else {
            assertFalse(
                "(r, cf, cq) == (" + i + ", " + j + ", " + k + ") must not be found in scan",
                foundKvs[i][j][k]);
          }
        }
      }
    }
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\user\TestCfCqSlice.java
  public void testAllCfsCqSlice() {
    boolean[][][] foundKvs = new boolean[LR_DIM][LR_DIM][LR_DIM];
    long sliceMinCq = 10;
    long sliceMaxCq = 30;
    Map<String,String> opts = new HashMap<>();
    opts.put(CfCqSliceOpts.OPT_MIN_CQ, new String(LONG_LEX.encode(sliceMinCq), UTF_8));
    opts.put(CfCqSliceOpts.OPT_MAX_CQ, new String(LONG_LEX.encode(sliceMaxCq), UTF_8));
    loadKvs(foundKvs, opts, INFINITY);
    for (int i = 0; i < LR_DIM; i++) {
      for (int j = 0; j < LR_DIM; j++) {
        for (int k = 0; k < LR_DIM; k++) {
          if (k >= sliceMinCq && k <= sliceMaxCq) {
            assertTrue("(r, cf, cq) == (" + i + ", " + j + ", " + k + ") must be found in scan",
                foundKvs[i][j][k]);
          } else {
            assertFalse(
                "(r, cf, cq) == (" + i + ", " + j + ", " + k + ") must not be found in scan",
                foundKvs[i][j][k]);
          }
        }
      }
    }
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\user\TestCfCqSlice.java
  public void testSliceCfsAllCqs() {
    boolean[][][] foundKvs = new boolean[LR_DIM][LR_DIM][LR_DIM];
    long sliceMinCf = 10;
    long sliceMaxCf = 30;
    Map<String,String> opts = new HashMap<>();
    opts.put(CfCqSliceOpts.OPT_MIN_CF, new String(LONG_LEX.encode(sliceMinCf), UTF_8));
    opts.put(CfCqSliceOpts.OPT_MAX_CF, new String(LONG_LEX.encode(sliceMaxCf), UTF_8));
    loadKvs(foundKvs, opts, INFINITY);
    for (int i = 0; i < LR_DIM; i++) {
      for (int j = 0; j < LR_DIM; j++) {
        for (int k = 0; k < LR_DIM; k++) {
          if (j >= sliceMinCf && j <= sliceMaxCf) {
            assertTrue("(r, cf, cq) == (" + i + ", " + j + ", " + k + ") must be found in scan",
                foundKvs[i][j][k]);
          } else {
            assertFalse(
                "(r, cf, cq) == (" + i + ", " + j + ", " + k + ") must not be found in scan",
                foundKvs[i][j][k]);
          }
        }
      }
    }
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\user\TestCfCqSlice.java
  public void testEmptySlice() {
    boolean[][][] foundKvs = new boolean[LR_DIM][LR_DIM][LR_DIM];
    long sliceMinCf = LR_DIM + 1;
    long sliceMinCq = LR_DIM + 1;
    long sliceMaxCf = LR_DIM + 1;
    long sliceMaxCq = LR_DIM + 1;
    Map<String,String> opts = new HashMap<>();
    opts.put(CfCqSliceOpts.OPT_MIN_CF, new String(LONG_LEX.encode(sliceMinCf), UTF_8));
    opts.put(CfCqSliceOpts.OPT_MIN_CQ, new String(LONG_LEX.encode(sliceMinCq), UTF_8));
    opts.put(CfCqSliceOpts.OPT_MAX_CF, new String(LONG_LEX.encode(sliceMaxCf), UTF_8));
    opts.put(CfCqSliceOpts.OPT_MAX_CQ, new String(LONG_LEX.encode(sliceMaxCq), UTF_8));
    opts.put(CfCqSliceOpts.OPT_MAX_INCLUSIVE, "false");
    opts.put(CfCqSliceOpts.OPT_MIN_INCLUSIVE, "false");
    loadKvs(foundKvs, opts, INFINITY);
    for (int i = 0; i < LR_DIM; i++) {
      for (int j = 0; j < LR_DIM; j++) {
        for (int k = 0; k < LR_DIM; k++) {
          assertFalse("(r, cf, cq) == (" + i + ", " + j + ", " + k + ") must not be found in scan",
              foundKvs[i][j][k]);
        }
      }
    }
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\user\TestCfCqSlice.java
  public void testStackedFilters() throws Exception {
    Map<String,String> firstOpts = new HashMap<>();
    Map<String,String> secondOpts = new HashMap<>();
    boolean[][][] foundKvs = new boolean[LR_DIM][LR_DIM][LR_DIM];
    long sliceMinCf = 20;
    long sliceMaxCf = 25;
    long sliceMinCq = 30;
    long sliceMaxCq = 35;
    assertTrue("slice param must be less than LR_DIM", sliceMinCf < LR_DIM);
    assertTrue("slice param must be less than LR_DIM", sliceMinCq < LR_DIM);
    assertTrue("slice param must be less than LR_DIM", sliceMaxCf < LR_DIM);
    assertTrue("slice param must be less than LR_DIM", sliceMaxCq < LR_DIM);
    firstOpts.put(CfCqSliceOpts.OPT_MIN_CF, new String(LONG_LEX.encode(sliceMinCf), UTF_8));
    firstOpts.put(CfCqSliceOpts.OPT_MAX_CF, new String(LONG_LEX.encode(sliceMaxCf), UTF_8));
    secondOpts.put(CfCqSliceOpts.OPT_MIN_CQ, new String(LONG_LEX.encode(sliceMinCq), UTF_8));
    secondOpts.put(CfCqSliceOpts.OPT_MAX_CQ, new String(LONG_LEX.encode(sliceMaxCq), UTF_8));
    SortedKeyValueIterator<Key,Value> skvi =
        getFilterClass().getDeclaredConstructor().newInstance();
    skvi.init(new SortedMapIterator(data), firstOpts, null);
    loadKvs(skvi.deepCopy(null), foundKvs, secondOpts, INFINITY);
    for (int i = 0; i < LR_DIM; i++) {
      for (int j = 0; j < LR_DIM; j++) {
        for (int k = 0; k < LR_DIM; k++) {
          if (j >= sliceMinCf && j <= sliceMaxCf && k >= sliceMinCq && k <= sliceMaxCq) {
            assertTrue("(r, cf, cq) == (" + i + ", " + j + ", " + k + ") must be found in scan",
                foundKvs[i][j][k]);
          } else {
            assertFalse(
                "(r, cf, cq) == (" + i + ", " + j + ", " + k + ") must not be found in scan",
                foundKvs[i][j][k]);
          }
        }
      }
    }
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\user\TestCfCqSlice.java
  public void testSeekMinExclusive() {
    boolean[][][] foundKvs = new boolean[LR_DIM][LR_DIM][LR_DIM];
    long sliceMinCf = 20;
    long sliceMinCq = 30;
    long sliceMaxCf = 25;
    long sliceMaxCq = 35;
    assertTrue("slice param must be less than LR_DIM", sliceMinCf < LR_DIM);
    assertTrue("slice param must be less than LR_DIM", sliceMinCq < LR_DIM);
    assertTrue("slice param must be less than LR_DIM", sliceMaxCf < LR_DIM);
    assertTrue("slice param must be less than LR_DIM", sliceMaxCq < LR_DIM);
    Map<String,String> opts = new HashMap<>();
    opts.put(CfCqSliceOpts.OPT_MIN_CF, new String(LONG_LEX.encode(sliceMinCf), UTF_8));
    opts.put(CfCqSliceOpts.OPT_MIN_INCLUSIVE, "false");
    opts.put(CfCqSliceOpts.OPT_MIN_CQ, new String(LONG_LEX.encode(sliceMinCq), UTF_8));
    opts.put(CfCqSliceOpts.OPT_MAX_CF, new String(LONG_LEX.encode(sliceMaxCf), UTF_8));
    opts.put(CfCqSliceOpts.OPT_MAX_CQ, new String(LONG_LEX.encode(sliceMaxCq), UTF_8));
    Range startsAtMinCf = new Range(new Key(LONG_LEX.encode(0L), LONG_LEX.encode(sliceMinCf),
        LONG_LEX.encode(sliceMinCq), new byte[] {}, Long.MAX_VALUE), null);
    loadKvs(foundKvs, opts, startsAtMinCf);
    for (int i = 0; i < LR_DIM; i++) {
      for (int j = 0; j < LR_DIM; j++) {
        for (int k = 0; k < LR_DIM; k++) {
          if (j > sliceMinCf && j <= sliceMaxCf && k > sliceMinCq && k <= sliceMaxCq) {
            assertTrue("(r, cf, cq) == (" + i + ", " + j + ", " + k + ") must be found in scan",
                foundKvs[i][j][k]);
          } else {
            assertFalse(
                "(r, cf, cq) == (" + i + ", " + j + ", " + k + ") must not be found in scan",
                foundKvs[i][j][k]);
          }
        }
      }
    }
    foundKvs = new boolean[LR_DIM][LR_DIM][LR_DIM];
    sliceMinCq = 0;
    sliceMaxCq = 10;
    opts.put(CfCqSliceOpts.OPT_MIN_CF, new String(LONG_LEX.encode(sliceMinCf), UTF_8));
    opts.put(CfCqSliceOpts.OPT_MIN_INCLUSIVE, "false");
    opts.put(CfCqSliceOpts.OPT_MIN_CQ, new String(LONG_LEX.encode(sliceMinCq), UTF_8));
    opts.put(CfCqSliceOpts.OPT_MAX_CF, new String(LONG_LEX.encode(sliceMaxCf), UTF_8));
    opts.put(CfCqSliceOpts.OPT_MAX_CQ, new String(LONG_LEX.encode(sliceMaxCq), UTF_8));
    loadKvs(foundKvs, opts, INFINITY);
    for (int i = 0; i < LR_DIM; i++) {
      for (int j = 0; j < LR_DIM; j++) {
        for (int k = 0; k < LR_DIM; k++) {
          if (j > sliceMinCf && j <= sliceMaxCf && k > sliceMinCq && k <= sliceMaxCq) {
            assertTrue("(r, cf, cq) == (" + i + ", " + j + ", " + k + ") must be found in scan",
                foundKvs[i][j][k]);
          } else {
            assertFalse(
                "(r, cf, cq) == (" + i + ", " + j + ", " + k + ") must not be found in scan",
                foundKvs[i][j][k]);
          }
        }
      }
    }
  }

  private void loadKvs(boolean[][][] foundKvs, Map<String,String> options, Range range) {
    loadKvs(new SortedMapIterator(data), foundKvs, options, range);
  }

  private void loadKvs(SortedKeyValueIterator<Key,Value> parent, boolean[][][] foundKvs,
      Map<String,String> options, Range range) {
    try {
      SortedKeyValueIterator<Key,Value> skvi =
          getFilterClass().getDeclaredConstructor().newInstance();
      skvi.init(parent, options, null);
      skvi.seek(range, EMPTY_CF_SET, false);

      Random random = new SecureRandom();

      while (skvi.hasTop()) {
        Key k = skvi.getTopKey();
        int row = LONG_LEX.decode(k.getRow().copyBytes()).intValue();
        int cf = LONG_LEX.decode(k.getColumnFamily().copyBytes()).intValue();
        int cq = LONG_LEX.decode(k.getColumnQualifier().copyBytes()).intValue();

        assertFalse("Duplicate " + row + " " + cf + " " + cq, foundKvs[row][cf][cq]);
        foundKvs[row][cf][cq] = true;

        if (random.nextInt(100) == 0) {
          skvi.seek(new Range(k, false, range.getEndKey(), range.isEndKeyInclusive()), EMPTY_CF_SET,
              false);
        } else {
          skvi.next();
        }
      }

    } catch (Exception e) {
      throw new RuntimeException(e);
    }
  }

  /**
   * Rows 0..(LR_DIM - 1) will each have LR_DIM CFs, each with LR_DIM CQs
   *
   * For instance if LR_DIM is 3, (cf,cq) r: val
   *
   * (0,0) (0,1) (0,2) (1,0) (1,1) (1,2) (2,0) (2,1) (2,2) 0 0 1 2 3 4 5 6 7 8 1 9 10 11 12 13 14 15
   * 16 17 2 18 19 20 21 22 23 24 25 26
   */
  static TreeMap<Key,Value> createMap(int numRows, int numCfs, int numCqs) {
    TreeMap<Key,Value> data = new TreeMap<>();
    for (int i = 0; i < numRows; i++) {
      byte[] rowId = LONG_LEX.encode(ROW_ID_GEN.getAndIncrement());
      for (int j = 0; j < numCfs; j++) {
        for (int k = 0; k < numCqs; k++) {
          byte[] cf = LONG_LEX.encode((long) j);
          byte[] cq = LONG_LEX.encode((long) k);
          byte[] val = LONG_LEX.encode((long) (i * numCfs + j * numCqs + k));
          data.put(new Key(rowId, cf, cq, new byte[0], 9), new Value(val));
        }
      }
    }
    return data;
  }

  static class ReadableLongLexicoder implements Lexicoder<Long> {
    final String fmtStr;

    public ReadableLongLexicoder() {
      this(20);
    }

    public ReadableLongLexicoder(int numDigits) {
      fmtStr = "%0" + numDigits + "d";
    }

    @Override
    public byte[] encode(Long l) {
      return String.format(fmtStr, l).getBytes(UTF_8);
    }

    @Override
    public Long decode(byte[] b) throws ValueFormatException {
      return Long.parseLong(new String(b, UTF_8));
    }
  }
}
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\user\TransformingIteratorTest.java
  public void testIdentityScan() throws Exception {
    setUpTransformIterator(IdentityKeyTransformingIterator.class);

    // This is just an identity scan, but with the "reuse" iterator that reuses
    // the same key/value pair for every getTopKey/getTopValue call. The code
    // will always return the final key/value if we didn't copy the original key
    // in the iterator.
    TreeMap<Key,Value> expected = new TreeMap<>();
    for (int row = 1; row <= 3; ++row) {
      for (int cf = 1; cf <= 3; ++cf) {
        for (int cq = 1; cq <= 3; ++cq) {
          for (int cv = 1; cv <= 3; ++cv) {
            putExpected(expected, row, cf, cq, cv, null);
          }
        }
      }
    }

    checkExpected(expected);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\user\TransformingIteratorTest.java
  public void testNoRangeScan() throws Exception {
    List<Class<? extends ReversingKeyTransformingIterator>> classes = new ArrayList<>();
    classes.add(ColFamReversingKeyTransformingIterator.class);
    classes.add(ColQualReversingKeyTransformingIterator.class);
    classes.add(ColVisReversingKeyTransformingIterator.class);

    // Test transforming col fam, col qual, col vis
    for (Class<? extends ReversingKeyTransformingIterator> clazz : classes) {
      setUpTransformIterator(clazz);

      // All rows with visibilities reversed
      TransformingIterator iter = clazz.getDeclaredConstructor().newInstance();
      TreeMap<Key,Value> expected = new TreeMap<>();
      for (int row = 1; row <= 3; ++row) {
        for (int cf = 1; cf <= 3; ++cf) {
          for (int cq = 1; cq <= 3; ++cq) {
            for (int cv = 1; cv <= 3; ++cv) {
              putExpected(expected, row, cf, cq, cv, iter.getKeyPrefix());
            }
          }
        }
      }

      checkExpected(expected);
    }
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\user\TransformingIteratorTest.java
  public void testVisbilityFiltering() throws Exception {
    // Should return nothing since we produced visibilities that can't be seen
    setUpTransformIterator(BadVisKeyTransformingIterator.class);
    checkExpected(new TreeMap<>());

    // Do a "reverse" on the visibility (vis1 -> vis2, vis2 -> vis3, vis3 -> vis0)
    // Source data has vis1, vis2, vis3 so vis0 is a new one that is introduced.
    // Make sure it shows up in the output with the default test auths which include
    // vis0.
    setUpTransformIterator(ColVisReversingKeyTransformingIterator.class);
    TreeMap<Key,Value> expected = new TreeMap<>();
    for (int row = 1; row <= 3; ++row) {
      for (int cf = 1; cf <= 3; ++cf) {
        for (int cq = 1; cq <= 3; ++cq) {
          for (int cv = 1; cv <= 3; ++cv) {
            putExpected(expected, row, cf, cq, cv, PartialKey.ROW_COLFAM_COLQUAL);
          }
        }
      }
    }
    checkExpected(expected);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\user\TransformingIteratorTest.java
  public void testCreatingIllegalVisbility() throws Exception {
    // illegal visibility created by transform should be filtered on scan, even if evaluation is
    // done
    setUpTransformIterator(IllegalVisKeyTransformingIterator.class, false);
    checkExpected(new TreeMap<>());

    // ensure illegal vis is suppressed when evaluations is done
    setUpTransformIterator(IllegalVisKeyTransformingIterator.class);
    checkExpected(new TreeMap<>());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\user\TransformingIteratorTest.java
  public void testRangeStart() throws Exception {
    setUpTransformIterator(ColVisReversingKeyTransformingIterator.class);

    TreeMap<Key,Value> expected = new TreeMap<>();
    putExpected(expected, 1, 2, 2, 1, PartialKey.ROW_COLFAM_COLQUAL); // before the range start, but
                                                                      // transforms in the range
    putExpected(expected, 1, 2, 2, 2, PartialKey.ROW_COLFAM_COLQUAL);

    checkExpected(new Range(new Key("row1", "cf2", "cq2", "vis1"), true,
        new Key("row1", "cf2", "cq3"), false), expected);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\user\TransformingIteratorTest.java
  public void testRangeEnd() throws Exception {
    setUpTransformIterator(ColVisReversingKeyTransformingIterator.class);

    TreeMap<Key,Value> expected = new TreeMap<>();
    // putExpected(expected, 1, 2, 2, 1, part); // transforms vis outside range end
    putExpected(expected, 1, 2, 2, 2, PartialKey.ROW_COLFAM_COLQUAL);
    putExpected(expected, 1, 2, 2, 3, PartialKey.ROW_COLFAM_COLQUAL);

    checkExpected(new Range(new Key("row1", "cf2", "cq2"), true,
        new Key("row1", "cf2", "cq2", "vis2"), false), expected);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\user\TransformingIteratorTest.java
  public void testPrefixRange() throws Exception {
    setUpTransformIterator(ColFamReversingKeyTransformingIterator.class);
    // Set a range that is before all of the untransformed data. However,
    // the data with untransformed col fam cf3 will transform to cf0 and
    // be inside the range.

    TreeMap<Key,Value> expected = new TreeMap<>();
    for (int cq = 1; cq <= 3; ++cq) {
      for (int cv = 1; cv <= 3; ++cv) {
        putExpected(expected, 1, 3, cq, cv, PartialKey.ROW);
      }
    }
    checkExpected(new Range(new Key("row1", "cf0"), true, new Key("row1", "cf1"), false), expected);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\user\TransformingIteratorTest.java
  public void testPostfixRange() throws Exception {
    // Set a range that's after all data and make sure we don't
    // somehow return something.
    setUpTransformIterator(ColFamReversingKeyTransformingIterator.class);
    checkExpected(new Range(new Key("row4"), null), new TreeMap<>());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\user\TransformingIteratorTest.java
  public void testReplaceKeyParts() {
    TransformingIterator it = new IdentityKeyTransformingIterator();
    Key originalKey = new Key("r", "cf", "cq", "cv", 42);
    originalKey.setDeleted(true);

    Key newKey = it.replaceColumnFamily(originalKey, new Text("test"));
    assertEquals(createDeleteKey("r", "test", "cq", "cv", 42), newKey);

    newKey = it.replaceColumnQualifier(originalKey, new Text("test"));
    assertEquals(createDeleteKey("r", "cf", "test", "cv", 42), newKey);

    newKey = it.replaceColumnVisibility(originalKey, new Text("test"));
    assertEquals(createDeleteKey("r", "cf", "cq", "test", 42), newKey);

    newKey = it.replaceKeyParts(originalKey, new Text("testCQ"), new Text("testCV"));
    assertEquals(createDeleteKey("r", "cf", "testCQ", "testCV", 42), newKey);

    newKey =
        it.replaceKeyParts(originalKey, new Text("testCF"), new Text("testCQ"), new Text("testCV"));
    assertEquals(createDeleteKey("r", "testCF", "testCQ", "testCV", 42), newKey);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\user\TransformingIteratorTest.java
  public void testFetchColumnFamilites() throws Exception {
    // In this test, we are fetching column family cf2, which is in
    // the transformed space. The source column family that will
    // transform into cf2 is cf1, so that is the column family we
    // put in the expectations.
    int expectedCF = 1;
    setUpTransformIterator(ColFamReversingKeyTransformingIterator.class);

    TreeMap<Key,Value> expected = new TreeMap<>();
    for (int row = 1; row <= 3; ++row) {
      for (int cq = 1; cq <= 3; ++cq) {
        for (int cv = 1; cv <= 3; ++cv) {
          putExpected(expected, row, expectedCF, cq, cv, PartialKey.ROW);
        }
      }
    }
    checkExpected(expected, "cf2");
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\user\TransformingIteratorTest.java
  public void testDeepCopy() throws Exception {
    ColumnVisibility vis1 = new ColumnVisibility("vis1");
    ColumnVisibility vis3 = new ColumnVisibility("vis3");

    data.clear();

    Value ev = new Value("");

    data.put(new Key("shard001", "foo", "doc02", vis1, 78), ev);
    data.put(new Key("shard001", "dog", "doc02", vis3, 78), ev);
    data.put(new Key("shard001", "cat", "doc02", vis3, 78), ev);

    data.put(new Key("shard001", "bar", "doc03", vis1, 78), ev);
    data.put(new Key("shard001", "dog", "doc03", vis3, 78), ev);
    data.put(new Key("shard001", "cat", "doc03", vis3, 78), ev);

    setUpTransformIterator(ColVisReversingKeyTransformingIterator.class);

    IntersectingIterator iiIter = new IntersectingIterator();
    IteratorSetting iicfg = new IteratorSetting(22, IntersectingIterator.class);
    IntersectingIterator.setColumnFamilies(iicfg,
        new Text[] {new Text("foo"), new Text("dog"), new Text("cat")});
    iiIter.init(titer, iicfg.getOptions(), null);

    iiIter.seek(new Range(), new HashSet<>(), false);

    assertTrue(iiIter.hasTop());
    Key docKey = iiIter.getTopKey();
    assertEquals("shard001", docKey.getRowData().toString());
    assertEquals("doc02", docKey.getColumnQualifierData().toString());
    iiIter.next();
    assertFalse(iiIter.hasTop());
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\user\TransformingIteratorTest.java
  public void testCompactionScanFetchingColumnFamilies() throws Exception {
    // In this test, we are fetching column family cf2, which is in
    // the transformed space. The source column family that will
    // transform into cf2 is cf1, so that is the column family we
    // put in the expectations.
    int expectedCF = 1;
    setUpTransformIterator(ColFamReversingCompactionKeyTransformingIterator.class);

    TreeMap<Key,Value> expected = new TreeMap<>();
    for (int row = 1; row <= 3; ++row) {
      for (int cq = 1; cq <= 3; ++cq) {
        for (int cv = 1; cv <= 3; ++cv) {
          putExpected(expected, row, expectedCF, cq, cv, PartialKey.ROW);
        }
      }
    }
    checkExpected(expected, "cf2");
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\user\TransformingIteratorTest.java
  public void testCompactionDoesntFilterVisibilities() throws Exception {
    // In scan mode, this should return nothing since it produces visibilities
    // the user can't see. In compaction mode, however, the visibilities
    // should still show up.
    setUpTransformIterator(BadVisCompactionKeyTransformingIterator.class);

    TreeMap<Key,Value> expected = new TreeMap<>();
    for (int rowID = 1; rowID <= 3; ++rowID) {
      for (int cfID = 1; cfID <= 3; ++cfID) {
        for (int cqID = 1; cqID <= 3; ++cqID) {
          for (int cvID = 1; cvID <= 3; ++cvID) {
            String row = "row" + rowID;
            String cf = "cf" + cfID;
            String cq = "cq" + cqID;
            String cv = "badvis";
            long ts = 100 * cfID + 10 * cqID + cvID;
            String val = "val" + ts;
            expected.put(new Key(row, cf, cq, cv, ts), new Value(val));
          }
        }
      }
    }

    checkExpected(expected);
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\user\TransformingIteratorTest.java
  public void testCompactionAndIllegalVisibility() throws Exception {
    setUpTransformIterator(IllegalVisCompactionKeyTransformingIterator.class);
    try {
      checkExpected(new TreeMap<>());
      fail();
    } catch (Exception e) {

    }
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\user\TransformingIteratorTest.java
  public void testDupes() throws Exception {
    setUpTransformIterator(DupeTransformingIterator.class);

    titer.seek(new Range(), new HashSet<>(), false);

    int count = 0;
    while (titer.hasTop()) {
      Key key = titer.getTopKey();
      titer.next();
      assertEquals("cf1", key.getColumnFamily().toString());
      assertEquals("cq1", key.getColumnQualifier().toString());
      assertEquals("", key.getColumnVisibility().toString());
      assertEquals(5L, key.getTimestamp());
      count++;
    }

    assertEquals(81, count);
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\user\TransformingIteratorTest.java
  public void testValidateOptions() {
    TransformingIterator ti = new ColFamReversingKeyTransformingIterator();
    IteratorSetting is =
        new IteratorSetting(100, "cfrkt", ColFamReversingKeyTransformingIterator.class);
    TransformingIterator.setAuthorizations(is, new Authorizations("A", "B"));
    TransformingIterator.setMaxBufferSize(is, 10000000);
    assertTrue(ti.validateOptions(is.getOptions()));

    Map<String,String> opts = new HashMap<>();

    opts.put(TransformingIterator.MAX_BUFFER_SIZE_OPT, "10M");
    assertTrue(ti.validateOptions(is.getOptions()));

    opts.clear();
    opts.put(TransformingIterator.MAX_BUFFER_SIZE_OPT, "A,B");
    try {
      ti.validateOptions(opts);
      fail();
    } catch (IllegalArgumentException e) {}

    opts.clear();
    opts.put(TransformingIterator.AUTH_OPT, Authorizations.HEADER + "~~~~");
    try {
      ti.validateOptions(opts);
      fail();
    } catch (IllegalArgumentException e) {}

  }

  private Key createDeleteKey(String row, String colFam, String colQual, String colVis,
      long timestamp) {
    Key key = new Key(row, colFam, colQual, colVis, timestamp);
    key.setDeleted(true);
    return key;
  }

  private void checkExpected(Range range, TreeMap<Key,Value> expectedEntries) throws IOException {
    checkExpected(range, new HashSet<>(), expectedEntries);
  }

  private void checkExpected(TreeMap<Key,Value> expectedEntries, String... fa) throws IOException {

    HashSet<ByteSequence> families = new HashSet<>();
    for (String family : fa) {
      families.add(new ArrayByteSequence(family));
    }

    checkExpected(new Range(), families, expectedEntries);
  }

  private void checkExpected(Range range, Set<ByteSequence> families,
      TreeMap<Key,Value> expectedEntries) throws IOException {

    titer.seek(range, families, !families.isEmpty());

    while (titer.hasTop()) {
      Entry<Key,Value> expected = expectedEntries.pollFirstEntry();
      Key actualKey = titer.getTopKey();
      Value actualValue = titer.getTopValue();
      titer.next();

      assertNotNull("Ran out of expected entries on: " + actualKey, expected);
      assertEquals("Key mismatch", expected.getKey(), actualKey);
      assertEquals("Value mismatch", expected.getValue(), actualValue);
    }

    assertTrue("Scanner did not return all expected entries: " + expectedEntries,
        expectedEntries.isEmpty());
  }

  private static void putExpected(SortedMap<Key,Value> expected, int rowID, int cfID, int cqID,
      int cvID, PartialKey part) {
    String row = "row" + rowID;
    String cf = "cf" + cfID;
    String cq = "cq" + cqID;
    String cv = "vis" + cvID;
    long ts = 100 * cfID + 10 * cqID + cvID;
    String val = "val" + ts;

    if (part != null) {
      switch (part) {
        case ROW:
          cf = transform(new Text(cf)).toString();
          break;
        case ROW_COLFAM:
          cq = transform(new Text(cq)).toString();
          break;
        case ROW_COLFAM_COLQUAL:
          cv = transform(new Text(cv)).toString();
          break;
        default:
          break;
      }
    }

    expected.put(new Key(row, cf, cq, cv, ts), new Value(val));
  }

  private static Text transform(Text val) {
    String s = val.toString();
    // Reverse the order of the number at the end, and subtract one
    int i = 3 - Integer.parseInt(s.substring(s.length() - 1));
    StringBuilder sb = new StringBuilder();
    sb.append(s.substring(0, s.length() - 1));
    sb.append(i);
    return new Text(sb.toString());
  }

  private static void generateRow(TreeMap<Key,Value> data, String row) {

    for (int cfID = 1; cfID <= 3; ++cfID) {
      for (int cqID = 1; cqID <= 3; ++cqID) {
        for (int cvID = 1; cvID <= 3; ++cvID) {
          String cf = "cf" + cfID;
          String cq = "cq" + cqID;
          String cv = "vis" + cvID;
          long ts = 100 * cfID + 10 * cqID + cvID;
          String val = "val" + ts;

          Key k = new Key(row, cf, cq, cv, ts);
          Value v = new Value(val);
          data.put(k, v);
        }
      }
    }

  }

  private static Key reverseKeyPart(Key originalKey, PartialKey part) {
    Text row = originalKey.getRow();
    Text cf = originalKey.getColumnFamily();
    Text cq = originalKey.getColumnQualifier();
    Text cv = originalKey.getColumnVisibility();
    long ts = originalKey.getTimestamp();
    switch (part) {
      case ROW:
        cf = transform(cf);
        break;
      case ROW_COLFAM:
        cq = transform(cq);
        break;
      case ROW_COLFAM_COLQUAL:
        cv = transform(cv);
        break;
      default:
        break;
    }
    return new Key(row, cf, cq, cv, ts);
  }

  public static class IdentityKeyTransformingIterator extends TransformingIterator {
    @Override
    protected PartialKey getKeyPrefix() {
      return PartialKey.ROW;
    }

    @Override
    protected void transformRange(SortedKeyValueIterator<Key,Value> input, KVBuffer output)
        throws IOException {
      while (input.hasTop()) {
        output.append(input.getTopKey(), input.getTopValue());
        input.next();
      }
    }
  }

  public static class DupeTransformingIterator extends TransformingIterator {
    @Override
    protected void transformRange(SortedKeyValueIterator<Key,Value> input, KVBuffer output)
        throws IOException {
      while (input.hasTop()) {
        Key originalKey = input.getTopKey();
        Key ret = replaceKeyParts(originalKey, new Text("cf1"), new Text("cq1"), new Text(""));
        ret.setTimestamp(5);
        output.append(ret, input.getTopValue());
        input.next();
      }
    }

    @Override
    protected PartialKey getKeyPrefix() {
      return PartialKey.ROW;
    }

  }

  public abstract static class ReversingKeyTransformingIterator extends TransformingIterator {

    @Override
    protected void transformRange(SortedKeyValueIterator<Key,Value> input, KVBuffer output)
        throws IOException {
      while (input.hasTop()) {
        Key originalKey = input.getTopKey();
        output.append(reverseKeyPart(originalKey, getKeyPrefix()), input.getTopValue());
        input.next();
      }
    }
  }

  public static class ColFamReversingKeyTransformingIterator
      extends ReversingKeyTransformingIterator {
    @Override
    protected PartialKey getKeyPrefix() {
      return PartialKey.ROW;
    }

    @Override
    protected Collection<ByteSequence>
        untransformColumnFamilies(Collection<ByteSequence> columnFamilies) {
      HashSet<ByteSequence> untransformed = new HashSet<>();
      for (ByteSequence cf : columnFamilies) {
        untransformed.add(untransformColumnFamily(cf));
      }
      return untransformed;
    }

    protected ByteSequence untransformColumnFamily(ByteSequence colFam) {
      Text transformed = transform(new Text(colFam.toArray()));
      byte[] bytes = transformed.getBytes();
      return new ArrayByteSequence(bytes, 0, transformed.getLength());
    }
  }

  public static class ColFamReversingCompactionKeyTransformingIterator
      extends ColFamReversingKeyTransformingIterator {
    @Override
    public void init(SortedKeyValueIterator<Key,Value> source, Map<String,String> options,
        IteratorEnvironment env) throws IOException {
      env = new MajCIteratorEnvironmentAdapter();
      super.init(source, options, env);
    }
  }

  public static class ColQualReversingKeyTransformingIterator
      extends ReversingKeyTransformingIterator {
    @Override
    protected PartialKey getKeyPrefix() {
      return PartialKey.ROW_COLFAM;
    }
  }

  public static class ColVisReversingKeyTransformingIterator
      extends ReversingKeyTransformingIterator {
    @Override
    protected PartialKey getKeyPrefix() {
      return PartialKey.ROW_COLFAM_COLQUAL;
    }
  }

  public static class IllegalVisKeyTransformingIterator extends TransformingIterator {
    @Override
    protected PartialKey getKeyPrefix() {
      return PartialKey.ROW_COLFAM_COLQUAL;
    }

    @Override
    protected void transformRange(SortedKeyValueIterator<Key,Value> input, KVBuffer output)
        throws IOException {
      while (input.hasTop()) {
        Key originalKey = input.getTopKey();
        output.append(
            new Key(originalKey.getRow(), originalKey.getColumnFamily(),
                originalKey.getColumnQualifier(), new Text("A&|||"), originalKey.getTimestamp()),
            input.getTopValue());
        input.next();
      }
    }
  }

  public static class IllegalVisCompactionKeyTransformingIterator
      extends IllegalVisKeyTransformingIterator {
    @Override
    public void init(SortedKeyValueIterator<Key,Value> source, Map<String,String> options,
        IteratorEnvironment env) throws IOException {
      env = new MajCIteratorEnvironmentAdapter();
      super.init(source, options, env);
    }
  }

  public static class BadVisKeyTransformingIterator extends TransformingIterator {
    @Override
    protected PartialKey getKeyPrefix() {
      return PartialKey.ROW_COLFAM_COLQUAL;
    }

    @Override
    protected void transformRange(SortedKeyValueIterator<Key,Value> input, KVBuffer output)
        throws IOException {
      while (input.hasTop()) {
        Key originalKey = input.getTopKey();
        output.append(
            new Key(originalKey.getRow(), originalKey.getColumnFamily(),
                originalKey.getColumnQualifier(), new Text("badvis"), originalKey.getTimestamp()),
            input.getTopValue());
        input.next();
      }
    }
  }

  public static class BadVisCompactionKeyTransformingIterator
      extends BadVisKeyTransformingIterator {
    @Override
    public void init(SortedKeyValueIterator<Key,Value> source, Map<String,String> options,
        IteratorEnvironment env) throws IOException {
      env = new MajCIteratorEnvironmentAdapter();
      super.init(source, options, env);
    }
  }

  public static class ReuseIterator extends WrappingIterator {
    private Key topKey = new Key();
    private Value topValue = new Value();

    @Override
    public SortedKeyValueIterator<Key,Value> deepCopy(IteratorEnvironment env) {
      ReuseIterator rei = new ReuseIterator();
      rei.setSource(getSource().deepCopy(env));
      return rei;
    }

    @Override
    public void seek(Range range, Collection<ByteSequence> columnFamilies, boolean inclusive)
        throws IOException {
      super.seek(range, columnFamilies, inclusive);
      loadTop();
    }

    @Override
    public void next() throws IOException {
      super.next();
      loadTop();
    }

    @Override
    public Key getTopKey() {
      return topKey;
    }

    @Override
    public Value getTopValue() {
      return topValue;
    }

    private void loadTop() {
      if (hasTop()) {
        topKey.set(super.getTopKey());
        topValue.set(super.getTopValue().get());
      }
    }
  }

  private static class MajCIteratorEnvironmentAdapter implements IteratorEnvironment {
    @Override
    public IteratorScope getIteratorScope() {
      return IteratorScope.majc;
    }
  }
}
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\user\VersioningIteratorTest.java
  public void test1() {
    Text colf = new Text("a");
    Text colq = new Text("b");

    TreeMap<Key,Value> tm = new TreeMap<>();

    createTestData(tm, colf, colq);

    try {
      VersioningIterator it = new VersioningIterator();
      IteratorSetting is = new IteratorSetting(1, VersioningIterator.class);
      VersioningIterator.setMaxVersions(is, 3);
      it.init(new SortedMapIterator(tm), is.getOptions(), null);
      it.seek(new Range(), EMPTY_COL_FAMS, false);

      TreeMap<Key,Value> tmOut = iteratorOverTestData(it);

      for (Entry<Key,Value> e : tmOut.entrySet()) {
        assertEquals(8, e.getValue().get().length);
        assertTrue(16 < encoder.decode(e.getValue().get()));
      }
      assertEquals("size after keeping 3 versions was " + tmOut.size(), 6, tmOut.size());
    } catch (IOException e) {
      fail();
    } catch (Exception e) {
      log.error("{}", e.getMessage(), e);
      fail();
    }
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\user\VersioningIteratorTest.java
  public void test2() {
    Text colf = new Text("a");
    Text colq = new Text("b");

    TreeMap<Key,Value> tm = new TreeMap<>();

    createTestData(tm, colf, colq);

    try {
      VersioningIterator it = new VersioningIterator();
      IteratorSetting is = new IteratorSetting(1, VersioningIterator.class);
      VersioningIterator.setMaxVersions(is, 3);
      it.init(new SortedMapIterator(tm), is.getOptions(), null);

      // after doing this seek, should only get two keys for row 1
      // since we are seeking to the middle of the most recent
      // three keys
      Key seekKey = new Key(new Text(String.format("%03d", 1)), colf, colq, 18);
      it.seek(new Range(seekKey, null), EMPTY_COL_FAMS, false);

      TreeMap<Key,Value> tmOut = iteratorOverTestData(it);

      for (Entry<Key,Value> e : tmOut.entrySet()) {
        assertEquals(8, e.getValue().get().length);
        assertTrue(16 < encoder.decode(e.getValue().get()));
      }
      assertEquals("size after keeping 2 versions was " + tmOut.size(), 2, tmOut.size());
    } catch (IOException e) {
      fail();
    } catch (Exception e) {
      log.error("{}", e.getMessage(), e);
      fail();
    }
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\user\VersioningIteratorTest.java
  public void test3() {
    Text colf = new Text("a");
    Text colq = new Text("b");

    TreeMap<Key,Value> tm = new TreeMap<>();

    createTestData(tm, colf, colq);

    try {
      VersioningIterator it = new VersioningIterator();
      IteratorSetting is = new IteratorSetting(1, VersioningIterator.class);
      VersioningIterator.setMaxVersions(is, 3);
      it.init(new SortedMapIterator(tm), is.getOptions(), null);

      // after doing this seek, should get zero keys for row 1
      Key seekKey = new Key(new Text(String.format("%03d", 1)), colf, colq, 15);
      it.seek(new Range(seekKey, null), EMPTY_COL_FAMS, false);

      TreeMap<Key,Value> tmOut = iteratorOverTestData(it);

      for (Entry<Key,Value> e : tmOut.entrySet()) {
        assertEquals(8, e.getValue().get().length);
        assertTrue(16 < encoder.decode(e.getValue().get()));
      }

      assertEquals("size after seeking past versions was " + tmOut.size(), 0, tmOut.size());

      // after doing this seek, should get zero keys for row 0 and 3 keys for row 1
      seekKey = new Key(new Text(String.format("%03d", 0)), colf, colq, 15);
      it.seek(new Range(seekKey, null), EMPTY_COL_FAMS, false);

      tmOut = iteratorOverTestData(it);

      for (Entry<Key,Value> e : tmOut.entrySet()) {
        assertEquals(8, e.getValue().get().length);
        assertTrue(16 < encoder.decode(e.getValue().get()));
      }

      assertEquals("size after seeking past versions was " + tmOut.size(), 3, tmOut.size());

    } catch (IOException e) {
      fail();
    } catch (Exception e) {
      log.error("{}", e.getMessage(), e);
      fail();
    }
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\user\VersioningIteratorTest.java
  public void test4() {
    Text colf = new Text("a");
    Text colq = new Text("b");

    TreeMap<Key,Value> tm = new TreeMap<>();

    createTestData(tm, colf, colq);

    for (int i = 1; i <= 30; i++) {
      try {
        VersioningIterator it = new VersioningIterator();
        IteratorSetting is = new IteratorSetting(1, VersioningIterator.class);
        VersioningIterator.setMaxVersions(is, i);
        it.init(new SortedMapIterator(tm), is.getOptions(), null);
        it.seek(new Range(), EMPTY_COL_FAMS, false);

        TreeMap<Key,Value> tmOut = iteratorOverTestData(it);

        assertEquals("size after keeping " + i + " versions was " + tmOut.size(), tmOut.size(),
            Math.min(40, 2 * i));
      } catch (IOException e) {
        fail();
      } catch (Exception e) {
        log.error("{}", e.getMessage(), e);
        fail();
      }
    }
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\user\VersioningIteratorTest.java
  public void test5() throws IOException {
    Text colf = new Text("a");
    Text colq = new Text("b");

    TreeMap<Key,Value> tm = new TreeMap<>();

    createTestData(tm, colf, colq);

    VersioningIterator it = new VersioningIterator();
    IteratorSetting is = new IteratorSetting(1, VersioningIterator.class);
    VersioningIterator.setMaxVersions(is, 3);
    it.init(new SortedMapIterator(tm), is.getOptions(), null);

    Key seekKey = new Key(new Text(String.format("%03d", 1)), colf, colq, 19);
    it.seek(new Range(seekKey, false, null, true), EMPTY_COL_FAMS, false);

    assertTrue(it.hasTop());
    assertEquals(18, it.getTopKey().getTimestamp());

  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\user\VersioningIteratorTest.java
  public void test6() throws IOException {
    Text colf = new Text("a");
    Text colq = new Text("b");

    TreeMap<Key,Value> tm = new TreeMap<>();

    createTestData(tm, colf, colq);

    VersioningIterator it = new VersioningIterator();
    IteratorSetting is = new IteratorSetting(1, VersioningIterator.class);
    VersioningIterator.setMaxVersions(is, 3);
    it.init(new SortedMapIterator(tm), is.getOptions(), null);
    VersioningIterator it2 = it.deepCopy(null);

    Key seekKey = new Key(new Text(String.format("%03d", 1)), colf, colq, 19);
    it.seek(new Range(seekKey, false, null, true), EMPTY_COL_FAMS, false);
    it2.seek(new Range(seekKey, false, null, true), EMPTY_COL_FAMS, false);

    assertTrue(it.hasTop());
    assertEquals(18, it.getTopKey().getTimestamp());

    assertTrue(it2.hasTop());
    assertEquals(18, it2.getTopKey().getTimestamp());
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\user\VersioningIteratorTest.java
  public void test_maxLongExclusiveKey() throws IOException {
    Text row = new Text("a");
    Text colf = new Text("b");
    Text colq = new Text("c");
    Text cv = new Text();

    TreeMap<Key,Value> tm = new TreeMap<>();
    tm.put(new Key(row, colf, colq, cv, Long.MAX_VALUE), new Value("00"));
    tm.put(new Key(row, colf, colq, cv, Long.MAX_VALUE - 1), new Value("11"));

    VersioningIterator it = new VersioningIterator();
    IteratorSetting is = new IteratorSetting(1, VersioningIterator.class);
    VersioningIterator.setMaxVersions(is, 1);
    it.init(new SortedMapIterator(tm), is.getOptions(), null);

    Key startKey = new Key(row, colf, colq, cv, Long.MAX_VALUE);
    Range testRange = new Range(startKey, false, startKey.followingKey(PartialKey.ROW), true);
    it.seek(testRange, EMPTY_COL_FAMS, false);

    assertFalse(it.hasTop());
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\user\VersioningIteratorTest.java
  public void test_maxLongInclusiveKey() throws IOException {
    Text row = new Text("a");
    Text colf = new Text("b");
    Text colq = new Text("c");
    Text cv = new Text();

    TreeMap<Key,Value> tm = new TreeMap<>();
    tm.put(new Key(row, colf, colq, cv, Long.MAX_VALUE), new Value("00"));
    tm.put(new Key(row, colf, colq, cv, Long.MAX_VALUE - 1), new Value("11"));

    VersioningIterator it = new VersioningIterator();
    IteratorSetting is = new IteratorSetting(1, VersioningIterator.class);
    VersioningIterator.setMaxVersions(is, 1);
    it.init(new SortedMapIterator(tm), is.getOptions(), null);

    Key startKey = new Key(row, colf, colq, cv, Long.MAX_VALUE);
    Range testRange = new Range(startKey, true, startKey.followingKey(PartialKey.ROW), true);
    it.seek(testRange, EMPTY_COL_FAMS, false);

    assertTrue(it.hasTop());
    assertTrue(it.getTopValue().contentEquals("00".getBytes()));
    it.next();
    assertFalse(it.hasTop());
  }
}
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\user\VisibilityFilterTest.java
  public void testAllowValidLabelsOnly() throws IOException {
    IteratorSetting is = new IteratorSetting(1, VisibilityFilter.class);
    VisibilityFilter.filterInvalidLabelsOnly(is, true);

    TreeMap<Key,Value> source = createPollutedSource(1, 2);
    verify(source, 3, is.getOptions(), GOOD, GOOD, GOOD_VIS, 1);

    source = createPollutedSource(30, 500);
    verify(source, 530, is.getOptions(), GOOD, GOOD, GOOD_VIS, 30);

    source = createPollutedSource(1000, 500);
    verify(source, 1500, is.getOptions(), GOOD, GOOD, GOOD_VIS, 1000);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\user\VisibilityFilterTest.java
  public void testAllowBadLabelsOnly() throws IOException {
    IteratorSetting is = new IteratorSetting(1, VisibilityFilter.class);
    VisibilityFilter.setNegate(is, true);
    VisibilityFilter.filterInvalidLabelsOnly(is, true);

    TreeMap<Key,Value> source = createPollutedSource(1, 2);
    verify(source, 3, is.getOptions(), BAD, BAD, BAD_VIS, 2);

    source = createPollutedSource(30, 500);
    verify(source, 530, is.getOptions(), BAD, BAD, BAD_VIS, 500);

    source = createPollutedSource(1000, 500);
    verify(source, 1500, is.getOptions(), BAD, BAD, BAD_VIS, 500);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\user\VisibilityFilterTest.java
  public void testAllowAuthorizedLabelsOnly() throws IOException {
    IteratorSetting is = new IteratorSetting(1, VisibilityFilter.class);
    VisibilityFilter.setAuthorizations(is, new Authorizations("def"));

    TreeMap<Key,Value> source = createSourceWithHiddenData(1, 2);
    verify(source, 3, is.getOptions(), GOOD, GOOD, GOOD_VIS, 1);

    source = createSourceWithHiddenData(30, 500);
    verify(source, 530, is.getOptions(), GOOD, GOOD, GOOD_VIS, 30);

    source = createSourceWithHiddenData(1000, 500);
    verify(source, 1500, is.getOptions(), GOOD, GOOD, GOOD_VIS, 1000);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\user\VisibilityFilterTest.java
  public void testAllowUnauthorizedLabelsOnly() throws IOException {
    IteratorSetting is = new IteratorSetting(1, VisibilityFilter.class);
    VisibilityFilter.setNegate(is, true);
    VisibilityFilter.setAuthorizations(is, new Authorizations("def"));

    TreeMap<Key,Value> source = createSourceWithHiddenData(1, 2);
    verify(source, 3, is.getOptions(), BAD, BAD, HIDDEN_VIS, 2);

    source = createSourceWithHiddenData(30, 500);
    verify(source, 530, is.getOptions(), BAD, BAD, HIDDEN_VIS, 500);

    source = createSourceWithHiddenData(1000, 500);
    verify(source, 1500, is.getOptions(), BAD, BAD, HIDDEN_VIS, 500);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\user\VisibilityFilterTest.java
  public void testNoLabels() throws IOException {
    IteratorSetting is = new IteratorSetting(1, VisibilityFilter.class);
    VisibilityFilter.setNegate(is, false);
    VisibilityFilter.setAuthorizations(is, new Authorizations());

    TreeMap<Key,Value> source = createUnprotectedSource(5, 2);
    verify(source, 7, is.getOptions(), GOOD, GOOD, EMPTY_VIS, 5);

    VisibilityFilter.setNegate(is, true);
    verify(source, 7, is.getOptions(), BAD, BAD, GOOD_VIS, 2);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\user\VisibilityFilterTest.java
  public void testFilterUnauthorizedAndBad() throws IOException {
    /*
     * if not explicitly filtering bad labels, they will still be filtered while validating against
     * authorizations, but it will be very verbose in the logs
     */
    IteratorSetting is = new IteratorSetting(1, VisibilityFilter.class);
    VisibilityFilter.setAuthorizations(is, new Authorizations("def"));

    TreeMap<Key,Value> source = createSourceWithHiddenData(1, 5);
    for (Entry<Key,Value> entry : createPollutedSource(0, 1).entrySet())
      source.put(entry.getKey(), entry.getValue());

    verify(source, 7, is.getOptions(), GOOD, GOOD, GOOD_VIS, 1);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\user\VisibilityFilterTest.java
  public void testCommaSeparatedAuthorizations() throws IOException {
    Map<String,String> options = Collections.singletonMap("auths", "x,def,y");

    TreeMap<Key,Value> source = createSourceWithHiddenData(1, 2);
    verify(source, 3, options, GOOD, GOOD, GOOD_VIS, 1);

    source = createSourceWithHiddenData(30, 500);
    verify(source, 530, options, GOOD, GOOD, GOOD_VIS, 30);

    source = createSourceWithHiddenData(1000, 500);
    verify(source, 1500, options, GOOD, GOOD, GOOD_VIS, 1000);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\user\VisibilityFilterTest.java
  public void testSerializedAuthorizations() throws IOException {
    Map<String,String> options =
        Collections.singletonMap("auths", new Authorizations("x", "def", "y").serialize());

    TreeMap<Key,Value> source = createSourceWithHiddenData(1, 2);
    verify(source, 3, options, GOOD, GOOD, GOOD_VIS, 1);

    source = createSourceWithHiddenData(30, 500);
    verify(source, 530, options, GOOD, GOOD, GOOD_VIS, 30);

    source = createSourceWithHiddenData(1000, 500);
    verify(source, 1500, options, GOOD, GOOD, GOOD_VIS, 1000);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\user\VisibilityFilterTest.java
  public void testStaticConfigurators() {
    IteratorSetting is = new IteratorSetting(1, VisibilityFilter.class);
    VisibilityFilter.filterInvalidLabelsOnly(is, false);
    VisibilityFilter.setNegate(is, true);
    VisibilityFilter.setAuthorizations(is, new Authorizations("abc", "def"));

    Map<String,String> opts = is.getOptions();
    assertEquals("false", opts.get("filterInvalid"));
    assertEquals("true", opts.get("negate"));
    assertEquals(new Authorizations("abc", "def").serialize(), opts.get("auths"));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\user\WholeColumnFamilyIteratorTest.java
  public void testEmptyStuff() throws IOException {
    SortedMap<Key,Value> map = new TreeMap<>();
    SortedMap<Key,Value> map2 = new TreeMap<>();
    final Map<Text,Boolean> toInclude = new HashMap<>();
    map.put(new Key(new Text("r1"), new Text("cf1"), new Text("cq1"), new Text("cv1"), 1L),
        new Value("val1"));
    map.put(new Key(new Text("r1"), new Text("cf1"), new Text("cq2"), new Text("cv1"), 2L),
        new Value("val2"));
    map.put(new Key(new Text("r2"), new Text("cf1"), new Text("cq1"), new Text("cv1"), 3L),
        new Value("val3"));
    map.put(new Key(new Text("r2"), new Text("cf2"), new Text("cq1"), new Text("cv1"), 4L),
        new Value("val4"));
    map.put(new Key(new Text("r3"), new Text("cf1"), new Text("cq1"), new Text("cv1"), 5L),
        new Value("val4"));
    map.put(new Key(new Text("r3"), new Text("cf1"), new Text("cq1"), new Text("cv2"), 6L),
        new Value("val4"));
    map.put(new Key(new Text("r4"), new Text("cf1"), new Text("cq1"), new Text("cv1"), 7L),
        new Value(""));
    map.put(new Key(new Text("r4"), new Text("cf1"), new Text("cq1"), new Text(""), 8L),
        new Value("val1"));
    map.put(new Key(new Text("r4"), new Text("cf1"), new Text(""), new Text("cv1"), 9L),
        new Value("val1"));
    map.put(new Key(new Text("r4"), new Text(""), new Text("cq1"), new Text("cv1"), 10L),
        new Value("val1"));
    map.put(new Key(new Text(""), new Text("cf1"), new Text("cq1"), new Text("cv1"), 11L),
        new Value("val1"));
    boolean b = true;
    int trueCount = 0;
    for (Key k : map.keySet()) {
      if (toInclude.containsKey(k.getRow())) {
        if (toInclude.get(k.getRow())) {
          map2.put(k, map.get(k));
        }
        continue;
      }
      b = !b;
      toInclude.put(k.getRow(), b);
      if (b) {
        trueCount++;
        map2.put(k, map.get(k));
      }
    }
    SortedMapIterator source = new SortedMapIterator(map);
    WholeColumnFamilyIterator iter = new WholeColumnFamilyIterator(source);
    SortedMap<Key,Value> resultMap = new TreeMap<>();
    iter.seek(new Range(), new ArrayList<>(), false);
    int numRows = 0;
    while (iter.hasTop()) {
      numRows++;
      Key rowKey = iter.getTopKey();
      Value rowValue = iter.getTopValue();
      resultMap.putAll(WholeColumnFamilyIterator.decodeColumnFamily(rowKey, rowValue));
      iter.next();
    }

    // we have 7 groups of row key/cf
    assertEquals(7, numRows);

    assertEquals(resultMap, map);

    WholeColumnFamilyIterator iter2 = new WholeColumnFamilyIterator(source) {
      @Override
      public boolean filter(Text row, List<Key> keys, List<Value> values) {
        return toInclude.get(row);
      }
    };
    resultMap.clear();
    iter2.seek(new Range(), new ArrayList<>(), false);
    numRows = 0;
    while (iter2.hasTop()) {
      numRows++;
      Key rowKey = iter2.getTopKey();
      Value rowValue = iter2.getTopValue();
      resultMap.putAll(WholeColumnFamilyIterator.decodeColumnFamily(rowKey, rowValue));
      iter2.next();
    }
    assertEquals(numRows, trueCount);
    assertEquals(resultMap, map2);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\user\WholeColumnFamilyIteratorTest.java
  public void testContinue() throws Exception {
    SortedMap<Key,Value> map1 = new TreeMap<>();
    pkv(map1, "row1", "cf1", "cq1", "cv1", 5, "foo");
    pkv(map1, "row1", "cf1", "cq2", "cv1", 6, "bar");

    SortedMap<Key,Value> map2 = new TreeMap<>();
    pkv(map2, "row2", "cf1", "cq1", "cv1", 5, "foo");
    pkv(map2, "row2", "cf1", "cq2", "cv1", 6, "bar");

    SortedMap<Key,Value> map3 = new TreeMap<>();
    pkv(map3, "row3", "cf1", "cq1", "cv1", 5, "foo");
    pkv(map3, "row3", "cf1", "cq2", "cv1", 6, "bar");

    SortedMap<Key,Value> map = new TreeMap<>();
    map.putAll(map1);
    map.putAll(map2);
    map.putAll(map3);

    SortedMapIterator source = new SortedMapIterator(map);
    WholeColumnFamilyIterator iter = new WholeColumnFamilyIterator(source);

    Range range = new Range(new Text("row1"), true, new Text("row2"), true);
    iter.seek(range, new ArrayList<>(), false);

    assertTrue(iter.hasTop());
    assertEquals(map1,
        WholeColumnFamilyIterator.decodeColumnFamily(iter.getTopKey(), iter.getTopValue()));

    // simulate something continuing using the last key from the iterator
    // this is what client and server code will do
    range = new Range(iter.getTopKey(), false, range.getEndKey(), range.isEndKeyInclusive());
    iter.seek(range, new ArrayList<>(), false);

    assertTrue(iter.hasTop());
    assertEquals(map2,
        WholeColumnFamilyIterator.decodeColumnFamily(iter.getTopKey(), iter.getTopValue()));

    iter.next();

    assertFalse(iter.hasTop());

  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\user\WholeColumnFamilyIteratorTest.java
  public void testBug1() throws Exception {
    SortedMap<Key,Value> map1 = new TreeMap<>();
    pkv(map1, "row1", "cf1", "cq1", "cv1", 5, "foo");
    pkv(map1, "row1", "cf1", "cq2", "cv1", 6, "bar");

    SortedMap<Key,Value> map2 = new TreeMap<>();
    pkv(map2, "row2", "cf1", "cq1", "cv1", 5, "foo");

    SortedMap<Key,Value> map = new TreeMap<>();
    map.putAll(map1);
    map.putAll(map2);

    MultiIterator source = new MultiIterator(Collections.singletonList(new SortedMapIterator(map)),
        new Range(null, true, new Text("row1"), true));
    WholeColumnFamilyIterator iter = new WholeColumnFamilyIterator(source);

    Range range = new Range(new Text("row1"), true, new Text("row2"), true);
    iter.seek(range, new ArrayList<>(), false);

    assertTrue(iter.hasTop());
    assertEquals(map1,
        WholeColumnFamilyIterator.decodeColumnFamily(iter.getTopKey(), iter.getTopValue()));

    // simulate something continuing using the last key from the iterator
    // this is what client and server code will do
    range = new Range(iter.getTopKey(), false, range.getEndKey(), range.isEndKeyInclusive());
    iter.seek(range, new ArrayList<>(), false);

    assertFalse(iter.hasTop());

  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\user\WholeRowIteratorTest.java
  public void testBadDecodeRow() throws IOException {
    Key k = new Key(new Text("r1"), new Text("cf1234567890"));
    Value v = new Value("v1");
    Value encoded = WholeRowIterator.encodeRow(List.of(k), List.of(v));
    encoded.set(Arrays.copyOfRange(encoded.get(), 0, 10)); // truncate to 10 bytes only
    WholeRowIterator.decodeRow(k, encoded);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\user\WholeRowIteratorTest.java
  public void testEmptyStuff() throws IOException {
    SortedMap<Key,Value> map = new TreeMap<>();
    SortedMap<Key,Value> map2 = new TreeMap<>();
    final Map<Text,Boolean> toInclude = new HashMap<>();
    map.put(new Key(new Text("r1"), new Text("cf1"), new Text("cq1"), new Text("cv1"), 1L),
        new Value("val1"));
    map.put(new Key(new Text("r1"), new Text("cf1"), new Text("cq2"), new Text("cv1"), 2L),
        new Value("val2"));
    map.put(new Key(new Text("r2"), new Text("cf1"), new Text("cq1"), new Text("cv1"), 3L),
        new Value("val3"));
    map.put(new Key(new Text("r2"), new Text("cf2"), new Text("cq1"), new Text("cv1"), 4L),
        new Value("val4"));
    map.put(new Key(new Text("r3"), new Text("cf1"), new Text("cq1"), new Text("cv1"), 5L),
        new Value("val4"));
    map.put(new Key(new Text("r3"), new Text("cf1"), new Text("cq1"), new Text("cv2"), 6L),
        new Value("val4"));
    map.put(new Key(new Text("r4"), new Text("cf1"), new Text("cq1"), new Text("cv1"), 7L),
        new Value(""));
    map.put(new Key(new Text("r4"), new Text("cf1"), new Text("cq1"), new Text(""), 8L),
        new Value("val1"));
    map.put(new Key(new Text("r4"), new Text("cf1"), new Text(""), new Text("cv1"), 9L),
        new Value("val1"));
    map.put(new Key(new Text("r4"), new Text(""), new Text("cq1"), new Text("cv1"), 10L),
        new Value("val1"));
    map.put(new Key(new Text(""), new Text("cf1"), new Text("cq1"), new Text("cv1"), 11L),
        new Value("val1"));
    boolean b = true;
    int trueCount = 0;
    for (Key k : map.keySet()) {
      if (toInclude.containsKey(k.getRow())) {
        if (toInclude.get(k.getRow())) {
          map2.put(k, map.get(k));
        }
        continue;
      }
      b = !b;
      toInclude.put(k.getRow(), b);
      if (b) {
        trueCount++;
        map2.put(k, map.get(k));
      }
    }
    SortedMapIterator source = new SortedMapIterator(map);
    WholeRowIterator iter = new WholeRowIterator(source);
    SortedMap<Key,Value> resultMap = new TreeMap<>();
    iter.seek(new Range(), new ArrayList<>(), false);
    int numRows = 0;
    while (iter.hasTop()) {
      numRows++;
      Key rowKey = iter.getTopKey();
      Value rowValue = iter.getTopValue();
      resultMap.putAll(WholeRowIterator.decodeRow(rowKey, rowValue));
      iter.next();
    }
    assertEquals(5, numRows);
    assertEquals(resultMap, map);

    WholeRowIterator iter2 = new WholeRowIterator(source) {
      @Override
      public boolean filter(Text row, List<Key> keys, List<Value> values) {
        return toInclude.get(row);
      }
    };
    resultMap.clear();
    iter2.seek(new Range(), new ArrayList<>(), false);
    numRows = 0;
    while (iter2.hasTop()) {
      numRows++;
      Key rowKey = iter2.getTopKey();
      Value rowValue = iter2.getTopValue();
      resultMap.putAll(WholeRowIterator.decodeRow(rowKey, rowValue));
      iter2.next();
    }
    assertEquals(numRows, trueCount);
    assertEquals(resultMap, map2);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\user\WholeRowIteratorTest.java
  public void testContinue() throws Exception {
    SortedMap<Key,Value> map1 = new TreeMap<>();
    pkv(map1, "row1", "cf1", "cq1", "cv1", 5, "foo");
    pkv(map1, "row1", "cf1", "cq2", "cv1", 6, "bar");

    SortedMap<Key,Value> map2 = new TreeMap<>();
    pkv(map2, "row2", "cf1", "cq1", "cv1", 5, "foo");
    pkv(map2, "row2", "cf1", "cq2", "cv1", 6, "bar");

    SortedMap<Key,Value> map3 = new TreeMap<>();
    pkv(map3, "row3", "cf1", "cq1", "cv1", 5, "foo");
    pkv(map3, "row3", "cf1", "cq2", "cv1", 6, "bar");

    SortedMap<Key,Value> map = new TreeMap<>();
    map.putAll(map1);
    map.putAll(map2);
    map.putAll(map3);

    SortedMapIterator source = new SortedMapIterator(map);
    WholeRowIterator iter = new WholeRowIterator(source);

    Range range = new Range(new Text("row1"), true, new Text("row2"), true);
    iter.seek(range, new ArrayList<>(), false);

    assertTrue(iter.hasTop());
    assertEquals(map1, WholeRowIterator.decodeRow(iter.getTopKey(), iter.getTopValue()));

    // simulate something continuing using the last key from the iterator
    // this is what client and server code will do
    range = new Range(iter.getTopKey(), false, range.getEndKey(), range.isEndKeyInclusive());
    iter.seek(range, new ArrayList<>(), false);

    assertTrue(iter.hasTop());
    assertEquals(map2, WholeRowIterator.decodeRow(iter.getTopKey(), iter.getTopValue()));

    iter.next();

    assertFalse(iter.hasTop());

  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\iterators\user\WholeRowIteratorTest.java
  public void testBug1() throws Exception {
    SortedMap<Key,Value> map1 = new TreeMap<>();
    pkv(map1, "row1", "cf1", "cq1", "cv1", 5, "foo");
    pkv(map1, "row1", "cf1", "cq2", "cv1", 6, "bar");

    SortedMap<Key,Value> map2 = new TreeMap<>();
    pkv(map2, "row2", "cf1", "cq1", "cv1", 5, "foo");

    SortedMap<Key,Value> map = new TreeMap<>();
    map.putAll(map1);
    map.putAll(map2);

    MultiIterator source = new MultiIterator(Collections.singletonList(new SortedMapIterator(map)),
        new Range(null, true, new Text("row1"), true));
    WholeRowIterator iter = new WholeRowIterator(source);

    Range range = new Range(new Text("row1"), true, new Text("row2"), true);
    iter.seek(range, new ArrayList<>(), false);

    assertTrue(iter.hasTop());
    assertEquals(map1, WholeRowIterator.decodeRow(iter.getTopKey(), iter.getTopValue()));

    // simulate something continuing using the last key from the iterator
    // this is what client and server code will do
    range = new Range(iter.getTopKey(), false, range.getEndKey(), range.isEndKeyInclusive());
    iter.seek(range, new ArrayList<>(), false);

    assertFalse(iter.hasTop());

  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\metadata\MetadataServicerTest.java
  public void checkSystemTableIdentifiers() {
    assertNotEquals(RootTable.ID, MetadataTable.ID);
    assertNotEquals(RootTable.NAME, MetadataTable.NAME);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\metadata\MetadataServicerTest.java
  public void testGetCorrectServicer() throws AccumuloException, AccumuloSecurityException {
    MetadataServicer ms = MetadataServicer.forTableId(context, RootTable.ID);
    assertTrue(ms instanceof ServicerForRootTable);
    assertFalse(ms instanceof TableMetadataServicer);
    assertEquals(RootTable.ID, ms.getServicedTableId());

    ms = MetadataServicer.forTableId(context, MetadataTable.ID);
    assertTrue(ms instanceof ServicerForMetadataTable);
    assertTrue(ms instanceof TableMetadataServicer);
    assertEquals(RootTable.NAME, ((TableMetadataServicer) ms).getServicingTableName());
    assertEquals(MetadataTable.ID, ms.getServicedTableId());

    ms = MetadataServicer.forTableId(context, ReplicationTable.ID);
    assertTrue(ms instanceof ServicerForUserTables);
    assertTrue(ms instanceof TableMetadataServicer);
    assertEquals(MetadataTable.NAME, ((TableMetadataServicer) ms).getServicingTableName());
    assertEquals(ReplicationTable.ID, ms.getServicedTableId());

    ms = MetadataServicer.forTableId(context, userTableId);
    assertTrue(ms instanceof ServicerForUserTables);
    assertTrue(ms instanceof TableMetadataServicer);
    assertEquals(MetadataTable.NAME, ((TableMetadataServicer) ms).getServicingTableName());
    assertEquals(userTableId, ms.getServicedTableId());

    ms = MetadataServicer.forTableName(context, RootTable.NAME);
    assertTrue(ms instanceof ServicerForRootTable);
    assertFalse(ms instanceof TableMetadataServicer);
    assertEquals(RootTable.ID, ms.getServicedTableId());

    ms = MetadataServicer.forTableName(context, MetadataTable.NAME);
    assertTrue(ms instanceof ServicerForMetadataTable);
    assertTrue(ms instanceof TableMetadataServicer);
    assertEquals(RootTable.NAME, ((TableMetadataServicer) ms).getServicingTableName());
    assertEquals(MetadataTable.ID, ms.getServicedTableId());

    ms = MetadataServicer.forTableName(context, ReplicationTable.NAME);
    assertTrue(ms instanceof ServicerForUserTables);
    assertTrue(ms instanceof TableMetadataServicer);
    assertEquals(MetadataTable.NAME, ((TableMetadataServicer) ms).getServicingTableName());
    assertEquals(ReplicationTable.ID, ms.getServicedTableId());

    ms = MetadataServicer.forTableName(context, userTableName);
    assertTrue(ms instanceof ServicerForUserTables);
    assertTrue(ms instanceof TableMetadataServicer);
    assertEquals(MetadataTable.NAME, ((TableMetadataServicer) ms).getServicingTableName());
    assertEquals(userTableId, ms.getServicedTableId());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\metadata\schema\DeleteMetadataTest.java
  public void encodeRowTest() {
    String path = "/dir/testpath";
    assertEquals(path, DeletesSection.decodeRow(DeletesSection.encodeRow(path)));
    path = "hdfs://localhost:8020/dir/r+/1_table/f$%#";
    assertEquals(path, DeletesSection.decodeRow(DeletesSection.encodeRow(path)));

  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\metadata\schema\LinkingIteratorTest.java
  public void testHole() {

    List<TabletMetadata> tablets1 = Arrays.asList(create("4", null, "f"), create("4", "f", "m"),
        create("4", "r", "x"), create("4", "x", null));
    List<TabletMetadata> tablets2 = Arrays.asList(create("4", null, "f"), create("4", "f", "m"),
        create("4", "m", "r"), create("4", "r", "x"), create("4", "x", null));

    check(tablets2, new IterFactory(tablets1, tablets2));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\metadata\schema\LinkingIteratorTest.java
  public void testMerge() {
    // test for case when a tablet is merged away
    List<TabletMetadata> tablets1 = Arrays.asList(create("4", null, "f"), create("4", "f", "m"),
        create("4", "f", "r"), create("4", "x", null));
    List<TabletMetadata> tablets2 = Arrays.asList(create("4", null, "f"), create("4", "f", "r"),
        create("4", "r", "x"), create("4", "x", null));

    LinkingIterator li = new LinkingIterator(new IterFactory(tablets1, tablets2), new Range());

    while (li.hasNext()) {
      li.next();
    }
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\metadata\schema\LinkingIteratorTest.java
  public void testBadTableTransition1() {
    // test when last tablet in table does not have null end row
    List<TabletMetadata> tablets1 =
        Arrays.asList(create("4", null, "f"), create("4", "f", "m"), create("5", null, null));
    List<TabletMetadata> tablets2 = Arrays.asList(create("4", null, "f"), create("4", "f", "m"),
        create("4", "m", null), create("5", null, null));

    check(tablets2, new IterFactory(tablets1, tablets2));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\metadata\schema\LinkingIteratorTest.java
  public void testBadTableTransition2() {
    // test when first tablet in table does not have null prev end row
    List<TabletMetadata> tablets1 =
        Arrays.asList(create("4", null, "f"), create("4", "f", null), create("5", "h", null));
    List<TabletMetadata> tablets2 = Arrays.asList(create("4", null, "f"), create("4", "f", null),
        create("5", null, "h"), create("5", "h", null));

    check(tablets2, new IterFactory(tablets1, tablets2));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\metadata\schema\LinkingIteratorTest.java
  public void testFirstTabletSplits() {
    // check when first tablet has a prev end row that points to a non existent tablet. This could
    // be caused by the first table splitting concurrently with a metadata scan of the first tablet.
    List<TabletMetadata> tablets1 = Arrays.asList(create("4", "f", "m"), create("4", "m", null));
    List<TabletMetadata> tablets2 =
        Arrays.asList(create("4", null, "f"), create("4", "f", "m"), create("4", "m", null));

    check(tablets2, new IterFactory(tablets1, tablets2), TableId.of("4"));
    check(tablets2, new IterFactory(tablets1, tablets2),
        new KeyExtent(TableId.of("4"), null, new Text("e")).toMetaRange());

    // following should not care about missing tablet
    check(tablets1, new IterFactory(tablets1, tablets2),
        new KeyExtent(TableId.of("4"), null, new Text("g")).toMetaRange());
    check(tablets1, new IterFactory(tablets1, tablets2),
        new KeyExtent(TableId.of("4"), null, new Text("f")).toMetaRange());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\metadata\schema\LinkingIteratorTest.java
  public void testIncompleteTable() {
    // the last tablet in a table should have a null end row. Ensure the code detects when this does
    // not happen.
    List<TabletMetadata> tablets1 = Arrays.asList(create("4", null, "f"), create("4", "f", "m"));

    LinkingIterator li = new LinkingIterator(new IterFactory(tablets1, tablets1),
        TabletsSection.getRange(TableId.of("4")));

    while (li.hasNext()) {
      li.next();
    }
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\metadata\schema\LinkingIteratorTest.java
  public void testIncompleteTableWithRange() {
    // because the scan range does not got to end of table, this should not care about missing
    // tablets at end of table.
    List<TabletMetadata> tablets1 = Arrays.asList(create("4", null, "f"), create("4", "f", "m"));
    check(tablets1, new IterFactory(tablets1, tablets1),
        new KeyExtent(TableId.of("4"), new Text("r"), new Text("e")).toMetaRange());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\metadata\schema\MetadataSchemaTest.java
  public void testDecodeEncodePrevEndRow() {
    assertNull(TabletColumnFamily.decodePrevEndRow(TabletColumnFamily.encodePrevEndRow(null)));

    Text x = new Text();
    assertEquals(x, TabletColumnFamily.decodePrevEndRow(TabletColumnFamily.encodePrevEndRow(x)));

    Text ab = new Text("ab");
    assertEquals(ab, TabletColumnFamily.decodePrevEndRow(TabletColumnFamily.encodePrevEndRow(ab)));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\metadata\schema\MetadataTimeTest.java
  public void testGetInstance_InvalidType() {
    MetadataTime.parse("X1234");
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\metadata\schema\MetadataTimeTest.java
  public void testGetInstance_Logical_ParseFailure() {
    MetadataTime.parse("LABCD");
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\metadata\schema\MetadataTimeTest.java
  public void testGetInstance_Millis_ParseFailure() {
    MetadataTime.parse("MABCD");
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\metadata\schema\MetadataTimeTest.java
  public void testGetInstance_Millis() {
    assertEquals(1234, m1234.getTime());
    assertEquals(TimeType.MILLIS, m1234.getType());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\metadata\schema\MetadataTimeTest.java
  public void testGetInstance_Logical() {
    assertEquals(1234, l1234.getTime());
    assertEquals(TimeType.LOGICAL, l1234.getType());

  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\metadata\schema\MetadataTimeTest.java
  public void testEquality() {
    assertEquals(m1234, new MetadataTime(1234, TimeType.MILLIS));
    assertNotEquals(m1234, l1234);
    assertNotEquals(l1234, l5678);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\metadata\schema\MetadataTimeTest.java
  public void testValueOfM() {
    assertEquals(TimeType.MILLIS, MetadataTime.getType('M'));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\metadata\schema\MetadataTimeTest.java
  public void testValueOfL() {
    assertEquals(TimeType.LOGICAL, MetadataTime.getType('L'));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\metadata\schema\MetadataTimeTest.java
  public void testValueOfOtherChar() {
    MetadataTime.getType('x');
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\metadata\schema\MetadataTimeTest.java
  public void testgetCodeforTimeType() {
    assertEquals('M', MetadataTime.getCode(TimeType.MILLIS));
    assertEquals('L', MetadataTime.getCode(TimeType.LOGICAL));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\metadata\schema\MetadataTimeTest.java
  public void testgetCodeforMillis() {
    assertEquals('M', m1234.getCode());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\metadata\schema\MetadataTimeTest.java
  public void testgetCodeforLogical() {
    assertEquals('L', l1234.getCode());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\metadata\schema\MetadataTimeTest.java
  public void testenCode() {
    assertEquals("M21", new MetadataTime(21, TimeType.MILLIS).encode());
    assertEquals("L45678", new MetadataTime(45678, TimeType.LOGICAL).encode());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\metadata\schema\MetadataTimeTest.java
  public void testCompareTypesDiffer1() {
    m1234.compareTo(l1234);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\metadata\schema\MetadataTimeTest.java
  public void testCompareTypesDiffer2() {
    l1234.compareTo(m1234);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\metadata\schema\MetadataTimeTest.java
  public void testCompareSame() {
    assertTrue(m1234.compareTo(m1234) == 0);
    assertTrue(l1234.compareTo(l1234) == 0);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\metadata\schema\MetadataTimeTest.java
  public void testCompare1() {
    assertTrue(m1234.compareTo(m5678) < 0);
    assertTrue(l1234.compareTo(l5678) < 0);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\metadata\schema\MetadataTimeTest.java
  public void testCompare2() {
    assertTrue(m5678.compareTo(m1234) > 0);
    assertTrue(l5678.compareTo(l1234) > 0);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\metadata\schema\SortSkewTest.java
  public void verifyCodeSize() {
    int expectedLength = SortSkew.SORTSKEW_LENGTH;
    assertEquals(expectedLength, SortSkew.getCode(shortpath).length());
    assertEquals(expectedLength, SortSkew.getCode(longpath).length());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\metadata\schema\SortSkewTest.java
  public void verifySame() {
    assertEquals(SortSkew.getCode("123"), SortSkew.getCode("123"));
    assertNotEquals(SortSkew.getCode("123"), SortSkew.getCode("321"));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\metadata\schema\SortSkewTest.java
  public void verifyStable() {
    assertEquals(shortcode, SortSkew.getCode(shortpath));
    assertEquals(longcode, SortSkew.getCode(longpath));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\metadata\schema\TabletFileTest.java
  public void testValidPaths() {
    test("hdfs://localhost:8020/accumulo/tables/2a/default_tablet/F0000070.rf",
        "hdfs://localhost:8020/accumulo", "2a", "default_tablet", "F0000070.rf");
    test("hdfs://nn1:9000/accumulo/tables/5a/t-0005/C0009.rf", "hdfs://nn1:9000/accumulo", "5a",
        "t-0005", "C0009.rf");
    test(
        "file:/home/dude/workspace/accumulo/test/target/mini-tests/org.apache.accumulo.test.VolumeIT_test/volumes/v1/tables/1/t-0000003/F0000006.rf",
        "file:/home/dude/workspace/accumulo/test/target/mini-tests/org.apache.accumulo.test.VolumeIT_test/volumes/v1",
        "1", "t-0000003", "F0000006.rf");
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\metadata\schema\TabletFileTest.java
  public void testBadPaths() {
    try {
      test("C0004.rf", "", "2a", "t-0003", "C0004.rf");
      fail("Failed to throw error on bad path");
    } catch (NullPointerException e) {}
    // 2a< srv:dir
    try {
      test("dir", "", "2a", "", "");
      fail("Failed to throw error on bad path");
    } catch (NullPointerException e) {}
    try {
      test("hdfs://localhost:8020/accumulo/tablets/2a/default_tablet/F0000070.rf",
          "hdfs://localhost:8020/accumulo", "2a", "default_tablet", "F0000070.rf");
      fail("Failed to throw error on bad path");
    } catch (IllegalArgumentException e) {}
    try {
      test("hdfs://localhost:8020/accumulo/2a/default_tablet/F0000070.rf",
          " hdfs://localhost:8020/accumulo", "2a", "default_tablet", " F0000070.rf");
      fail("Failed to throw error on bad path");
    } catch (IllegalArgumentException e) {}
    try {
      test("/accumulo/tables/2a/default_tablet/F0000070.rf", "", "2a", "default_tablet",
          "F0000070.rf");
      fail("Failed to throw error on bad path");
    } catch (IllegalArgumentException e) {}
    try {
      test("hdfs://localhost:8020/accumulo/tables/2a/F0000070.rf", "hdfs://localhost:8020/accumulo",
          "2a", "", "F0000070.rf");
      fail("Failed to throw error on bad path");
    } catch (IllegalArgumentException e) {}
    try {
      test("hdfs://localhost:8020/accumulo/tables/F0000070.rf", "hdfs://localhost:8020/accumulo",
          null, "", "F0000070.rf");
      fail("Failed to throw error on bad path");
    } catch (IllegalArgumentException e) {}
  }

  private final String id = "2a";
  private final String dir = "t-0003";
  private final String filename = "C0004.rf";

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\metadata\schema\TabletFileTest.java
  public void testFullPathWithVolume() {
    String volume = "hdfs://1.2.3.4/accumulo";
    String metadataEntry = volume + "/tables/" + id + "/" + dir + "/" + filename;
    test(metadataEntry, volume, id, dir, filename);
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\metadata\schema\TabletFileTest.java
  public void testNormalizePath() {
    String uglyVolume = "hdfs://nn.somewhere.com:86753/accumulo/blah/.././/bad/bad2/../.././/////";
    String metadataEntry = uglyVolume + "/tables/" + id + "/" + dir + "/" + filename;
    TabletFile uglyFile =
        test(metadataEntry, "hdfs://nn.somewhere.com:86753/accumulo", id, dir, filename);
    TabletFile niceFile = new StoredTabletFile(
        "hdfs://nn.somewhere.com:86753/accumulo/tables/" + id + "/" + dir + "/" + filename);
    assertEquals(niceFile, uglyFile);
    assertEquals(niceFile.hashCode(), uglyFile.hashCode());
  }

}
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\metadata\schema\TabletMetadataTest.java
  public void testAllColumns() {
    KeyExtent extent = new KeyExtent(TableId.of("5"), new Text("df"), new Text("da"));

    Mutation mutation = TabletColumnFamily.createPrevRowMutation(extent);

    COMPACT_COLUMN.put(mutation, new Value("5"));
    DIRECTORY_COLUMN.put(mutation, new Value("t-0001757"));
    FLUSH_COLUMN.put(mutation, new Value("6"));
    TIME_COLUMN.put(mutation, new Value("M123456789"));

    String bf1 = "hdfs://nn1/acc/tables/1/t-0001/bf1";
    String bf2 = "hdfs://nn1/acc/tables/1/t-0001/bf2";
    mutation.at().family(BulkFileColumnFamily.NAME).qualifier(bf1).put(FateTxId.formatTid(56));
    mutation.at().family(BulkFileColumnFamily.NAME).qualifier(bf2).put(FateTxId.formatTid(59));

    mutation.at().family(ClonedColumnFamily.NAME).qualifier("").put("OK");

    DataFileValue dfv1 = new DataFileValue(555, 23);
    StoredTabletFile tf1 = new StoredTabletFile("hdfs://nn1/acc/tables/1/t-0001/df1.rf");
    StoredTabletFile tf2 = new StoredTabletFile("hdfs://nn1/acc/tables/1/t-0001/df2.rf");
    mutation.at().family(DataFileColumnFamily.NAME).qualifier(tf1.getMetaUpdateDelete())
        .put(dfv1.encode());
    DataFileValue dfv2 = new DataFileValue(234, 13);
    mutation.at().family(DataFileColumnFamily.NAME).qualifier(tf2.getMetaUpdateDelete())
        .put(dfv2.encode());

    mutation.at().family(CurrentLocationColumnFamily.NAME).qualifier("s001").put("server1:8555");

    mutation.at().family(LastLocationColumnFamily.NAME).qualifier("s000").put("server2:8555");

    LogEntry le1 = new LogEntry(extent, 55, "lf1");
    mutation.at().family(le1.getColumnFamily()).qualifier(le1.getColumnQualifier())
        .timestamp(le1.timestamp).put(le1.getValue());
    LogEntry le2 = new LogEntry(extent, 57, "lf2");
    mutation.at().family(le2.getColumnFamily()).qualifier(le2.getColumnQualifier())
        .timestamp(le2.timestamp).put(le2.getValue());

    StoredTabletFile sf1 = new StoredTabletFile("hdfs://nn1/acc/tables/1/t-0001/sf1.rf");
    StoredTabletFile sf2 = new StoredTabletFile("hdfs://nn1/acc/tables/1/t-0001/sf2.rf");
    mutation.at().family(ScanFileColumnFamily.NAME).qualifier(sf1.getMetaUpdateDelete()).put("");
    mutation.at().family(ScanFileColumnFamily.NAME).qualifier(sf2.getMetaUpdateDelete()).put("");

    SortedMap<Key,Value> rowMap = toRowMap(mutation);

    TabletMetadata tm = TabletMetadata.convertRow(rowMap.entrySet().iterator(),
        EnumSet.allOf(ColumnType.class), true);

    assertEquals("OK", tm.getCloned());
    assertEquals(5L, tm.getCompactId().getAsLong());
    assertEquals("t-0001757", tm.getDirName());
    assertEquals(extent.endRow(), tm.getEndRow());
    assertEquals(extent, tm.getExtent());
    assertEquals(Set.of(tf1, tf2), Set.copyOf(tm.getFiles()));
    assertEquals(Map.of(tf1, dfv1, tf2, dfv2), tm.getFilesMap());
    assertEquals(6L, tm.getFlushId().getAsLong());
    assertEquals(rowMap, tm.getKeyValues());
    assertEquals(Map.of(new StoredTabletFile(bf1), 56L, new StoredTabletFile(bf2), 59L),
        tm.getLoaded());
    assertEquals(HostAndPort.fromParts("server1", 8555), tm.getLocation().getHostAndPort());
    assertEquals("s001", tm.getLocation().getSession());
    assertEquals(LocationType.CURRENT, tm.getLocation().getType());
    assertTrue(tm.hasCurrent());
    assertEquals(HostAndPort.fromParts("server2", 8555), tm.getLast().getHostAndPort());
    assertEquals("s000", tm.getLast().getSession());
    assertEquals(LocationType.LAST, tm.getLast().getType());
    assertEquals(Set.of(le1.getValue() + " " + le1.timestamp, le2.getValue() + " " + le2.timestamp),
        tm.getLogs().stream().map(le -> le.getValue() + " " + le.timestamp).collect(toSet()));
    assertEquals(extent.prevEndRow(), tm.getPrevEndRow());
    assertEquals(extent.tableId(), tm.getTableId());
    assertTrue(tm.sawPrevEndRow());
    assertEquals("M123456789", tm.getTime().encode());
    assertEquals(Set.of(sf1, sf2), Set.copyOf(tm.getScans()));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\metadata\schema\TabletMetadataTest.java
  public void testFuture() {
    KeyExtent extent = new KeyExtent(TableId.of("5"), new Text("df"), new Text("da"));

    Mutation mutation = TabletColumnFamily.createPrevRowMutation(extent);
    mutation.at().family(FutureLocationColumnFamily.NAME).qualifier("s001").put("server1:8555");

    SortedMap<Key,Value> rowMap = toRowMap(mutation);

    TabletMetadata tm = TabletMetadata.convertRow(rowMap.entrySet().iterator(),
        EnumSet.allOf(ColumnType.class), false);

    assertEquals(extent, tm.getExtent());
    assertEquals(HostAndPort.fromParts("server1", 8555), tm.getLocation().getHostAndPort());
    assertEquals("s001", tm.getLocation().getSession());
    assertEquals(LocationType.FUTURE, tm.getLocation().getType());
    assertFalse(tm.hasCurrent());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\metadata\schema\TabletMetadataTest.java
  public void testFutureAndCurrent() {
    KeyExtent extent = new KeyExtent(TableId.of("5"), new Text("df"), new Text("da"));

    Mutation mutation = TabletColumnFamily.createPrevRowMutation(extent);
    mutation.at().family(CurrentLocationColumnFamily.NAME).qualifier("s001").put("server1:8555");
    mutation.at().family(FutureLocationColumnFamily.NAME).qualifier("s001").put("server1:8555");

    SortedMap<Key,Value> rowMap = toRowMap(mutation);

    TabletMetadata.convertRow(rowMap.entrySet().iterator(), EnumSet.allOf(ColumnType.class), false);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\metadata\schema\TabletMetadataTest.java
  public void testLocationStates() {
    KeyExtent extent = new KeyExtent(TableId.of("5"), new Text("df"), new Text("da"));
    TServerInstance ser1 = new TServerInstance(HostAndPort.fromParts("server1", 8555), "s001");
    TServerInstance ser2 = new TServerInstance(HostAndPort.fromParts("server2", 8111), "s002");
    TServerInstance deadSer = new TServerInstance(HostAndPort.fromParts("server3", 8000), "s003");
    Set<TServerInstance> tservers = new LinkedHashSet<>();
    tservers.add(ser1);
    tservers.add(ser2);
    EnumSet<ColumnType> colsToFetch = EnumSet.of(LOCATION, LAST, SUSPEND);

    // test assigned
    Mutation mutation = TabletColumnFamily.createPrevRowMutation(extent);
    mutation.at().family(FutureLocationColumnFamily.NAME).qualifier(ser1.getSession())
        .put(ser1.getHostPort());
    SortedMap<Key,Value> rowMap = toRowMap(mutation);

    TabletMetadata tm = TabletMetadata.convertRow(rowMap.entrySet().iterator(), colsToFetch, false);
    TabletState state = tm.getTabletState(tservers);

    assertEquals(TabletState.ASSIGNED, state);
    assertEquals(ser1, tm.getLocation());
    assertEquals(ser1.getSession(), tm.getLocation().getSession());
    assertEquals(LocationType.FUTURE, tm.getLocation().getType());
    assertFalse(tm.hasCurrent());

    // test hosted
    mutation = TabletColumnFamily.createPrevRowMutation(extent);
    mutation.at().family(CurrentLocationColumnFamily.NAME).qualifier(ser2.getSession())
        .put(ser2.getHostPort());
    rowMap = toRowMap(mutation);

    tm = TabletMetadata.convertRow(rowMap.entrySet().iterator(), colsToFetch, false);

    assertEquals(TabletState.HOSTED, tm.getTabletState(tservers));
    assertEquals(ser2, tm.getLocation());
    assertEquals(ser2.getSession(), tm.getLocation().getSession());
    assertEquals(LocationType.CURRENT, tm.getLocation().getType());
    assertTrue(tm.hasCurrent());

    // test ASSIGNED_TO_DEAD_SERVER
    mutation = TabletColumnFamily.createPrevRowMutation(extent);
    mutation.at().family(CurrentLocationColumnFamily.NAME).qualifier(deadSer.getSession())
        .put(deadSer.getHostPort());
    rowMap = toRowMap(mutation);

    tm = TabletMetadata.convertRow(rowMap.entrySet().iterator(), colsToFetch, false);

    assertEquals(TabletState.ASSIGNED_TO_DEAD_SERVER, tm.getTabletState(tservers));
    assertEquals(deadSer, tm.getLocation());
    assertEquals(deadSer.getSession(), tm.getLocation().getSession());
    assertEquals(LocationType.CURRENT, tm.getLocation().getType());
    assertTrue(tm.hasCurrent());

    // test UNASSIGNED
    mutation = TabletColumnFamily.createPrevRowMutation(extent);
    rowMap = toRowMap(mutation);

    tm = TabletMetadata.convertRow(rowMap.entrySet().iterator(), colsToFetch, false);

    assertEquals(TabletState.UNASSIGNED, tm.getTabletState(tservers));
    assertNull(tm.getLocation());
    assertFalse(tm.hasCurrent());

    // test SUSPENDED
    mutation = TabletColumnFamily.createPrevRowMutation(extent);
    mutation.at().family(SuspendLocationColumn.SUSPEND_COLUMN.getColumnFamily())
        .qualifier(SuspendLocationColumn.SUSPEND_COLUMN.getColumnQualifier())
        .put(SuspendingTServer.toValue(ser2, 1000L));
    rowMap = toRowMap(mutation);

    tm = TabletMetadata.convertRow(rowMap.entrySet().iterator(), colsToFetch, false);

    assertEquals(TabletState.SUSPENDED, tm.getTabletState(tservers));
    assertEquals(1000L, tm.getSuspend().suspensionTime);
    assertEquals(ser2.getHostAndPort(), tm.getSuspend().server);
    assertNull(tm.getLocation());
    assertFalse(tm.hasCurrent());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\replication\ReplicationConfigurationUtilTest.java
  public void rootTableExtent() {
    KeyExtent extent = new KeyExtent(RootTable.ID, null, null);
    assertFalse("The root table should never be replicated",
        ReplicationConfigurationUtil.isEnabled(extent, conf));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\replication\ReplicationConfigurationUtilTest.java
  public void metadataTableExtent() {
    KeyExtent extent = new KeyExtent(MetadataTable.ID, null, null);
    assertFalse("The metadata table should never be replicated",
        ReplicationConfigurationUtil.isEnabled(extent, conf));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\replication\ReplicationConfigurationUtilTest.java
  public void rootTableExtentEmptyConf() {
    KeyExtent extent = new KeyExtent(RootTable.ID, null, null);
    assertFalse("The root table should never be replicated",
        ReplicationConfigurationUtil.isEnabled(extent, new ConfigurationCopy(new HashMap<>())));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\replication\ReplicationConfigurationUtilTest.java
  public void metadataTableExtentEmptyConf() {
    KeyExtent extent = new KeyExtent(MetadataTable.ID, null, null);
    assertFalse("The metadata table should never be replicated",
        ReplicationConfigurationUtil.isEnabled(extent, new ConfigurationCopy(new HashMap<>())));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\replication\ReplicationConfigurationUtilTest.java
  public void regularTable() {
    KeyExtent extent = new KeyExtent(TableId.of("1"), new Text("b"), new Text("a"));
    assertTrue("Table should be replicated", ReplicationConfigurationUtil.isEnabled(extent, conf));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\replication\ReplicationConfigurationUtilTest.java
  public void regularNonEnabledTable() {
    KeyExtent extent = new KeyExtent(TableId.of("1"), new Text("b"), new Text("a"));
    assertFalse("Table should not be replicated",
        ReplicationConfigurationUtil.isEnabled(extent, new ConfigurationCopy(new HashMap<>())));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\replication\ReplicationSchemaTest.java
  public void extractFile() {
    String file = "hdfs://foo:8020/bar";
    Key k = new Key(new Text(file), StatusSection.NAME);
    Text extractedFile = new Text();
    StatusSection.getFile(k, extractedFile);
    assertEquals(file, extractedFile.toString());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\replication\ReplicationSchemaTest.java
  public void failOnNullKeyForFileExtract() {
    Text extractedFile = new Text();
    StatusSection.getFile(null, extractedFile);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\replication\ReplicationSchemaTest.java
  public void failOnNullBufferForFileExtract() {
    String file = "hdfs://foo:8020/bar";
    Key k = new Key(file);
    Text extractedFile = null;
    StatusSection.getFile(k, extractedFile);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\replication\ReplicationSchemaTest.java
  public void failOnExtractEmptyFile() {
    String file = "";
    Key k = new Key(file);
    Text extractedFile = new Text();
    StatusSection.getFile(k, extractedFile);
    assertEquals(file, extractedFile.toString());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\replication\ReplicationSchemaTest.java
  public void extractTableId() {
    TableId tableId = TableId.of("1");
    Key k = new Key(new Text("foo"), StatusSection.NAME, new Text(tableId.canonical()));
    assertEquals(tableId, StatusSection.getTableId(k));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\replication\ReplicationSchemaTest.java
  public void extractTableIdUsingText() {
    TableId tableId = TableId.of("1");
    Key k = new Key(new Text("foo"), StatusSection.NAME, new Text(tableId.canonical()));
    assertEquals(tableId, StatusSection.getTableId(k));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\replication\ReplicationSchemaTest.java
  public void failOnNullKeyForTableIdExtract() {
    Text extractedFile = new Text();
    StatusSection.getFile(null, extractedFile);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\replication\ReplicationSchemaTest.java
  public void failOnNullBufferForTableIdExtract() {
    String file = "hdfs://foo:8020/bar";
    Key k = new Key(file);
    Text extractedFile = null;
    StatusSection.getFile(k, extractedFile);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\replication\ReplicationSchemaTest.java
  public void failOnIncorrectStatusColfam() {
    Key k = new Key("file", WorkSection.NAME.toString(), "");
    StatusSection.getFile(k, new Text());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\replication\ReplicationSchemaTest.java
  public void failOnIncorrectWorkColfam() {
    Key k = new Key("file", StatusSection.NAME.toString(), "");
    WorkSection.getFile(k, new Text());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\replication\ReplicationSchemaTest.java
  public void orderSerialization() {
    long now = System.currentTimeMillis();
    Mutation m = OrderSection.createMutation("/accumulo/file", now);
    Key k = new Key(new Text(m.getRow()));
    assertEquals("/accumulo/file", OrderSection.getFile(k));
    assertEquals(now, OrderSection.getTimeClosed(k));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\replication\ReplicationSchemaTest.java
  public void orderSerializationWithBuffer() {
    Text buff = new Text();
    long now = System.currentTimeMillis();
    Mutation m = OrderSection.createMutation("/accumulo/file", now);
    Key k = new Key(new Text(m.getRow()));
    assertEquals("/accumulo/file", OrderSection.getFile(k, buff));
    assertEquals(now, OrderSection.getTimeClosed(k, buff));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\replication\ReplicationSchemaTest.java
  public void separatorDoesntInterferWithSplit() {
    Text buff = new Text();
    // Cycle through 2*128 values
    for (long i = 1; i < 258; i++) {
      Mutation m = OrderSection.createMutation("/accumulo/file", i);
      Key k = new Key(new Text(m.getRow()));
      assertEquals("/accumulo/file", OrderSection.getFile(k, buff));
      assertEquals(i, OrderSection.getTimeClosed(k, buff));
    }
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\replication\ReplicationTargetTest.java
  public void properEquality() {
    ReplicationTarget expected1 = new ReplicationTarget("foo", "bar", TableId.of("1"));

    assertEquals(expected1, new ReplicationTarget("foo", "bar", TableId.of("1")));
    assertNotEquals(expected1, new ReplicationTarget("foo", "foo", TableId.of("1")));
    assertNotEquals(expected1, new ReplicationTarget("bar", "bar", TableId.of("1")));
    assertNotEquals(expected1, new ReplicationTarget(null, "bar", TableId.of("1")));
    assertNotEquals(expected1, new ReplicationTarget("foo", null, TableId.of("1")));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\replication\ReplicationTargetTest.java
  public void writableOut() throws Exception {
    ReplicationTarget expected = new ReplicationTarget("foo", "bar", TableId.of("1"));
    DataOutputBuffer buffer = new DataOutputBuffer();
    expected.write(buffer);

    DataInputBuffer input = new DataInputBuffer();
    input.reset(buffer.getData(), buffer.getLength());
    ReplicationTarget actual = new ReplicationTarget();
    actual.readFields(input);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\replication\ReplicationTargetTest.java
  public void writableOutWithNulls() throws Exception {
    ReplicationTarget expected = new ReplicationTarget(null, null, null);
    DataOutputBuffer buffer = new DataOutputBuffer();
    expected.write(buffer);

    DataInputBuffer input = new DataInputBuffer();
    input.reset(buffer.getData(), buffer.getLength());
    ReplicationTarget actual = new ReplicationTarget();
    actual.readFields(input);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\replication\ReplicationTargetTest.java
  public void staticFromTextHelper() throws Exception {
    ReplicationTarget expected = new ReplicationTarget("foo", "bar", TableId.of("1"));
    DataOutputBuffer buffer = new DataOutputBuffer();
    expected.write(buffer);
    Text t = new Text();
    t.set(buffer.getData(), 0, buffer.getLength());

    assertEquals(expected, ReplicationTarget.from(t));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\replication\ReplicationTargetTest.java
  public void staticToTextHelper() throws Exception {
    ReplicationTarget expected = new ReplicationTarget("foo", "bar", TableId.of("1"));
    DataOutputBuffer buffer = new DataOutputBuffer();
    expected.write(buffer);
    Text t = new Text();
    t.set(buffer.getData(), 0, buffer.getLength());

    assertEquals(t, expected.toText());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\replication\ReplicationTargetTest.java
  public void staticFromStringHelper() throws Exception {
    ReplicationTarget expected = new ReplicationTarget("foo", "bar", TableId.of("1"));
    DataOutputBuffer buffer = new DataOutputBuffer();
    expected.write(buffer);
    Text t = new Text();
    t.set(buffer.getData(), 0, buffer.getLength());

    assertEquals(expected, ReplicationTarget.from(t.toString()));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\rpc\SaslClientDigestCallbackHandlerTest.java
  public void testEquality() {
    SaslClientDigestCallbackHandler handler1 =
        new SaslClientDigestCallbackHandler("user", "mypass".toCharArray()),
        handler2 = new SaslClientDigestCallbackHandler("user", "mypass".toCharArray());
    assertEquals(handler1, handler2);
    assertEquals(handler1.hashCode(), handler2.hashCode());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\rpc\SaslConnectionParamsTest.java
  public void testDefaultParamsAsClient() throws Exception {
    final KerberosToken token = EasyMock.createMock(KerberosToken.class);
    testUser.doAs((PrivilegedExceptionAction<Void>) () -> {
      final SaslConnectionParams saslParams = createSaslParams(token);
      assertEquals(primary, saslParams.getKerberosServerPrimary());

      final QualityOfProtection defaultQop =
          QualityOfProtection.get(Property.RPC_SASL_QOP.getDefaultValue());
      assertEquals(defaultQop, saslParams.getQualityOfProtection());

      Map<String,String> properties = saslParams.getSaslProperties();
      assertEquals(1, properties.size());
      assertEquals(defaultQop.getQuality(), properties.get(Sasl.QOP));
      assertEquals(username, saslParams.getPrincipal());
      return null;
    });
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\rpc\SaslConnectionParamsTest.java
  public void testDefaultParams() throws Exception {
    final KerberosToken token = EasyMock.createMock(KerberosToken.class);
    testUser.doAs((PrivilegedExceptionAction<Void>) () -> {
      final SaslConnectionParams saslParams = createSaslParams(token);
      assertEquals(primary, saslParams.getKerberosServerPrimary());

      final QualityOfProtection defaultQop =
          QualityOfProtection.get(Property.RPC_SASL_QOP.getDefaultValue());
      assertEquals(defaultQop, saslParams.getQualityOfProtection());

      Map<String,String> properties = saslParams.getSaslProperties();
      assertEquals(1, properties.size());
      assertEquals(defaultQop.getQuality(), properties.get(Sasl.QOP));
      assertEquals(username, saslParams.getPrincipal());
      return null;
    });
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\rpc\SaslConnectionParamsTest.java
  public void testDelegationTokenImpl() throws Exception {
    final DelegationTokenImpl token = new DelegationTokenImpl(new byte[0],
        new AuthenticationTokenIdentifier("user", 1, 10L, 20L, "instanceid"));
    testUser.doAs((PrivilegedExceptionAction<Void>) () -> {
      final SaslConnectionParams saslParams = createSaslParams(token);
      assertEquals(primary, saslParams.getKerberosServerPrimary());

      final QualityOfProtection defaultQop =
          QualityOfProtection.get(Property.RPC_SASL_QOP.getDefaultValue());
      assertEquals(defaultQop, saslParams.getQualityOfProtection());

      assertEquals(SaslMechanism.DIGEST_MD5, saslParams.getMechanism());
      assertNotNull(saslParams.getCallbackHandler());
      assertEquals(SaslClientDigestCallbackHandler.class,
          saslParams.getCallbackHandler().getClass());

      Map<String,String> properties = saslParams.getSaslProperties();
      assertEquals(1, properties.size());
      assertEquals(defaultQop.getQuality(), properties.get(Sasl.QOP));
      assertEquals(username, saslParams.getPrincipal());
      return null;
    });
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\rpc\SaslConnectionParamsTest.java
  public void testEquality() throws Exception {
    final KerberosToken token = EasyMock.createMock(KerberosToken.class);
    SaslConnectionParams params1 = testUser
        .doAs((PrivilegedExceptionAction<SaslConnectionParams>) () -> createSaslParams(token));

    SaslConnectionParams params2 = testUser
        .doAs((PrivilegedExceptionAction<SaslConnectionParams>) () -> createSaslParams(token));

    assertEquals(params1, params2);
    assertEquals(params1.hashCode(), params2.hashCode());

    final DelegationTokenImpl delToken1 = new DelegationTokenImpl(new byte[0],
        new AuthenticationTokenIdentifier("user", 1, 10L, 20L, "instanceid"));
    SaslConnectionParams params3 = testUser
        .doAs((PrivilegedExceptionAction<SaslConnectionParams>) () -> createSaslParams(delToken1));

    assertNotEquals(params1, params3);
    assertNotEquals(params1.hashCode(), params3.hashCode());
    assertNotEquals(params2, params3);
    assertNotEquals(params2.hashCode(), params3.hashCode());

    final DelegationTokenImpl delToken2 = new DelegationTokenImpl(new byte[0],
        new AuthenticationTokenIdentifier("user", 1, 10L, 20L, "instanceid"));
    SaslConnectionParams params4 = testUser
        .doAs((PrivilegedExceptionAction<SaslConnectionParams>) () -> createSaslParams(delToken2));

    assertNotEquals(params1, params4);
    assertNotEquals(params1.hashCode(), params4.hashCode());
    assertNotEquals(params2, params4);
    assertNotEquals(params2.hashCode(), params4.hashCode());

    assertEquals(params3, params4);
    assertEquals(params3.hashCode(), params4.hashCode());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\rpc\TTimeoutTransportTest.java
  public void testFailedSocketOpenIsClosed() throws IOException {
    SocketAddress addr = createMock(SocketAddress.class);
    Socket s = createMock(Socket.class);
    TTimeoutTransport timeoutTransport = createMockBuilder(TTimeoutTransport.class)
        .addMockedMethod("openSocketChannel").createMock();

    // Return out mocked socket
    expect(timeoutTransport.openSocketChannel()).andReturn(s).once();

    // tcpnodelay and solinger
    expectedSocketSetup(s);

    // Connect to the addr
    s.connect(addr);
    expectLastCall().andThrow(new IOException());

    // The socket should be closed after the above IOException
    s.close();

    replay(addr, s, timeoutTransport);

    try {
      timeoutTransport.openSocket(addr);
      fail("Expected to catch IOException but got none");
    } catch (IOException e) {
      // Expected
    }

    verify(addr, s, timeoutTransport);
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\rpc\TTimeoutTransportTest.java
  public void testFailedInputStreamClosesSocket() throws IOException {
    long timeout = 2 * 60 * 1000; // 2 mins
    SocketAddress addr = createMock(SocketAddress.class);
    Socket s = createMock(Socket.class);
    TTimeoutTransport timeoutTransport = createMockBuilder(TTimeoutTransport.class)
        .addMockedMethod("openSocketChannel").addMockedMethod("wrapInputStream").createMock();

    // Return out mocked socket
    expect(timeoutTransport.openSocketChannel()).andReturn(s).once();

    // tcpnodelay and solinger
    expectedSocketSetup(s);

    // Connect to the addr
    s.connect(addr);
    expectLastCall().once();

    expect(timeoutTransport.wrapInputStream(s, timeout)).andThrow(new IOException());

    // The socket should be closed after the above IOException
    s.close();

    replay(addr, s, timeoutTransport);

    try {
      timeoutTransport.createInternal(addr, timeout);
      fail("Expected to catch IOException but got none");
    } catch (IOException e) {
      // Expected
    }

    verify(addr, s, timeoutTransport);
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\rpc\TTimeoutTransportTest.java
  public void testFailedOutputStreamClosesSocket() throws IOException {
    long timeout = 2 * 60 * 1000; // 2 mins
    SocketAddress addr = createMock(SocketAddress.class);
    Socket s = createMock(Socket.class);
    InputStream is = createMock(InputStream.class);
    TTimeoutTransport timeoutTransport =
        createMockBuilder(TTimeoutTransport.class).addMockedMethod("openSocketChannel")
            .addMockedMethod("wrapInputStream").addMockedMethod("wrapOutputStream").createMock();

    // Return out mocked socket
    expect(timeoutTransport.openSocketChannel()).andReturn(s).once();

    // tcpnodelay and solinger
    expectedSocketSetup(s);

    // Connect to the addr
    s.connect(addr);
    expectLastCall().once();

    // Input stream is set up
    expect(timeoutTransport.wrapInputStream(s, timeout)).andReturn(is);
    // Output stream fails to be set up
    expect(timeoutTransport.wrapOutputStream(s, timeout)).andThrow(new IOException());

    // The socket should be closed after the above IOException
    s.close();

    replay(addr, s, timeoutTransport);

    try {
      timeoutTransport.createInternal(addr, timeout);
      fail("Expected to catch IOException but got none");
    } catch (IOException e) {
      // Expected
    }

    verify(addr, s, timeoutTransport);
  }

}
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\security\AuthenticationTokenIdentifierTest.java
  public void testUgi() {
    String principal = "user";
    AuthenticationTokenIdentifier token = new AuthenticationTokenIdentifier(principal);
    UserGroupInformation actual = token.getUser(),
        expected = UserGroupInformation.createRemoteUser(principal);
    assertEquals(expected.getAuthenticationMethod(), actual.getAuthenticationMethod());
    assertEquals(expected.getUserName(), expected.getUserName());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\security\AuthenticationTokenIdentifierTest.java
  public void testEquality() {
    String principal = "user";
    AuthenticationTokenIdentifier token = new AuthenticationTokenIdentifier(principal);
    assertEquals(token, token);
    AuthenticationTokenIdentifier newToken = new AuthenticationTokenIdentifier(principal);
    assertEquals(token, newToken);
    assertEquals(token.hashCode(), newToken.hashCode());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\security\AuthenticationTokenIdentifierTest.java
  public void testExtendedEquality() {
    String principal = "user";
    AuthenticationTokenIdentifier token = new AuthenticationTokenIdentifier(principal);
    assertEquals(token, token);
    AuthenticationTokenIdentifier newToken =
        new AuthenticationTokenIdentifier(principal, 1, 5L, 10L, "uuid");
    assertNotEquals(token, newToken);
    assertNotEquals(token.hashCode(), newToken.hashCode());
    AuthenticationTokenIdentifier dblNewToken = new AuthenticationTokenIdentifier(principal);
    dblNewToken.setKeyId(1);
    dblNewToken.setIssueDate(5L);
    dblNewToken.setExpirationDate(10L);
    dblNewToken.setInstanceId("uuid");
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\security\AuthenticationTokenIdentifierTest.java
  public void testToString() {
    String principal = "my_special_principal";
    AuthenticationTokenIdentifier token = new AuthenticationTokenIdentifier(principal);
    assertTrue(token.toString().contains(principal));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\security\AuthenticationTokenIdentifierTest.java
  public void testSerialization() throws IOException {
    String principal = "my_special_principal";
    AuthenticationTokenIdentifier token = new AuthenticationTokenIdentifier(principal);
    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    DataOutputStream out = new DataOutputStream(baos);
    token.write(out);
    DataInputStream in = new DataInputStream(new ByteArrayInputStream(baos.toByteArray()));
    AuthenticationTokenIdentifier deserializedToken = new AuthenticationTokenIdentifier();
    deserializedToken.readFields(in);
    assertEquals(token, deserializedToken);
    assertEquals(token.hashCode(), deserializedToken.hashCode());
    assertEquals(token.toString(), deserializedToken.toString());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\security\AuthenticationTokenIdentifierTest.java
  public void testTokenKind() {
    String principal = "my_special_principal";
    AuthenticationTokenIdentifier token = new AuthenticationTokenIdentifier(principal);
    assertEquals(AuthenticationTokenIdentifier.TOKEN_KIND, token.getKind());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\security\AuthenticationTokenIdentifierTest.java
  public void testNullMsg() throws IOException {
    AuthenticationTokenIdentifier token = new AuthenticationTokenIdentifier();
    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    DataOutputStream out = new DataOutputStream(baos);
    token.write(out);
    DataInputStream in = new DataInputStream(new ByteArrayInputStream(baos.toByteArray()));
    AuthenticationTokenIdentifier deserializedToken = new AuthenticationTokenIdentifier();
    deserializedToken.readFields(in);
    assertEquals(token, deserializedToken);
    assertEquals(token.hashCode(), deserializedToken.hashCode());
    assertEquals(token.toString(), deserializedToken.toString());

  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\security\AuthenticationTokenTest.java
  public void testSerializeDeserializeToken() {
    Random random = new SecureRandom();
    byte[] randomBytes = new byte[12];
    random.nextBytes(randomBytes);
    boolean allZero = true;
    for (byte b : randomBytes)
      allZero = allZero && b == 0;
    assertFalse(allZero);

    byte[] serialized = AuthenticationTokenSerializer.serialize(new PasswordToken(randomBytes));
    PasswordToken passwordToken =
        AuthenticationTokenSerializer.deserialize(PasswordToken.class, serialized);
    assertArrayEquals(randomBytes, passwordToken.getPassword());

    serialized = AuthenticationTokenSerializer.serialize(new NullToken());
    AuthenticationToken nullToken =
        AuthenticationTokenSerializer.deserialize(NullToken.class, serialized);
    assertEquals(new NullToken(), nullToken);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\security\AuthorizationsTest.java
  public void testSetOfByteArrays() {
    assertTrue(ByteArraySet.fromStrings("a", "b", "c").contains("a".getBytes()));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\security\AuthorizationsTest.java
  public void testEncodeDecode() {
    Authorizations a = new Authorizations("a", "abcdefg", "hijklmno", ",");
    byte[] array = a.getAuthorizationsArray();
    Authorizations b = new Authorizations(array);
    assertEquals(a, b);

    // test encoding empty auths
    a = new Authorizations();
    array = a.getAuthorizationsArray();
    b = new Authorizations(array);
    assertEquals(a, b);

    // test encoding multi-byte auths
    a = new Authorizations("五", "b", "c", "九");
    array = a.getAuthorizationsArray();
    b = new Authorizations(array);
    assertEquals(a, b);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\security\AuthorizationsTest.java
  public void testSerialization() {
    Authorizations a1 = new Authorizations("a", "b");
    Authorizations a2 = new Authorizations("b", "a");

    assertEquals(a1, a2);
    assertEquals(a1.serialize(), a2.serialize());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\security\AuthorizationsTest.java
  public void testDefensiveAccess() {
    Authorizations expected = new Authorizations("foo", "a");
    Authorizations actual = new Authorizations("foo", "a");

    // foo to goo; test defensive iterator
    for (byte[] bytes : actual) {
      bytes[0]++;
    }
    assertArrayEquals(expected.getAuthorizationsArray(), actual.getAuthorizationsArray());

    // test defensive getter and serializer
    actual.getAuthorizations().get(0)[0]++;
    assertArrayEquals(expected.getAuthorizationsArray(), actual.getAuthorizationsArray());
    assertEquals(expected.serialize(), actual.serialize());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\security\AuthorizationsTest.java
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\security\AuthorizationsTest.java
  public void testReadOnlyByteBuffer() {
    Authorizations expected = new Authorizations("foo");
    Authorizations actual = new Authorizations("foo");

    assertArrayEquals(expected.getAuthorizationsArray(), actual.getAuthorizationsArray());
    actual.getAuthorizationsBB().get(0).array()[0]++;
    assertArrayEquals(expected.getAuthorizationsArray(), actual.getAuthorizationsArray());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\security\AuthorizationsTest.java
  public void testUnmodifiableList() {
    Authorizations expected = new Authorizations("foo");
    Authorizations actual = new Authorizations("foo");

    assertArrayEquals(expected.getAuthorizationsArray(), actual.getAuthorizationsArray());
    actual.getAuthorizationsBB().add(ByteBuffer.wrap(new byte[] {'a'}));
  }
}
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\security\ColumnVisibilityTest.java
  public void testEmpty() {
    // empty visibility is valid
    ColumnVisibility a = new ColumnVisibility();
    ColumnVisibility b = new ColumnVisibility(new byte[0]);
    ColumnVisibility c = new ColumnVisibility("");
    ColumnVisibility d = new ColumnVisibility(new Text());

    assertEquals(a, b);
    assertEquals(a, c);
    assertEquals(a, d);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\security\ColumnVisibilityTest.java
  public void testEmptyFlatten() {
    // empty visibility is valid
    new ColumnVisibility().flatten();
    new ColumnVisibility("").flatten();
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\security\ColumnVisibilityTest.java
  public void testSimple() {
    shouldNotThrow("test", "(one)");
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\security\ColumnVisibilityTest.java
  public void testCompound() {
    shouldNotThrow("a|b", "a&b", "ab&bc");
    shouldNotThrow("A&B&C&D&E", "A|B|C|D|E", "(A|B|C)", "(A)|B|(C)", "A&(B)&(C)", "A&B&(L)");
    shouldNotThrow("_&-&:");
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\security\ColumnVisibilityTest.java
  public void testBadCharacters() {
    shouldThrow("=", "*", "^", "%", "@");
    shouldThrow("a*b");
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\security\ColumnVisibilityTest.java
  public void testComplexCompound() {
    shouldNotThrow("(a|b)&(x|y)");
    shouldNotThrow("a&(x|y)", "(a|b)&(x|y)", "A&(L|M)", "B&(L|M)", "A&B&(L|M)");
    shouldNotThrow("A&FOO&(L|M)", "(A|B)&FOO&(L|M)", "A&B&(L|M|FOO)", "((A|B|C)|foo)&bar");
    shouldNotThrow("(one&two)|(foo&bar)", "(one|foo)&three", "one|foo|bar", "(one|foo)|bar",
        "((one|foo)|bar)&two");
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\security\ColumnVisibilityTest.java
  public void testNormalization() {
    normalized("a", "a", "(a)", "a", "b|a", "a|b", "(b)|a", "a|b", "(b|(a|c))&x", "x&(a|b|c)",
        "(((a)))", "a");
    final String normForm = "a&b&c";
    normalized("b&c&a", normForm, "c&b&a", normForm, "a&(b&c)", normForm, "(a&c)&b", normForm);

    // this an expression that's basically `expr | expr`
    normalized("(d&c&b&a)|(b&c&a&d)", "a&b&c&d");
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\security\ColumnVisibilityTest.java
  public void testDanglingOperators() {
    shouldThrow("a|b&");
    shouldThrow("(|a)");
    shouldThrow("|");
    shouldThrow("a|", "|a", "|", "&");
    shouldThrow("&(five)", "|(five)", "(five)&", "five|", "a|(b)&", "(&five)", "(five|)");
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\security\ColumnVisibilityTest.java
  public void testMissingSeparators() {
    shouldThrow("one(five)", "(five)one", "(one)(two)", "a|(b(c))");
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\security\ColumnVisibilityTest.java
  public void testMismatchedParentheses() {
    shouldThrow("(", ")", "(a&b", "b|a)", "A|B)");
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\security\ColumnVisibilityTest.java
  public void testMixedOperators() {
    shouldThrow("(A&B)|(C&D)&(E)");
    shouldThrow("a|b&c", "A&B&C|D", "(A&B)|(C&D)&(E)");
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\security\ColumnVisibilityTest.java
  public void testQuotes() {
    shouldThrow("\"\"");
    shouldThrow("\"A\"A");
    shouldThrow("\"A\"\"B\"");
    shouldThrow("(A)\"B\"");
    shouldThrow("\"A\"(B)");
    shouldThrow("\"A");
    shouldThrow("\"");
    shouldThrow("\"B");
    shouldThrow("A&\"B");
    shouldThrow("A&\"B\\'");
    shouldThrow("A&\"B\\");

    shouldNotThrow("\"A\"");
    shouldNotThrow("(\"A\")");
    shouldNotThrow("A&\"B.D\"");
    shouldNotThrow("A&\"B\\\\D\"");
    shouldNotThrow("A&\"B\\\"D\"");
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\security\ColumnVisibilityTest.java
  public void testToString() {
    ColumnVisibility cv = new ColumnVisibility(quote("a"));
    assertEquals("[a]", cv.toString());

    // multi-byte
    cv = new ColumnVisibility(quote("五"));
    assertEquals("[\"五\"]", cv.toString());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\security\ColumnVisibilityTest.java
  public void testParseTree() {
    Node node = parse("(W)|(U&V)");
    assertNode(node, NodeType.OR, 0, 9);
    assertNode(node.getChildren().get(0), NodeType.TERM, 1, 2);
    assertNode(node.getChildren().get(1), NodeType.AND, 5, 8);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\security\ColumnVisibilityTest.java
  public void testParseTreeWithNoChildren() {
    Node node = parse("ABC");
    assertNode(node, NodeType.TERM, 0, 3);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\security\ColumnVisibilityTest.java
  public void testParseTreeWithTwoChildren() {
    Node node = parse("ABC|DEF");
    assertNode(node, NodeType.OR, 0, 7);
    assertNode(node.getChildren().get(0), NodeType.TERM, 0, 3);
    assertNode(node.getChildren().get(1), NodeType.TERM, 4, 7);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\security\ColumnVisibilityTest.java
  public void testParseTreeWithParenthesesAndTwoChildren() {
    Node node = parse("(ABC|DEF)");
    assertNode(node, NodeType.OR, 1, 8);
    assertNode(node.getChildren().get(0), NodeType.TERM, 1, 4);
    assertNode(node.getChildren().get(1), NodeType.TERM, 5, 8);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\security\ColumnVisibilityTest.java
  public void testParseTreeWithParenthesizedChildren() {
    Node node = parse("ABC|(DEF&GHI)");
    assertNode(node, NodeType.OR, 0, 13);
    assertNode(node.getChildren().get(0), NodeType.TERM, 0, 3);
    assertNode(node.getChildren().get(1), NodeType.AND, 5, 12);
    assertNode(node.getChildren().get(1).children.get(0), NodeType.TERM, 5, 8);
    assertNode(node.getChildren().get(1).children.get(1), NodeType.TERM, 9, 12);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\security\ColumnVisibilityTest.java
  public void testParseTreeWithMoreParentheses() {
    Node node = parse("(W)|(U&V)");
    assertNode(node, NodeType.OR, 0, 9);
    assertNode(node.getChildren().get(0), NodeType.TERM, 1, 2);
    assertNode(node.getChildren().get(1), NodeType.AND, 5, 8);
    assertNode(node.getChildren().get(1).children.get(0), NodeType.TERM, 5, 6);
    assertNode(node.getChildren().get(1).children.get(1), NodeType.TERM, 7, 8);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\security\ColumnVisibilityTest.java
  public void testEmptyParseTreesAreEqual() {
    Comparator<Node> comparator = new NodeComparator(new byte[] {});
    Node empty = new ColumnVisibility().getParseTree();
    assertEquals(0, comparator.compare(empty, parse("")));
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\security\ColumnVisibilityTest.java
  public void testParseTreesOrdering() {
    byte[] expression = "(b&c&d)|((a|m)&y&z)|(e&f)".getBytes(UTF_8);
    byte[] flattened = new ColumnVisibility(expression).flatten();

    // Convert to String for indexOf convenience
    String flat = new String(flattened, UTF_8);
    assertTrue("shortest expressions sort first", flat.indexOf('e') < flat.indexOf('|'));
    assertTrue("shortest children sort first", flat.indexOf('b') < flat.indexOf('a'));
  }

  private Node parse(String s) {
    ColumnVisibility v = new ColumnVisibility(s);
    return v.getParseTree();
  }

  private void assertNode(Node node, NodeType nodeType, int start, int end) {
    assertEquals(node.type, nodeType);
    assertEquals(start, node.start);
    assertEquals(end, node.end);
  }
}
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\security\CredentialsTest.java
  public void testToThrift() throws DestroyFailedException {
    // verify thrift serialization
    Credentials creds = new Credentials("test", new PasswordToken("testing"));
    TCredentials tCreds = creds.toThrift(instanceID);
    assertEquals("test", tCreds.getPrincipal());
    assertEquals(PasswordToken.class.getName(), tCreds.getTokenClassName());
    assertArrayEquals(AuthenticationTokenSerializer.serialize(new PasswordToken("testing")),
        tCreds.getToken());

    // verify that we can't serialize if it's destroyed
    creds.getToken().destroy();
    try {
      creds.toThrift(instanceID);
      fail();
    } catch (Exception e) {
      assertTrue(e instanceof RuntimeException);
      assertTrue(e.getCause() instanceof AccumuloSecurityException);
      assertEquals(AccumuloSecurityException.class.cast(e.getCause()).getSecurityErrorCode(),
          SecurityErrorCode.TOKEN_EXPIRED);
    }
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\security\CredentialsTest.java
  public void roundtripThrift() {
    Credentials creds = new Credentials("test", new PasswordToken("testing"));
    TCredentials tCreds = creds.toThrift(instanceID);
    Credentials roundtrip = Credentials.fromThrift(tCreds);
    assertEquals("Roundtrip through thirft changed credentials equality", creds, roundtrip);
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\security\CredentialsTest.java
  public void testEqualsAndHashCode() {
    Credentials nullNullCreds = new Credentials(null, null);
    Credentials abcNullCreds = new Credentials("abc", new NullToken());
    Credentials cbaNullCreds = new Credentials("cba", new NullToken());
    Credentials abcBlahCreds = new Credentials("abc", new PasswordToken("blah"));

    // check hash codes
    assertEquals(0, nullNullCreds.hashCode());
    assertEquals("abc".hashCode(), abcNullCreds.hashCode());
    assertEquals(abcNullCreds.hashCode(), abcBlahCreds.hashCode());
    assertNotEquals(abcNullCreds.hashCode(), cbaNullCreds.hashCode());

    // identity
    assertEquals(abcNullCreds, abcNullCreds);
    assertEquals(new Credentials("abc", new NullToken()), abcNullCreds);
    // equal, but different token constructors
    assertEquals(new Credentials("abc", new PasswordToken("abc".getBytes(UTF_8))),
        new Credentials("abc", new PasswordToken("abc")));
    // test not equals
    assertNotEquals(nullNullCreds, abcBlahCreds);
    assertNotEquals(nullNullCreds, abcNullCreds);
    assertNotEquals(abcNullCreds, abcBlahCreds);
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\security\CredentialsTest.java
  public void testCredentialsSerialization() {
    Credentials creds = new Credentials("a:b-c", new PasswordToken("d-e-f".getBytes(UTF_8)));
    String serialized = creds.serialize();
    Credentials result = Credentials.deserialize(serialized);
    assertEquals(creds, result);
    assertEquals("a:b-c", result.getPrincipal());
    assertEquals(new PasswordToken("d-e-f"), result.getToken());

    Credentials nullNullCreds = new Credentials(null, null);
    serialized = nullNullCreds.serialize();
    result = Credentials.deserialize(serialized);
    assertNull(result.getPrincipal());
    assertNull(result.getToken());
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\security\CredentialsTest.java
  public void testToString() {
    Credentials creds = new Credentials(null, null);
    assertEquals(Credentials.class.getName() + ":null:null:<hidden>", creds.toString());
    creds = new Credentials("", new NullToken());
    assertEquals(Credentials.class.getName() + "::" + NullToken.class.getName() + ":<hidden>",
        creds.toString());
    creds = new Credentials("abc", null);
    assertEquals(Credentials.class.getName() + ":abc:null:<hidden>", creds.toString());
    creds = new Credentials("abc", new PasswordToken(""));
    assertEquals(
        Credentials.class.getName() + ":abc:" + PasswordToken.class.getName() + ":<hidden>",
        creds.toString());
  }
}
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\security\NamespacePermissionsTest.java
  public void testEnsureEquivalencies() {
    EnumSet<NamespacePermission> set = EnumSet.allOf(NamespacePermission.class);

    for (TablePermission permission : TablePermission.values()) {
      set.remove(NamespacePermission.getEquivalent(permission));
    }
    for (SystemPermission permission : SystemPermission.values()) {
      set.remove(NamespacePermission.getEquivalent(permission));
    }

    assertTrue("All namespace permissions should have equivalent table or system permissions.",
        set.isEmpty());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\security\VisibilityConstraintTest.java
  public void testNoVisibility() {
    mutation.put(D, D, D);
    assertNull("authorized", vc.check(env, mutation));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\security\VisibilityConstraintTest.java
  public void testVisibilityNoAuth() {
    mutation.put(D, D, bad, D);
    assertEquals("unauthorized", ENOAUTH, vc.check(env, mutation));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\security\VisibilityConstraintTest.java
  public void testGoodVisibilityAuth() {
    mutation.put(D, D, good, D);
    assertNull("authorized", vc.check(env, mutation));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\security\VisibilityConstraintTest.java
  public void testCachedVisibilities() {
    mutation.put(D, D, good, "v");
    mutation.put(D, D, good, "v2");
    assertNull("authorized", vc.check(env, mutation));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\security\VisibilityConstraintTest.java
  public void testMixedVisibilities() {
    mutation.put(D, D, bad, D);
    mutation.put(D, D, good, D);
    assertEquals("unauthorized", ENOAUTH, vc.check(env, mutation));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\security\VisibilityEvaluatorTest.java
  public void testVisibilityEvaluator() throws VisibilityParseException {
    VisibilityEvaluator ct = new VisibilityEvaluator(
        new Authorizations(ByteArraySet.fromStrings("one", "two", "three", "four")));

    // test for empty vis
    assertTrue(ct.evaluate(new ColumnVisibility(new byte[0])));

    // test for and
    assertTrue("'and' test", ct.evaluate(new ColumnVisibility("one&two")));

    // test for or
    assertTrue("'or' test", ct.evaluate(new ColumnVisibility("foor|four")));

    // test for and and or
    assertTrue("'and' and 'or' test", ct.evaluate(new ColumnVisibility("(one&two)|(foo&bar)")));

    // test for false negatives
    for (String marking : new String[] {"one", "one|five", "five|one", "(one)",
        "(one&two)|(foo&bar)", "(one|foo)&three", "one|foo|bar", "(one|foo)|bar",
        "((one|foo)|bar)&two"}) {
      assertTrue(marking, ct.evaluate(new ColumnVisibility(marking)));
    }

    // test for false positives
    for (String marking : new String[] {"five", "one&five", "five&one", "((one|foo)|bar)&goober"}) {
      assertFalse(marking, ct.evaluate(new ColumnVisibility(marking)));
    }

    // test missing separators; these should throw an exception
    for (String marking : new String[] {"one(five)", "(five)one", "(one)(two)", "a|(b(c))"}) {
      try {
        ct.evaluate(new ColumnVisibility(marking));
        fail(marking + " failed to throw");
      } catch (BadArgumentException e) {
        // all is good
      }
    }

    // test unexpected separator
    for (String marking : new String[] {"&(five)", "|(five)", "(five)&", "five|", "a|(b)&",
        "(&five)", "(five|)"}) {
      try {
        ct.evaluate(new ColumnVisibility(marking));
        fail(marking + " failed to throw");
      } catch (BadArgumentException e) {
        // all is good
      }
    }

    // test mismatched parentheses
    for (String marking : new String[] {"(", ")", "(a&b", "b|a)"}) {
      try {
        ct.evaluate(new ColumnVisibility(marking));
        fail(marking + " failed to throw");
      } catch (BadArgumentException e) {
        // all is good
      }
    }
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\security\VisibilityEvaluatorTest.java
  public void testQuotedExpressions() throws VisibilityParseException {

    Authorizations auths = new Authorizations("A#C", "A\"C", "A\\C", "AC");
    VisibilityEvaluator ct = new VisibilityEvaluator(auths);
    runQuoteTest(ct);

    // construct VisibilityEvaluator using another constructor and run test again
    ct = new VisibilityEvaluator((AuthorizationContainer) auths);
    runQuoteTest(ct);
  }

  private void runQuoteTest(VisibilityEvaluator ct) throws VisibilityParseException {
    assertTrue(ct.evaluate(new ColumnVisibility(quote("A#C") + "|" + quote("A?C"))));
    assertTrue(ct.evaluate(
        new ColumnVisibility(new ColumnVisibility(quote("A#C") + "|" + quote("A?C")).flatten())));
    assertTrue(ct.evaluate(new ColumnVisibility(quote("A\"C") + "&" + quote("A\\C"))));
    assertTrue(ct.evaluate(
        new ColumnVisibility(new ColumnVisibility(quote("A\"C") + "&" + quote("A\\C")).flatten())));
    assertTrue(
        ct.evaluate(new ColumnVisibility("(" + quote("A\"C") + "|B)&(" + quote("A#C") + "|D)")));

    assertFalse(ct.evaluate(new ColumnVisibility(quote("A#C") + "&B")));

    assertTrue(ct.evaluate(new ColumnVisibility(quote("A#C"))));
    assertTrue(ct.evaluate(new ColumnVisibility("(" + quote("A#C") + ")")));
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\security\VisibilityEvaluatorTest.java
  public void testQuote() {
    assertEquals("\"A#C\"", quote("A#C"));
    assertEquals("\"A\\\"C\"", quote("A\"C"));
    assertEquals("\"A\\\"\\\\C\"", quote("A\"\\C"));
    assertEquals("ACS", quote("ACS"));
    assertEquals("\"九\"", quote("九"));
    assertEquals("\"五十\"", quote("五十"));
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\security\VisibilityEvaluatorTest.java
  public void testUnescape() {
    assertEquals("a\"b", VisibilityEvaluator.unescape(new ArrayByteSequence("a\\\"b")).toString());
    assertEquals("a\\b", VisibilityEvaluator.unescape(new ArrayByteSequence("a\\\\b")).toString());
    assertEquals("a\\\"b",
        VisibilityEvaluator.unescape(new ArrayByteSequence("a\\\\\\\"b")).toString());
    assertEquals("\\\"",
        VisibilityEvaluator.unescape(new ArrayByteSequence("\\\\\\\"")).toString());
    assertEquals("a\\b\\c\\d",
        VisibilityEvaluator.unescape(new ArrayByteSequence("a\\\\b\\\\c\\\\d")).toString());

    try {
      VisibilityEvaluator.unescape(new ArrayByteSequence("a\\b"));
      fail("Expected failure to unescape invalid escape sequence");
    } catch (IllegalArgumentException e) {}

    try {
      VisibilityEvaluator.unescape(new ArrayByteSequence("a\\b\\c"));
      fail("Expected failure to unescape invalid escape sequence");
    } catch (IllegalArgumentException e) {}

    try {
      VisibilityEvaluator.unescape(new ArrayByteSequence("a\"b\\"));
      fail("Expected failure to unescape invalid escape sequence");
    } catch (IllegalArgumentException e) {}

  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\security\VisibilityEvaluatorTest.java
  public void testNonAscii() throws VisibilityParseException {
    VisibilityEvaluator ct = new VisibilityEvaluator(new Authorizations("五", "六", "八", "九", "五十"));

    assertTrue(ct.evaluate(new ColumnVisibility(quote("五") + "|" + quote("四"))));
    assertFalse(ct.evaluate(new ColumnVisibility(quote("五") + "&" + quote("四"))));
    assertTrue(
        ct.evaluate(new ColumnVisibility(quote("五") + "&(" + quote("四") + "|" + quote("九") + ")")));
    assertTrue(ct.evaluate(new ColumnVisibility("\"五\"&(\"四\"|\"五十\")")));
    assertFalse(
        ct.evaluate(new ColumnVisibility(quote("五") + "&(" + quote("四") + "|" + quote("三") + ")")));
    assertFalse(ct.evaluate(new ColumnVisibility("\"五\"&(\"四\"|\"三\")")));
  }
}
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\singletons\SingletonManagerTest.java
  public void testClient() {
    SingletonReservation resv1 = SingletonManager.getClientReservation();

    assertEquals(1, SingletonManager.getReservationCount());

    SingletonReservation resv2 = SingletonManager.getClientReservation();

    assertEquals(2, SingletonManager.getReservationCount());
    assertEquals(new TestService(true, 0, 0), service1);
    assertEquals(new TestService(true, 1, 0), service2);

    resv1.close();

    assertEquals(1, SingletonManager.getReservationCount());
    assertEquals(new TestService(true, 0, 0), service1);
    assertEquals(new TestService(true, 1, 0), service2);

    // calling close again should have no effect
    resv1.close();

    assertEquals(1, SingletonManager.getReservationCount());
    assertEquals(new TestService(true, 0, 0), service1);
    assertEquals(new TestService(true, 1, 0), service2);

    resv2.close();

    assertEquals(0, SingletonManager.getReservationCount());
    assertEquals(new TestService(false, 0, 1), service1);
    assertEquals(new TestService(false, 1, 1), service2);

    SingletonReservation resv3 = SingletonManager.getClientReservation();

    assertEquals(1, SingletonManager.getReservationCount());
    assertEquals(new TestService(true, 1, 1), service1);
    assertEquals(new TestService(true, 2, 1), service2);

    resv3.close();

    assertEquals(0, SingletonManager.getReservationCount());
    assertEquals(new TestService(false, 1, 2), service1);
    assertEquals(new TestService(false, 2, 2), service2);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\singletons\SingletonManagerTest.java
  public void testConnectorPreventsDisable() {

    SingletonManager.setMode(Mode.CONNECTOR);
    assertEquals(Mode.CONNECTOR, SingletonManager.getMode());

    SingletonReservation resv1 = SingletonManager.getClientReservation();

    assertEquals(1, SingletonManager.getReservationCount());

    SingletonReservation resv2 = SingletonManager.getClientReservation();

    assertEquals(2, SingletonManager.getReservationCount());

    resv1.close();
    resv2.close();

    assertEquals(0, SingletonManager.getReservationCount());

    assertEquals(new TestService(true, 0, 0), service1);
    assertEquals(new TestService(true, 1, 0), service2);

    SingletonManager.setMode(Mode.CLIENT);
    assertEquals(Mode.CLIENT, SingletonManager.getMode());

    assertEquals(new TestService(false, 0, 1), service1);
    assertEquals(new TestService(false, 1, 1), service2);

    try {
      SingletonManager.setMode(Mode.CONNECTOR);
      fail("Should only be able to set mode to CONNECTOR once");
    } catch (IllegalStateException e) {}

    assertEquals(Mode.CLIENT, SingletonManager.getMode());
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\singletons\SingletonManagerTest.java
  public void testConnectorEnables() {
    SingletonReservation resv1 = SingletonManager.getClientReservation();
    resv1.close();

    assertEquals(new TestService(false, 0, 1), service1);
    assertEquals(new TestService(false, 1, 1), service2);

    // this should enable services
    SingletonManager.setMode(Mode.CONNECTOR);

    assertEquals(new TestService(true, 1, 1), service1);
    assertEquals(new TestService(true, 2, 1), service2);
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\singletons\SingletonManagerTest.java
  public void testServerPreventsDisable() {

    SingletonManager.setMode(Mode.SERVER);
    assertEquals(Mode.SERVER, SingletonManager.getMode());

    SingletonReservation resv1 = SingletonManager.getClientReservation();

    assertEquals(1, SingletonManager.getReservationCount());

    SingletonReservation resv2 = SingletonManager.getClientReservation();

    assertEquals(2, SingletonManager.getReservationCount());

    resv1.close();
    resv2.close();

    assertEquals(0, SingletonManager.getReservationCount());

    assertEquals(new TestService(true, 0, 0), service1);
    assertEquals(new TestService(true, 1, 0), service2);

    // can not leave server mode, so this should have no effect
    SingletonManager.setMode(Mode.CLIENT);
    assertEquals(Mode.SERVER, SingletonManager.getMode());

    assertEquals(new TestService(true, 0, 0), service1);
    assertEquals(new TestService(true, 1, 0), service2);
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\singletons\SingletonManagerTest.java
  public void testServerEnables() {
    SingletonReservation resv1 = SingletonManager.getClientReservation();
    resv1.close();

    assertEquals(new TestService(false, 0, 1), service1);
    assertEquals(new TestService(false, 1, 1), service2);

    // this should enable services
    SingletonManager.setMode(Mode.SERVER);
    assertEquals(Mode.SERVER, SingletonManager.getMode());

    assertEquals(new TestService(true, 1, 1), service1);
    assertEquals(new TestService(true, 2, 1), service2);

    // can not leave server mode, so this should have no effect
    SingletonManager.setMode(Mode.CLIENT);
    assertEquals(Mode.SERVER, SingletonManager.getMode());

    assertEquals(new TestService(true, 1, 1), service1);
    assertEquals(new TestService(true, 2, 1), service2);
  }

  private static class TestService implements SingletonService {

    boolean enabled;
    int enables = 0;
    int disables = 0;

    TestService(boolean enabled) {
      this.enabled = enabled;
    }

    TestService(boolean enabled, int enables, int disables) {
      this.enabled = enabled;
      this.enables = enables;
      this.disables = disables;
    }

    @Override
    public boolean isEnabled() {
      return enabled;
    }

    @Override
    public void enable() {
      assertFalse(enabled);
      enabled = true;
      enables++;

    }

    @Override
    public void disable() {
      assertTrue(enabled);
      enabled = false;
      disables++;
    }

    @Override
    public boolean equals(Object o) {
      if (o instanceof TestService) {
        TestService ots = (TestService) o;
        return enabled == ots.enabled && enables == ots.enables && disables == ots.disables;
      }
      return false;
    }

    @Override
    public int hashCode() {
      throw new UnsupportedOperationException();
    }

    @Override
    public String toString() {
      return "enabled:" + enabled + " enables:" + enables + " disables:" + disables;
    }
  }
}
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\spi\balancer\GroupBalancerTest.java
  public void testSingleGroup() {

    String[][] tests = {new String[] {"a", "b", "c", "d"}, new String[] {"a", "b", "c"},
        new String[] {"a", "b", "c", "d", "e"}, new String[] {"a", "b", "c", "d", "e", "f", "g"},
        new String[] {"a", "b", "c", "d", "e", "f", "g", "h"},
        new String[] {"a", "b", "c", "d", "e", "f", "g", "h", "i"}, new String[] {"a"}};

    for (String[] suffixes : tests) {
      for (int maxTS = 1; maxTS <= 4; maxTS++) {
        TabletServers tservers = new TabletServers();
        int ts = 0;
        for (String s : suffixes) {
          tservers.addTablet("01" + s, "192.168.1." + ((ts++ % maxTS) + 1), 9997);
        }

        tservers.addTservers("192.168.1.2:9997", "192.168.1.3:9997", "192.168.1.4:9997");
        tservers.balance();
        tservers.balance();
      }
    }
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\spi\balancer\GroupBalancerTest.java
  public void testTwoGroups() {
    String[][] tests = {new String[] {"a", "b", "c", "d"}, new String[] {"a", "b", "c"},
        new String[] {"a", "b", "c", "d", "e"}, new String[] {"a", "b", "c", "d", "e", "f", "g"},
        new String[] {"a", "b", "c", "d", "e", "f", "g", "h"},
        new String[] {"a", "b", "c", "d", "e", "f", "g", "h", "i"}, new String[] {"a"}};

    for (String[] suffixes1 : tests) {
      for (String[] suffixes2 : tests) {
        for (int maxTS = 1; maxTS <= 4; maxTS++) {
          TabletServers tservers = new TabletServers();
          int ts = 0;
          for (String s : suffixes1) {
            tservers.addTablet("01" + s, "192.168.1." + ((ts++ % maxTS) + 1), 9997);
          }

          for (String s : suffixes2) {
            tservers.addTablet("02" + s, "192.168.1." + ((ts++ % maxTS) + 1), 9997);
          }

          tservers.addTservers("192.168.1.2:9997", "192.168.1.3:9997", "192.168.1.4:9997");
          tservers.balance();
          tservers.balance();
        }
      }
    }
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\spi\balancer\GroupBalancerTest.java
  public void testThreeGroups() {
    String[][] tests = {new String[] {"a", "b", "c", "d"}, new String[] {"a", "b", "c"},
        new String[] {"a", "b", "c", "d", "e"}, new String[] {"a", "b", "c", "d", "e", "f", "g"},
        new String[] {"a", "b", "c", "d", "e", "f", "g", "h"},
        new String[] {"a", "b", "c", "d", "e", "f", "g", "h", "i"}, new String[] {"a"}};

    for (String[] suffixes1 : tests) {
      for (String[] suffixes2 : tests) {
        for (String[] suffixes3 : tests) {
          for (int maxTS = 1; maxTS <= 4; maxTS++) {
            TabletServers tservers = new TabletServers();
            int ts = 0;
            for (String s : suffixes1) {
              tservers.addTablet("01" + s, "192.168.1." + ((ts++ % maxTS) + 1), 9997);
            }

            for (String s : suffixes2) {
              tservers.addTablet("02" + s, "192.168.1." + ((ts++ % maxTS) + 1), 9997);
            }

            for (String s : suffixes3) {
              tservers.addTablet("03" + s, "192.168.1." + ((ts++ % maxTS) + 1), 9997);
            }

            tservers.addTservers("192.168.1.2:9997", "192.168.1.3:9997", "192.168.1.4:9997");
            tservers.balance();
            tservers.balance();
          }
        }
      }
    }
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\spi\balancer\GroupBalancerTest.java
  public void testManySingleTabletGroups() {

    for (int numGroups = 1; numGroups <= 13; numGroups++) {
      for (int maxTS = 1; maxTS <= 4; maxTS++) {
        TabletServers tservers = new TabletServers();
        int ts = 0;

        for (int group = 1; group <= numGroups; group++) {
          tservers.addTablet(String.format("%02d:p", group), "192.168.1." + ((ts++ % maxTS) + 1),
              9997);
        }

        tservers.addTservers("192.168.1.2:9997", "192.168.1.3:9997", "192.168.1.4:9997");

        tservers.balance();
        tservers.balance();
      }
    }
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\spi\balancer\GroupBalancerTest.java
  public void testMaxMigrations() {

    for (int max : new int[] {1, 2, 3, 7, 10, 30}) {
      TabletServers tservers = new TabletServers();

      for (int i = 1; i <= 9; i++) {
        tservers.addTablet("01" + i, "192.168.1.1", 9997);
      }

      for (int i = 1; i <= 4; i++) {
        tservers.addTablet("02" + i, "192.168.1.2", 9997);
      }

      for (int i = 1; i <= 5; i++) {
        tservers.addTablet("03" + i, "192.168.1.3", 9997);
      }

      tservers.addTservers("192.168.1.4:9997", "192.168.1.5:9997");

      tservers.balance(max);
    }
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\spi\balancer\GroupBalancerTest.java
  public void bigTest() {
    TabletServers tservers = new TabletServers();
    Random rand = new SecureRandom();

    for (int g = 1; g <= 60; g++) {
      for (int t = 1; t <= 241; t++) {
        tservers.addTablet(String.format("%02d:%d", g, t), "192.168.1." + (rand.nextInt(249) + 1),
            9997);
      }
    }

    for (int i = 1; i <= 250; i++) {
      tservers.addTserver("192.168.1." + i, 9997);
    }

    tservers.balance(1000);
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\spi\balancer\GroupBalancerTest.java
  public void bigTest2() {
    TabletServers tservers = new TabletServers();
    Random rand = new SecureRandom();

    for (int g = 1; g <= 60; g++) {
      for (int t = 1; t <= rand.nextInt(1000); t++) {
        tservers.addTablet(String.format("%02d:%d", g, t), "192.168.1." + (rand.nextInt(249) + 1),
            9997);
      }
    }

    for (int i = 1; i <= 250; i++) {
      tservers.addTserver("192.168.1." + i, 9997);
    }

    tservers.balance(1000);
  }
}
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\spi\balancer\HostRegexTableLoadBalancerReconfigurationTest.java
  public void testConfigurationChanges() {
    HashMap<String,TableId> tables = new HashMap<>();
    tables.put(FOO.getTableName(), FOO.getId());
    tables.put(BAR.getTableName(), BAR.getId());
    tables.put(BAZ.getTableName(), BAZ.getId());

    ConfigurationCopy config = new ConfigurationCopy(SiteConfiguration.auto());
    DEFAULT_TABLE_PROPERTIES.forEach(config::set);
    ConfigurationImpl configImpl = new ConfigurationImpl(config);
    BalancerEnvironment environment = createMock(BalancerEnvironment.class);
    expect(environment.getConfiguration()).andReturn(configImpl).anyTimes();
    expect(environment.getTableIdMap()).andReturn(tables).anyTimes();
    expect(environment.getConfiguration(anyObject(TableId.class))).andReturn(configImpl).anyTimes();
    replay(environment);
    init(environment);

    Map<TabletId,TabletServerId> unassigned = new HashMap<>();
    for (List<TabletId> tablets : tableTablets.values()) {
      for (TabletId tablet : tablets) {
        unassigned.put(tablet, null);
      }
    }
    this.getAssignments(
        new AssignmentParamsImpl(Collections.unmodifiableSortedMap(allTabletServers),
            Collections.unmodifiableMap(unassigned), assignments));
    assertEquals(15, assignments.size());
    // Ensure unique tservers
    for (Entry<TabletId,TabletServerId> e : assignments.entrySet()) {
      for (Entry<TabletId,TabletServerId> e2 : assignments.entrySet()) {
        if (e.getKey().equals(e2.getKey())) {
          continue;
        }
        if (e.getValue().equals(e2.getValue())) {
          fail("Assignment failure. " + e.getKey() + " and " + e2.getKey()
              + " are assigned to the same host: " + e.getValue());
        }
      }
    }
    // Ensure assignments are correct
    for (Entry<TabletId,TabletServerId> e : assignments.entrySet()) {
      if (!tabletInBounds(e.getKey(), e.getValue())) {
        fail("tablet not in bounds: " + e.getKey() + " -> " + e.getValue().getHost());
      }
    }
    Set<TabletId> migrations = new HashSet<>();
    List<TabletMigration> migrationsOut = new ArrayList<>();
    // Wait to trigger the out of bounds check which will call our version of
    // getOnlineTabletsForTable
    UtilWaitThread.sleep(3000);
    this.balance(new BalanceParamsImpl(Collections.unmodifiableSortedMap(allTabletServers),
        migrations, migrationsOut));
    assertEquals(0, migrationsOut.size());
    // Change property, simulate call by TableConfWatcher

    config.set(HostRegexTableLoadBalancer.HOST_BALANCER_PREFIX + BAR.getTableName(), "r01.*");

    // Wait to trigger the out of bounds check and the repool check
    UtilWaitThread.sleep(10000);
    this.balance(new BalanceParamsImpl(Collections.unmodifiableSortedMap(allTabletServers),
        migrations, migrationsOut));
    assertEquals(5, migrationsOut.size());
    for (TabletMigration migration : migrationsOut) {
      assertTrue(migration.getNewTabletServer().getHost().startsWith("192.168.0.1")
          || migration.getNewTabletServer().getHost().startsWith("192.168.0.2")
          || migration.getNewTabletServer().getHost().startsWith("192.168.0.3")
          || migration.getNewTabletServer().getHost().startsWith("192.168.0.4")
          || migration.getNewTabletServer().getHost().startsWith("192.168.0.5"));
    }
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\spi\balancer\HostRegexTableLoadBalancerTest.java
  public void testInit() {
    init(DEFAULT_TABLE_PROPERTIES);
    assertEquals("OOB check interval value is incorrect", 7000, this.getOobCheckMillis());
    assertEquals("Max migrations is incorrect", 4, this.getMaxMigrations());
    assertEquals("Max outstanding migrations is incorrect", 10, this.getMaxOutstandingMigrations());
    assertFalse(isIpBasedRegex());
    Map<String,Pattern> patterns = this.getPoolNameToRegexPattern();
    assertEquals(2, patterns.size());
    assertTrue(patterns.containsKey(FOO.getTableName()));
    assertEquals(Pattern.compile("r01.*").pattern(), patterns.get(FOO.getTableName()).pattern());
    assertTrue(patterns.containsKey(BAR.getTableName()));
    assertEquals(Pattern.compile("r02.*").pattern(), patterns.get(BAR.getTableName()).pattern());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\spi\balancer\HostRegexTableLoadBalancerTest.java
  public void testBalance() {
    init(DEFAULT_TABLE_PROPERTIES);
    Set<TabletId> migrations = new HashSet<>();
    List<TabletMigration> migrationsOut = new ArrayList<>();
    long wait =
        this.balance(new BalanceParamsImpl(Collections.unmodifiableSortedMap(createCurrent(15)),
            migrations, migrationsOut));
    assertEquals(20000, wait);
    // should balance four tablets in one of the tables before reaching max
    assertEquals(4, migrationsOut.size());

    // now balance again passing in the new migrations
    for (TabletMigration m : migrationsOut) {
      migrations.add(m.getTablet());
    }
    migrationsOut.clear();
    wait = this.balance(new BalanceParamsImpl(Collections.unmodifiableSortedMap(createCurrent(15)),
        migrations, migrationsOut));
    assertEquals(20000, wait);
    // should balance four tablets in one of the other tables before reaching max
    assertEquals(4, migrationsOut.size());

    // now balance again passing in the new migrations
    for (TabletMigration m : migrationsOut) {
      migrations.add(m.getTablet());
    }
    migrationsOut.clear();
    wait = this.balance(new BalanceParamsImpl(Collections.unmodifiableSortedMap(createCurrent(15)),
        migrations, migrationsOut));
    assertEquals(20000, wait);
    // should balance four tablets in one of the other tables before reaching max
    assertEquals(4, migrationsOut.size());

    // now balance again passing in the new migrations
    for (TabletMigration m : migrationsOut) {
      migrations.add(m.getTablet());
    }
    migrationsOut.clear();
    wait = this.balance(new BalanceParamsImpl(Collections.unmodifiableSortedMap(createCurrent(15)),
        migrations, migrationsOut));
    assertEquals(20000, wait);
    // no more balancing to do
    assertEquals(0, migrationsOut.size());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\spi\balancer\HostRegexTableLoadBalancerTest.java
  public void testBalanceWithTooManyOutstandingMigrations() {
    List<TabletMigration> migrationsOut = new ArrayList<>();
    init(DEFAULT_TABLE_PROPERTIES);
    // lets say we already have migrations ongoing for the FOO and BAR table extends (should be 5 of
    // each of them) for a total of 10
    Set<TabletId> migrations = new HashSet<>();
    migrations.addAll(tableTablets.get(FOO.getTableName()));
    migrations.addAll(tableTablets.get(BAR.getTableName()));
    long wait =
        this.balance(new BalanceParamsImpl(Collections.unmodifiableSortedMap(createCurrent(15)),
            migrations, migrationsOut));
    assertEquals(20000, wait);
    // no migrations should have occurred as 10 is the maxOutstandingMigrations
    assertEquals(0, migrationsOut.size());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\spi\balancer\HostRegexTableLoadBalancerTest.java
  public void testSplitCurrentByRegexUsingHostname() {
    init(DEFAULT_TABLE_PROPERTIES);
    Map<String,SortedMap<TabletServerId,TServerStatus>> groups =
        this.splitCurrentByRegex(createCurrent(15));
    assertEquals(3, groups.size());
    assertTrue(groups.containsKey(FOO.getTableName()));
    SortedMap<TabletServerId,TServerStatus> fooHosts = groups.get(FOO.getTableName());
    assertEquals(5, fooHosts.size());
    assertTrue(
        fooHosts.containsKey(new TabletServerIdImpl("192.168.0.1", 9997, Integer.toHexString(1))));
    assertTrue(
        fooHosts.containsKey(new TabletServerIdImpl("192.168.0.2", 9997, Integer.toHexString(1))));
    assertTrue(
        fooHosts.containsKey(new TabletServerIdImpl("192.168.0.3", 9997, Integer.toHexString(1))));
    assertTrue(
        fooHosts.containsKey(new TabletServerIdImpl("192.168.0.4", 9997, Integer.toHexString(1))));
    assertTrue(
        fooHosts.containsKey(new TabletServerIdImpl("192.168.0.5", 9997, Integer.toHexString(1))));
    assertTrue(groups.containsKey(BAR.getTableName()));
    SortedMap<TabletServerId,TServerStatus> barHosts = groups.get(BAR.getTableName());
    assertEquals(5, barHosts.size());
    assertTrue(
        barHosts.containsKey(new TabletServerIdImpl("192.168.0.6", 9997, Integer.toHexString(1))));
    assertTrue(
        barHosts.containsKey(new TabletServerIdImpl("192.168.0.7", 9997, Integer.toHexString(1))));
    assertTrue(
        barHosts.containsKey(new TabletServerIdImpl("192.168.0.8", 9997, Integer.toHexString(1))));
    assertTrue(
        barHosts.containsKey(new TabletServerIdImpl("192.168.0.9", 9997, Integer.toHexString(1))));
    assertTrue(
        barHosts.containsKey(new TabletServerIdImpl("192.168.0.10", 9997, Integer.toHexString(1))));
    assertTrue(groups.containsKey(DEFAULT_POOL));
    SortedMap<TabletServerId,TServerStatus> defHosts = groups.get(DEFAULT_POOL);
    assertEquals(5, defHosts.size());
    assertTrue(
        defHosts.containsKey(new TabletServerIdImpl("192.168.0.11", 9997, Integer.toHexString(1))));
    assertTrue(
        defHosts.containsKey(new TabletServerIdImpl("192.168.0.12", 9997, Integer.toHexString(1))));
    assertTrue(
        defHosts.containsKey(new TabletServerIdImpl("192.168.0.13", 9997, Integer.toHexString(1))));
    assertTrue(
        defHosts.containsKey(new TabletServerIdImpl("192.168.0.14", 9997, Integer.toHexString(1))));
    assertTrue(
        defHosts.containsKey(new TabletServerIdImpl("192.168.0.15", 9997, Integer.toHexString(1))));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\spi\balancer\HostRegexTableLoadBalancerTest.java
  public void testSplitCurrentByRegexUsingOverlappingPools() {
    HashMap<String,String> props = new HashMap<>(DEFAULT_TABLE_PROPERTIES);
    props.put(HostRegexTableLoadBalancer.HOST_BALANCER_PREFIX + FOO.getTableName(), "r.*");
    props.put(HostRegexTableLoadBalancer.HOST_BALANCER_PREFIX + BAR.getTableName(), "r01.*|r02.*");
    init(props);
    Map<String,SortedMap<TabletServerId,TServerStatus>> groups =
        this.splitCurrentByRegex(createCurrent(15));

    // Groups foo, bar, and the default pool which contains all known hosts
    assertEquals(3, groups.size());
    assertTrue(groups.containsKey(FOO.getTableName()));
    assertTrue(groups.containsKey(DEFAULT_POOL));
    for (String pool : new String[] {FOO.getTableName(), DEFAULT_POOL}) {
      SortedMap<TabletServerId,TServerStatus> fooHosts = groups.get(pool);
      assertEquals(15, fooHosts.size());
      assertTrue(fooHosts
          .containsKey(new TabletServerIdImpl("192.168.0.1", 9997, Integer.toHexString(1))));
      assertTrue(fooHosts
          .containsKey(new TabletServerIdImpl("192.168.0.2", 9997, Integer.toHexString(1))));
      assertTrue(fooHosts
          .containsKey(new TabletServerIdImpl("192.168.0.3", 9997, Integer.toHexString(1))));
      assertTrue(fooHosts
          .containsKey(new TabletServerIdImpl("192.168.0.4", 9997, Integer.toHexString(1))));
      assertTrue(fooHosts
          .containsKey(new TabletServerIdImpl("192.168.0.5", 9997, Integer.toHexString(1))));
      assertTrue(fooHosts
          .containsKey(new TabletServerIdImpl("192.168.0.6", 9997, Integer.toHexString(1))));
      assertTrue(fooHosts
          .containsKey(new TabletServerIdImpl("192.168.0.7", 9997, Integer.toHexString(1))));
      assertTrue(fooHosts
          .containsKey(new TabletServerIdImpl("192.168.0.8", 9997, Integer.toHexString(1))));
      assertTrue(fooHosts
          .containsKey(new TabletServerIdImpl("192.168.0.9", 9997, Integer.toHexString(1))));
      assertTrue(fooHosts
          .containsKey(new TabletServerIdImpl("192.168.0.10", 9997, Integer.toHexString(1))));
      assertTrue(fooHosts
          .containsKey(new TabletServerIdImpl("192.168.0.11", 9997, Integer.toHexString(1))));
      assertTrue(fooHosts
          .containsKey(new TabletServerIdImpl("192.168.0.12", 9997, Integer.toHexString(1))));
      assertTrue(fooHosts
          .containsKey(new TabletServerIdImpl("192.168.0.13", 9997, Integer.toHexString(1))));
      assertTrue(fooHosts
          .containsKey(new TabletServerIdImpl("192.168.0.14", 9997, Integer.toHexString(1))));
      assertTrue(fooHosts
          .containsKey(new TabletServerIdImpl("192.168.0.15", 9997, Integer.toHexString(1))));
    }

    assertTrue(groups.containsKey(BAR.getTableName()));
    SortedMap<TabletServerId,TServerStatus> barHosts = groups.get(BAR.getTableName());
    assertEquals(10, barHosts.size());
    assertTrue(
        barHosts.containsKey(new TabletServerIdImpl("192.168.0.1", 9997, Integer.toHexString(1))));
    assertTrue(
        barHosts.containsKey(new TabletServerIdImpl("192.168.0.2", 9997, Integer.toHexString(1))));
    assertTrue(
        barHosts.containsKey(new TabletServerIdImpl("192.168.0.3", 9997, Integer.toHexString(1))));
    assertTrue(
        barHosts.containsKey(new TabletServerIdImpl("192.168.0.4", 9997, Integer.toHexString(1))));
    assertTrue(
        barHosts.containsKey(new TabletServerIdImpl("192.168.0.5", 9997, Integer.toHexString(1))));
    assertTrue(
        barHosts.containsKey(new TabletServerIdImpl("192.168.0.6", 9997, Integer.toHexString(1))));
    assertTrue(
        barHosts.containsKey(new TabletServerIdImpl("192.168.0.7", 9997, Integer.toHexString(1))));
    assertTrue(
        barHosts.containsKey(new TabletServerIdImpl("192.168.0.8", 9997, Integer.toHexString(1))));
    assertTrue(
        barHosts.containsKey(new TabletServerIdImpl("192.168.0.9", 9997, Integer.toHexString(1))));
    assertTrue(
        barHosts.containsKey(new TabletServerIdImpl("192.168.0.10", 9997, Integer.toHexString(1))));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\spi\balancer\HostRegexTableLoadBalancerTest.java
  public void testSplitCurrentByRegexUsingIP() {
    HashMap<String,String> props = new HashMap<>();
    props.put(HostRegexTableLoadBalancer.HOST_BALANCER_OOB_CHECK_KEY, "30s");
    props.put(HostRegexTableLoadBalancer.HOST_BALANCER_REGEX_USING_IPS_KEY, "true");
    props.put(HostRegexTableLoadBalancer.HOST_BALANCER_PREFIX + FOO.getTableName(),
        "192\\.168\\.0\\.[1-5]");
    props.put(HostRegexTableLoadBalancer.HOST_BALANCER_PREFIX + BAR.getTableName(),
        "192\\.168\\.0\\.[6-9]|192\\.168\\.0\\.10");
    init(props);

    assertTrue(isIpBasedRegex());
    Map<String,SortedMap<TabletServerId,TServerStatus>> groups =
        this.splitCurrentByRegex(createCurrent(15));
    assertEquals(3, groups.size());
    assertTrue(groups.containsKey(FOO.getTableName()));
    SortedMap<TabletServerId,TServerStatus> fooHosts = groups.get(FOO.getTableName());
    assertEquals(5, fooHosts.size());
    assertTrue(
        fooHosts.containsKey(new TabletServerIdImpl("192.168.0.1", 9997, Integer.toHexString(1))));
    assertTrue(
        fooHosts.containsKey(new TabletServerIdImpl("192.168.0.2", 9997, Integer.toHexString(1))));
    assertTrue(
        fooHosts.containsKey(new TabletServerIdImpl("192.168.0.3", 9997, Integer.toHexString(1))));
    assertTrue(
        fooHosts.containsKey(new TabletServerIdImpl("192.168.0.4", 9997, Integer.toHexString(1))));
    assertTrue(
        fooHosts.containsKey(new TabletServerIdImpl("192.168.0.5", 9997, Integer.toHexString(1))));
    assertTrue(groups.containsKey(BAR.getTableName()));
    SortedMap<TabletServerId,TServerStatus> barHosts = groups.get(BAR.getTableName());
    assertEquals(5, barHosts.size());
    assertTrue(
        barHosts.containsKey(new TabletServerIdImpl("192.168.0.6", 9997, Integer.toHexString(1))));
    assertTrue(
        barHosts.containsKey(new TabletServerIdImpl("192.168.0.7", 9997, Integer.toHexString(1))));
    assertTrue(
        barHosts.containsKey(new TabletServerIdImpl("192.168.0.8", 9997, Integer.toHexString(1))));
    assertTrue(
        barHosts.containsKey(new TabletServerIdImpl("192.168.0.9", 9997, Integer.toHexString(1))));
    assertTrue(
        barHosts.containsKey(new TabletServerIdImpl("192.168.0.10", 9997, Integer.toHexString(1))));
    assertTrue(groups.containsKey(DEFAULT_POOL));
    SortedMap<TabletServerId,TServerStatus> defHosts = groups.get(DEFAULT_POOL);
    assertEquals(5, defHosts.size());
    assertTrue(
        defHosts.containsKey(new TabletServerIdImpl("192.168.0.11", 9997, Integer.toHexString(1))));
    assertTrue(
        defHosts.containsKey(new TabletServerIdImpl("192.168.0.12", 9997, Integer.toHexString(1))));
    assertTrue(
        defHosts.containsKey(new TabletServerIdImpl("192.168.0.13", 9997, Integer.toHexString(1))));
    assertTrue(
        defHosts.containsKey(new TabletServerIdImpl("192.168.0.14", 9997, Integer.toHexString(1))));
    assertTrue(
        defHosts.containsKey(new TabletServerIdImpl("192.168.0.15", 9997, Integer.toHexString(1))));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\spi\balancer\HostRegexTableLoadBalancerTest.java
  public void testAllUnassigned() {
    init(DEFAULT_TABLE_PROPERTIES);
    Map<TabletId,TabletServerId> assignments = new HashMap<>();
    Map<TabletId,TabletServerId> unassigned = new HashMap<>();
    for (List<TabletId> extents : tableTablets.values()) {
      for (TabletId tabletId : extents) {
        unassigned.put(tabletId, null);
      }
    }
    this.getAssignments(
        new AssignmentParamsImpl(Collections.unmodifiableSortedMap(allTabletServers),
            Collections.unmodifiableMap(unassigned), assignments));
    assertEquals(15, assignments.size());
    // Ensure unique tservers
    for (Entry<TabletId,TabletServerId> e : assignments.entrySet()) {
      for (Entry<TabletId,TabletServerId> e2 : assignments.entrySet()) {
        if (e.getKey().equals(e2.getKey())) {
          continue;
        }
        if (e.getValue().equals(e2.getValue())) {
          fail("Assignment failure");
        }
      }
    }
    // Ensure assignments are correct
    for (Entry<TabletId,TabletServerId> e : assignments.entrySet()) {
      if (!tabletInBounds(e.getKey(), e.getValue())) {
        fail("tablet not in bounds: " + e.getKey() + " -> " + e.getValue().getHost());
      }
    }
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\spi\balancer\HostRegexTableLoadBalancerTest.java
  public void testAllAssigned() {
    init(DEFAULT_TABLE_PROPERTIES);
    Map<TabletId,TabletServerId> assignments = new HashMap<>();
    this.getAssignments(new AssignmentParamsImpl(
        Collections.unmodifiableSortedMap(allTabletServers), Map.of(), assignments));
    assertEquals(0, assignments.size());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\spi\balancer\HostRegexTableLoadBalancerTest.java
  public void testPartiallyAssigned() {
    init(DEFAULT_TABLE_PROPERTIES);
    Map<TabletId,TabletServerId> assignments = new HashMap<>();
    Map<TabletId,TabletServerId> unassigned = new HashMap<>();
    int i = 0;
    for (List<TabletId> tablets : tableTablets.values()) {
      for (TabletId tabletId : tablets) {
        if ((i % 2) == 0) {
          unassigned.put(tabletId, null);
        }
        i++;
      }
    }
    this.getAssignments(
        new AssignmentParamsImpl(Collections.unmodifiableSortedMap(allTabletServers),
            Collections.unmodifiableMap(unassigned), assignments));
    assertEquals(unassigned.size(), assignments.size());
    // Ensure unique tservers
    for (Entry<TabletId,TabletServerId> e : assignments.entrySet()) {
      for (Entry<TabletId,TabletServerId> e2 : assignments.entrySet()) {
        if (e.getKey().equals(e2.getKey())) {
          continue;
        }
        if (e.getValue().equals(e2.getValue())) {
          fail("Assignment failure");
        }
      }
    }
    // Ensure assignments are correct
    for (Entry<TabletId,TabletServerId> e : assignments.entrySet()) {
      if (!tabletInBounds(e.getKey(), e.getValue())) {
        fail("tablet not in bounds: " + e.getKey() + " -> " + e.getValue().getHost());
      }
    }
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\spi\balancer\HostRegexTableLoadBalancerTest.java
  public void testUnassignedWithNoTServers() {
    init(DEFAULT_TABLE_PROPERTIES);
    Map<TabletId,TabletServerId> assignments = new HashMap<>();
    Map<TabletId,TabletServerId> unassigned = new HashMap<>();
    for (TabletId tabletId : tableTablets.get(BAR.getTableName())) {
      unassigned.put(tabletId, null);
    }
    SortedMap<TabletServerId,TServerStatus> current = createCurrent(15);
    // Remove the BAR tablet servers from current
    List<TabletServerId> removals = new ArrayList<>();
    for (Entry<TabletServerId,TServerStatus> e : current.entrySet()) {
      if (e.getKey().getHost().equals("192.168.0.6") || e.getKey().getHost().equals("192.168.0.7")
          || e.getKey().getHost().equals("192.168.0.8")
          || e.getKey().getHost().equals("192.168.0.9")
          || e.getKey().getHost().equals("192.168.0.10")) {
        removals.add(e.getKey());
      }
    }
    for (TabletServerId r : removals) {
      current.remove(r);
    }
    this.getAssignments(new AssignmentParamsImpl(Collections.unmodifiableSortedMap(current),
        Collections.unmodifiableMap(unassigned), assignments));
    assertEquals(unassigned.size(), assignments.size());
    // Ensure assignments are correct
    // Ensure tablets are assigned in default pool
    for (Entry<TabletId,TabletServerId> e : assignments.entrySet()) {
      if (tabletInBounds(e.getKey(), e.getValue())) {
        fail("tablet unexpectedly in bounds: " + e.getKey() + " -> " + e.getValue().getHost());
      }
    }
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\spi\balancer\HostRegexTableLoadBalancerTest.java
  public void testUnassignedWithNoDefaultPool() {
    init(DEFAULT_TABLE_PROPERTIES);
    Map<TabletId,TabletServerId> assignments = new HashMap<>();
    Map<TabletId,TabletServerId> unassigned = new HashMap<>();
    for (TabletId tabletId : tableTablets.get(BAR.getTableName())) {
      unassigned.put(tabletId, null);
    }

    SortedMap<TabletServerId,TServerStatus> current = createCurrent(15);
    // Remove the BAR tablet servers and default pool from current
    List<TabletServerId> removals = new ArrayList<>();
    for (Entry<TabletServerId,TServerStatus> e : current.entrySet()) {
      if (e.getKey().getHost().equals("192.168.0.6") || e.getKey().getHost().equals("192.168.0.7")
          || e.getKey().getHost().equals("192.168.0.8")
          || e.getKey().getHost().equals("192.168.0.9")
          || e.getKey().getHost().equals("192.168.0.10")
          || e.getKey().getHost().equals("192.168.0.11")
          || e.getKey().getHost().equals("192.168.0.12")
          || e.getKey().getHost().equals("192.168.0.13")
          || e.getKey().getHost().equals("192.168.0.14")
          || e.getKey().getHost().equals("192.168.0.15")) {
        removals.add(e.getKey());
      }
    }

    for (TabletServerId r : removals) {
      current.remove(r);
    }

    this.getAssignments(new AssignmentParamsImpl(Collections.unmodifiableSortedMap(current),
        Collections.unmodifiableMap(unassigned), assignments));
    assertEquals(unassigned.size(), assignments.size());

    // Ensure tablets are assigned in default pool
    for (Entry<TabletId,TabletServerId> e : assignments.entrySet()) {
      if (tabletInBounds(e.getKey(), e.getValue())) {
        fail("tablet unexpectedly in bounds: " + e.getKey() + " -> " + e.getValue().getHost());
      }
    }
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\spi\balancer\HostRegexTableLoadBalancerTest.java
  public void testOutOfBoundsTablets() {
    init(DEFAULT_TABLE_PROPERTIES);
    // Wait to trigger the out of bounds check which will call our version of
    // getOnlineTabletsForTable
    UtilWaitThread.sleep(11000);
    Set<TabletId> migrations = new HashSet<>();
    List<TabletMigration> migrationsOut = new ArrayList<>();
    this.balance(new BalanceParamsImpl(createCurrent(15), migrations, migrationsOut));
    assertEquals(2, migrationsOut.size());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\spi\balancer\SimpleLoadBalancerTest.java
  public void testAssignMigrations() {
    servers.put(new TabletServerIdImpl("127.0.0.1", 1234, "a"), new FakeTServer());
    servers.put(new TabletServerIdImpl("127.0.0.2", 1234, "b"), new FakeTServer());
    servers.put(new TabletServerIdImpl("127.0.0.3", 1234, "c"), new FakeTServer());
    List<TabletId> metadataTable = new ArrayList<>();
    String table = "t1";
    metadataTable.add(makeTablet(table, null, null));
    table = "t2";
    metadataTable.add(makeTablet(table, "a", null));
    metadataTable.add(makeTablet(table, null, "a"));
    table = "t3";
    metadataTable.add(makeTablet(table, "a", null));
    metadataTable.add(makeTablet(table, "b", "a"));
    metadataTable.add(makeTablet(table, "c", "b"));
    metadataTable.add(makeTablet(table, "d", "c"));
    metadataTable.add(makeTablet(table, "e", "d"));
    metadataTable.add(makeTablet(table, null, "e"));
    Collections.sort(metadataTable);

    TestSimpleLoadBalancer balancer = new TestSimpleLoadBalancer();

    SortedMap<TabletServerId,TServerStatus> current = new TreeMap<>();
    for (Entry<TabletServerId,FakeTServer> entry : servers.entrySet()) {
      current.put(entry.getKey(), entry.getValue().getStatus());
    }
    assignTablets(metadataTable, servers, current, balancer);

    // Verify that the counts on the tables are correct
    Map<String,Integer> expectedCounts = new HashMap<>();
    expectedCounts.put("t1", 1);
    expectedCounts.put("t2", 1);
    expectedCounts.put("t3", 2);
    checkBalance(metadataTable, servers, expectedCounts);

    // Rebalance once
    for (Entry<TabletServerId,FakeTServer> entry : servers.entrySet()) {
      current.put(entry.getKey(), entry.getValue().getStatus());
    }

    // Nothing should happen, we are balanced
    ArrayList<TabletMigration> out = new ArrayList<>();
    balancer.getMigrations(current, out);
    assertEquals(out.size(), 0);

    // Take down a tabletServer
    TabletServerId first = current.keySet().iterator().next();
    current.remove(first);
    FakeTServer remove = servers.remove(first);

    // reassign offline extents
    assignTablets(remove.tablets, servers, current, balancer);
    checkBalance(metadataTable, servers, null);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\spi\balancer\SimpleLoadBalancerTest.java
  public void testUnevenAssignment() {
    for (char c : "abcdefghijklmnopqrstuvwxyz".toCharArray()) {
      String cString = Character.toString(c);
      TabletServerId tsid = new TabletServerIdImpl("127.0.0.1", c, cString);
      FakeTServer fakeTServer = new FakeTServer();
      servers.put(tsid, fakeTServer);
      fakeTServer.tablets.add(makeTablet(cString, null, null));
    }
    // Put more tablets on one server, but not more than the number of servers
    Entry<TabletServerId,FakeTServer> first = servers.entrySet().iterator().next();
    first.getValue().tablets.add(makeTablet("newTable", "a", null));
    first.getValue().tablets.add(makeTablet("newTable", "b", "a"));
    first.getValue().tablets.add(makeTablet("newTable", "c", "b"));
    first.getValue().tablets.add(makeTablet("newTable", "d", "c"));
    first.getValue().tablets.add(makeTablet("newTable", "e", "d"));
    first.getValue().tablets.add(makeTablet("newTable", "f", "e"));
    first.getValue().tablets.add(makeTablet("newTable", "g", "f"));
    first.getValue().tablets.add(makeTablet("newTable", "h", "g"));
    first.getValue().tablets.add(makeTablet("newTable", "i", null));
    TestSimpleLoadBalancer balancer = new TestSimpleLoadBalancer();
    Set<TabletId> migrations = Collections.emptySet();
    int moved = 0;
    // balance until we can't balance no more!
    while (true) {
      List<TabletMigration> migrationsOut = new ArrayList<>();
      balancer.balance(new BalanceParamsImpl(getAssignments(servers), migrations, migrationsOut));
      if (migrationsOut.isEmpty())
        break;
      for (TabletMigration migration : migrationsOut) {
        if (servers.get(migration.getOldTabletServer()).tablets.remove(migration.getTablet()))
          moved++;
        servers.get(migration.getNewTabletServer()).tablets.add(migration.getTablet());
      }
    }
    assertEquals(8, moved);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\spi\balancer\SimpleLoadBalancerTest.java
  public void testUnevenAssignment2() {
    // make 26 servers
    for (char c : "abcdefghijklmnopqrstuvwxyz".toCharArray()) {
      TabletServerId tsid = new TabletServerIdImpl("127.0.0.1", c, Character.toString(c));
      FakeTServer fakeTServer = new FakeTServer();
      servers.put(tsid, fakeTServer);
    }
    // put 60 tablets on 25 of them
    List<Entry<TabletServerId,FakeTServer>> shortList = new ArrayList<>(servers.entrySet());
    Entry<TabletServerId,FakeTServer> shortServer = shortList.remove(0);
    int c = 0;
    for (int i = 0; i < 60; i++) {
      for (Entry<TabletServerId,FakeTServer> entry : shortList) {
        entry.getValue().tablets.add(makeTablet("t" + c, null, null));
      }
    }
    // put 10 on the that short server:
    for (int i = 0; i < 10; i++) {
      shortServer.getValue().tablets.add(makeTablet("s" + i, null, null));
    }

    TestSimpleLoadBalancer balancer = new TestSimpleLoadBalancer();
    Set<TabletId> migrations = Collections.emptySet();
    int moved = 0;
    // balance until we can't balance no more!
    while (true) {
      List<TabletMigration> migrationsOut = new ArrayList<>();
      balancer.balance(new BalanceParamsImpl(getAssignments(servers), migrations, migrationsOut));
      if (migrationsOut.isEmpty())
        break;
      for (TabletMigration migration : migrationsOut) {
        if (servers.get(migration.getOldTabletServer()).tablets.remove(migration.getTablet()))
          moved++;
        last.remove(migration.getTablet());
        servers.get(migration.getNewTabletServer()).tablets.add(migration.getTablet());
        last.put(migration.getTablet(), migration.getNewTabletServer());
      }
    }
    // average is 58, with 2 at 59: we need 48 more moved to the short server
    assertEquals(48, moved);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\spi\balancer\TableLoadBalancerTest.java
  public void test() {
    BalancerEnvironment environment = createMock(BalancerEnvironment.class);
    ConfigurationCopy cc = new ConfigurationCopy(
        Map.of(Property.TABLE_LOAD_BALANCER.getKey(), TestSimpleLoadBalancer.class.getName()));
    ConfigurationImpl tableConfig = new ConfigurationImpl(cc);

    Map<String,TableId> tableIdMap = TABLE_ID_MAP.entrySet().stream()
        .collect(Collectors.toMap(Map.Entry::getKey, e -> TableId.of(e.getValue())));
    expect(environment.getTableIdMap()).andReturn(tableIdMap).anyTimes();
    expect(environment.isTableOnline(anyObject(TableId.class))).andReturn(true).anyTimes();
    expect(environment.getConfiguration(anyObject(TableId.class))).andReturn(tableConfig)
        .anyTimes();
    expect(environment.tableContext(anyObject(TableId.class))).andReturn(null).anyTimes();

    replay(environment);

    String t1Id = TABLE_ID_MAP.get("t1"), t2Id = TABLE_ID_MAP.get("t2"),
        t3Id = TABLE_ID_MAP.get("t3");
    state = new TreeMap<>();
    TabletServerId svr = mkts("10.0.0.1", 1234, "0x01020304");
    state.put(svr, status(t1Id, 10, t2Id, 10, t3Id, 10));

    Set<TabletId> migrations = Collections.emptySet();
    List<TabletMigration> migrationsOut = new ArrayList<>();
    TableLoadBalancer tls = new TableLoadBalancer();
    tls.init(environment);
    tls.balance(new BalanceParamsImpl(state, migrations, migrationsOut));
    assertEquals(0, migrationsOut.size());

    state.put(mkts("10.0.0.2", 2345, "0x02030405"), status());
    tls = new TableLoadBalancer();
    tls.init(environment);
    tls.balance(new BalanceParamsImpl(state, migrations, migrationsOut));
    int count = 0;
    Map<TableId,Integer> movedByTable = new HashMap<>();
    movedByTable.put(TableId.of(t1Id), 0);
    movedByTable.put(TableId.of(t2Id), 0);
    movedByTable.put(TableId.of(t3Id), 0);
    for (TabletMigration migration : migrationsOut) {
      if (migration.getOldTabletServer().equals(svr)) {
        count++;
      }
      TableId key = migration.getTablet().getTable();
      movedByTable.put(key, movedByTable.get(key) + 1);
    }
    assertEquals(15, count);
    for (Integer moved : movedByTable.values()) {
      assertEquals(5, moved.intValue());
    }
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\spi\compaction\DefaultCompactionPlannerTest.java
  public void testFindFilesToCompact() {

    testFFtC(createCFs("F4", "1M", "F5", "1M", "F6", "1M"),
        createCFs("F1", "100M", "F2", "100M", "F3", "100M", "F4", "1M", "F5", "1M", "F6", "1M"),
        2.0);

    testFFtC(createCFs("F1", "100M", "F2", "100M", "F3", "100M", "F4", "1M"), 2.0);

    testFFtC(
        createCFs("F1", "100M", "F2", "99M", "F3", "33M", "F4", "33M", "F5", "33M", "F6", "33M"),
        2.0);
    testFFtC(
        createCFs("F1", "100M", "F2", "99M", "F3", "33M", "F4", "33M", "F5", "33M", "F6", "33M"),
        3.0);

    testFFtC(createCFs("F3", "10M", "F4", "10M", "F5", "10M", "F6", "10M"),
        createCFs("F1", "50M", "F2", "49M", "F3", "10M", "F4", "10M", "F5", "10M", "F6", "10M"),
        2.0);

    testFFtC(createCFs("F3", "10M", "F4", "10M", "F5", "10M", "F6", "10M"),
        createCFs("F1", "50M", "F2", "49M", "F3", "10M", "F4", "10M", "F5", "10M", "F6", "10M"),
        3.0);

    testFFtC(createCFs("S1", "1M", "S2", "1M", "S3", "1M", "S4", "1M"),
        createCFs("B1", "100M", "B2", "100M", "B3", "100M", "B4", "100M", "M1", "10M", "M2", "10M",
            "M3", "10M", "M4", "10M", "S1", "1M", "S2", "1M", "S3", "1M", "S4", "1M"),
        3.0);
    testFFtC(createCFs("M1", "10M", "M2", "10M", "M3", "10M", "M4", "10M", "C1", "4M"),
        createCFs("B1", "100M", "B2", "100M", "B3", "100M", "B4", "100M", "M1", "10M", "M2", "10M",
            "M3", "10M", "M4", "10M", "C1", "4M"),
        3.0);
    testFFtC(createCFs("B1", "100M", "B2", "100M", "B3", "100M", "B4", "100M", "C2", "44M"),
        createCFs("B1", "100M", "B2", "100M", "B3", "100M", "B4", "100M", "C2", "44M"), 3.0);
    testFFtC(createCFs(), createCFs("C3", "444M"), 3.0);

    testFFtC(createCFs(), createCFs("A1", "17M", "S1", "11M", "S2", "11M", "S3", "11M"), 3.0);
    testFFtC(createCFs("A1", "16M", "S1", "11M", "S2", "11M", "S3", "11M"), 3.0);

    testFFtC(
        createCFs("A1", "1M", "A2", "1M", "A3", "1M", "A4", "1M", "A5", "3M", "A6", "3M", "A7",
            "5M", "A8", "5M"),
        createCFs("A1", "1M", "A2", "1M", "A3", "1M", "A4", "1M", "A5", "3M", "A6", "3M", "A7",
            "5M", "A8", "5M", "A9", "100M", "A10", "100M", "A11", "100M", "A12", "500M"),
        3.0);

    testFFtC(
        createCFs("F1", "100M", "F2", "99M", "F3", "33M", "F4", "33M", "F5", "33M", "F6", "33M"),
        3.0);

    testFFtC(createCFs("F3", "10M", "F4", "9M", "F5", "8M", "F6", "7M"),
        createCFs("F1", "12M", "F2", "11M", "F3", "10M", "F4", "9M", "F5", "8M", "F6", "7M"), 3.0,
        4);

    testFFtC(createCFs("F3", "4M", "F4", "8M", "F5", "9M", "F6", "10M"),
        createCFs("F1", "1M", "F2", "2M", "F3", "4M", "F4", "8M", "F5", "9M", "F6", "10M"), 3.0, 4);

    testFFtC(createCFs(),
        createCFs("F1", "1M", "F2", "2M", "F3", "4M", "F4", "8M", "F5", "16M", "F6", "32M"), 3.0,
        4);

    testFFtC(createCFs(), createCFs("F1", "200M", "F2", "200M", "F3", "200M", "F4", "200M", "F5",
        "200M", "F6", "200M"), 3.0, 4, 100_000_000L);

    testFFtC(createCFs("F2", "2M", "F3", "30M", "F4", "30M", "F5", "30M"),
        createCFs("F1", "1M", "F2", "2M", "F3", "30M", "F4", "30M", "F5", "30M", "F6", "30M"), 3.0,
        4, 100_000_000L);

    testFFtC(createCFs("F1", "1M", "F2", "2M", "F3", "30M", "F4", "30M", "F5", "30M"),
        createCFs("F1", "1M", "F2", "2M", "F3", "30M", "F4", "30M", "F5", "30M", "F6", "30M"), 3.0,
        8, 100_000_000L);

    testFFtC(createCFs("F1", "1M", "F2", "2M", "F3", "30M", "F4", "30M", "F5", "30M", "F6", "30M"),
        createCFs("F1", "1M", "F2", "2M", "F3", "30M", "F4", "30M", "F5", "30M", "F6", "30M"), 3.0,
        8, 200_000_000L);

  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\spi\compaction\DefaultCompactionPlannerTest.java
  public void testRunningCompaction() {
    var planner = createPlanner(true);
    var all = createCFs("F1", "3M", "F2", "3M", "F3", "11M", "F4", "12M", "F5", "13M");
    var candidates = createCFs("F3", "11M", "F4", "12M", "F5", "13M");
    var compacting =
        Set.of(createJob(CompactionKind.SYSTEM, all, createCFs("F1", "3M", "F2", "3M")));
    var params = createPlanningParams(all, candidates, compacting, 2, CompactionKind.SYSTEM);
    var plan = planner.makePlan(params);

    // The result of the running compaction could be included in a future compaction, so the planner
    // should wait.
    assertTrue(plan.getJobs().isEmpty());

    all = createCFs("F1", "30M", "F2", "30M", "F3", "11M", "F4", "12M", "F5", "13M");
    candidates = createCFs("F3", "11M", "F4", "12M", "F5", "13M");
    compacting = Set.of(createJob(CompactionKind.SYSTEM, all, createCFs("F1", "30M", "F2", "30M")));
    params = createPlanningParams(all, candidates, compacting, 2, CompactionKind.SYSTEM);
    plan = planner.makePlan(params);

    // The result of the running compaction would not be included in future compactions, so the
    // planner should compact.
    var job = Iterables.getOnlyElement(plan.getJobs());
    assertEquals(candidates, job.getFiles());
    assertEquals(CompactionExecutorId.of("medium"), job.getExecutor());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\spi\compaction\DefaultCompactionPlannerTest.java
  public void testUserCompaction() {
    var planner = createPlanner(true);
    var all = createCFs("F1", "3M", "F2", "3M", "F3", "11M", "F4", "12M", "F5", "13M");
    var candidates = createCFs("F3", "11M", "F4", "12M", "F5", "13M");
    var compacting =
        Set.of(createJob(CompactionKind.SYSTEM, all, createCFs("F1", "3M", "F2", "3M")));
    var params = createPlanningParams(all, candidates, compacting, 2, CompactionKind.USER);
    var plan = planner.makePlan(params);

    // a running non-user compaction should not prevent a user compaction
    var job = Iterables.getOnlyElement(plan.getJobs());
    assertEquals(candidates, job.getFiles());
    assertEquals(CompactionExecutorId.of("medium"), job.getExecutor());

    // should only run one user compaction at a time
    compacting = Set.of(createJob(CompactionKind.USER, all, createCFs("F1", "3M", "F2", "3M")));
    params = createPlanningParams(all, candidates, compacting, 2, CompactionKind.USER);
    plan = planner.makePlan(params);
    assertTrue(plan.getJobs().isEmpty());

    // 17 files that do not meet the compaction ratio, when max files to compact is 15 should do 3
    // files then 15
    all = createCFs("F1", "1M", "F2", "2M", "F3", "4M", "F4", "8M", "F5", "16M", "F6", "32M", "F7",
        "64M", "F8", "128M", "F9", "256M", "FA", "512M", "FB", "1G", "FC", "2G", "FD", "4G", "FE",
        "8G", "FF", "16G", "FG", "32G", "FH", "64G");
    compacting = Set.of();
    params = createPlanningParams(all, all, compacting, 2, CompactionKind.USER);
    plan = planner.makePlan(params);
    job = Iterables.getOnlyElement(plan.getJobs());
    assertEquals(createCFs("F1", "1M", "F2", "2M", "F3", "4M"), job.getFiles());
    assertEquals(CompactionExecutorId.of("small"), job.getExecutor());

    // should compact all 15
    all = createCFs("FI", "7M", "F4", "8M", "F5", "16M", "F6", "32M", "F7", "64M", "F8", "128M",
        "F9", "256M", "FA", "512M", "FB", "1G", "FC", "2G", "FD", "4G", "FE", "8G", "FF", "16G",
        "FG", "32G", "FH", "64G");
    params = createPlanningParams(all, all, compacting, 2, CompactionKind.USER);
    plan = planner.makePlan(params);
    job = Iterables.getOnlyElement(plan.getJobs());
    assertEquals(all, job.getFiles());
    assertEquals(CompactionExecutorId.of("huge"), job.getExecutor());

    // For user compaction, can compact a subset that meets the compaction ratio if there is also a
    // larger set of files the meets the compaction ratio
    all = createCFs("F1", "3M", "F2", "4M", "F3", "5M", "F4", "6M", "F5", "50M", "F6", "51M", "F7",
        "52M");
    params = createPlanningParams(all, all, compacting, 2, CompactionKind.USER);
    plan = planner.makePlan(params);
    job = Iterables.getOnlyElement(plan.getJobs());
    assertEquals(createCFs("F1", "3M", "F2", "4M", "F3", "5M", "F4", "6M"), job.getFiles());
    assertEquals(CompactionExecutorId.of("small"), job.getExecutor());

    // There is a subset of small files that meets the compaction ratio, but the larger set does not
    // so compact everything to avoid doing more than logarithmic work
    all = createCFs("F1", "3M", "F2", "4M", "F3", "5M", "F4", "6M", "F5", "50M");
    params = createPlanningParams(all, all, compacting, 2, CompactionKind.USER);
    plan = planner.makePlan(params);
    job = Iterables.getOnlyElement(plan.getJobs());
    assertEquals(all, job.getFiles());
    assertEquals(CompactionExecutorId.of("medium"), job.getExecutor());

  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\spi\compaction\DefaultCompactionPlannerTest.java
  public void testMaxSize() {
    var planner = createPlanner(false);
    var all = createCFs("F1", "128M", "F2", "129M", "F3", "130M", "F4", "131M", "F5", "132M");
    var params = createPlanningParams(all, all, Set.of(), 2, CompactionKind.SYSTEM);
    var plan = planner.makePlan(params);

    // should only compact files less than max size
    var job = Iterables.getOnlyElement(plan.getJobs());
    assertEquals(createCFs("F1", "128M", "F2", "129M", "F3", "130M"), job.getFiles());
    assertEquals(CompactionExecutorId.of("large"), job.getExecutor());

    // user compaction can exceed the max size
    params = createPlanningParams(all, all, Set.of(), 2, CompactionKind.USER);
    plan = planner.makePlan(params);
    job = Iterables.getOnlyElement(plan.getJobs());
    assertEquals(all, job.getFiles());
    assertEquals(CompactionExecutorId.of("large"), job.getExecutor());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\spi\scan\HintScanPrioritizerTest.java
  public void testSort() {
    long now = System.currentTimeMillis();

    List<TestScanInfo> scans = new ArrayList<>();

    // Two following have never run, so oldest should go first
    scans.add(new TestScanInfo("a", Type.SINGLE, now - 7));
    scans.add(
        new TestScanInfo("b", Type.SINGLE, now - 3).setExecutionHints("scan_type", "background"));
    scans.add(
        new TestScanInfo("c", Type.SINGLE, now - 4).setExecutionHints("scan_type", "background"));
    scans.add(new TestScanInfo("d", Type.SINGLE, now - 3).setExecutionHints("scan_type", "isbn"));
    scans.add(new TestScanInfo("e", Type.SINGLE, now - 5).setExecutionHints("scan_type", "isbn"));
    scans.add(new TestScanInfo("f", Type.SINGLE, now - 1).setExecutionHints("priority", "35"));
    scans.add(new TestScanInfo("g", Type.SINGLE, now - 2).setExecutionHints("priority", "25"));
    scans.add(new TestScanInfo("h", Type.SINGLE, now - 3).setExecutionHints("priority", "15"));
    scans.add(new TestScanInfo("i", Type.SINGLE, now - 4).setExecutionHints("priority", "5"));

    Collections.shuffle(scans);

    Comparator<ScanInfo> comparator =
        new HintScanPrioritizer().createComparator(new ScanPrioritizer.CreateParameters() {

          @Override
          public Map<String,String> getOptions() {
            return Map.of("priority.isbn", "10", "priority.background", "30", "default_priority",
                "20");
          }

          @Override
          public ServiceEnvironment getServiceEnv() {
            throw new UnsupportedOperationException();
          }
        });

    scans.sort(comparator);

    assertEquals("i", scans.get(0).testId);
    assertEquals("e", scans.get(1).testId);
    assertEquals("d", scans.get(2).testId);
    assertEquals("h", scans.get(3).testId);
    assertEquals("a", scans.get(4).testId);
    assertEquals("g", scans.get(5).testId);
    assertEquals("c", scans.get(6).testId);
    assertEquals("b", scans.get(7).testId);
    assertEquals("f", scans.get(8).testId);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\spi\scan\IdleRatioScanPrioritizerTest.java
  public void testSort() {
    long now = System.currentTimeMillis();

    List<TestScanInfo> scans = new ArrayList<>();

    // Two following have never run, so oldest should go first
    scans.add(new TestScanInfo("a", Type.SINGLE, now - 3));
    scans.add(new TestScanInfo("b", Type.SINGLE, now - 8));
    // Two following have different idle ratio and same last run times
    scans.add(new TestScanInfo("c", Type.SINGLE, now - 16, 2, 10));
    scans.add(new TestScanInfo("d", Type.SINGLE, now - 16, 5, 10));
    // Two following have same idle ratio and different last run times
    scans.add(new TestScanInfo("e", Type.SINGLE, now - 12, 5, 9));
    scans.add(new TestScanInfo("f", Type.SINGLE, now - 12, 3, 7));

    Collections.shuffle(scans);

    Comparator<ScanInfo> comparator =
        new IdleRatioScanPrioritizer().createComparator(new ScanPrioritizer.CreateParameters() {

          @Override
          public Map<String,String> getOptions() {
            return Collections.emptyMap();
          }

          @Override
          public ServiceEnvironment getServiceEnv() {
            throw new UnsupportedOperationException();
          }
        });

    scans.sort(comparator);

    assertEquals("b", scans.get(0).testId);
    assertEquals("a", scans.get(1).testId);
    assertEquals("f", scans.get(2).testId);
    assertEquals("e", scans.get(3).testId);
    assertEquals("d", scans.get(4).testId);
    assertEquals("c", scans.get(5).testId);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\spi\scan\SimpleScanDispatcherTest.java
  public void testProps() {
    assertTrue(Property.TSERV_SCAN_EXECUTORS_DEFAULT_THREADS.getKey()
        .endsWith(SimpleScanDispatcher.DEFAULT_SCAN_EXECUTOR_NAME + ".threads"));
    assertTrue(Property.TSERV_SCAN_EXECUTORS_DEFAULT_PRIORITIZER.getKey()
        .endsWith(SimpleScanDispatcher.DEFAULT_SCAN_EXECUTOR_NAME + ".prioritizer"));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\spi\scan\SimpleScanDispatcherTest.java
  public void testBasic() {
    String dname = SimpleScanDispatcher.DEFAULT_SCAN_EXECUTOR_NAME;

    runTest(Collections.emptyMap(), dname, dname);
    runTest(Map.of("executor", "E1"), "E1", "E1");
    runTest(Map.of("single_executor", "E2"), "E2", dname);
    runTest(Map.of("multi_executor", "E3"), dname, "E3");
    runTest(Map.of("executor", "E1", "single_executor", "E2"), "E2", "E1");
    runTest(Map.of("executor", "E1", "multi_executor", "E3"), "E1", "E3");
    runTest(Map.of("single_executor", "E2", "multi_executor", "E3"), "E2", "E3");
    runTest(Map.of("executor", "E1", "single_executor", "E2", "multi_executor", "E3"), "E2", "E3");
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\spi\scan\SimpleScanDispatcherTest.java
  public void testHints() {
    runTest(Map.of("executor", "E1"), Map.of("scan_type", "quick"), "E1", "E1", TABLE, TABLE);
    runTest(Map.of("executor", "E1", "executor.quick", "E2"), Map.of("scan_type", "quick"), "E2",
        "E2", TABLE, TABLE);
    runTest(Map.of("executor", "E1", "executor.quick", "E2", "executor.slow", "E3"),
        Map.of("scan_type", "slow"), "E3", "E3", TABLE, TABLE);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\spi\scan\SimpleScanDispatcherTest.java
  public void testCache() {
    String dname = SimpleScanDispatcher.DEFAULT_SCAN_EXECUTOR_NAME;

    runTest(
        Map.of("executor", "E1", "cacheUsage.slow.index", "opportunistic", "cacheUsage.slow.data",
            "disabled", "cacheUsage.fast", "enabled", "executor.slow", "E2"),
        Map.of("scan_type", "slow"), "E2", "E2", OPPORTUNISTIC, DISABLED);
    runTest(
        Map.of("single_executor", "E1", "cacheUsage.slow.index", "opportunistic",
            "cacheUsage.slow.data", "disabled", "cacheUsage.fast", "enabled"),
        Map.of("scan_type", "fast"), "E1", dname, ENABLED, ENABLED);
    runTest(
        Map.of("executor", "E1", "cacheUsage.slow.index", "opportunistic", "cacheUsage.slow.data",
            "disabled", "cacheUsage.fast", "enabled"),
        Map.of("scan_type", "notconfigured"), "E1", "E1", TABLE, TABLE);
    runTest(Map.of("executor", "E1", "cacheUsage.slow.index", "opportunistic",
        "cacheUsage.slow.data", "disabled", "cacheUsage.fast", "enabled"), Map.of(), "E1", "E1",
        TABLE, TABLE);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\summary\SummaryCollectionTest.java
  public void testDeleted() {
    SummarizerConfiguration conf = SummarizerConfiguration.builder(FamilySummarizer.class).build();

    HashMap<String,Long> stats = new HashMap<>();
    stats.put("c:foo", 9L);
    FileSummary fs1 = new FileSummary(conf, stats, false);
    SummaryCollection sc1 = new SummaryCollection(Collections.singleton(fs1));

    stats = new HashMap<>();
    stats.put("c:foo", 5L);
    stats.put("c:bar", 3L);
    FileSummary fs2 = new FileSummary(conf, stats, true);
    SummaryCollection sc2 = new SummaryCollection(Collections.singleton(fs2));

    SummaryCollection sc3 = new SummaryCollection(Collections.emptyList());

    SummaryCollection sc4 = new SummaryCollection(Collections.emptyList(), true);

    SummarizerFactory factory = new SummarizerFactory();
    SummaryCollection mergeSc = new SummaryCollection();
    for (SummaryCollection sc : Arrays.asList(sc1, sc2, sc3, sc4, sc4)) {
      mergeSc.merge(sc, factory);
    }

    for (SummaryCollection sc : Arrays.asList(mergeSc, new SummaryCollection(mergeSc.toThrift()))) {
      List<Summary> summaries = sc.getSummaries();
      assertEquals(1, summaries.size());
      Summary summary = summaries.get(0);
      FileStatistics filestats = summary.getFileStatistics();
      assertEquals(5, filestats.getTotal());
      assertEquals(1, filestats.getExtra());
      assertEquals(0, filestats.getLarge());
      assertEquals(1, filestats.getMissing());
      assertEquals(2, filestats.getDeleted());
      assertEquals(4, filestats.getInaccurate());
    }
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\tabletserver\log\LogEntryTest.java
  public void testPrevRowDoesntMatter() throws IOException {
    long ts = 12345678L;
    String filename = "default/foo";

    // with no end row, different prev rows
    LogEntry entry1 =
        new LogEntry(new KeyExtent(TableId.of("1"), null, new Text("A")), ts, filename);
    LogEntry entry2 =
        new LogEntry(new KeyExtent(TableId.of("1"), null, new Text("B")), ts, filename);
    assertEquals("1< default/foo", entry1.toString());
    compareLogEntries(entry1, entry2);

    // with same end row, different prev rows
    LogEntry entry3 =
        new LogEntry(new KeyExtent(TableId.of("2"), new Text("same"), new Text("A")), ts, filename);
    LogEntry entry4 =
        new LogEntry(new KeyExtent(TableId.of("2"), new Text("same"), new Text("B")), ts, filename);
    assertEquals("2;same default/foo", entry3.toString());
    compareLogEntries(entry3, entry4);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\tabletserver\log\LogEntryTest.java
  public void test() throws Exception {
    KeyExtent extent = new KeyExtent(TableId.of("1"), null, null);
    long ts = 12345678L;
    String filename = "default/foo";
    LogEntry entry = new LogEntry(extent, ts, filename);
    assertEquals(extent.toMetaRow(), entry.getRow());
    assertEquals(filename, entry.filename);
    assertEquals(ts, entry.timestamp);
    assertEquals("1< default/foo", entry.toString());
    assertEquals(new Text("log"), entry.getColumnFamily());
    assertEquals(new Text("-/default/foo"), entry.getColumnQualifier());
    @SuppressWarnings("removal")
    LogEntry copy = LogEntry.fromBytes(entry.toBytes());
    assertEquals(entry.toString(), copy.toString());
    Key key = new Key(new Text("1<"), new Text("log"), new Text("localhost:1234/default/foo"));
    key.setTimestamp(ts);
    var mapEntry = new Entry<Key,Value>() {
      @Override
      public Key getKey() {
        return key;
      }

      @Override
      public Value getValue() {
        return entry.getValue();
      }

      @Override
      public Value setValue(Value value) {
        throw new UnsupportedOperationException();
      }
    };
    LogEntry copy2 = LogEntry.fromMetaWalEntry(mapEntry);
    assertEquals(entry.toString(), copy2.toString());
    assertEquals(entry.timestamp, copy2.timestamp);
    assertEquals("foo", entry.getUniqueID());
    assertEquals("-/default/foo", entry.getColumnQualifier().toString());
    assertEquals(new Value("default/foo"), entry.getValue());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\util\AddressUtilTest.java
  public void testGetNegativeTtl() {
    log.info("Checking that we can get the ttl on dns failures.");
    int expectedTtl = 20;
    boolean expectException = false;
    /* TODO ACCUMULO-2242 replace all of this with Powermock on the Security class */
    try {
      Security.setProperty("networkaddress.cache.negative.ttl", Integer.toString(expectedTtl));
    } catch (SecurityException exception) {
      log.warn(
          "We can't set the DNS cache period, so we're only testing fetching the system value.");
      expectedTtl = 10;
    }
    try {
      expectedTtl = Integer.parseInt(Security.getProperty("networkaddress.cache.negative.ttl"));
    } catch (SecurityException exception) {
      log.debug("Security manager won't let us fetch the property, testing default path.");
      expectedTtl = 10;
    } catch (NumberFormatException exception) {
      log.debug("property isn't a number, testing default path.");
      expectedTtl = 10;
    }
    if (-1 == expectedTtl) {
      log.debug("property is set to 'forever', testing exception path");
      expectException = true;
    }
    if (0 > expectedTtl) {
      log.debug("property is a negative value other than 'forever', testing default path.");
      expectedTtl = 10;
    }
    try {
      if (expectException) {
        log.info("AddressUtil is (hopefully) going to spit out an error about DNS lookups. "
            + "you can ignore it.");
      }
      int result = AddressUtil.getAddressCacheNegativeTtl(null);
      if (expectException) {
        fail("The JVM Security settings cache DNS failures forever. "
            + "In this case we expect an exception but didn't get one.");
      }
      assertEquals("Didn't get the ttl we expected", expectedTtl, result);
    } catch (IllegalArgumentException exception) {
      if (!expectException) {
        log.error("Got an exception when we weren't expecting.", exception);
        fail("We only expect to throw an IllegalArgumentException when the JVM "
            + "caches DNS failures forever.");
      }
    }
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\util\AddressUtilTest.java
  public void testGetNegativeTtlThrowsOnForever() {
    log.info("When DNS is cached forever, we should throw.");
    /* TODO ACCUMULO-2242 replace all of this with Powermock on the Security class */
    try {
      Security.setProperty("networkaddress.cache.negative.ttl", "-1");
    } catch (SecurityException exception) {
      log.error("We can't set the DNS cache period, so this test is effectively ignored.");
      return;
    }
    try {
      log.info("AddressUtil is (hopefully) going to spit out an error about DNS lookups. "
          + "you can ignore it.");
      AddressUtil.getAddressCacheNegativeTtl(null);
      fail("The JVM Security settings cache DNS failures forever, this should cause an exception.");
    } catch (IllegalArgumentException exception) {
      // expected
    }
  }
}
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\util\ByteBufferUtilTest.java
  public void testNonZeroArrayOffset() {
    byte[] data = "0123456789".getBytes(UTF_8);

    ByteBuffer bb1 = ByteBuffer.wrap(data, 3, 4);

    // create a ByteBuffer with a non-zero array offset
    ByteBuffer bb2 = bb1.slice();

    // The purpose of this test is to ensure ByteBufferUtil code works when arrayOffset is non-zero.
    // The following asserts are not to test ByteBuffer, but
    // ensure the behavior of slice() is as expected.

    assertEquals(3, bb2.arrayOffset());
    assertEquals(0, bb2.position());
    assertEquals(4, bb2.limit());

    // start test with non zero arrayOffset
    assertEqualsBB("3456", bb2);

    // read one byte from byte buffer... this should cause position to be non-zero in addition to
    // array offset
    bb2.get();
    assertEqualsBB("456", bb2);

  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\util\ByteBufferUtilTest.java
  public void testZeroArrayOffsetAndNonZeroPosition() {
    byte[] data = "0123456789".getBytes(UTF_8);
    ByteBuffer bb1 = ByteBuffer.wrap(data, 3, 4);

    assertEqualsBB("3456", bb1);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\util\ByteBufferUtilTest.java
  public void testZeroArrayOffsetAndPosition() {
    byte[] data = "0123456789".getBytes(UTF_8);
    ByteBuffer bb1 = ByteBuffer.wrap(data, 0, 4);
    assertEqualsBB("0123", bb1);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\util\ByteBufferUtilTest.java
  public void testDirectByteBuffer() {
    // allocate direct so it does not have a backing array
    ByteBuffer bb = ByteBuffer.allocateDirect(10);
    bb.put("0123456789".getBytes(UTF_8));
    bb.rewind();

    assertEqualsBB("0123456789", bb);

    // advance byte buffer position
    bb.get();
    assertEqualsBB("123456789", bb);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\util\CompletableFutureUtilTest.java
  public void testMerge() throws Exception {
    ExecutorService es = Executors.newFixedThreadPool(3);
    try {
      for (int n : new int[] {1, 2, 3, 997, 1000}) {
        List<CompletableFuture<Integer>> futures = new ArrayList<>();
        for (int i = 1; i <= n; i++) {
          final int num = i;
          futures.add(CompletableFuture.supplyAsync(() -> num, es));
        }

        CompletableFuture<Integer> mergedFutures =
            CompletableFutureUtil.merge(futures, Integer::sum, () -> 0);
        assertEquals(n * (n + 1) / 2, mergedFutures.get().intValue());
      }

      // test zero
      CompletableFuture<Integer> mergedFutures =
          CompletableFutureUtil.merge(Collections.emptyList(), Integer::sum, () -> 0);
      assertEquals(0, mergedFutures.get().intValue());
    } finally {
      es.shutdown();
    }
  }
}
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\util\FastFormatTest.java
  public void testArrayOffset() {

    byte[] str = new byte[8];

    Arrays.fill(str, (byte) '-');
    int len = FastFormat.toZeroPaddedString(str, 4, 64L, 1, 16, new byte[] {});
    assertEquals(2, len);
    assertEquals("----40--", new String(str, UTF_8));

    Arrays.fill(str, (byte) '-');
    len = FastFormat.toZeroPaddedString(str, 4, 64L, 2, 16, new byte[] {});
    assertEquals(2, len);
    assertEquals("----40--", new String(str, UTF_8));

    Arrays.fill(str, (byte) '-');
    len = FastFormat.toZeroPaddedString(str, 4, 64L, 3, 16, new byte[] {});
    assertEquals(3, len);
    assertEquals("----040-", new String(str, UTF_8));

    Arrays.fill(str, (byte) '-');
    len = FastFormat.toZeroPaddedString(str, 4, 64L, 1, 16, new byte[] {'P'});
    assertEquals(3, len);
    assertEquals("----P40-", new String(str, UTF_8));

    Arrays.fill(str, (byte) '-');
    len = FastFormat.toZeroPaddedString(str, 4, 64L, 2, 16, new byte[] {'P'});
    assertEquals(3, len);
    assertEquals("----P40-", new String(str, UTF_8));

    Arrays.fill(str, (byte) '-');
    len = FastFormat.toZeroPaddedString(str, 4, 64L, 3, 16, new byte[] {'P'});
    assertEquals(4, len);
    assertEquals("----P040", new String(str, UTF_8));

    Arrays.fill(str, (byte) '-');
    len = FastFormat.toZeroPaddedString(str, 2, 64L, 4, 16, new byte[] {'P'});
    assertEquals(5, len);
    assertEquals("--P0040-", new String(str, UTF_8));
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\util\FastFormatTest.java
  public void testFormat() {
    assertEquals("100",
        new String(FastFormat.toZeroPaddedString(1296, 1, 36, new byte[] {}), UTF_8));
    assertEquals("100",
        new String(FastFormat.toZeroPaddedString(1296, 2, 36, new byte[] {}), UTF_8));
    assertEquals("100",
        new String(FastFormat.toZeroPaddedString(1296, 3, 36, new byte[] {}), UTF_8));
    assertEquals("0100",
        new String(FastFormat.toZeroPaddedString(1296, 4, 36, new byte[] {}), UTF_8));
    assertEquals("00100",
        new String(FastFormat.toZeroPaddedString(1296, 5, 36, new byte[] {}), UTF_8));

    assertEquals("PA100",
        new String(FastFormat.toZeroPaddedString(1296, 1, 36, new byte[] {'P', 'A'}), UTF_8));
    assertEquals("PA100",
        new String(FastFormat.toZeroPaddedString(1296, 2, 36, new byte[] {'P', 'A'}), UTF_8));
    assertEquals("PA100",
        new String(FastFormat.toZeroPaddedString(1296, 3, 36, new byte[] {'P', 'A'}), UTF_8));
    assertEquals("PA0100",
        new String(FastFormat.toZeroPaddedString(1296, 4, 36, new byte[] {'P', 'A'}), UTF_8));
    assertEquals("PA00100",
        new String(FastFormat.toZeroPaddedString(1296, 5, 36, new byte[] {'P', 'A'}), UTF_8));
    assertEquals("PA000100",
        new String(FastFormat.toZeroPaddedString(1296, 6, 36, new byte[] {'P', 'A'}), UTF_8));
    assertEquals("PA0000100",
        new String(FastFormat.toZeroPaddedString(1296, 7, 36, new byte[] {'P', 'A'}), UTF_8));
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\util\FastFormatTest.java
  public void testNegative1() {
    FastFormat.toZeroPaddedString(-5, 1, 36, new byte[] {});
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\util\FastFormatTest.java
  public void testNegative2() {
    byte[] str = new byte[8];
    FastFormat.toZeroPaddedString(str, 0, -5, 1, 36, new byte[] {});
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\util\FastFormatTest.java
  public void testArrayOutOfBounds() {
    byte[] str = new byte[8];
    FastFormat.toZeroPaddedString(str, 4, 64L, 4, 16, new byte[] {'P'});
  }
}
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\util\LocalityGroupUtilTest.java
  public void testColumnFamilySet() {

    ConfigurationCopy conf = new ConfigurationCopy();
    conf.set("table.group.lg1", "cf1,cf2");
    conf.set("table.groups.enabled", "lg1");
    try {
      Map<String,Set<ByteSequence>> groups = LocalityGroupUtil.getLocalityGroups(conf);
      assertEquals(1, groups.size());
      assertNotNull(groups.get("lg1"));
      assertEquals(2, groups.get("lg1").size());
      assertTrue(groups.get("lg1").contains(new ArrayByteSequence("cf1")));
    } catch (LocalityGroupConfigurationError err) {
      fail();
    }
    try {
      conf.set("table.group.lg2", "cf1");
      conf.set("table.groups.enabled", "lg1,lg2");
      LocalityGroupUtil.getLocalityGroups(conf);
      fail();
    } catch (LocalityGroupConfigurationError err) {
      // expected, ignore
    }
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\util\LocalityGroupUtilTest.java
  public void testEncoding() throws Exception {
    byte[] test1 = new byte[256];
    byte[] test2 = new byte[256];
    for (int i = 0; i < 256; i++) {
      test1[i] = (byte) (0xff & i);
      test2[i] = (byte) (0xff & (255 - i));
    }

    ArrayByteSequence bs1 = new ArrayByteSequence(test1);

    String ecf = LocalityGroupUtil.encodeColumnFamily(bs1);

    // System.out.println(ecf);

    ByteSequence bs2 = LocalityGroupUtil.decodeColumnFamily(ecf);

    assertEquals(bs1, bs2);
    assertEquals(ecf, LocalityGroupUtil.encodeColumnFamily(bs2));

    // test encoding multiple column fams containing binary data
    HashSet<Text> in = new HashSet<>();
    HashSet<ByteSequence> in2 = new HashSet<>();
    in.add(new Text(test1));
    in2.add(new ArrayByteSequence(test1));
    in.add(new Text(test2));
    in2.add(new ArrayByteSequence(test2));
    Set<ByteSequence> out =
        LocalityGroupUtil.decodeColumnFamilies(LocalityGroupUtil.encodeColumnFamilies(in));

    assertEquals(in2, out);
  }

}
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\util\MergeTest.java
  public void testMergomatic() throws Exception {
    // Merge everything to the last tablet
    int i;
    MergeTester test = new MergeTester(10, 20, 30);
    test.mergomatic(null, "table", null, null, 1000, false);
    assertEquals(1, test.merges.size());
    assertArrayEquals(new int[] {10, 20, 30}, sizes(test.merges.get(i = 0)));

    // Merge ranges around tablets that are big enough
    test = new MergeTester(1, 2, 100, 1000, 17, 1000, 4, 5, 6, 900);
    test.mergomatic(null, "table", null, null, 1000, false);
    assertEquals(2, test.merges.size());
    assertArrayEquals(new int[] {1, 2, 100}, sizes(test.merges.get(i = 0)));
    assertArrayEquals(new int[] {4, 5, 6, 900}, sizes(test.merges.get(++i)));

    // Test the force option
    test = new MergeTester(1, 2, 100, 1000, 17, 1000, 4, 5, 6, 900);
    test.mergomatic(null, "table", null, null, 1000, true);
    assertEquals(3, test.merges.size());
    assertArrayEquals(new int[] {1, 2, 100}, sizes(test.merges.get(i = 0)));
    assertArrayEquals(new int[] {17, 1000}, sizes(test.merges.get(++i)));
    assertArrayEquals(new int[] {4, 5, 6, 900}, sizes(test.merges.get(++i)));

    // Limit the low-end of the merges
    test = new MergeTester(1, 2, 1000, 17, 1000, 4, 5, 6, 900);
    test.mergomatic(null, "table", new Text("00004"), null, 1000, false);
    assertEquals(1, test.merges.size());
    assertArrayEquals(new int[] {4, 5, 6, 900}, sizes(test.merges.get(i = 0)));

    // Limit the upper end of the merges
    test = new MergeTester(1, 2, 1000, 17, 1000, 4, 5, 6, 900);
    test.mergomatic(null, "table", null, new Text("00004"), 1000, false);
    assertEquals(1, test.merges.size());
    assertArrayEquals(new int[] {1, 2}, sizes(test.merges.get(i = 0)));

    // Limit both ends
    test = new MergeTester(1, 2, 1000, 17, 1000, 4, 5, 6, 900);
    test.mergomatic(null, "table", new Text("00002"), new Text("00004"), 1000, true);
    assertEquals(1, test.merges.size());
    assertArrayEquals(new int[] {17, 1000}, sizes(test.merges.get(i = 0)));

    // Clump up tablets into larger values
    test = new MergeTester(100, 250, 500, 600, 100, 200, 500, 200);
    test.mergomatic(null, "table", null, null, 1000, false);
    assertEquals(3, test.merges.size());
    assertArrayEquals(new int[] {100, 250, 500}, sizes(test.merges.get(i = 0)));
    assertArrayEquals(new int[] {600, 100, 200}, sizes(test.merges.get(++i)));
    assertArrayEquals(new int[] {500, 200}, sizes(test.merges.get(++i)));
  }

}
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\util\MonitorUtilTest.java
  public void testNodeFound() throws Exception {
    expect(zr.getData("/root" + Constants.ZMONITOR_HTTP_ADDR))
        .andReturn("http://example.org/".getBytes(UTF_8));
    replay(zr, context);
    assertEquals("http://example.org/", MonitorUtil.getLocation(zr, context));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\util\MonitorUtilTest.java
  public void testNoNodeFound() throws Exception {
    expect(zr.getData("/root" + Constants.ZMONITOR_HTTP_ADDR)).andThrow(new NoNodeException());
    replay(zr, context);
    assertNull(MonitorUtil.getLocation(zr, context));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\util\NumUtilTest.java
  public void testBigNumberForSize() {
    assertEquals("1,000", bigNumberForSize(1000));
    assertEquals("1.00K", bigNumberForSize(1024));
    assertEquals("1.50K", bigNumberForSize(1024 + (1024 / 2)));
    assertEquals("1,024.00K", bigNumberForSize(1024 * 1024 - 1));
    assertEquals("1.00M", bigNumberForSize(1024 * 1024));
    assertEquals("1.50M", bigNumberForSize(1024 * 1024 + (1024 * 1024 / 2)));
    assertEquals("1,024.00M", bigNumberForSize(1073741823));
    assertEquals("1.00G", bigNumberForSize(1073741824));
    assertEquals("1,024.00G", bigNumberForSize(1099511627775L));
    assertEquals("1.00T", bigNumberForSize(1099511627776L));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\util\NumUtilTest.java
  public void testBigNumberForQuantity() {
    assertEquals("999", bigNumberForQuantity(999));
    assertEquals("1.00K", bigNumberForQuantity(1000));
    assertEquals("1.02K", bigNumberForQuantity(1024));
    assertEquals("5.00K", bigNumberForQuantity(5000));
    assertEquals("50.00K", bigNumberForQuantity(50000));
    assertEquals("5.00M", bigNumberForQuantity(5000000));
    assertEquals("5.00B", bigNumberForQuantity(5000000000L));
    assertEquals("5.00T", bigNumberForQuantity(5000000000000L));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\util\OpTimerTest.java
  public void verifyReset() {

    OpTimer timer = new OpTimer().start();

    try {
      Thread.sleep(50);
    } catch (InterruptedException ex) {
      log.info("sleep sleep interrupted");
      Thread.currentThread().interrupt();
    }

    timer.stop();

    long tValue = timer.now();

    log.debug("Time value before reset {}",
        String.format("%.3f ms", timer.scale(TimeUnit.MILLISECONDS)));

    timer.reset().start();

    try {
      Thread.sleep(1);
    } catch (InterruptedException ex) {
      log.info("sleep sleep interrupted");
      Thread.currentThread().interrupt();
    }

    timer.stop();

    assertTrue(timer.now() > 0);

    assertTrue(tValue > timer.now());

    timer.reset();

    log.debug("Time value after reset {}",
        String.format("%.3f ms", timer.scale(TimeUnit.MILLISECONDS)));

    assertEquals(0, timer.now());

  }

  /**
   * Verify that IllegalStateException is thrown when calling stop when timer has not been started.
   */
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\util\OpTimerTest.java
  public void verifyExceptionCallingStopWhenNotStarted() {

    OpTimer timer = new OpTimer();

    assertFalse(timer.isRunning());

    // should throw exception - not running
    timer.stop();
  }

  /**
   * Verify that IllegalStateException is thrown when calling start on running timer.
   */
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\util\OpTimerTest.java
  public void verifyExceptionCallingStartWhenRunning() {

    OpTimer timer = new OpTimer().start();

    try {
      Thread.sleep(50);
    } catch (InterruptedException ex) {
      log.info("sleep sleep interrupted");
      Thread.currentThread().interrupt();
    }

    assertTrue(timer.isRunning());

    // should throw exception - already running
    timer.start();
  }

  /**
   * Verify that IllegalStateException is thrown when calling stop when not running.
   */
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\util\OpTimerTest.java
  public void verifyExceptionCallingStopWhenNotRunning() {

    OpTimer timer = new OpTimer().start();

    try {
      Thread.sleep(50);
    } catch (InterruptedException ex) {
      log.info("sleep sleep interrupted");
      Thread.currentThread().interrupt();
    }

    assertTrue(timer.isRunning());

    timer.stop();

    assertFalse(timer.isRunning());

    // should throw exception
    timer.stop();
  }

  /**
   * Validate that start / stop accumulates time.
   */
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\util\OpTimerTest.java
  public void verifyElapsed() {

    OpTimer timer = new OpTimer().start();

    try {
      Thread.sleep(50);
    } catch (InterruptedException ex) {
      log.info("sleep sleep interrupted");
      Thread.currentThread().interrupt();
    }

    timer.stop();

    long tValue = timer.now();

    log.debug("Time value after first stop {}",
        String.format("%.3f ms", timer.scale(TimeUnit.MILLISECONDS)));

    timer.start();

    try {
      Thread.sleep(10);
    } catch (InterruptedException ex) {
      log.info("sleep sleep interrupted");
      Thread.currentThread().interrupt();
    }

    timer.stop();

    log.debug("Time value after second stop {}",
        String.format("%.3f ms", timer.scale(TimeUnit.MILLISECONDS)));

    assertTrue(tValue < timer.now());

  }

  /**
   * Validate that scale returns correct values.
   */
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\util\OpTimerTest.java
  public void scale() {
    OpTimer timer = new OpTimer().start();

    try {
      Thread.sleep(50);
    } catch (InterruptedException ex) {
      log.info("sleep sleep interrupted");
      Thread.currentThread().interrupt();
    }

    timer.stop();

    long tValue = timer.now();

    assertEquals(tValue / 1000000.0, timer.scale(TimeUnit.MILLISECONDS), 0.00000001);

    assertEquals(tValue / 1000000000.0, timer.scale(TimeUnit.SECONDS), 0.00000001);

  }
}
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\util\PairTest.java
  public void testHashMethod() {
    Pair<Integer,String> pair1 = new Pair<>(25, "twenty-five");
    Pair<Integer,String> pair2 = new Pair<>(25, "twenty-five");
    Pair<Integer,String> pair3 = new Pair<>(null, null);
    Pair<Integer,String> pair4 = new Pair<>(25, "twentyfive");
    Pair<Integer,String> pair5 = new Pair<>(225, "twenty-five");
    assertNotSame(pair1, pair2);
    assertEquals(pair1.hashCode(), pair2.hashCode());
    assertNotSame(pair2, pair3);
    assertNotEquals(pair1.hashCode(), pair4.hashCode());
    assertNotEquals(pair1.hashCode(), pair5.hashCode());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\util\PairTest.java
  public void testEqualsObject() {
    Pair<Integer,String> pair1 = new Pair<>(25, "twenty-five");
    Pair<Integer,String> pair2 = new Pair<>(25, "twenty-five");
    Pair<Integer,String> pair3 = new Pair<>(25, "twentyfive");
    Pair<Integer,String> null1 = null;

    assertEquals(pair1, pair1);
    assertEquals(pair2, pair1);
    assertNotEquals(pair1, pair3);

    // verify direct calls
    assertEquals(pair1, pair2);
    assertEquals(pair2, pair1);
    assertNotEquals(pair1, pair3);

    // check null
    assertEquals(null1, null1);
    assertNull(null1);
    assertNotEquals(pair1, null1);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\util\PairTest.java
  public void testGetFirst() {
    Pair<Integer,String> pair = new Pair<>(25, "twenty-five");
    assertEquals((Integer) 25, pair.getFirst());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\util\PairTest.java
  public void testGetSecond() {
    Pair<Integer,String> pair = new Pair<>(25, "twenty-five");
    assertEquals("twenty-five", pair.getSecond());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\util\PairTest.java
  public void testToString() {
    Pair<Integer,String> pair = new Pair<>(25, "twenty-five");
    assertEquals("(25,twenty-five)", pair.toString());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\util\PairTest.java
  public void testToStringStringStringString() {
    Pair<Integer,String> pair = new Pair<>(25, "twenty-five");
    assertEquals("---25~~~twenty-five+++", pair.toString("---", "~~~", "+++"));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\util\PairTest.java
  public void testToMapEntry() {
    Pair<Integer,String> pair = new Pair<>(10, "IO");

    Entry<Integer,String> entry = pair.toMapEntry();
    assertEquals(pair.getFirst(), entry.getKey());
    assertEquals(pair.getSecond(), entry.getValue());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\util\PairTest.java
  public void testSwap() {
    Pair<Integer,String> pair = new Pair<>(25, "twenty-five");
    assertEquals(pair, pair.swap().swap());
    Pair<String,Integer> pair2 = new Pair<>("twenty-five", 25);
    assertEquals(pair, pair2.swap());
    assertEquals(pair2, pair.swap());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\util\PairTest.java
  public void testFromEntry() {
    Entry<Integer,String> entry = new SimpleImmutableEntry<>(10, "IO");

    Pair<Integer,String> pair0 = Pair.fromEntry(entry);
    assertEquals(entry.getKey(), pair0.getFirst());
    assertEquals(entry.getValue(), pair0.getSecond());

    Pair<Object,Object> pair = Pair.fromEntry(entry);
    assertEquals(entry.getKey(), pair.getFirst());
    assertEquals(entry.getValue(), pair.getSecond());

    Pair<Number,CharSequence> pair2 = Pair.fromEntry(entry);
    assertEquals(entry.getKey(), pair2.getFirst());
    assertEquals(entry.getValue(), pair2.getSecond());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\util\PartitionerTest.java
  public void test1() {

    PreAllocatedArray<Map<ByteSequence,MutableLong>> groups = new PreAllocatedArray<>(2);

    groups.set(0, new HashMap<>());
    groups.get(0).put(new ArrayByteSequence("cf1"), new MutableLong(1));
    groups.get(0).put(new ArrayByteSequence("cf2"), new MutableLong(1));

    groups.set(1, new HashMap<>());
    groups.get(1).put(new ArrayByteSequence("cf3"), new MutableLong(1));

    Partitioner p1 = new Partitioner(groups);

    Mutation m1 = new Mutation("r1");
    m1.put("cf1", "cq1", "v1");

    Mutation m2 = new Mutation("r2");
    m2.put("cf1", "cq1", "v2");
    m2.put("cf2", "cq2", "v3");

    Mutation m3 = new Mutation("r3");
    m3.put("cf1", "cq1", "v4");
    m3.put("cf3", "cq2", "v5");

    Mutation m4 = new Mutation("r4");
    m4.put("cf1", "cq1", "v6");
    m4.put("cf3", "cq2", "v7");
    m4.put("cf5", "cq3", "v8");

    Mutation m5 = new Mutation("r5");
    m5.put("cf5", "cq3", "v9");

    List<Mutation> mutations = Arrays.asList(m1, m2, m3, m4, m5);
    PreAllocatedArray<List<Mutation>> partitioned = new PreAllocatedArray<>(3);

    for (int i = 0; i < partitioned.length; i++) {
      partitioned.set(i, new ArrayList<>());
    }

    p1.partition(mutations, partitioned);

    m1 = new Mutation("r1");
    m1.put("cf1", "cq1", "v1");

    m2 = new Mutation("r2");
    m2.put("cf1", "cq1", "v2");
    m2.put("cf2", "cq2", "v3");

    m3 = new Mutation("r3");
    m3.put("cf1", "cq1", "v4");

    m4 = new Mutation("r4");
    m4.put("cf1", "cq1", "v6");

    assertEquals(toKeySet(m1, m2, m3, m4), toKeySet(partitioned.get(0)));

    m3 = new Mutation("r3");
    m3.put("cf3", "cq2", "v5");

    m4 = new Mutation("r4");
    m4.put("cf3", "cq2", "v7");

    assertEquals(toKeySet(m3, m4), toKeySet(partitioned.get(1)));

    m4 = new Mutation("r4");
    m4.put("cf5", "cq3", "v8");

    assertEquals(toKeySet(m4, m5), toKeySet(partitioned.get(2)));

  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\util\PreAllocatedArrayTest.java
  public void testPreAllocatedArray() {
    PreAllocatedArray<String> strings = new PreAllocatedArray<>(5);
    assertEquals(5, strings.length);

    strings = new PreAllocatedArray<>(3);
    assertEquals(3, strings.length);

    strings = new PreAllocatedArray<>(0);
    assertEquals(0, strings.length);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\util\PreAllocatedArrayTest.java
  public void testPreAllocatedArray_Fail() {
    assertThrows(IllegalArgumentException.class, () -> new PreAllocatedArray<String>(-5));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\util\PreAllocatedArrayTest.java
  public void testSet() {
    int capacity = 5;
    PreAllocatedArray<String> strings = new PreAllocatedArray<>(capacity);
    assertEquals(capacity, strings.length);

    // everything else should be null
    strings.set(1, "a");
    strings.set(4, "b");
    assertEquals(capacity, strings.length);

    // overwrite
    String b = strings.set(4, "c");
    assertEquals("b", b);
    assertEquals(capacity, strings.length);

    Iterator<String> iter = strings.iterator();
    assertNull(iter.next()); // index 0
    assertEquals("a", iter.next()); // index 1
    assertNull(iter.next()); // index 2
    assertNull(iter.next()); // index 3
    assertEquals("c", iter.next()); // index 4
    assertFalse(iter.hasNext()); // index 5
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\util\PreAllocatedArrayTest.java
  public void testSetIndexHigh() {
    PreAllocatedArray<String> strings = new PreAllocatedArray<>(3);
    strings.set(2, "in bounds");
    assertThrows(IndexOutOfBoundsException.class, () -> strings.set(3, "out of bounds"));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\util\PreAllocatedArrayTest.java
  public void testSetIndexNegative() {
    PreAllocatedArray<String> strings = new PreAllocatedArray<>(3);
    strings.set(0, "in bounds");
    assertThrows(IndexOutOfBoundsException.class, () -> strings.set(-3, "out of bounds"));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\util\PreAllocatedArrayTest.java
  public void testGetIndexHigh() {
    PreAllocatedArray<String> strings = new PreAllocatedArray<>(3);
    strings.get(2);
    assertThrows(IndexOutOfBoundsException.class, () -> strings.get(3));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\util\PreAllocatedArrayTest.java
  public void testGetIndexNegative() {
    PreAllocatedArray<String> strings = new PreAllocatedArray<>(3);
    strings.get(0);
    assertThrows(IndexOutOfBoundsException.class, () -> strings.get(-3));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\util\StatTest.java
  public void testGetMin() {
    assertEquals(0, zero.min());
    assertEquals(3677, stat.min());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\util\StatTest.java
  public void testGetMax() {
    assertEquals(0, zero.max());
    assertEquals(9792, stat.max());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\util\StatTest.java
  public void testGetAverage() {
    assertEquals(0, zero.mean(), delta);
    assertEquals(5529, stat.mean(), delta);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\util\StatTest.java
  public void testGetSum() {
    assertEquals(0, zero.sum());
    assertEquals(38703, stat.sum());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\util\StatTest.java
  public void testClear() {
    zero.clear();
    stat.clear();

    assertEquals(0, zero.max());
    assertEquals(zero.max(), stat.max());
    assertEquals(0, zero.min());
    assertEquals(zero.min(), stat.min());
    assertEquals(0, zero.sum());
    assertEquals(zero.sum(), stat.sum());

    assertEquals(Double.NaN, zero.mean(), 0);
    assertEquals(zero.mean(), stat.mean(), 0);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\util\TextUtilTest.java
  public void testGetBytes() {
    String longMessage = "This is some text";
    Text longMessageText = new Text(longMessage);
    String smallerMessage = "a";
    Text smallerMessageText = new Text(smallerMessage);
    Text someText = new Text(longMessage);
    assertEquals(someText, longMessageText);
    someText.set(smallerMessageText);
    assertTrue(someText.getLength() != someText.getBytes().length);
    assertEquals(TextUtil.getBytes(someText).length, smallerMessage.length());
    assertEquals((new Text(TextUtil.getBytes(someText))), smallerMessageText);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\util\ThriftMessageUtilTest.java
  public void testSerializationAsByteArray() throws IOException {
    ByteBuffer buff = util.serialize(msg);
    TAuthenticationTokenIdentifier copy = new TAuthenticationTokenIdentifier();
    byte[] array = new byte[buff.limit()];
    System.arraycopy(buff.array(), 0, array, 0, buff.limit());
    util.deserialize(array, copy);
    assertEquals(msg, copy);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\util\ThriftMessageUtilTest.java
  public void testSerializationAsByteArrayWithLimits() throws IOException {
    ByteBuffer buff = util.serialize(msg);
    TAuthenticationTokenIdentifier copy = new TAuthenticationTokenIdentifier();

    byte[] array = new byte[buff.limit() + 14];
    // Throw some garbage in front and behind the actual message
    array[0] = 'G';
    array[1] = 'A';
    array[2] = 'R';
    array[3] = 'B';
    array[4] = 'A';
    array[5] = 'G';
    array[6] = 'E';
    System.arraycopy(buff.array(), 0, array, 7, buff.limit());
    array[7 + buff.limit()] = 'G';
    array[7 + buff.limit() + 1] = 'A';
    array[7 + buff.limit() + 2] = 'R';
    array[7 + buff.limit() + 3] = 'B';
    array[7 + buff.limit() + 4] = 'A';
    array[7 + buff.limit() + 5] = 'G';
    array[7 + buff.limit() + 6] = 'E';

    util.deserialize(array, 7, buff.limit(), copy);
    assertEquals(msg, copy);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\util\UnsynchronizedBufferTest.java
  public void testByteBufferConstructor() {
    byte[] test = "0123456789".getBytes(UTF_8);

    ByteBuffer bb1 = ByteBuffer.wrap(test);
    UnsynchronizedBuffer.Reader ub = new UnsynchronizedBuffer.Reader(bb1);
    byte[] buf = new byte[10];
    ub.readBytes(buf);
    assertEquals("0123456789", new String(buf, UTF_8));

    ByteBuffer bb2 = ByteBuffer.wrap(test, 3, 5);

    ub = new UnsynchronizedBuffer.Reader(bb2);
    buf = new byte[5];
    // should read data from offset 3 where the byte buffer starts
    ub.readBytes(buf);
    assertEquals("34567", new String(buf, UTF_8));

    buf = new byte[6];
    // the byte buffer has the extra byte, but should not be able to read it...
    final UnsynchronizedBuffer.Reader finalUb = ub;
    final byte[] finalBuf = buf;
    assertThrows(ArrayIndexOutOfBoundsException.class, () -> finalUb.readBytes(finalBuf));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\util\UnsynchronizedBufferTest.java
  public void testWriteVMethods() throws Exception {
    // writeV methods use an extra byte for length, unless value is only one byte
    // Integer.MAX_VALUE = 0x7fffffff
    testInteger(0x7fffffff, 4 + 1);
    testInteger(0x7fffff, 3 + 1);
    testInteger(0x7fff, 2 + 1);
    testInteger(0x7f, 1);

    // Long.MAX_VALUE = 0x7fffffffffffffffL
    testLong(0x7fffffffffffffffL, 8 + 1);
    testLong(0x7fffffffffffffL, 7 + 1);
    testLong(0x7fffffffffffL, 6 + 1);
    testLong(0x7fffffffffL, 5 + 1);
    testLong(0x7fffffffL, 4 + 1);
    testLong(0x7fffffL, 3 + 1);
    testLong(0x7fffL, 2 + 1);
    testLong(0x7fL, 1);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\util\UnsynchronizedBufferTest.java
  public void compareWithWritableUtils() throws Exception {
    byte[] hadoopBytes;
    byte[] accumuloBytes;
    int oneByteInt = 0x7f;
    int threeByteInt = 0x7fff;
    long sixByteLong = 0x7fffffffffL;
    try (ByteArrayOutputStream baos = new ByteArrayOutputStream();
        DataOutputStream dos = new DataOutputStream(baos)) {
      WritableUtils.writeVInt(dos, oneByteInt);
      WritableUtils.writeVInt(dos, threeByteInt);
      WritableUtils.writeVLong(dos, sixByteLong);
      dos.flush();
      hadoopBytes = baos.toByteArray();
    }
    try (ByteArrayOutputStream baos = new ByteArrayOutputStream();
        DataOutputStream dos = new DataOutputStream(baos)) {
      UnsynchronizedBuffer.writeVInt(dos, new byte[5], oneByteInt);
      UnsynchronizedBuffer.writeVInt(dos, new byte[5], threeByteInt);
      UnsynchronizedBuffer.writeVLong(dos, new byte[9], sixByteLong);
      dos.flush();
      accumuloBytes = baos.toByteArray();
    }
    assertTrue("The byte array written to by UnsynchronizedBuffer is not equal to WritableUtils",
        Arrays.equals(hadoopBytes, accumuloBytes));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\util\UnsynchronizedBufferTest.java
  public void testNextArraySizeNegative() {
    UnsynchronizedBuffer.nextArraySize(-1);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\util\UnsynchronizedBufferTest.java
  public void testNextArraySize() {
    // 0 <= size <= 2^0
    assertEquals(1, UnsynchronizedBuffer.nextArraySize(0));
    assertEquals(1, UnsynchronizedBuffer.nextArraySize(1));

    // 2^0 < size <= 2^1
    assertEquals(2, UnsynchronizedBuffer.nextArraySize(2));

    // 2^1 < size <= 2^30
    for (int exp = 1; exp < 30; ++exp) {
      // 2^exp < size <= 2^(exp+1) (for all exp: [1,29])
      int nextExp = exp + 1;
      assertEquals(1 << nextExp, UnsynchronizedBuffer.nextArraySize((1 << exp) + 1));
      assertEquals(1 << nextExp, UnsynchronizedBuffer.nextArraySize(1 << nextExp));
    }
    // 2^30 < size < Integer.MAX_VALUE
    assertEquals(Integer.MAX_VALUE - 8, UnsynchronizedBuffer.nextArraySize((1 << 30) + 1));
    assertEquals(Integer.MAX_VALUE - 8, UnsynchronizedBuffer.nextArraySize(Integer.MAX_VALUE - 9));
    assertEquals(Integer.MAX_VALUE - 8, UnsynchronizedBuffer.nextArraySize(Integer.MAX_VALUE - 8));
    assertEquals(Integer.MAX_VALUE - 8, UnsynchronizedBuffer.nextArraySize(Integer.MAX_VALUE));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\util\ValidatorTest.java
  public void testValidate_Success() {
    assertEquals("correct", v.validate("correct"));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\util\ValidatorTest.java
  public void testValidate_Failure() {
    v.validate("incorrect");
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\util\ValidatorTest.java
  public void testInvalidMessage() {
    assertEquals("Invalid argument incorrect", v.invalidMessage("incorrect"));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\util\ValidatorTest.java
  public void testAnd() {
    Validator<String> vand = v3.and(v);
    assertTrue(vand.test("correct"));
    assertFalse(vand.test("righto"));
    assertFalse(vand.test("coriander"));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\util\ValidatorTest.java
  public void testOr() {
    Validator<String> vor = v.or(v2);
    assertTrue(vor.test("correct"));
    assertTrue(vor.test("righto"));
    assertFalse(vor.test("coriander"));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\util\ValidatorTest.java
  public void testNot() {
    Validator<String> vnot = v3.not();
    assertFalse(vnot.test("correct"));
    assertFalse(vnot.test("coriander"));
    assertTrue(vnot.test("righto"));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\util\compaction\CompactionPrioritizerTest.java
  public void testCompactionJobComparator() {
    var j1 = createJob(CompactionKind.USER, "t-009", 10, 20);
    var j2 = createJob(CompactionKind.USER, "t-010", 11, 25);
    var j3 = createJob(CompactionKind.USER, "t-011", 11, 20);
    var j4 = createJob(CompactionKind.SYSTEM, "t-012", 11, 30);
    var j5 = createJob(CompactionKind.SYSTEM, "t-013", 5, 10);
    var j6 = createJob(CompactionKind.CHOP, "t-014", 5, 40);
    var j7 = createJob(CompactionKind.CHOP, "t-015", 5, 7);
    var j8 = createJob(CompactionKind.SELECTOR, "t-014", 5, 21);
    var j9 = createJob(CompactionKind.SELECTOR, "t-015", 7, 21);

    var expected = List.of(j2, j3, j1, j6, j7, j9, j8, j4, j5);

    var shuffled = new ArrayList<>(expected);
    Collections.shuffle(shuffled);
    Collections.sort(shuffled, CompactionJobPrioritizer.JOB_COMPARATOR);

    assertEquals(expected, shuffled);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\util\format\DateFormatSupplierTest.java
  public void testCreateDefaultFormatSupplier() {
    ThreadLocal<DateFormat> supplierA = DateFormatSupplier.createDefaultFormatSupplier();
    ThreadLocal<DateFormat> supplierB = DateFormatSupplier.createDefaultFormatSupplier();
    assertSuppliersIndependent(supplierA, supplierB);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\util\format\DateFormatSupplierTest.java
  public void testCreateSimpleFormatSupplier() {
    final String format = DateFormatSupplier.HUMAN_READABLE_FORMAT;
    DateFormatSupplier supplierA = DateFormatSupplier.createSimpleFormatSupplier(format);
    DateFormatSupplier supplierB = DateFormatSupplier.createSimpleFormatSupplier(format);
    assertSuppliersIndependent(supplierA, supplierB);

    // since dfA and dfB come from different suppliers, altering the TimeZone on one does not affect
    // the other
    supplierA.setTimeZone(TimeZone.getTimeZone("UTC"));
    final DateFormat dfA = supplierA.get();

    supplierB.setTimeZone(TimeZone.getTimeZone("EST"));
    final DateFormat dfB = supplierB.get();

    final String resultA = dfA.format(new Date(0));
    assertEquals("1970/01/01 00:00:00.000", resultA);

    final String resultB = dfB.format(new Date(0));
    assertEquals("1969/12/31 19:00:00.000", resultB);

    assertTrue(!resultA.equals(resultB));

  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\util\format\DateStringFormatterTest.java
  public void testTimestamps() {
    final TimeZone utc = TimeZone.getTimeZone("UTC");
    final TimeZone est = TimeZone.getTimeZone("EST");
    final FormatterConfig config = new FormatterConfig().setPrintTimestamps(true);
    DateStringFormatter formatter;

    formatter = new DateStringFormatter(utc);
    testFormatterIgnoresConfig(config, formatter);

    // even though config says to use EST and only print year, the Formatter will override these
    formatter = new DateStringFormatter(utc);
    DateFormatSupplier dfSupplier = DateFormatSupplier.createSimpleFormatSupplier("YYYY", est);
    config.setDateFormatSupplier(dfSupplier);
    testFormatterIgnoresConfig(config, formatter);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\util\format\DateStringFormatterTest.java
  public void testNoTimestamps() {
    data.put(new Key("", "", "", 1), new Value());

    assertEquals(2, data.size());

    formatter.initialize(data.entrySet(), new FormatterConfig());

    assertEquals(formatter.next(), formatter.next());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\util\format\DefaultFormatterTest.java
  public void testDoubleInitialize() {
    final FormatterConfig timestampConfig = new FormatterConfig().setPrintTimestamps(true);
    df.initialize(empty, timestampConfig);
    df.initialize(empty, timestampConfig);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\util\format\DefaultFormatterTest.java
  public void testNextBeforeInitialize() {
    df.hasNext();
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\util\format\DefaultFormatterTest.java
  public void testAppendBytes() {
    StringBuilder sb = new StringBuilder();
    byte[] data = {0, '\\', 'x', -0x01};

    DefaultFormatter.appendValue(sb, new Value());
    assertEquals("", sb.toString());

    DefaultFormatter.appendText(sb, new Text(data));
    assertEquals("\\x00\\\\x\\xFF", sb.toString());
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\util\format\DefaultFormatterTest.java
  public void testFormatEntry() {
    final long timestamp = 0;
    Map<Key,Value> map = new TreeMap<>();
    map.put(new Key("a", "ab", "abc", timestamp), new Value("abcd"));

    FormatterConfig config;
    String answer;

    // no timestamp, no max
    config = new FormatterConfig();
    df = new DefaultFormatter();
    df.initialize(map.entrySet(), config);
    answer = df.next();
    assertEquals("a ab:abc []\tabcd", answer);

    // yes timestamp, no max
    config.setPrintTimestamps(true);
    df = new DefaultFormatter();
    df.initialize(map.entrySet(), config);
    answer = df.next();
    assertEquals("a ab:abc [] " + timestamp + "\tabcd", answer);

    // yes timestamp, max of 1
    config.setPrintTimestamps(true).setShownLength(1);
    df = new DefaultFormatter();
    df.initialize(map.entrySet(), config);
    answer = df.next();
    assertEquals("a a:a [] " + timestamp + "\ta", answer);

    // yes timestamp, no max, new DateFormat
    config.setPrintTimestamps(true).doNotLimitShowLength()
        .setDateFormatSupplier(DateFormatSupplier.createSimpleFormatSupplier("YYYY"));
    df = new DefaultFormatter();
    df.initialize(map.entrySet(), config);
    answer = df.next();
    assertEquals("a ab:abc [] 1970\tabcd", answer);

    // yes timestamp, no max, new DateFormat, different TimeZone
    config.setPrintTimestamps(true).doNotLimitShowLength()
        .setDateFormatSupplier(DateFormatSupplier.createSimpleFormatSupplier("HH", UTC));
    df = new DefaultFormatter();
    df.initialize(map.entrySet(), config);
    answer = df.next();
    assertEquals("a ab:abc [] 00\tabcd", answer);

    config.setPrintTimestamps(true).doNotLimitShowLength()
        .setDateFormatSupplier(DateFormatSupplier.createSimpleFormatSupplier("HH", EST));
    df = new DefaultFormatter();
    df.initialize(map.entrySet(), config);
    answer = df.next();
    assertEquals("a ab:abc [] 19\tabcd", answer);
  }
}
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\util\format\FormatterConfigTest.java
  public void testConstructor() {
    FormatterConfig config = new FormatterConfig();
    assertFalse(config.willLimitShowLength());
    assertFalse(config.willPrintTimestamps());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\util\format\FormatterConfigTest.java
  public void testSetShownLength() {
    FormatterConfig config = new FormatterConfig();
    try {
      config.setShownLength(-1);
      fail("Should throw on negative length.");
    } catch (IllegalArgumentException e) {}

    config.setShownLength(0);
    assertEquals(0, config.getShownLength());
    assertTrue(config.willLimitShowLength());

    config.setShownLength(1);
    assertEquals(1, config.getShownLength());
    assertTrue(config.willLimitShowLength());
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\util\format\FormatterConfigTest.java
  public void testDoNotLimitShowLength() {
    FormatterConfig config = new FormatterConfig();
    assertFalse(config.willLimitShowLength());

    config.setShownLength(1);
    assertTrue(config.willLimitShowLength());

    config.doNotLimitShowLength();
    assertFalse(config.willLimitShowLength());
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\util\format\FormatterConfigTest.java
  public void testGetDateFormat() {
    FormatterConfig config1 = new FormatterConfig();
    DateFormat df1 = config1.getDateFormatSupplier().get();

    FormatterConfig config2 = new FormatterConfig();
    assertNotSame(df1, config2.getDateFormatSupplier().get());

    config2.setDateFormatSupplier(config1.getDateFormatSupplier());
    assertSame(df1, config2.getDateFormatSupplier().get());

    // even though copying, it can't copy the Generator, so will pull out the same DateFormat
    FormatterConfig configCopy = new FormatterConfig(config1);
    assertSame(df1, configCopy.getDateFormatSupplier().get());
  }

}
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\util\format\FormatterFactoryTest.java
  public void testGetDefaultFormatter() {
    final FormatterConfig timestampConfig = new FormatterConfig().setPrintTimestamps(true);
    Formatter defaultFormatter = FormatterFactory.getDefaultFormatter(scanner, timestampConfig);
    Formatter bogusFormatter =
        FormatterFactory.getFormatter(Formatter.class, scanner, timestampConfig);
    assertEquals(defaultFormatter.getClass(), bogusFormatter.getClass());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\util\format\HexFormatterTest.java
  public void testInitialize() {
    data.put(new Key(), new Value());
    formatter.initialize(data.entrySet(), new FormatterConfig());

    assertTrue(formatter.hasNext());
    assertEquals("  " + "  " + " [" + "] ", formatter.next());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\util\format\HexFormatterTest.java
  public void testInterpretRow() {
    assertEquals(new Text(), formatter.interpretRow(new Text()));
    assertEquals(new Text("\0"), formatter.interpretRow(new Text("0")));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\util\format\HexFormatterTest.java
  public void testRoundTripRows() {
    Text bytes = new Text(new byte[] {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15});
    data.put(new Key(bytes), new Value());

    formatter.initialize(data.entrySet(), new FormatterConfig());

    String row = formatter.next().split(" ")[0];
    assertEquals("0001-0203-0405-0607-0809-0a0b-0c0d-0e0f", row);
    assertEquals(bytes, formatter.interpretRow(new Text(row)));
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\util\format\HexFormatterTest.java
  public void testInterpretBadRow0() {
    formatter.interpretRow(new Text("!"));
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\util\format\HexFormatterTest.java
  public void testInterpretBadRow1() {
    formatter.interpretRow(new Text("z"));
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\util\format\HexFormatterTest.java
  public void testTimestamps() {
    long now = System.currentTimeMillis();
    data.put(new Key("", "", "", now), new Value());
    formatter.initialize(data.entrySet(), new FormatterConfig().setPrintTimestamps(true));
    String entry = formatter.next().split("\\s+")[2];
    assertEquals(now, Long.parseLong(entry));
  }
}
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\util\format\ShardedTableDistributionFormatterTest.java
  public void testInitialize() {
    data.put(new Key(), new Value());
    data.put(new Key("r", "~tab"), new Value());
    formatter.initialize(data.entrySet(), new FormatterConfig());

    assertTrue(formatter.hasNext());
    formatter.next();
    assertFalse(formatter.hasNext());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\util\format\ShardedTableDistributionFormatterTest.java
  public void testAggregate() {
    data.put(new Key("t", "~tab", "loc"), new Value("srv1"));
    data.put(new Key("t;19700101", "~tab", "loc", 0), new Value("srv1"));
    data.put(new Key("t;19700101", "~tab", "loc", 1), new Value("srv2"));

    formatter.initialize(data.entrySet(), new FormatterConfig());

    String[] resultLines = formatter.next().split("\n");
    List<String> results = Arrays.asList(resultLines).subList(2, 4);

    assertTrue(results.stream().anyMatch(s -> s.startsWith("NULL") && s.endsWith("" + 1)));
    assertTrue(results.stream().anyMatch(s -> s.startsWith("19700101") && s.endsWith("" + 2)));

    assertFalse(formatter.hasNext());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\util\format\StatisticsDisplayFormatterTest.java
  public void testInitialize() {
    data.put(new Key(), new Value());
    formatter.initialize(data.entrySet(), new FormatterConfig());

    assertTrue(formatter.hasNext());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\util\format\StatisticsDisplayFormatterTest.java
  public void testAggregate() {
    data.put(new Key("", "", "", 1), new Value());
    data.put(new Key("", "", "", 2), new Value());
    formatter.initialize(data.entrySet(), new FormatterConfig());

    String[] output = formatter.next().split("\n");
    assertTrue(output[2].endsWith(": 1"));
    assertTrue(output[5].endsWith(": 1"));
    assertTrue(output[8].endsWith(": 1"));
    assertEquals("2 entries matched.", output[9]);

    assertFalse(formatter.hasNext());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\volume\VolumeImplTest.java
  public void testFileSystemInequivalence() {
    Configuration hadoopConf = createMock(Configuration.class);
    FileSystem fs = createMock(FileSystem.class), other = createMock(FileSystem.class);

    String basePath = "/accumulo";

    expect(fs.getConf()).andReturn(hadoopConf).anyTimes();
    expect(fs.getUri()).andReturn(URI.create("hdfs://localhost:8020")).anyTimes();
    expect(other.getUri()).andReturn(URI.create("hdfs://otherhost:8020")).anyTimes();

    replay(fs, other);

    VolumeImpl volume = new VolumeImpl(fs, basePath);

    assertFalse(volume.equivalentFileSystems(other));

    verify(fs, other);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\volume\VolumeImplTest.java
  public void testFileSystemEquivalence() {
    Configuration hadoopConf = createMock(Configuration.class);
    FileSystem fs = createMock(FileSystem.class), other = createMock(FileSystem.class);
    String basePath = "/accumulo";

    expect(fs.getConf()).andReturn(hadoopConf).anyTimes();
    expect(fs.getUri()).andReturn(URI.create("hdfs://myhost:8020/")).anyTimes();
    expect(other.getUri()).andReturn(URI.create("hdfs://myhost:8020")).anyTimes();

    replay(fs, other);

    VolumeImpl volume = new VolumeImpl(fs, basePath);

    assertTrue(volume.equivalentFileSystems(other));

    verify(fs, other);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\volume\VolumeImplTest.java
  public void testBasePathInequivalence() {
    FileSystem fs = createMock(FileSystem.class);

    VolumeImpl volume = new VolumeImpl(fs, "/accumulo");

    assertFalse(volume.isAncestorPathOf(new Path("/something/accumulo")));
    assertFalse(volume.isAncestorPathOf(new Path("/accumulo2")));
    assertFalse(volume.isAncestorPathOf(new Path("/accumulo/..")));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\volume\VolumeImplTest.java
  public void testBasePathEquivalence() {
    FileSystem fs = createMock(FileSystem.class);

    final String basePath = "/accumulo";
    VolumeImpl volume = new VolumeImpl(fs, basePath);

    // Bare path should match
    assertTrue(volume.isAncestorPathOf(new Path(basePath)));
    // Prefix should also match
    assertTrue(volume.isAncestorPathOf(new Path(basePath + "/tables/1/F000001.rf")));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\volume\VolumeImplTest.java
  public void testPrefixChild() throws IOException {
    FileSystem fs = new Path("file:///").getFileSystem(new Configuration(false));
    var volume = new VolumeImpl(fs, "/tmp/accumulo/");
    assertEquals("file:/tmp/accumulo", volume.toString());
    // test normalization for effectively empty child
    Set.of(" ", "  ", "   ", " .", " ./", " .// ", " ././/./ ").forEach(s -> {
      assertEquals("file:/tmp/accumulo", volume.prefixChild(s).toString());
    });
    // test normalization for single depth child
    Set.of("/abc", "abc", " abc/ ", " abc/// ", "./abc/.", "./abc").forEach(s -> {
      assertEquals("file:/tmp/accumulo/abc", volume.prefixChild(s).toString());
    });
    // test normalization for multi depth child
    Set.of("abc/./def/", " abc/def/ ", " abc////def/ ", " ./abc/.//def/. ").forEach(s -> {
      assertEquals("file:/tmp/accumulo/abc/def", volume.prefixChild(s).toString());
    });
    // test failures for absolute paths
    Set.of("//abc", " //abc ", "///abc").forEach(s -> {
      var e = assertThrows(IllegalArgumentException.class, () -> {
        volume.prefixChild(s);
        LoggerFactory.getLogger(VolumeImplTest.class).error("Should have thrown on " + s);
      });
      assertEquals("Cannot prefix " + s + " (absolute path) with volume file:/tmp/accumulo",
          e.getMessage());
    });
    // test failures for qualified paths
    Set.of("file:/abc", "hdfs://host:1234", " file:/def ").forEach(s -> {
      var e = assertThrows(IllegalArgumentException.class, () -> {
        volume.prefixChild(s);
        LoggerFactory.getLogger(VolumeImplTest.class).error("Should have thrown on " + s);
      });
      assertEquals("Cannot prefix " + s + " (qualified path) with volume file:/tmp/accumulo",
          e.getMessage());
    });
    // test failures for breakout paths
    Set.of("./abc/..", "abc/../def/", "../abc", " .. ").forEach(s -> {
      var e = assertThrows(IllegalArgumentException.class, () -> {
        volume.prefixChild(s);
        LoggerFactory.getLogger(VolumeImplTest.class).error("Should have thrown on " + s);
      });
      assertEquals("Cannot prefix " + s + " (path contains '..') with volume file:/tmp/accumulo",
          e.getMessage());
    });
    // quick check to verify with hdfs
    FileSystem fs2 = new Path("hdfs://127.0.0.1:1234/").getFileSystem(new Configuration(false));
    var volume2 = new VolumeImpl(fs2, "/tmp/accumulo/");
    assertEquals("hdfs://127.0.0.1:1234/tmp/accumulo", volume2.toString());
    assertEquals("hdfs://127.0.0.1:1234/tmp/accumulo/abc", volume2.prefixChild("abc").toString());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\core\volume\VolumeImplTest.java
  public void testContains() throws IOException {
    FileSystem fs = new Path("file:///").getFileSystem(new Configuration(false));
    var volume = new VolumeImpl(fs, "/tmp/accumulo/");
    Set.of("abc", " abc/def/ ", " ghi/// ").forEach(s -> {
      assertTrue(volume.containsPath(volume.prefixChild(s)));
    });
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\fate\AgeOffStoreTest.java
  public void testBasic() {

    TestTimeSource tts = new TestTimeSource();
    SimpleStore<String> sstore = new SimpleStore<>();
    AgeOffStore<String> aoStore = new AgeOffStore<>(sstore, 10, tts);

    aoStore.ageOff();

    long txid1 = aoStore.create();
    aoStore.reserve(txid1);
    aoStore.setStatus(txid1, TStatus.IN_PROGRESS);
    aoStore.unreserve(txid1, 0);

    aoStore.ageOff();

    long txid2 = aoStore.create();
    aoStore.reserve(txid2);
    aoStore.setStatus(txid2, TStatus.IN_PROGRESS);
    aoStore.setStatus(txid2, TStatus.FAILED);
    aoStore.unreserve(txid2, 0);

    tts.time = 6;

    long txid3 = aoStore.create();
    aoStore.reserve(txid3);
    aoStore.setStatus(txid3, TStatus.IN_PROGRESS);
    aoStore.setStatus(txid3, TStatus.SUCCESSFUL);
    aoStore.unreserve(txid3, 0);

    Long txid4 = aoStore.create();

    aoStore.ageOff();

    assertEquals(new HashSet<>(Arrays.asList(txid1, txid2, txid3, txid4)),
        new HashSet<>(aoStore.list()));
    assertEquals(4, new HashSet<>(aoStore.list()).size());

    tts.time = 15;

    aoStore.ageOff();

    assertEquals(new HashSet<>(Arrays.asList(txid1, txid3, txid4)), new HashSet<>(aoStore.list()));
    assertEquals(3, new HashSet<>(aoStore.list()).size());

    tts.time = 30;

    aoStore.ageOff();

    assertEquals(new HashSet<>(Arrays.asList(txid1)), new HashSet<>(aoStore.list()));
    assertEquals(1, new HashSet<>(aoStore.list()).size());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\fate\AgeOffStoreTest.java
  public void testNonEmpty() {
    // test age off when source store starts off non empty

    TestTimeSource tts = new TestTimeSource();
    SimpleStore<String> sstore = new SimpleStore<>();
    long txid1 = sstore.create();
    sstore.reserve(txid1);
    sstore.setStatus(txid1, TStatus.IN_PROGRESS);
    sstore.unreserve(txid1, 0);

    long txid2 = sstore.create();
    sstore.reserve(txid2);
    sstore.setStatus(txid2, TStatus.IN_PROGRESS);
    sstore.setStatus(txid2, TStatus.FAILED);
    sstore.unreserve(txid2, 0);

    long txid3 = sstore.create();
    sstore.reserve(txid3);
    sstore.setStatus(txid3, TStatus.IN_PROGRESS);
    sstore.setStatus(txid3, TStatus.SUCCESSFUL);
    sstore.unreserve(txid3, 0);

    Long txid4 = sstore.create();

    AgeOffStore<String> aoStore = new AgeOffStore<>(sstore, 10, tts);

    assertEquals(new HashSet<>(Arrays.asList(txid1, txid2, txid3, txid4)),
        new HashSet<>(aoStore.list()));
    assertEquals(4, new HashSet<>(aoStore.list()).size());

    aoStore.ageOff();

    assertEquals(new HashSet<>(Arrays.asList(txid1, txid2, txid3, txid4)),
        new HashSet<>(aoStore.list()));
    assertEquals(4, new HashSet<>(aoStore.list()).size());

    tts.time = 15;

    aoStore.ageOff();

    assertEquals(new HashSet<>(Arrays.asList(txid1)), new HashSet<>(aoStore.list()));
    assertEquals(1, new HashSet<>(aoStore.list()).size());

    aoStore.reserve(txid1);
    aoStore.setStatus(txid1, TStatus.FAILED_IN_PROGRESS);
    aoStore.unreserve(txid1, 0);

    tts.time = 30;

    aoStore.ageOff();

    assertEquals(new HashSet<>(Arrays.asList(txid1)), new HashSet<>(aoStore.list()));
    assertEquals(1, new HashSet<>(aoStore.list()).size());

    aoStore.reserve(txid1);
    aoStore.setStatus(txid1, TStatus.FAILED);
    aoStore.unreserve(txid1, 0);

    aoStore.ageOff();

    assertEquals(new HashSet<>(Arrays.asList(txid1)), new HashSet<>(aoStore.list()));
    assertEquals(1, new HashSet<>(aoStore.list()).size());

    tts.time = 42;

    aoStore.ageOff();

    assertEquals(0, new HashSet<>(aoStore.list()).size());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\fate\ReadOnlyStoreTest.java
  public void everythingPassesThrough() throws Exception {
    Repo<String> repo = EasyMock.createMock(Repo.class);
    EasyMock.expect(repo.getDescription()).andReturn("description");
    EasyMock.expect(repo.isReady(0xdeadbeefL, null)).andReturn(0x0L);

    TStore<String> mock = EasyMock.createNiceMock(TStore.class);
    EasyMock.expect(mock.reserve()).andReturn(0xdeadbeefL);
    mock.reserve(0xdeadbeefL);
    EasyMock.expect(mock.top(0xdeadbeefL)).andReturn(repo);
    EasyMock.expect(mock.getStatus(0xdeadbeefL)).andReturn(TStatus.UNKNOWN);
    mock.unreserve(0xdeadbeefL, 30);

    EasyMock.expect(mock.waitForStatusChange(0xdeadbeefL, EnumSet.allOf(TStatus.class)))
        .andReturn(TStatus.UNKNOWN);
    EasyMock.expect(mock.getProperty(0xdeadbeefL, "com.example.anyproperty")).andReturn("property");
    EasyMock.expect(mock.list()).andReturn(Collections.emptyList());

    EasyMock.replay(repo);
    EasyMock.replay(mock);

    ReadOnlyTStore<String> store = new ReadOnlyStore<>(mock);
    assertEquals(0xdeadbeefL, store.reserve());
    store.reserve(0xdeadbeefL);
    ReadOnlyRepo<String> top = store.top(0xdeadbeefL);
    assertFalse(top instanceof Repo);
    assertEquals("description", top.getDescription());
    assertEquals(0x0L, top.isReady(0xdeadbeefL, null));
    assertEquals(TStatus.UNKNOWN, store.getStatus(0xdeadbeefL));
    store.unreserve(0xdeadbeefL, 30);

    assertEquals(TStatus.UNKNOWN,
        store.waitForStatusChange(0xdeadbeefL, EnumSet.allOf(TStatus.class)));
    assertEquals("property", store.getProperty(0xdeadbeefL, "com.example.anyproperty"));
    assertEquals(Collections.<Long>emptyList(), store.list());

    EasyMock.verify(repo);
    EasyMock.verify(mock);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\fate\util\RetryTest.java
  public void canRetryDoesntAlterState() {
    for (int i = 0; i < MAX_RETRIES + 1; i++) {
      assertTrue(retry.canRetry());
    }
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\fate\util\RetryTest.java
  public void hasRetriedAfterUse() {
    assertFalse(retry.hasRetried());
    retry.useRetry();
    assertTrue(retry.hasRetried());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\fate\util\RetryTest.java
  public void retriesAreCompleted() {
    for (int i = 0; i < MAX_RETRIES; i++) {
      assertEquals(i, retry.retriesCompleted());
      // canRetry doesn't alter retry's state
      retry.canRetry();
      assertEquals(i, retry.retriesCompleted());
      // Using the retry will increase the internal count
      retry.useRetry();
      assertEquals(i + 1, retry.retriesCompleted());
    }
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\fate\util\RetryTest.java
  public void usingNonExistentRetryFails() {
    for (int i = 0; i < MAX_RETRIES; i++) {
      assertTrue(retry.canRetry());
      retry.useRetry();
    }
    assertFalse(retry.canRetry());
    assertThrows("Calling useRetry when canRetry returns false throws an exception",
        IllegalStateException.class, () -> retry.useRetry());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\fate\util\RetryTest.java
  public void testWaitIncrement() throws InterruptedException {
    retry = EasyMock.createMockBuilder(Retry.class).addMockedMethod("sleep").createStrictMock();
    retry.setMaxRetries(MAX_RETRIES);
    retry.setStartWait(INITIAL_WAIT);
    retry.setWaitIncrement(WAIT_INC);
    retry.setMaxWait(MAX_RETRIES * 1000);
    retry.setBackOffFactor(1);
    retry.setDoTimeJitter(false);

    long currentWait = INITIAL_WAIT;
    for (int i = 1; i <= MAX_RETRIES; i++) {
      retry.sleep(currentWait);
      EasyMock.expectLastCall();
      currentWait += WAIT_INC;
    }

    EasyMock.replay(retry);

    while (retry.canRetry()) {
      retry.useRetry();
      retry.waitForNextAttempt();
    }

    EasyMock.verify(retry);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\fate\util\RetryTest.java
  public void testBackOffFactor() throws InterruptedException {
    retry = EasyMock.createMockBuilder(Retry.class).addMockedMethod("sleep").createStrictMock();
    retry.setMaxRetries(MAX_RETRIES);
    retry.setBackOffFactor(1.5);
    retry.setStartWait(INITIAL_WAIT);
    long waitIncrement = 0, currentWait = INITIAL_WAIT;
    retry.setWaitIncrement(WAIT_INC);
    retry.setMaxWait(MAX_RETRIES * 128000);
    retry.setDoTimeJitter(false);
    double backOfFactor = 1.5, originalBackoff = 1.5;

    for (int i = 1; i <= MAX_RETRIES; i++) {
      retry.sleep(currentWait);
      double waitFactor = backOfFactor;
      backOfFactor *= originalBackoff;
      waitIncrement = (long) (Math.ceil(waitFactor * WAIT_INC));
      currentWait = Math.min(retry.getMaxWait(), INITIAL_WAIT + waitIncrement);
      EasyMock.expectLastCall();
    }

    EasyMock.replay(retry);

    while (retry.canRetry()) {
      retry.useRetry();
      retry.waitForNextAttempt();
    }

    EasyMock.verify(retry);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\fate\util\RetryTest.java
  public void testBoundedWaitIncrement() throws InterruptedException {
    retry = EasyMock.createMockBuilder(Retry.class).addMockedMethod("sleep").createStrictMock();
    retry.setMaxRetries(MAX_RETRIES);
    retry.setStartWait(INITIAL_WAIT);
    retry.setWaitIncrement(WAIT_INC);
    // Make the last retry not increment in length
    retry.setMaxWait((MAX_RETRIES - 1) * 1000);
    retry.setBackOffFactor(1);
    retry.setDoTimeJitter(false);

    long currentWait = INITIAL_WAIT;
    for (int i = 1; i <= MAX_RETRIES; i++) {
      retry.sleep(currentWait);
      EasyMock.expectLastCall();
      if (i < MAX_RETRIES - 1) {
        currentWait += WAIT_INC;
      }
    }

    EasyMock.replay(retry);

    while (retry.canRetry()) {
      retry.useRetry();
      retry.waitForNextAttempt();
    }

    EasyMock.verify(retry);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\fate\util\RetryTest.java
  public void testIsMaxRetryDisabled() {
    assertFalse(retry.hasInfiniteRetries());
    assertTrue(unlimitedRetry.hasInfiniteRetries());
    assertEquals(-1, unlimitedRetry.getMaxRetries());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\fate\util\RetryTest.java
  public void testUnlimitedRetry() {
    for (int i = 0; i < Integer.MAX_VALUE; i++) {
      assertTrue(unlimitedRetry.canRetry());
      unlimitedRetry.useRetry();
    }
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\fate\util\RetryTest.java
  public void testLogging() {
    Logger testLogger = EasyMock.createMock(Logger.class);
    EasyMock.expect(testLogger.isDebugEnabled()).andReturn(true);
    testLogger.debug(EasyMock.anyObject(String.class));
    EasyMock.expectLastCall().times(1);
    EasyMock.expect(testLogger.isTraceEnabled()).andReturn(true).anyTimes();
    testLogger.trace(EasyMock.anyObject(String.class));
    EasyMock.expectLastCall().anyTimes();
    testLogger.warn(EasyMock.anyObject(String.class));
    EasyMock.expectLastCall().times(3, 5);
    EasyMock.replay(testLogger);

    // we want to do this for 5 second and observe the log messages
    long start = System.currentTimeMillis();
    long end = System.currentTimeMillis();
    int i = 0;
    for (; (end - start < 5000) && (i < Integer.MAX_VALUE); i++) {
      unlimitedRetry.logRetry(testLogger, "failure message");
      unlimitedRetry.useRetry();
      end = System.currentTimeMillis();
    }

    // now observe what log messages we got which should be around 5 +- 1
    EasyMock.verify(testLogger);
    assertTrue(i > 10);

  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\fate\util\RetryTest.java
  public void testMaxRetries() {
    NeedsRetries builder = Retry.builder();
    builder.maxRetries(10);
    builder.maxRetries(0);
    assertThrows("Should not allow negative retries", IllegalArgumentException.class,
        () -> builder.maxRetries(-1));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\fate\util\RetryTest.java
  public void testInitialWait() {
    NeedsRetryDelay builder = Retry.builder().maxRetries(10);
    builder.retryAfter(10, NANOSECONDS);
    builder.retryAfter(10, MILLISECONDS);
    builder.retryAfter(10, DAYS);
    builder.retryAfter(0, NANOSECONDS);
    builder.retryAfter(0, MILLISECONDS);
    builder.retryAfter(0, DAYS);

    assertThrows("Should not allow negative wait times", IllegalArgumentException.class,
        () -> builder.retryAfter(-1, NANOSECONDS));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\fate\util\RetryTest.java
  public void testIncrementBy() {
    NeedsTimeIncrement builder = Retry.builder().maxRetries(10).retryAfter(10, MILLISECONDS);
    builder.incrementBy(10, DAYS);
    builder.incrementBy(10, HOURS);
    builder.incrementBy(10, NANOSECONDS);
    builder.incrementBy(0, DAYS);
    builder.incrementBy(0, HOURS);
    builder.incrementBy(0, NANOSECONDS);

    assertThrows("Should not allow negative increments", IllegalArgumentException.class,
        () -> builder.incrementBy(-1, NANOSECONDS));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\fate\util\RetryTest.java
  public void testMaxWait() {
    NeedsMaxWait builder =
        Retry.builder().maxRetries(10).retryAfter(15, MILLISECONDS).incrementBy(10, MILLISECONDS);
    builder.maxWait(15, MILLISECONDS);
    builder.maxWait(16, MILLISECONDS);

    assertThrows("Max wait time should be greater than or equal to initial wait time",
        IllegalArgumentException.class, () -> builder.maxWait(14, MILLISECONDS));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\fate\util\RetryTest.java
  public void testLogInterval() {
    NeedsLogInterval builder = Retry.builder().maxRetries(10).retryAfter(15, MILLISECONDS)
        .incrementBy(10, MILLISECONDS).maxWait(16, MINUTES).backOffFactor(1);
    builder.logInterval(10, DAYS);
    builder.logInterval(10, HOURS);
    builder.logInterval(10, NANOSECONDS);
    builder.logInterval(0, DAYS);
    builder.logInterval(0, HOURS);
    builder.logInterval(0, NANOSECONDS);

    assertThrows("Log interval must not be negative", IllegalArgumentException.class,
        () -> builder.logInterval(-1, NANOSECONDS));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\fate\util\RetryTest.java
  public void properArgumentsInRetry() {
    long maxRetries = 10, startWait = 50L, maxWait = 5000L, waitIncrement = 500L,
        logInterval = 10000L;
    RetryFactory factory = Retry.builder().maxRetries(maxRetries).retryAfter(startWait, MS)
        .incrementBy(waitIncrement, MS).maxWait(maxWait, MS).backOffFactor(1)
        .logInterval(logInterval, MS).createFactory();
    Retry retry = factory.createRetry();

    assertEquals(maxRetries, retry.getMaxRetries());
    assertEquals(startWait, retry.getCurrentWait());
    assertEquals(maxWait, retry.getMaxWait());
    assertEquals(waitIncrement, retry.getWaitIncrement());
    assertEquals(logInterval, retry.getLogInterval());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\fate\util\RetryTest.java
  public void properArgumentsInUnlimitedRetry() {
    long startWait = 50L, maxWait = 5000L, waitIncrement = 500L, logInterval = 10000L;
    double waitFactor = 1.0;
    RetryFactory factory = Retry.builder().infiniteRetries().retryAfter(startWait, MS)
        .incrementBy(waitIncrement, MS).maxWait(maxWait, MS).backOffFactor(waitFactor)
        .logInterval(logInterval, MS).createFactory();
    Retry retry = factory.createRetry();

    assertEquals(-1, retry.getMaxRetries());
    assertEquals(startWait, retry.getCurrentWait());
    assertEquals(maxWait, retry.getMaxWait());
    assertEquals(waitIncrement, retry.getWaitIncrement());
    assertEquals(logInterval, retry.getLogInterval());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\fate\zookeeper\DistributedReadWriteLockTest.java
  public void testLock() throws Exception {
    final SomeData data = new SomeData();
    data.write();
    data.read();
    QueueLock qlock = new MockQueueLock();

    final ReadWriteLock locker = new DistributedReadWriteLock(qlock, "locker1".getBytes());
    final Lock readLock = locker.readLock();
    final Lock writeLock = locker.writeLock();
    readLock.lock();
    readLock.unlock();
    writeLock.lock();
    writeLock.unlock();
    readLock.lock();
    readLock.unlock();

    // do a bunch of reads/writes in separate threads, look for inconsistent updates
    Thread[] threads = new Thread[2];
    for (int i = 0; i < threads.length; i++) {
      final int which = i;
      threads[i] = new Thread(() -> {
        if (which % 2 == 0) {
          final Lock wl = locker.writeLock();
          wl.lock();
          try {
            data.write();
          } finally {
            wl.unlock();
          }
        } else {
          final Lock rl = locker.readLock();
          rl.lock();
          data.read();
          try {
            data.read();
          } finally {
            rl.unlock();
          }
        }
      });
    }
    for (Thread t : threads) {
      t.start();
    }
    for (Thread t : threads) {
      t.join();
    }
  }

}
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\fate\zookeeper\ZooCacheFactoryTest.java
  public void testGetZooCache() {
    String zks1 = "zk1";
    int timeout1 = 1000;
    ZooCache zc1 = zcf.getZooCache(zks1, timeout1);
    ZooCache zc1a = zcf.getZooCache(zks1, timeout1);
    assertSame(zc1, zc1a);

    String zks2 = "zk2";
    int timeout2 = 1000;
    ZooCache zc2 = zcf.getZooCache(zks2, timeout2);
    assertNotSame(zc1, zc2);

    String zks3 = "zk1";
    int timeout3 = 2000;
    ZooCache zc3 = zcf.getZooCache(zks3, timeout3);
    assertNotSame(zc1, zc3);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\fate\zookeeper\ZooCacheFactoryTest.java
  public void testGetZooCacheWatcher() {
    String zks1 = "zk1";
    int timeout1 = 1000;
    Watcher watcher = createMock(Watcher.class);
    ZooCache zc1 = zcf.getZooCache(zks1, timeout1, watcher);
    assertNotNull(zc1);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\fate\zookeeper\ZooCacheFactoryTest.java
  public void testGetZooCacheWatcher_Null() {
    String zks1 = "zk1";
    int timeout1 = 1000;
    ZooCache zc1 = zcf.getZooCache(zks1, timeout1, null);
    assertNotNull(zc1);
    ZooCache zc1a = zcf.getZooCache(zks1, timeout1);
    assertSame(zc1, zc1a);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\fate\zookeeper\ZooCacheFactoryTest.java
  public void testReset() {
    String zks1 = "zk1";
    int timeout1 = 1000;
    ZooCache zc1 = zcf.getZooCache(zks1, timeout1);
    zcf.reset();
    ZooCache zc1a = zcf.getZooCache(zks1, timeout1);
    assertNotSame(zc1, zc1a);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\fate\zookeeper\ZooCacheTest.java
  public void testGet() throws Exception {
    testGet(false);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\fate\zookeeper\ZooCacheTest.java
  public void testGet_FillStat() throws Exception {
    testGet(true);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\fate\zookeeper\ZooCacheTest.java
  public void testGet_NonExistent() throws Exception {
    expect(zk.exists(eq(ZPATH), anyObject(Watcher.class))).andReturn(null);
    replay(zk);

    assertNull(zc.get(ZPATH));
    verify(zk);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\fate\zookeeper\ZooCacheTest.java
  public void testGet_Retry_NoNode() throws Exception {
    testGet_Retry(new KeeperException.NoNodeException(ZPATH));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\fate\zookeeper\ZooCacheTest.java
  public void testGet_Retry_ConnectionLoss() throws Exception {
    testGet_Retry(new KeeperException.ConnectionLossException());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\fate\zookeeper\ZooCacheTest.java
  public void testGet_Retry_BadVersion() throws Exception {
    testGet_Retry(new KeeperException.BadVersionException(ZPATH));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\fate\zookeeper\ZooCacheTest.java
  public void testGet_Retry_Interrupted() throws Exception {
    testGet_Retry(new InterruptedException());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\fate\zookeeper\ZooCacheTest.java
  public void testGet_Retry2_NoNode() throws Exception {
    testGet_Retry2(new KeeperException.NoNodeException(ZPATH));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\fate\zookeeper\ZooCacheTest.java
  public void testGet_Retry2_ConnectionLoss() throws Exception {
    testGet_Retry2(new KeeperException.ConnectionLossException());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\fate\zookeeper\ZooCacheTest.java
  public void testGet_Retry2_BadVersion() throws Exception {
    testGet_Retry2(new KeeperException.BadVersionException(ZPATH));
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\fate\zookeeper\ZooCacheTest.java
  public void testGet_Retry2_Interrupted() throws Exception {
    testGet_Retry2(new InterruptedException());
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\fate\zookeeper\ZooCacheTest.java
  public void testGetChildren() throws Exception {
    expect(zk.getChildren(eq(ZPATH), anyObject(Watcher.class))).andReturn(CHILDREN);
    replay(zk);

    assertFalse(zc.childrenCached(ZPATH));
    assertEquals(CHILDREN, zc.getChildren(ZPATH));
    verify(zk);

    assertTrue(zc.childrenCached(ZPATH));
    // cannot check for sameness, return value is wrapped each time
    assertEquals(CHILDREN, zc.getChildren(ZPATH)); // cache hit
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\fate\zookeeper\ZooCacheTest.java
  public void testGetChildren_NoKids() throws Exception {
    expect(zk.getChildren(eq(ZPATH), anyObject(Watcher.class))).andReturn(null);
    replay(zk);

    assertNull(zc.getChildren(ZPATH));
    verify(zk);

    assertNull(zc.getChildren(ZPATH)); // cache hit
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\fate\zookeeper\ZooCacheTest.java
  public void testGetChildren_Retry() throws Exception {
    expect(zk.getChildren(eq(ZPATH), anyObject(Watcher.class)))
        .andThrow(new KeeperException.BadVersionException(ZPATH));
    expect(zk.getChildren(eq(ZPATH), anyObject(Watcher.class))).andReturn(CHILDREN);
    replay(zk);

    assertEquals(CHILDREN, zc.getChildren(ZPATH));
    verify(zk);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\fate\zookeeper\ZooCacheTest.java
  public void testGetChildren_EatNoNode() throws Exception {
    expect(zk.getChildren(eq(ZPATH), anyObject(Watcher.class)))
        .andThrow(new KeeperException.NoNodeException(ZPATH));
    replay(zk);

    assertNull(zc.getChildren(ZPATH));
    verify(zk);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\fate\zookeeper\ZooCacheTest.java
  public void testWatchDataNode_Deleted() throws Exception {
    testWatchDataNode(DATA, Watcher.Event.EventType.NodeDeleted, false);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\fate\zookeeper\ZooCacheTest.java
  public void testWatchDataNode_DataChanged() throws Exception {
    testWatchDataNode(DATA, Watcher.Event.EventType.NodeDataChanged, false);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\fate\zookeeper\ZooCacheTest.java
  public void testWatchDataNode_Created() throws Exception {
    testWatchDataNode(null, Watcher.Event.EventType.NodeCreated, false);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\fate\zookeeper\ZooCacheTest.java
  public void testWatchDataNode_NoneSyncConnected() throws Exception {
    testWatchDataNode(null, Watcher.Event.EventType.None, true);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\fate\zookeeper\ZooCacheTest.java
  public void testWatchDataNode_Disconnected() throws Exception {
    testWatchDataNode_Clear(Watcher.Event.KeeperState.Disconnected);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\fate\zookeeper\ZooCacheTest.java
  public void testWatchDataNode_Expired() throws Exception {
    testWatchDataNode_Clear(Watcher.Event.KeeperState.Expired);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\fate\zookeeper\ZooCacheTest.java
  public void testWatchChildrenNode_Deleted() throws Exception {
    testWatchChildrenNode(CHILDREN, Watcher.Event.EventType.NodeDeleted, false);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\fate\zookeeper\ZooCacheTest.java
  public void testWatchChildrenNode_ChildrenChanged() throws Exception {
    testWatchChildrenNode(CHILDREN, Watcher.Event.EventType.NodeChildrenChanged, false);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\fate\zookeeper\ZooCacheTest.java
  public void testWatchChildrenNode_Created() throws Exception {
    testWatchChildrenNode(null, Watcher.Event.EventType.NodeCreated, false);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\fate\zookeeper\ZooCacheTest.java
  public void testWatchChildrenNode_NoneSyncConnected() throws Exception {
    testWatchChildrenNode(CHILDREN, Watcher.Event.EventType.None, true);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\fate\zookeeper\ZooLockTest.java
  public void testSortAndFindLowestPrevPrefix() throws Exception {
    List<String> children = new ArrayList<>();
    children.add("zlock#00000000-0000-0000-0000-ffffffffffff#0000000007");
    children.add("zlock#00000000-0000-0000-0000-eeeeeeeeeeee#0000000010");
    children.add("zlock#00000000-0000-0000-0000-bbbbbbbbbbbb#0000000006");
    children.add("zlock#00000000-0000-0000-0000-dddddddddddd#0000000008");
    children.add("zlock#00000000-0000-0000-0000-bbbbbbbbbbbb#0000000004");
    children.add("zlock-123456789");
    children.add("zlock#00000000-0000-0000-0000-cccccccccccc#0000000003");
    children.add("zlock#00000000-0000-0000-0000-aaaaaaaaaaaa#0000000002");
    children.add("zlock#987654321");
    children.add("zlock#00000000-0000-0000-0000-aaaaaaaaaaaa#0000000001");

    final List<String> validChildren = ZooLock.validateAndSortChildrenByLockPrefix("", children);

    assertEquals(8, validChildren.size());
    assertEquals("zlock#00000000-0000-0000-0000-aaaaaaaaaaaa#0000000001", validChildren.get(0));
    assertEquals("zlock#00000000-0000-0000-0000-aaaaaaaaaaaa#0000000002", validChildren.get(1));
    assertEquals("zlock#00000000-0000-0000-0000-cccccccccccc#0000000003", validChildren.get(2));
    assertEquals("zlock#00000000-0000-0000-0000-bbbbbbbbbbbb#0000000004", validChildren.get(3));
    assertEquals("zlock#00000000-0000-0000-0000-bbbbbbbbbbbb#0000000006", validChildren.get(4));
    assertEquals("zlock#00000000-0000-0000-0000-ffffffffffff#0000000007", validChildren.get(5));
    assertEquals("zlock#00000000-0000-0000-0000-dddddddddddd#0000000008", validChildren.get(6));
    assertEquals("zlock#00000000-0000-0000-0000-eeeeeeeeeeee#0000000010", validChildren.get(7));

    assertEquals("zlock#00000000-0000-0000-0000-bbbbbbbbbbbb#0000000004",
        ZooLock.findLowestPrevPrefix(validChildren,
            "zlock#00000000-0000-0000-0000-ffffffffffff#0000000007"));

    assertEquals("zlock#00000000-0000-0000-0000-aaaaaaaaaaaa#0000000001",
        ZooLock.findLowestPrevPrefix(validChildren,
            "zlock#00000000-0000-0000-0000-cccccccccccc#0000000003"));

    assertEquals("zlock#00000000-0000-0000-0000-dddddddddddd#0000000008",
        ZooLock.findLowestPrevPrefix(validChildren,
            "zlock#00000000-0000-0000-0000-eeeeeeeeeeee#0000000010"));

    assertThrows(IndexOutOfBoundsException.class, () -> {
      ZooLock.findLowestPrevPrefix(validChildren,
          "zlock#00000000-0000-0000-0000-aaaaaaaaaaaa#0000000001");
    });

    assertThrows(IndexOutOfBoundsException.class, () -> {
      ZooLock.findLowestPrevPrefix(validChildren,
          "zlock#00000000-0000-0000-0000-XXXXXXXXXXXX#0000000099");
    });
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\fate\zookeeper\ZooReaderWriterTest.java
  public void testDeleteSucceedOnInitialNoNode() throws Exception {
    final String path = "/foo";

    zk.delete(path, -1);
    expectLastCall().andThrow(KeeperException.create(Code.NONODE));

    replay(zk, zrw, retryFactory, retry);

    zrw.delete(path);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\fate\zookeeper\ZooReaderWriterTest.java
  public void testDeleteSucceedOnRetry() throws Exception {
    final String path = "/foo";

    zk.delete(path, -1);
    expectLastCall().andThrow(KeeperException.create(Code.CONNECTIONLOSS));
    expect(retry.canRetry()).andReturn(true);
    retry.useRetry();
    expectLastCall().once();
    retry.waitForNextAttempt();
    expectLastCall().once();
    zk.delete(path, -1);
    expectLastCall().andThrow(KeeperException.create(Code.NONODE));

    replay(zk, zrw, retryFactory, retry);

    zrw.delete(path);

    verify(zk, zrw, retryFactory, retry);
  }
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\fate\zookeeper\ZooReaderWriterTest.java
  public void testMutateNodeCreationFails() throws Exception {
    final String path = "/foo";
    final byte[] value = {0};
    Mutator mutator = currentValue -> new byte[] {1};

    zk.create(path, value, ZooUtil.PUBLIC, CreateMode.PERSISTENT);
    expectLastCall().andThrow(new SessionExpiredException()).once();
    expect(retry.canRetry()).andReturn(false);
    expect(retry.retriesCompleted()).andReturn(1L).once();

    replay(zk, zrw, retryFactory, retry);

    zrw.mutateOrCreate(path, value, mutator);
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\fate\zookeeper\ZooReaderWriterTest.java
  public void testMutateWithBadVersion() throws Exception {
    final String path = "/foo";
    final byte[] value = {0};
    final byte[] mutatedBytes = {1};
    Mutator mutator = currentValue -> mutatedBytes;

    zrw = createMockBuilder(ZooReaderWriter.class)
        .addMockedMethods("getRetryFactory", "getZooKeeper").createMock();
    expect(zrw.getRetryFactory()).andReturn(retryFactory).anyTimes();
    expect(zrw.getZooKeeper()).andReturn(zk).anyTimes();

    Stat stat = new Stat();

    zk.create(path, value, ZooUtil.PUBLIC, CreateMode.PERSISTENT);
    expectLastCall().andThrow(new NodeExistsException()).once();
    expect(zk.getData(path, null, stat)).andReturn(new byte[] {3}).times(2);
    // BadVersionException should retry
    expect(zk.setData(path, mutatedBytes, 0)).andThrow(new BadVersionException());
    // Let 2nd setData succeed
    expect(zk.setData(path, mutatedBytes, 0)).andReturn(null);

    replay(zk, zrw, retryFactory, retry);

    assertArrayEquals(new byte[] {1}, zrw.mutateOrCreate(path, value, mutator));

    verify(zk, zrw, retryFactory, retry);
  }

#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\fate\zookeeper\ZooReaderWriterTest.java
  public void testMutateWithRetryOnSetData() throws Exception {
    final String path = "/foo";
    final byte[] value = {0};
    final byte[] mutatedBytes = {1};
    Mutator mutator = currentValue -> mutatedBytes;

    zrw = createMockBuilder(ZooReaderWriter.class)
        .addMockedMethods("getRetryFactory", "getZooKeeper").createMock();
    expect(zrw.getRetryFactory()).andReturn(retryFactory).anyTimes();
    expect(zrw.getZooKeeper()).andReturn(zk).anyTimes();

    Stat stat = new Stat();

    zk.create(path, value, ZooUtil.PUBLIC, CreateMode.PERSISTENT);
    expectLastCall().andThrow(new NodeExistsException()).once();
    expect(zk.getData(path, null, stat)).andReturn(new byte[] {3}).times(2);
    // BadVersionException should retry
    expect(zk.setData(path, mutatedBytes, 0)).andThrow(new ConnectionLossException());

    expect(retry.canRetry()).andReturn(true);
    retry.useRetry();
    expectLastCall();
    retry.waitForNextAttempt();
    expectLastCall();
    // Let 2nd setData succeed
    expect(zk.setData(path, mutatedBytes, 0)).andReturn(null);

    replay(zk, zrw, retryFactory, retry);

    assertArrayEquals(new byte[] {1}, zrw.mutateOrCreate(path, value, mutator));

    verify(zk, zrw, retryFactory, retry);
  }
}
#############################################
H:\Research\IndStudyDrxyz\DataAnalysis\accumulo-main\core\src\test\java\org\apache\accumulo\fate\zookeeper\ZooSessionTest.java
  public void testUnknownHost() throws Exception {
    ZooKeeper session = ZooSession.connect(UNKNOWN_HOST, MINIMUM_TIMEOUT, null, null, null);
    session.close();
  }
Total number of test cases 1126